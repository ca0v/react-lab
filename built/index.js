define("common/player", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.player = void 0;
    const avitars = {
        default: {
            rate: 1,
            pitch: 1
        },
        sara: {
            rate: 1.14,
            pitch: 0.81
        },
        pati: {
            rate: 0.9,
            pitch: 0.4
        },
        rita: {
            rate: 1.1,
            pitch: 0.45
        },
        cielo: {
            rate: 0.9,
            pitch: 0.8
        },
        clara: {
            rate: 1.1,
            pitch: 1.1
        }
    };
    class Player {
        constructor() {
            this.audio = new Audio();
            this.synth = new SpeechSynthesisUtterance();
            this.rate = 1;
            this.pitch = 1;
        }
        stop() {
            window.speechSynthesis.cancel();
        }
        play(text) {
            this.synth.volume = 1;
            if (text.avitar) {
                let avitar = avitars[text.avitar] || avitars.default;
                this.synth.rate = avitar.rate;
                this.synth.pitch = avitar.pitch;
            }
            else {
                this.rate = 1.5 - 0.5 * Math.random();
                this.pitch = 1.2 - 1.0 * Math.random();
                this.synth.rate = this.rate;
                this.synth.pitch = this.pitch;
            }
            //log(`pitch: ${this.synth.pitch}, rate: ${this.synth.rate}`);
            if (text.en) {
                this.synth.lang = "en-US";
                this.synth.text = text.en;
                window.speechSynthesis.speak(this.synth);
            }
            else if (text.es) {
                this.synth.lang = "es-US";
                this.synth.text = text.es;
                window.speechSynthesis.speak(this.synth);
            }
        }
    }
    exports.player = new Player();
});
define("components/index", ["require", "exports", "react"], function (require, exports, react_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Toolbar = exports.IndexComponent = void 0;
    class IndexComponent extends react_1.PureComponent {
    }
    exports.IndexComponent = IndexComponent;
    class Toolbar extends react_1.PureComponent {
        render() {
            return react_1.createElement("span", { className: "toolbar" }, this.props.children);
        }
    }
    exports.Toolbar = Toolbar;
});
define("common/common", ["require", "exports", "react"], function (require, exports, react_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EventDispatcher = exports.input = exports.distinct = exports.LocalStorage = exports.shuffle = exports.debounce = exports.dump = void 0;
    function dump(o) {
        return Object.keys(o).map(k => react_2.createElement("li", { key: k },
            k,
            ": ",
            o[k]));
    }
    exports.dump = dump;
    // https://davidwalsh.name/javascript-debounce-function
    let debounce = (func, wait = 200) => {
        let timeout;
        return () => {
            let later = () => {
                clearTimeout(timeout);
                func();
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    };
    exports.debounce = debounce;
    function shuffle(array) {
        var currentIndex = array.length, temporaryValue, randomIndex;
        // While there remain elements to shuffle...
        while (0 !== currentIndex) {
            // Pick a remaining element...
            randomIndex = Math.floor(Math.random() * currentIndex);
            currentIndex -= 1;
            // And swap it with the current element.
            temporaryValue = array[currentIndex];
            array[currentIndex] = array[randomIndex];
            array[randomIndex] = temporaryValue;
        }
        return array;
    }
    exports.shuffle = shuffle;
    class LocalStorage {
        constructor() {
            this.localStorage = window.localStorage || {
                setItem: (value) => { },
                getItem: () => "",
            };
        }
        setItem(value) {
            this.localStorage.setItem("globals", JSON.stringify(value));
        }
        getItem() {
            let value = this.localStorage.getItem("globals") || "{}";
            return JSON.parse(value);
        }
    }
    exports.LocalStorage = LocalStorage;
    function distinct(d) {
        let map = {};
        Object.keys(d).forEach(k => map[d[k]] = true);
        return Object.keys(map);
    }
    exports.distinct = distinct;
    function input(c) {
        let o = c.state;
        let inputs = Object.keys(o).map(k => {
            let value = o[k];
            let typeMaps = {
                'number': { type: 'number', value: 'valueAsNumber' },
                'boolean': { type: 'checkbox', value: 'checked' },
                'string': { type: 'text', value: 'value' },
                'undefined': { type: 'text', value: 'value' },
            };
            let typeMap = typeMaps[typeof value] || typeMaps.string;
            return react_2.createElement("div", null,
                react_2.createElement("label", { className: "input" }, k),
                react_2.createElement("input", { key: k, type: typeMap.type, value: value, checked: value, placeholder: k, onChange: event => { c.setState({ [k]: event.target[typeMap.value] }); } }));
        });
        return react_2.createElement("div", null, inputs);
    }
    exports.input = input;
    class EventDispatcher {
        on(event, callback) {
            this.events = this.events || {};
            this.events[event] = this.events[event] || [];
            this.events[event].push(callback);
        }
        trigger(event, data) {
            if (!this.events)
                return;
            var handlers = this.events[event];
            if (!handlers)
                return;
            handlers.forEach(h => h(data || null));
        }
        ;
    }
    exports.EventDispatcher = EventDispatcher;
});
/**
 * @module ol/Disposable
 */
define("node_modules/ol/src/Disposable", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @classdesc
     * Objects that need to clean up after themselves.
     */
    class Disposable {
        constructor() {
            /**
             * The object has already been disposed.
             * @type {boolean}
             * @protected
             */
            this.disposed = false;
        }
        /**
         * Clean up.
         */
        dispose() {
            if (!this.disposed) {
                this.disposed = true;
                this.disposeInternal();
            }
        }
        /**
         * Extension point for disposable objects.
         * @protected
         */
        disposeInternal() { }
    }
    exports.default = Disposable;
});
/**
 * @module ol/array
 */
define("node_modules/ol/src/array", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isSorted = exports.findIndex = exports.stableSort = exports.equals = exports.find = exports.remove = exports.extend = exports.reverseSubArray = exports.linearFindNearest = exports.includes = exports.numberSafeCompareFunction = exports.binarySearch = void 0;
    /**
     * Performs a binary search on the provided sorted list and returns the index of the item if found. If it can't be found it'll return -1.
     * https://github.com/darkskyapp/binary-search
     *
     * @param {Array<*>} haystack Items to search through.
     * @param {*} needle The item to look for.
     * @param {Function=} opt_comparator Comparator function.
     * @return {number} The index of the item if found, -1 if not.
     */
    function binarySearch(haystack, needle, opt_comparator) {
        let mid, cmp;
        const comparator = opt_comparator || numberSafeCompareFunction;
        let low = 0;
        let high = haystack.length;
        let found = false;
        while (low < high) {
            /* Note that "(low + high) >>> 1" may overflow, and results in a typecast
             * to double (which gives the wrong results). */
            mid = low + ((high - low) >> 1);
            cmp = +comparator(haystack[mid], needle);
            if (cmp < 0.0) {
                /* Too low. */
                low = mid + 1;
            }
            else {
                /* Key found or too high */
                high = mid;
                found = !cmp;
            }
        }
        /* Key not found. */
        return found ? low : ~low;
    }
    exports.binarySearch = binarySearch;
    /**
     * Compare function for array sort that is safe for numbers.
     * @param {*} a The first object to be compared.
     * @param {*} b The second object to be compared.
     * @return {number} A negative number, zero, or a positive number as the first
     *     argument is less than, equal to, or greater than the second.
     */
    function numberSafeCompareFunction(a, b) {
        return a > b ? 1 : a < b ? -1 : 0;
    }
    exports.numberSafeCompareFunction = numberSafeCompareFunction;
    /**
     * Whether the array contains the given object.
     * @param {Array<*>} arr The array to test for the presence of the element.
     * @param {*} obj The object for which to test.
     * @return {boolean} The object is in the array.
     */
    function includes(arr, obj) {
        return arr.indexOf(obj) >= 0;
    }
    exports.includes = includes;
    /**
     * @param {Array<number>} arr Array.
     * @param {number} target Target.
     * @param {number} direction 0 means return the nearest, > 0
     *    means return the largest nearest, < 0 means return the
     *    smallest nearest.
     * @return {number} Index.
     */
    function linearFindNearest(arr, target, direction) {
        const n = arr.length;
        if (arr[0] <= target) {
            return 0;
        }
        else if (target <= arr[n - 1]) {
            return n - 1;
        }
        else {
            let i;
            if (direction > 0) {
                for (i = 1; i < n; ++i) {
                    if (arr[i] < target) {
                        return i - 1;
                    }
                }
            }
            else if (direction < 0) {
                for (i = 1; i < n; ++i) {
                    if (arr[i] <= target) {
                        return i;
                    }
                }
            }
            else {
                for (i = 1; i < n; ++i) {
                    if (arr[i] == target) {
                        return i;
                    }
                    else if (arr[i] < target) {
                        if (arr[i - 1] - target < target - arr[i]) {
                            return i - 1;
                        }
                        else {
                            return i;
                        }
                    }
                }
            }
            return n - 1;
        }
    }
    exports.linearFindNearest = linearFindNearest;
    /**
     * @param {Array<*>} arr Array.
     * @param {number} begin Begin index.
     * @param {number} end End index.
     */
    function reverseSubArray(arr, begin, end) {
        while (begin < end) {
            const tmp = arr[begin];
            arr[begin] = arr[end];
            arr[end] = tmp;
            ++begin;
            --end;
        }
    }
    exports.reverseSubArray = reverseSubArray;
    /**
     * @param {Array<VALUE>} arr The array to modify.
     * @param {!Array<VALUE>|VALUE} data The elements or arrays of elements to add to arr.
     * @template VALUE
     */
    function extend(arr, data) {
        const extension = Array.isArray(data) ? data : [data];
        const length = extension.length;
        for (let i = 0; i < length; i++) {
            arr[arr.length] = extension[i];
        }
    }
    exports.extend = extend;
    /**
     * @param {Array<VALUE>} arr The array to modify.
     * @param {VALUE} obj The element to remove.
     * @template VALUE
     * @return {boolean} If the element was removed.
     */
    function remove(arr, obj) {
        const i = arr.indexOf(obj);
        const found = i > -1;
        if (found) {
            arr.splice(i, 1);
        }
        return found;
    }
    exports.remove = remove;
    /**
     * @param {Array<VALUE>} arr The array to search in.
     * @param {function(VALUE, number, ?) : boolean} func The function to compare.
     * @template VALUE
     * @return {VALUE|null} The element found or null.
     */
    function find(arr, func) {
        const length = arr.length >>> 0;
        let value;
        for (let i = 0; i < length; i++) {
            value = arr[i];
            if (func(value, i, arr)) {
                return value;
            }
        }
        return null;
    }
    exports.find = find;
    /**
     * @param {Array|Uint8ClampedArray} arr1 The first array to compare.
     * @param {Array|Uint8ClampedArray} arr2 The second array to compare.
     * @return {boolean} Whether the two arrays are equal.
     */
    function equals(arr1, arr2) {
        const len1 = arr1.length;
        if (len1 !== arr2.length) {
            return false;
        }
        for (let i = 0; i < len1; i++) {
            if (arr1[i] !== arr2[i]) {
                return false;
            }
        }
        return true;
    }
    exports.equals = equals;
    /**
     * Sort the passed array such that the relative order of equal elements is preverved.
     * See https://en.wikipedia.org/wiki/Sorting_algorithm#Stability for details.
     * @param {Array<*>} arr The array to sort (modifies original).
     * @param {!function(*, *): number} compareFnc Comparison function.
     * @api
     */
    function stableSort(arr, compareFnc) {
        const length = arr.length;
        const tmp = Array(arr.length);
        let i;
        for (i = 0; i < length; i++) {
            tmp[i] = { index: i, value: arr[i] };
        }
        tmp.sort(function (a, b) {
            return compareFnc(a.value, b.value) || a.index - b.index;
        });
        for (i = 0; i < arr.length; i++) {
            arr[i] = tmp[i].value;
        }
    }
    exports.stableSort = stableSort;
    /**
     * @param {Array<*>} arr The array to search in.
     * @param {Function} func Comparison function.
     * @return {number} Return index.
     */
    function findIndex(arr, func) {
        let index;
        const found = !arr.every(function (el, idx) {
            index = idx;
            return !func(el, idx, arr);
        });
        return found ? index : -1;
    }
    exports.findIndex = findIndex;
    /**
     * @param {Array<*>} arr The array to test.
     * @param {Function=} opt_func Comparison function.
     * @param {boolean=} opt_strict Strictly sorted (default false).
     * @return {boolean} Return index.
     */
    function isSorted(arr, opt_func, opt_strict) {
        const compare = opt_func || numberSafeCompareFunction;
        return arr.every(function (currentVal, index) {
            if (index === 0) {
                return true;
            }
            const res = compare(arr[index - 1], currentVal);
            return !(res > 0 || (opt_strict && res === 0));
        });
    }
    exports.isSorted = isSorted;
});
/**
 * @module ol/functions
 */
define("node_modules/ol/src/functions", ["require", "exports", "node_modules/ol/src/array"], function (require, exports, array_js_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.memoizeOne = exports.VOID = exports.FALSE = exports.TRUE = void 0;
    /**
     * Always returns true.
     * @returns {boolean} true.
     */
    function TRUE() {
        return true;
    }
    exports.TRUE = TRUE;
    /**
     * Always returns false.
     * @returns {boolean} false.
     */
    function FALSE() {
        return false;
    }
    exports.FALSE = FALSE;
    /**
     * A reusable function, used e.g. as a default for callbacks.
     *
     * @return {void} Nothing.
     */
    function VOID() { }
    exports.VOID = VOID;
    /**
     * Wrap a function in another function that remembers the last return.  If the
     * returned function is called twice in a row with the same arguments and the same
     * this object, it will return the value from the first call in the second call.
     *
     * @param {function(...any): ReturnType} fn The function to memoize.
     * @return {function(...any): ReturnType} The memoized function.
     * @template ReturnType
     */
    function memoizeOne(fn) {
        let called = false;
        /** @type {ReturnType} */
        let lastResult;
        /** @type {Array<any>} */
        let lastArgs;
        let lastThis;
        return function () {
            const nextArgs = Array.prototype.slice.call(arguments);
            if (!called || this !== lastThis || !array_js_1.equals(nextArgs, lastArgs)) {
                called = true;
                lastThis = this;
                lastArgs = nextArgs;
                lastResult = fn.apply(this, arguments);
            }
            return lastResult;
        };
    }
    exports.memoizeOne = memoizeOne;
});
/**
 * @module ol/util
 */
define("node_modules/ol/src/util", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.VERSION = exports.getUid = exports.abstract = void 0;
    /**
     * @return {?} Any return.
     */
    function abstract() {
        return /** @type {?} */ ((function () {
            throw new Error('Unimplemented abstract method.');
        })());
    }
    exports.abstract = abstract;
    /**
     * Counter for getUid.
     * @type {number}
     * @private
     */
    let uidCounter_ = 0;
    /**
     * Gets a unique ID for an object. This mutates the object so that further calls
     * with the same object as a parameter returns the same value. Unique IDs are generated
     * as a strictly increasing sequence. Adapted from goog.getUid.
     *
     * @param {Object} obj The object to get the unique ID for.
     * @return {string} The unique ID for the object.
     * @api
     */
    function getUid(obj) {
        return obj.ol_uid || (obj.ol_uid = String(++uidCounter_));
    }
    exports.getUid = getUid;
    /**
     * OpenLayers version.
     * @type {string}
     */
    exports.VERSION = 'latest';
});
define("node_modules/ol/src/AssertionError", ["require", "exports", "node_modules/ol/src/util"], function (require, exports, util_js_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Error object thrown when an assertion failed. This is an ECMA-262 Error,
     * extended with a `code` property.
     * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error.
     */
    class AssertionError extends Error {
        /**
         * @param {number} code Error code.
         */
        constructor(code) {
            const path = util_js_1.VERSION === 'latest' ? util_js_1.VERSION : 'v' + util_js_1.VERSION.split('-')[0];
            const message = 'Assertion failed. See https://openlayers.org/en/' +
                path +
                '/doc/errors/#' +
                code +
                ' for details.';
            super(message);
            /**
             * Error code. The meaning of the code can be found on
             * https://openlayers.org/en/latest/doc/errors/ (replace `latest` with
             * the version found in the OpenLayers script's header comment if a version
             * other than the latest is used).
             * @type {number}
             * @api
             */
            this.code = code;
            /**
             * @type {string}
             */
            this.name = 'AssertionError';
            // Re-assign message, see https://github.com/Rich-Harris/buble/issues/40
            this.message = message;
        }
    }
    exports.default = AssertionError;
});
define("node_modules/ol/src/asserts", ["require", "exports", "node_modules/ol/src/AssertionError"], function (require, exports, AssertionError_js_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.assert = void 0;
    /**
     * @param {*} assertion Assertion we expected to be truthy.
     * @param {number} errorCode Error code.
     */
    function assert(assertion, errorCode) {
        if (!assertion) {
            throw new AssertionError_js_1.default(errorCode);
        }
    }
    exports.assert = assert;
});
/**
 * @module ol/extent/Corner
 */
define("node_modules/ol/src/extent/Corner", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Extent corner.
     * @enum {string}
     */
    exports.default = {
        BOTTOM_LEFT: 'bottom-left',
        BOTTOM_RIGHT: 'bottom-right',
        TOP_LEFT: 'top-left',
        TOP_RIGHT: 'top-right',
    };
});
/**
 * @module ol/extent/Relationship
 */
define("node_modules/ol/src/extent/Relationship", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Relationship to an extent.
     * @enum {number}
     */
    exports.default = {
        UNKNOWN: 0,
        INTERSECTING: 1,
        ABOVE: 2,
        RIGHT: 4,
        BELOW: 8,
        LEFT: 16,
    };
});
/**
 * @module ol/size
 */
define("node_modules/ol/src/size", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toSize = exports.scale = exports.hasArea = exports.buffer = void 0;
    /**
     * An array of numbers representing a size: `[width, height]`.
     * @typedef {Array<number>} Size
     * @api
     */
    /**
     * Returns a buffered size.
     * @param {Size} size Size.
     * @param {number} num The amount by which to buffer.
     * @param {Size=} opt_size Optional reusable size array.
     * @return {Size} The buffered size.
     */
    function buffer(size, num, opt_size) {
        if (opt_size === undefined) {
            opt_size = [0, 0];
        }
        opt_size[0] = size[0] + 2 * num;
        opt_size[1] = size[1] + 2 * num;
        return opt_size;
    }
    exports.buffer = buffer;
    /**
     * Determines if a size has a positive area.
     * @param {Size} size The size to test.
     * @return {boolean} The size has a positive area.
     */
    function hasArea(size) {
        return size[0] > 0 && size[1] > 0;
    }
    exports.hasArea = hasArea;
    /**
     * Returns a size scaled by a ratio. The result will be an array of integers.
     * @param {Size} size Size.
     * @param {number} ratio Ratio.
     * @param {Size=} opt_size Optional reusable size array.
     * @return {Size} The scaled size.
     */
    function scale(size, ratio, opt_size) {
        if (opt_size === undefined) {
            opt_size = [0, 0];
        }
        opt_size[0] = (size[0] * ratio + 0.5) | 0;
        opt_size[1] = (size[1] * ratio + 0.5) | 0;
        return opt_size;
    }
    exports.scale = scale;
    /**
     * Returns an `Size` array for the passed in number (meaning: square) or
     * `Size` array.
     * (meaning: non-square),
     * @param {number|Size} size Width and height.
     * @param {Size=} opt_size Optional reusable size array.
     * @return {Size} Size.
     * @api
     */
    function toSize(size, opt_size) {
        if (Array.isArray(size)) {
            return size;
        }
        else {
            if (opt_size === undefined) {
                opt_size = [size, size];
            }
            else {
                opt_size[0] = size;
                opt_size[1] = size;
            }
            return opt_size;
        }
    }
    exports.toSize = toSize;
});
/**
 * @module ol/proj/Units
 */
define("node_modules/ol/src/proj/Units", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.METERS_PER_UNIT = void 0;
    /**
     * Projection units: `'degrees'`, `'ft'`, `'m'`, `'pixels'`, `'tile-pixels'` or
     * `'us-ft'`.
     * @enum {string}
     */
    const Units = {
        DEGREES: 'degrees',
        FEET: 'ft',
        METERS: 'm',
        PIXELS: 'pixels',
        TILE_PIXELS: 'tile-pixels',
        USFEET: 'us-ft',
    };
    /**
     * Meters per unit lookup table.
     * @const
     * @type {Object<Units, number>}
     * @api
     */
    exports.METERS_PER_UNIT = {};
    // use the radius of the Normal sphere
    exports.METERS_PER_UNIT[Units.DEGREES] = (2 * Math.PI * 6370997) / 360;
    exports.METERS_PER_UNIT[Units.FEET] = 0.3048;
    exports.METERS_PER_UNIT[Units.METERS] = 1;
    exports.METERS_PER_UNIT[Units.USFEET] = 1200 / 3937;
    exports.default = Units;
});
/**
 * @module ol/tilecoord
 */
define("node_modules/ol/src/tilecoord", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.withinExtentAndZ = exports.hash = exports.fromKey = exports.getKey = exports.getKeyZXY = exports.createOrUpdate = void 0;
    /**
     * An array of three numbers representing the location of a tile in a tile
     * grid. The order is `z` (zoom level), `x` (column), and `y` (row).
     * @typedef {Array<number>} TileCoord
     * @api
     */
    /**
     * @param {number} z Z.
     * @param {number} x X.
     * @param {number} y Y.
     * @param {TileCoord=} opt_tileCoord Tile coordinate.
     * @return {TileCoord} Tile coordinate.
     */
    function createOrUpdate(z, x, y, opt_tileCoord) {
        if (opt_tileCoord !== undefined) {
            opt_tileCoord[0] = z;
            opt_tileCoord[1] = x;
            opt_tileCoord[2] = y;
            return opt_tileCoord;
        }
        else {
            return [z, x, y];
        }
    }
    exports.createOrUpdate = createOrUpdate;
    /**
     * @param {number} z Z.
     * @param {number} x X.
     * @param {number} y Y.
     * @return {string} Key.
     */
    function getKeyZXY(z, x, y) {
        return z + '/' + x + '/' + y;
    }
    exports.getKeyZXY = getKeyZXY;
    /**
     * Get the key for a tile coord.
     * @param {TileCoord} tileCoord The tile coord.
     * @return {string} Key.
     */
    function getKey(tileCoord) {
        return getKeyZXY(tileCoord[0], tileCoord[1], tileCoord[2]);
    }
    exports.getKey = getKey;
    /**
     * Get a tile coord given a key.
     * @param {string} key The tile coord key.
     * @return {TileCoord} The tile coord.
     */
    function fromKey(key) {
        return key.split('/').map(Number);
    }
    exports.fromKey = fromKey;
    /**
     * @param {TileCoord} tileCoord Tile coord.
     * @return {number} Hash.
     */
    function hash(tileCoord) {
        return (tileCoord[1] << tileCoord[0]) + tileCoord[2];
    }
    exports.hash = hash;
    /**
     * @param {TileCoord} tileCoord Tile coordinate.
     * @param {!import("./tilegrid/TileGrid.js").default} tileGrid Tile grid.
     * @return {boolean} Tile coordinate is within extent and zoom level range.
     */
    function withinExtentAndZ(tileCoord, tileGrid) {
        const z = tileCoord[0];
        const x = tileCoord[1];
        const y = tileCoord[2];
        if (tileGrid.getMinZoom() > z || z > tileGrid.getMaxZoom()) {
            return false;
        }
        const extent = tileGrid.getExtent();
        let tileRange;
        if (!extent) {
            tileRange = tileGrid.getFullTileRange(z);
        }
        else {
            tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z);
        }
        if (!tileRange) {
            return true;
        }
        else {
            return tileRange.containsXY(x, y);
        }
    }
    exports.withinExtentAndZ = withinExtentAndZ;
});
/**
 * @module ol/TileRange
 */
define("node_modules/ol/src/TileRange", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createOrUpdate = void 0;
    /**
     * A representation of a contiguous block of tiles.  A tile range is specified
     * by its min/max tile coordinates and is inclusive of coordinates.
     */
    class TileRange {
        /**
         * @param {number} minX Minimum X.
         * @param {number} maxX Maximum X.
         * @param {number} minY Minimum Y.
         * @param {number} maxY Maximum Y.
         */
        constructor(minX, maxX, minY, maxY) {
            /**
             * @type {number}
             */
            this.minX = minX;
            /**
             * @type {number}
             */
            this.maxX = maxX;
            /**
             * @type {number}
             */
            this.minY = minY;
            /**
             * @type {number}
             */
            this.maxY = maxY;
        }
        /**
         * @param {import("./tilecoord.js").TileCoord} tileCoord Tile coordinate.
         * @return {boolean} Contains tile coordinate.
         */
        contains(tileCoord) {
            return this.containsXY(tileCoord[1], tileCoord[2]);
        }
        /**
         * @param {TileRange} tileRange Tile range.
         * @return {boolean} Contains.
         */
        containsTileRange(tileRange) {
            return (this.minX <= tileRange.minX &&
                tileRange.maxX <= this.maxX &&
                this.minY <= tileRange.minY &&
                tileRange.maxY <= this.maxY);
        }
        /**
         * @param {number} x Tile coordinate x.
         * @param {number} y Tile coordinate y.
         * @return {boolean} Contains coordinate.
         */
        containsXY(x, y) {
            return this.minX <= x && x <= this.maxX && this.minY <= y && y <= this.maxY;
        }
        /**
         * @param {TileRange} tileRange Tile range.
         * @return {boolean} Equals.
         */
        equals(tileRange) {
            return (this.minX == tileRange.minX &&
                this.minY == tileRange.minY &&
                this.maxX == tileRange.maxX &&
                this.maxY == tileRange.maxY);
        }
        /**
         * @param {TileRange} tileRange Tile range.
         */
        extend(tileRange) {
            if (tileRange.minX < this.minX) {
                this.minX = tileRange.minX;
            }
            if (tileRange.maxX > this.maxX) {
                this.maxX = tileRange.maxX;
            }
            if (tileRange.minY < this.minY) {
                this.minY = tileRange.minY;
            }
            if (tileRange.maxY > this.maxY) {
                this.maxY = tileRange.maxY;
            }
        }
        /**
         * @return {number} Height.
         */
        getHeight() {
            return this.maxY - this.minY + 1;
        }
        /**
         * @return {import("./size.js").Size} Size.
         */
        getSize() {
            return [this.getWidth(), this.getHeight()];
        }
        /**
         * @return {number} Width.
         */
        getWidth() {
            return this.maxX - this.minX + 1;
        }
        /**
         * @param {TileRange} tileRange Tile range.
         * @return {boolean} Intersects.
         */
        intersects(tileRange) {
            return (this.minX <= tileRange.maxX &&
                this.maxX >= tileRange.minX &&
                this.minY <= tileRange.maxY &&
                this.maxY >= tileRange.minY);
        }
    }
    /**
     * @param {number} minX Minimum X.
     * @param {number} maxX Maximum X.
     * @param {number} minY Minimum Y.
     * @param {number} maxY Maximum Y.
     * @param {TileRange=} tileRange TileRange.
     * @return {TileRange} Tile range.
     */
    function createOrUpdate(minX, maxX, minY, maxY, tileRange) {
        if (tileRange !== undefined) {
            tileRange.minX = minX;
            tileRange.maxX = maxX;
            tileRange.minY = minY;
            tileRange.maxY = maxY;
            return tileRange;
        }
        else {
            return new TileRange(minX, maxX, minY, maxY);
        }
    }
    exports.createOrUpdate = createOrUpdate;
    exports.default = TileRange;
});
/**
 * @module ol/tilegrid/common
 */
define("node_modules/ol/src/tilegrid/common", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DEFAULT_TILE_SIZE = exports.DEFAULT_MAX_ZOOM = void 0;
    /**
     * Default maximum zoom for default tile grids.
     * @type {number}
     */
    exports.DEFAULT_MAX_ZOOM = 42;
    /**
     * Default tile size.
     * @type {number}
     */
    exports.DEFAULT_TILE_SIZE = 256;
});
/**
 * @module ol/math
 */
define("node_modules/ol/src/math", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.lerp = exports.modulo = exports.toRadians = exports.toDegrees = exports.solveLinearSystem = exports.squaredDistance = exports.squaredSegmentDistance = exports.log2 = exports.cosh = exports.clamp = void 0;
    /**
     * Takes a number and clamps it to within the provided bounds.
     * @param {number} value The input number.
     * @param {number} min The minimum value to return.
     * @param {number} max The maximum value to return.
     * @return {number} The input number if it is within bounds, or the nearest
     *     number within the bounds.
     */
    function clamp(value, min, max) {
        return Math.min(Math.max(value, min), max);
    }
    exports.clamp = clamp;
    /**
     * Return the hyperbolic cosine of a given number. The method will use the
     * native `Math.cosh` function if it is available, otherwise the hyperbolic
     * cosine will be calculated via the reference implementation of the Mozilla
     * developer network.
     *
     * @param {number} x X.
     * @return {number} Hyperbolic cosine of x.
     */
    exports.cosh = (function () {
        // Wrapped in a iife, to save the overhead of checking for the native
        // implementation on every invocation.
        let cosh;
        if ('cosh' in Math) {
            // The environment supports the native Math.cosh function, use it…
            cosh = Math.cosh;
        }
        else {
            // … else, use the reference implementation of MDN:
            cosh = function (x) {
                const y = /** @type {Math} */ (Math).exp(x);
                return (y + 1 / y) / 2;
            };
        }
        return cosh;
    })();
    /**
     * Return the base 2 logarithm of a given number. The method will use the
     * native `Math.log2` function if it is available, otherwise the base 2
     * logarithm will be calculated via the reference implementation of the
     * Mozilla developer network.
     *
     * @param {number} x X.
     * @return {number} Base 2 logarithm of x.
     */
    exports.log2 = (function () {
        // Wrapped in a iife, to save the overhead of checking for the native
        // implementation on every invocation.
        let log2;
        if ('log2' in Math) {
            // The environment supports the native Math.log2 function, use it…
            log2 = Math.log2;
        }
        else {
            // … else, use the reference implementation of MDN:
            log2 = function (x) {
                return Math.log(x) * Math.LOG2E;
            };
        }
        return log2;
    })();
    /**
     * Returns the square of the closest distance between the point (x, y) and the
     * line segment (x1, y1) to (x2, y2).
     * @param {number} x X.
     * @param {number} y Y.
     * @param {number} x1 X1.
     * @param {number} y1 Y1.
     * @param {number} x2 X2.
     * @param {number} y2 Y2.
     * @return {number} Squared distance.
     */
    function squaredSegmentDistance(x, y, x1, y1, x2, y2) {
        const dx = x2 - x1;
        const dy = y2 - y1;
        if (dx !== 0 || dy !== 0) {
            const t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);
            if (t > 1) {
                x1 = x2;
                y1 = y2;
            }
            else if (t > 0) {
                x1 += dx * t;
                y1 += dy * t;
            }
        }
        return squaredDistance(x, y, x1, y1);
    }
    exports.squaredSegmentDistance = squaredSegmentDistance;
    /**
     * Returns the square of the distance between the points (x1, y1) and (x2, y2).
     * @param {number} x1 X1.
     * @param {number} y1 Y1.
     * @param {number} x2 X2.
     * @param {number} y2 Y2.
     * @return {number} Squared distance.
     */
    function squaredDistance(x1, y1, x2, y2) {
        const dx = x2 - x1;
        const dy = y2 - y1;
        return dx * dx + dy * dy;
    }
    exports.squaredDistance = squaredDistance;
    /**
     * Solves system of linear equations using Gaussian elimination method.
     *
     * @param {Array<Array<number>>} mat Augmented matrix (n x n + 1 column)
     *                                     in row-major order.
     * @return {Array<number>} The resulting vector.
     */
    function solveLinearSystem(mat) {
        const n = mat.length;
        for (let i = 0; i < n; i++) {
            // Find max in the i-th column (ignoring i - 1 first rows)
            let maxRow = i;
            let maxEl = Math.abs(mat[i][i]);
            for (let r = i + 1; r < n; r++) {
                const absValue = Math.abs(mat[r][i]);
                if (absValue > maxEl) {
                    maxEl = absValue;
                    maxRow = r;
                }
            }
            if (maxEl === 0) {
                return null; // matrix is singular
            }
            // Swap max row with i-th (current) row
            const tmp = mat[maxRow];
            mat[maxRow] = mat[i];
            mat[i] = tmp;
            // Subtract the i-th row to make all the remaining rows 0 in the i-th column
            for (let j = i + 1; j < n; j++) {
                const coef = -mat[j][i] / mat[i][i];
                for (let k = i; k < n + 1; k++) {
                    if (i == k) {
                        mat[j][k] = 0;
                    }
                    else {
                        mat[j][k] += coef * mat[i][k];
                    }
                }
            }
        }
        // Solve Ax=b for upper triangular matrix A (mat)
        const x = new Array(n);
        for (let l = n - 1; l >= 0; l--) {
            x[l] = mat[l][n] / mat[l][l];
            for (let m = l - 1; m >= 0; m--) {
                mat[m][n] -= mat[m][l] * x[l];
            }
        }
        return x;
    }
    exports.solveLinearSystem = solveLinearSystem;
    /**
     * Converts radians to to degrees.
     *
     * @param {number} angleInRadians Angle in radians.
     * @return {number} Angle in degrees.
     */
    function toDegrees(angleInRadians) {
        return (angleInRadians * 180) / Math.PI;
    }
    exports.toDegrees = toDegrees;
    /**
     * Converts degrees to radians.
     *
     * @param {number} angleInDegrees Angle in degrees.
     * @return {number} Angle in radians.
     */
    function toRadians(angleInDegrees) {
        return (angleInDegrees * Math.PI) / 180;
    }
    exports.toRadians = toRadians;
    /**
     * Returns the modulo of a / b, depending on the sign of b.
     *
     * @param {number} a Dividend.
     * @param {number} b Divisor.
     * @return {number} Modulo.
     */
    function modulo(a, b) {
        const r = a % b;
        return r * b < 0 ? r + b : r;
    }
    exports.modulo = modulo;
    /**
     * Calculates the linearly interpolated value of x between a and b.
     *
     * @param {number} a Number
     * @param {number} b Number
     * @param {number} x Value to be interpolated.
     * @return {number} Interpolated value.
     */
    function lerp(a, b, x) {
        return a + x * (b - a);
    }
    exports.lerp = lerp;
});
define("node_modules/ol/src/tilegrid/TileGrid", ["require", "exports", "node_modules/ol/src/TileRange", "node_modules/ol/src/tilegrid/common", "node_modules/ol/src/asserts", "node_modules/ol/src/math", "node_modules/ol/src/extent", "node_modules/ol/src/tilecoord", "node_modules/ol/src/array", "node_modules/ol/src/size"], function (require, exports, TileRange_js_1, common_js_1, asserts_js_1, math_js_1, extent_js_1, tilecoord_js_1, array_js_2, size_js_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @private
     * @type {import("../tilecoord.js").TileCoord}
     */
    const tmpTileCoord = [0, 0, 0];
    /**
     * @typedef {Object} Options
     * @property {import("../extent.js").Extent} [extent] Extent for the tile grid. No tiles outside this
     * extent will be requested by {@link module:ol/source/Tile} sources. When no `origin` or
     * `origins` are configured, the `origin` will be set to the top-left corner of the extent.
     * @property {number} [minZoom=0] Minimum zoom.
     * @property {import("../coordinate.js").Coordinate} [origin] The tile grid origin, i.e. where the `x`
     * and `y` axes meet (`[z, 0, 0]`). Tile coordinates increase left to right and downwards. If not
     * specified, `extent` or `origins` must be provided.
     * @property {Array<import("../coordinate.js").Coordinate>} [origins] Tile grid origins, i.e. where
     * the `x` and `y` axes meet (`[z, 0, 0]`), for each zoom level. If given, the array length
     * should match the length of the `resolutions` array, i.e. each resolution can have a different
     * origin. Tile coordinates increase left to right and downwards. If not specified, `extent` or
     * `origin` must be provided.
     * @property {!Array<number>} resolutions Resolutions. The array index of each resolution needs
     * to match the zoom level. This means that even if a `minZoom` is configured, the resolutions
     * array will have a length of `maxZoom + 1`.
     * @property {Array<import("../size.js").Size>} [sizes] Number of tile rows and columns
     * of the grid for each zoom level. If specified the values
     * define each zoom level's extent together with the `origin` or `origins`.
     * A grid `extent` can be configured in addition, and will further limit the extent
     * for which tile requests are made by sources. If the bottom-left corner of
     * an extent is used as `origin` or `origins`, then the `y` value must be
     * negative because OpenLayers tile coordinates use the top left as the origin.
     * @property {number|import("../size.js").Size} [tileSize] Tile size.
     * Default is `[256, 256]`.
     * @property {Array<import("../size.js").Size>} [tileSizes] Tile sizes. If given, the array length
     * should match the length of the `resolutions` array, i.e. each resolution can have a different
     * tile size.
     */
    /**
     * @classdesc
     * Base class for setting the grid pattern for sources accessing tiled-image
     * servers.
     * @api
     */
    class TileGrid {
        /**
         * @param {Options} options Tile grid options.
         */
        constructor(options) {
            /**
             * @protected
             * @type {number}
             */
            this.minZoom = options.minZoom !== undefined ? options.minZoom : 0;
            /**
             * @private
             * @type {!Array<number>}
             */
            this.resolutions_ = options.resolutions;
            asserts_js_1.assert(array_js_2.isSorted(this.resolutions_, function (a, b) {
                return b - a;
            }, true), 17); // `resolutions` must be sorted in descending order
            // check if we've got a consistent zoom factor and origin
            let zoomFactor;
            if (!options.origins) {
                for (let i = 0, ii = this.resolutions_.length - 1; i < ii; ++i) {
                    if (!zoomFactor) {
                        zoomFactor = this.resolutions_[i] / this.resolutions_[i + 1];
                    }
                    else {
                        if (this.resolutions_[i] / this.resolutions_[i + 1] !== zoomFactor) {
                            zoomFactor = undefined;
                            break;
                        }
                    }
                }
            }
            /**
             * @private
             * @type {number|undefined}
             */
            this.zoomFactor_ = zoomFactor;
            /**
             * @protected
             * @type {number}
             */
            this.maxZoom = this.resolutions_.length - 1;
            /**
             * @private
             * @type {import("../coordinate.js").Coordinate}
             */
            this.origin_ = options.origin !== undefined ? options.origin : null;
            /**
             * @private
             * @type {Array<import("../coordinate.js").Coordinate>}
             */
            this.origins_ = null;
            if (options.origins !== undefined) {
                this.origins_ = options.origins;
                asserts_js_1.assert(this.origins_.length == this.resolutions_.length, 20); // Number of `origins` and `resolutions` must be equal
            }
            const extent = options.extent;
            if (extent !== undefined && !this.origin_ && !this.origins_) {
                this.origin_ = extent_js_1.getTopLeft(extent);
            }
            asserts_js_1.assert((!this.origin_ && this.origins_) || (this.origin_ && !this.origins_), 18); // Either `origin` or `origins` must be configured, never both
            /**
             * @private
             * @type {Array<number|import("../size.js").Size>}
             */
            this.tileSizes_ = null;
            if (options.tileSizes !== undefined) {
                this.tileSizes_ = options.tileSizes;
                asserts_js_1.assert(this.tileSizes_.length == this.resolutions_.length, 19); // Number of `tileSizes` and `resolutions` must be equal
            }
            /**
             * @private
             * @type {number|import("../size.js").Size}
             */
            this.tileSize_ =
                options.tileSize !== undefined
                    ? options.tileSize
                    : !this.tileSizes_
                        ? common_js_1.DEFAULT_TILE_SIZE
                        : null;
            asserts_js_1.assert((!this.tileSize_ && this.tileSizes_) ||
                (this.tileSize_ && !this.tileSizes_), 22); // Either `tileSize` or `tileSizes` must be configured, never both
            /**
             * @private
             * @type {import("../extent.js").Extent}
             */
            this.extent_ = extent !== undefined ? extent : null;
            /**
             * @private
             * @type {Array<import("../TileRange.js").default>}
             */
            this.fullTileRanges_ = null;
            /**
             * @private
             * @type {import("../size.js").Size}
             */
            this.tmpSize_ = [0, 0];
            if (options.sizes !== undefined) {
                this.fullTileRanges_ = options.sizes.map(function (size, z) {
                    const tileRange = new TileRange_js_1.default(Math.min(0, size[0]), Math.max(size[0] - 1, -1), Math.min(0, size[1]), Math.max(size[1] - 1, -1));
                    return tileRange;
                }, this);
            }
            else if (extent) {
                this.calculateTileRanges_(extent);
            }
        }
        /**
         * Call a function with each tile coordinate for a given extent and zoom level.
         *
         * @param {import("../extent.js").Extent} extent Extent.
         * @param {number} zoom Integer zoom level.
         * @param {function(import("../tilecoord.js").TileCoord): void} callback Function called with each tile coordinate.
         * @api
         */
        forEachTileCoord(extent, zoom, callback) {
            const tileRange = this.getTileRangeForExtentAndZ(extent, zoom);
            for (let i = tileRange.minX, ii = tileRange.maxX; i <= ii; ++i) {
                for (let j = tileRange.minY, jj = tileRange.maxY; j <= jj; ++j) {
                    callback([zoom, i, j]);
                }
            }
        }
        /**
         * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
         * @param {function(number, import("../TileRange.js").default): boolean} callback Callback.
         * @param {import("../TileRange.js").default=} opt_tileRange Temporary import("../TileRange.js").default object.
         * @param {import("../extent.js").Extent=} opt_extent Temporary import("../extent.js").Extent object.
         * @return {boolean} Callback succeeded.
         */
        forEachTileCoordParentTileRange(tileCoord, callback, opt_tileRange, opt_extent) {
            let tileRange, x, y;
            let tileCoordExtent = null;
            let z = tileCoord[0] - 1;
            if (this.zoomFactor_ === 2) {
                x = tileCoord[1];
                y = tileCoord[2];
            }
            else {
                tileCoordExtent = this.getTileCoordExtent(tileCoord, opt_extent);
            }
            while (z >= this.minZoom) {
                if (this.zoomFactor_ === 2) {
                    x = Math.floor(x / 2);
                    y = Math.floor(y / 2);
                    tileRange = TileRange_js_1.createOrUpdate(x, x, y, y, opt_tileRange);
                }
                else {
                    tileRange = this.getTileRangeForExtentAndZ(tileCoordExtent, z, opt_tileRange);
                }
                if (callback(z, tileRange)) {
                    return true;
                }
                --z;
            }
            return false;
        }
        /**
         * Get the extent for this tile grid, if it was configured.
         * @return {import("../extent.js").Extent} Extent.
         * @api
         */
        getExtent() {
            return this.extent_;
        }
        /**
         * Get the maximum zoom level for the grid.
         * @return {number} Max zoom.
         * @api
         */
        getMaxZoom() {
            return this.maxZoom;
        }
        /**
         * Get the minimum zoom level for the grid.
         * @return {number} Min zoom.
         * @api
         */
        getMinZoom() {
            return this.minZoom;
        }
        /**
         * Get the origin for the grid at the given zoom level.
         * @param {number} z Integer zoom level.
         * @return {import("../coordinate.js").Coordinate} Origin.
         * @api
         */
        getOrigin(z) {
            if (this.origin_) {
                return this.origin_;
            }
            else {
                return this.origins_[z];
            }
        }
        /**
         * Get the resolution for the given zoom level.
         * @param {number} z Integer zoom level.
         * @return {number} Resolution.
         * @api
         */
        getResolution(z) {
            return this.resolutions_[z];
        }
        /**
         * Get the list of resolutions for the tile grid.
         * @return {Array<number>} Resolutions.
         * @api
         */
        getResolutions() {
            return this.resolutions_;
        }
        /**
         * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
         * @param {import("../TileRange.js").default=} opt_tileRange Temporary import("../TileRange.js").default object.
         * @param {import("../extent.js").Extent=} opt_extent Temporary import("../extent.js").Extent object.
         * @return {import("../TileRange.js").default} Tile range.
         */
        getTileCoordChildTileRange(tileCoord, opt_tileRange, opt_extent) {
            if (tileCoord[0] < this.maxZoom) {
                if (this.zoomFactor_ === 2) {
                    const minX = tileCoord[1] * 2;
                    const minY = tileCoord[2] * 2;
                    return TileRange_js_1.createOrUpdate(minX, minX + 1, minY, minY + 1, opt_tileRange);
                }
                const tileCoordExtent = this.getTileCoordExtent(tileCoord, opt_extent);
                return this.getTileRangeForExtentAndZ(tileCoordExtent, tileCoord[0] + 1, opt_tileRange);
            }
            return null;
        }
        /**
         * Get the extent for a tile range.
         * @param {number} z Integer zoom level.
         * @param {import("../TileRange.js").default} tileRange Tile range.
         * @param {import("../extent.js").Extent=} opt_extent Temporary import("../extent.js").Extent object.
         * @return {import("../extent.js").Extent} Extent.
         */
        getTileRangeExtent(z, tileRange, opt_extent) {
            const origin = this.getOrigin(z);
            const resolution = this.getResolution(z);
            const tileSize = size_js_1.toSize(this.getTileSize(z), this.tmpSize_);
            const minX = origin[0] + tileRange.minX * tileSize[0] * resolution;
            const maxX = origin[0] + (tileRange.maxX + 1) * tileSize[0] * resolution;
            const minY = origin[1] + tileRange.minY * tileSize[1] * resolution;
            const maxY = origin[1] + (tileRange.maxY + 1) * tileSize[1] * resolution;
            return extent_js_1.createOrUpdate(minX, minY, maxX, maxY, opt_extent);
        }
        /**
         * Get a tile range for the given extent and integer zoom level.
         * @param {import("../extent.js").Extent} extent Extent.
         * @param {number} z Integer zoom level.
         * @param {import("../TileRange.js").default=} opt_tileRange Temporary tile range object.
         * @return {import("../TileRange.js").default} Tile range.
         */
        getTileRangeForExtentAndZ(extent, z, opt_tileRange) {
            const tileCoord = tmpTileCoord;
            this.getTileCoordForXYAndZ_(extent[0], extent[3], z, false, tileCoord);
            const minX = tileCoord[1];
            const minY = tileCoord[2];
            this.getTileCoordForXYAndZ_(extent[2], extent[1], z, true, tileCoord);
            return TileRange_js_1.createOrUpdate(minX, tileCoord[1], minY, tileCoord[2], opt_tileRange);
        }
        /**
         * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
         * @return {import("../coordinate.js").Coordinate} Tile center.
         */
        getTileCoordCenter(tileCoord) {
            const origin = this.getOrigin(tileCoord[0]);
            const resolution = this.getResolution(tileCoord[0]);
            const tileSize = size_js_1.toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);
            return [
                origin[0] + (tileCoord[1] + 0.5) * tileSize[0] * resolution,
                origin[1] - (tileCoord[2] + 0.5) * tileSize[1] * resolution,
            ];
        }
        /**
         * Get the extent of a tile coordinate.
         *
         * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
         * @param {import("../extent.js").Extent=} opt_extent Temporary extent object.
         * @return {import("../extent.js").Extent} Extent.
         * @api
         */
        getTileCoordExtent(tileCoord, opt_extent) {
            const origin = this.getOrigin(tileCoord[0]);
            const resolution = this.getResolution(tileCoord[0]);
            const tileSize = size_js_1.toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);
            const minX = origin[0] + tileCoord[1] * tileSize[0] * resolution;
            const minY = origin[1] - (tileCoord[2] + 1) * tileSize[1] * resolution;
            const maxX = minX + tileSize[0] * resolution;
            const maxY = minY + tileSize[1] * resolution;
            return extent_js_1.createOrUpdate(minX, minY, maxX, maxY, opt_extent);
        }
        /**
         * Get the tile coordinate for the given map coordinate and resolution.  This
         * method considers that coordinates that intersect tile boundaries should be
         * assigned the higher tile coordinate.
         *
         * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
         * @param {number} resolution Resolution.
         * @param {import("../tilecoord.js").TileCoord=} opt_tileCoord Destination import("../tilecoord.js").TileCoord object.
         * @return {import("../tilecoord.js").TileCoord} Tile coordinate.
         * @api
         */
        getTileCoordForCoordAndResolution(coordinate, resolution, opt_tileCoord) {
            return this.getTileCoordForXYAndResolution_(coordinate[0], coordinate[1], resolution, false, opt_tileCoord);
        }
        /**
         * Note that this method should not be called for resolutions that correspond
         * to an integer zoom level.  Instead call the `getTileCoordForXYAndZ_` method.
         * @param {number} x X.
         * @param {number} y Y.
         * @param {number} resolution Resolution (for a non-integer zoom level).
         * @param {boolean} reverseIntersectionPolicy Instead of letting edge
         *     intersections go to the higher tile coordinate, let edge intersections
         *     go to the lower tile coordinate.
         * @param {import("../tilecoord.js").TileCoord=} opt_tileCoord Temporary import("../tilecoord.js").TileCoord object.
         * @return {import("../tilecoord.js").TileCoord} Tile coordinate.
         * @private
         */
        getTileCoordForXYAndResolution_(x, y, resolution, reverseIntersectionPolicy, opt_tileCoord) {
            const z = this.getZForResolution(resolution);
            const scale = resolution / this.getResolution(z);
            const origin = this.getOrigin(z);
            const tileSize = size_js_1.toSize(this.getTileSize(z), this.tmpSize_);
            const adjustX = reverseIntersectionPolicy ? 0.5 : 0;
            const adjustY = reverseIntersectionPolicy ? 0.5 : 0;
            const xFromOrigin = Math.floor((x - origin[0]) / resolution + adjustX);
            const yFromOrigin = Math.floor((origin[1] - y) / resolution + adjustY);
            let tileCoordX = (scale * xFromOrigin) / tileSize[0];
            let tileCoordY = (scale * yFromOrigin) / tileSize[1];
            if (reverseIntersectionPolicy) {
                tileCoordX = Math.ceil(tileCoordX) - 1;
                tileCoordY = Math.ceil(tileCoordY) - 1;
            }
            else {
                tileCoordX = Math.floor(tileCoordX);
                tileCoordY = Math.floor(tileCoordY);
            }
            return tilecoord_js_1.createOrUpdate(z, tileCoordX, tileCoordY, opt_tileCoord);
        }
        /**
         * Although there is repetition between this method and `getTileCoordForXYAndResolution_`,
         * they should have separate implementations.  This method is for integer zoom
         * levels.  The other method should only be called for resolutions corresponding
         * to non-integer zoom levels.
         * @param {number} x Map x coordinate.
         * @param {number} y Map y coordinate.
         * @param {number} z Integer zoom level.
         * @param {boolean} reverseIntersectionPolicy Instead of letting edge
         *     intersections go to the higher tile coordinate, let edge intersections
         *     go to the lower tile coordinate.
         * @param {import("../tilecoord.js").TileCoord=} opt_tileCoord Temporary import("../tilecoord.js").TileCoord object.
         * @return {import("../tilecoord.js").TileCoord} Tile coordinate.
         * @private
         */
        getTileCoordForXYAndZ_(x, y, z, reverseIntersectionPolicy, opt_tileCoord) {
            const origin = this.getOrigin(z);
            const resolution = this.getResolution(z);
            const tileSize = size_js_1.toSize(this.getTileSize(z), this.tmpSize_);
            const adjustX = reverseIntersectionPolicy ? 0.5 : 0;
            const adjustY = reverseIntersectionPolicy ? 0.5 : 0;
            const xFromOrigin = Math.floor((x - origin[0]) / resolution + adjustX);
            const yFromOrigin = Math.floor((origin[1] - y) / resolution + adjustY);
            let tileCoordX = xFromOrigin / tileSize[0];
            let tileCoordY = yFromOrigin / tileSize[1];
            if (reverseIntersectionPolicy) {
                tileCoordX = Math.ceil(tileCoordX) - 1;
                tileCoordY = Math.ceil(tileCoordY) - 1;
            }
            else {
                tileCoordX = Math.floor(tileCoordX);
                tileCoordY = Math.floor(tileCoordY);
            }
            return tilecoord_js_1.createOrUpdate(z, tileCoordX, tileCoordY, opt_tileCoord);
        }
        /**
         * Get a tile coordinate given a map coordinate and zoom level.
         * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
         * @param {number} z Zoom level.
         * @param {import("../tilecoord.js").TileCoord=} opt_tileCoord Destination import("../tilecoord.js").TileCoord object.
         * @return {import("../tilecoord.js").TileCoord} Tile coordinate.
         * @api
         */
        getTileCoordForCoordAndZ(coordinate, z, opt_tileCoord) {
            return this.getTileCoordForXYAndZ_(coordinate[0], coordinate[1], z, false, opt_tileCoord);
        }
        /**
         * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
         * @return {number} Tile resolution.
         */
        getTileCoordResolution(tileCoord) {
            return this.resolutions_[tileCoord[0]];
        }
        /**
         * Get the tile size for a zoom level. The type of the return value matches the
         * `tileSize` or `tileSizes` that the tile grid was configured with. To always
         * get an `import("../size.js").Size`, run the result through `import("../size.js").Size.toSize()`.
         * @param {number} z Z.
         * @return {number|import("../size.js").Size} Tile size.
         * @api
         */
        getTileSize(z) {
            if (this.tileSize_) {
                return this.tileSize_;
            }
            else {
                return this.tileSizes_[z];
            }
        }
        /**
         * @param {number} z Zoom level.
         * @return {import("../TileRange.js").default} Extent tile range for the specified zoom level.
         */
        getFullTileRange(z) {
            if (!this.fullTileRanges_) {
                return null;
            }
            else {
                return this.fullTileRanges_[z];
            }
        }
        /**
         * @param {number} resolution Resolution.
         * @param {number=} opt_direction If 0, the nearest resolution will be used.
         *     If 1, the nearest lower resolution will be used. If -1, the nearest
         *     higher resolution will be used. Default is 0.
         * @return {number} Z.
         * @api
         */
        getZForResolution(resolution, opt_direction) {
            const z = array_js_2.linearFindNearest(this.resolutions_, resolution, opt_direction || 0);
            return math_js_1.clamp(z, this.minZoom, this.maxZoom);
        }
        /**
         * @param {!import("../extent.js").Extent} extent Extent for this tile grid.
         * @private
         */
        calculateTileRanges_(extent) {
            const length = this.resolutions_.length;
            const fullTileRanges = new Array(length);
            for (let z = this.minZoom; z < length; ++z) {
                fullTileRanges[z] = this.getTileRangeForExtentAndZ(extent, z);
            }
            this.fullTileRanges_ = fullTileRanges;
        }
    }
    exports.default = TileGrid;
});
define("node_modules/ol/src/proj/Projection", ["require", "exports", "node_modules/ol/src/proj/Units"], function (require, exports, Units_js_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @typedef {Object} Options
     * @property {string} code The SRS identifier code, e.g. `EPSG:4326`.
     * @property {import("./Units.js").default|string} [units] Units. Required unless a
     * proj4 projection is defined for `code`.
     * @property {import("../extent.js").Extent} [extent] The validity extent for the SRS.
     * @property {string} [axisOrientation='enu'] The axis orientation as specified in Proj4.
     * @property {boolean} [global=false] Whether the projection is valid for the whole globe.
     * @property {number} [metersPerUnit] The meters per unit for the SRS.
     * If not provided, the `units` are used to get the meters per unit from the {@link module:ol/proj/Units~METERS_PER_UNIT}
     * lookup table.
     * @property {import("../extent.js").Extent} [worldExtent] The world extent for the SRS.
     * @property {function(number, import("../coordinate.js").Coordinate):number} [getPointResolution]
     * Function to determine resolution at a point. The function is called with a
     * `{number}` view resolution and an `{import("../coordinate.js").Coordinate}` as arguments, and returns
     * the `{number}` resolution in projection units at the passed coordinate. If this is `undefined`,
     * the default {@link module:ol/proj#getPointResolution} function will be used.
     */
    /**
     * @classdesc
     * Projection definition class. One of these is created for each projection
     * supported in the application and stored in the {@link module:ol/proj} namespace.
     * You can use these in applications, but this is not required, as API params
     * and options use {@link module:ol/proj~ProjectionLike} which means the simple string
     * code will suffice.
     *
     * You can use {@link module:ol/proj~get} to retrieve the object for a particular
     * projection.
     *
     * The library includes definitions for `EPSG:4326` and `EPSG:3857`, together
     * with the following aliases:
     * * `EPSG:4326`: CRS:84, urn:ogc:def:crs:EPSG:6.6:4326,
     *     urn:ogc:def:crs:OGC:1.3:CRS84, urn:ogc:def:crs:OGC:2:84,
     *     http://www.opengis.net/gml/srs/epsg.xml#4326,
     *     urn:x-ogc:def:crs:EPSG:4326
     * * `EPSG:3857`: EPSG:102100, EPSG:102113, EPSG:900913,
     *     urn:ogc:def:crs:EPSG:6.18:3:3857,
     *     http://www.opengis.net/gml/srs/epsg.xml#3857
     *
     * If you use [proj4js](https://github.com/proj4js/proj4js), aliases can
     * be added using `proj4.defs()`. After all required projection definitions are
     * added, call the {@link module:ol/proj/proj4~register} function.
     *
     * @api
     */
    class Projection {
        /**
         * @param {Options} options Projection options.
         */
        constructor(options) {
            /**
             * @private
             * @type {string}
             */
            this.code_ = options.code;
            /**
             * Units of projected coordinates. When set to `TILE_PIXELS`, a
             * `this.extent_` and `this.worldExtent_` must be configured properly for each
             * tile.
             * @private
             * @type {import("./Units.js").default}
             */
            this.units_ = /** @type {import("./Units.js").default} */ (options.units);
            /**
             * Validity extent of the projection in projected coordinates. For projections
             * with `TILE_PIXELS` units, this is the extent of the tile in
             * tile pixel space.
             * @private
             * @type {import("../extent.js").Extent}
             */
            this.extent_ = options.extent !== undefined ? options.extent : null;
            /**
             * Extent of the world in EPSG:4326. For projections with
             * `TILE_PIXELS` units, this is the extent of the tile in
             * projected coordinate space.
             * @private
             * @type {import("../extent.js").Extent}
             */
            this.worldExtent_ =
                options.worldExtent !== undefined ? options.worldExtent : null;
            /**
             * @private
             * @type {string}
             */
            this.axisOrientation_ =
                options.axisOrientation !== undefined ? options.axisOrientation : 'enu';
            /**
             * @private
             * @type {boolean}
             */
            this.global_ = options.global !== undefined ? options.global : false;
            /**
             * @private
             * @type {boolean}
             */
            this.canWrapX_ = !!(this.global_ && this.extent_);
            /**
             * @private
             * @type {function(number, import("../coordinate.js").Coordinate):number|undefined}
             */
            this.getPointResolutionFunc_ = options.getPointResolution;
            /**
             * @private
             * @type {import("../tilegrid/TileGrid.js").default}
             */
            this.defaultTileGrid_ = null;
            /**
             * @private
             * @type {number|undefined}
             */
            this.metersPerUnit_ = options.metersPerUnit;
        }
        /**
         * @return {boolean} The projection is suitable for wrapping the x-axis
         */
        canWrapX() {
            return this.canWrapX_;
        }
        /**
         * Get the code for this projection, e.g. 'EPSG:4326'.
         * @return {string} Code.
         * @api
         */
        getCode() {
            return this.code_;
        }
        /**
         * Get the validity extent for this projection.
         * @return {import("../extent.js").Extent} Extent.
         * @api
         */
        getExtent() {
            return this.extent_;
        }
        /**
         * Get the units of this projection.
         * @return {import("./Units.js").default} Units.
         * @api
         */
        getUnits() {
            return this.units_;
        }
        /**
         * Get the amount of meters per unit of this projection.  If the projection is
         * not configured with `metersPerUnit` or a units identifier, the return is
         * `undefined`.
         * @return {number|undefined} Meters.
         * @api
         */
        getMetersPerUnit() {
            return this.metersPerUnit_ || Units_js_1.METERS_PER_UNIT[this.units_];
        }
        /**
         * Get the world extent for this projection.
         * @return {import("../extent.js").Extent} Extent.
         * @api
         */
        getWorldExtent() {
            return this.worldExtent_;
        }
        /**
         * Get the axis orientation of this projection.
         * Example values are:
         * enu - the default easting, northing, elevation.
         * neu - northing, easting, up - useful for "lat/long" geographic coordinates,
         *     or south orientated transverse mercator.
         * wnu - westing, northing, up - some planetary coordinate systems have
         *     "west positive" coordinate systems
         * @return {string} Axis orientation.
         * @api
         */
        getAxisOrientation() {
            return this.axisOrientation_;
        }
        /**
         * Is this projection a global projection which spans the whole world?
         * @return {boolean} Whether the projection is global.
         * @api
         */
        isGlobal() {
            return this.global_;
        }
        /**
         * Set if the projection is a global projection which spans the whole world
         * @param {boolean} global Whether the projection is global.
         * @api
         */
        setGlobal(global) {
            this.global_ = global;
            this.canWrapX_ = !!(global && this.extent_);
        }
        /**
         * @return {import("../tilegrid/TileGrid.js").default} The default tile grid.
         */
        getDefaultTileGrid() {
            return this.defaultTileGrid_;
        }
        /**
         * @param {import("../tilegrid/TileGrid.js").default} tileGrid The default tile grid.
         */
        setDefaultTileGrid(tileGrid) {
            this.defaultTileGrid_ = tileGrid;
        }
        /**
         * Set the validity extent for this projection.
         * @param {import("../extent.js").Extent} extent Extent.
         * @api
         */
        setExtent(extent) {
            this.extent_ = extent;
            this.canWrapX_ = !!(this.global_ && extent);
        }
        /**
         * Set the world extent for this projection.
         * @param {import("../extent.js").Extent} worldExtent World extent
         *     [minlon, minlat, maxlon, maxlat].
         * @api
         */
        setWorldExtent(worldExtent) {
            this.worldExtent_ = worldExtent;
        }
        /**
         * Set the getPointResolution function (see {@link module:ol/proj~getPointResolution}
         * for this projection.
         * @param {function(number, import("../coordinate.js").Coordinate):number} func Function
         * @api
         */
        setGetPointResolution(func) {
            this.getPointResolutionFunc_ = func;
        }
        /**
         * Get the custom point resolution function for this projection (if set).
         * @return {function(number, import("../coordinate.js").Coordinate):number|undefined} The custom point
         * resolution function (if set).
         */
        getPointResolutionFunc() {
            return this.getPointResolutionFunc_;
        }
    }
    exports.default = Projection;
});
define("node_modules/ol/src/proj/epsg3857", ["require", "exports", "node_modules/ol/src/proj/Projection", "node_modules/ol/src/proj/Units", "node_modules/ol/src/math"], function (require, exports, Projection_js_1, Units_js_2, math_js_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toEPSG4326 = exports.fromEPSG4326 = exports.PROJECTIONS = exports.WORLD_EXTENT = exports.EXTENT = exports.HALF_SIZE = exports.RADIUS = void 0;
    /**
     * Radius of WGS84 sphere
     *
     * @const
     * @type {number}
     */
    exports.RADIUS = 6378137;
    /**
     * @const
     * @type {number}
     */
    exports.HALF_SIZE = Math.PI * exports.RADIUS;
    /**
     * @const
     * @type {import("../extent.js").Extent}
     */
    exports.EXTENT = [-exports.HALF_SIZE, -exports.HALF_SIZE, exports.HALF_SIZE, exports.HALF_SIZE];
    /**
     * @const
     * @type {import("../extent.js").Extent}
     */
    exports.WORLD_EXTENT = [-180, -85, 180, 85];
    /**
     * @classdesc
     * Projection object for web/spherical Mercator (EPSG:3857).
     */
    class EPSG3857Projection extends Projection_js_1.default {
        /**
         * @param {string} code Code.
         */
        constructor(code) {
            super({
                code: code,
                units: Units_js_2.default.METERS,
                extent: exports.EXTENT,
                global: true,
                worldExtent: exports.WORLD_EXTENT,
                getPointResolution: function (resolution, point) {
                    return resolution / math_js_2.cosh(point[1] / exports.RADIUS);
                },
            });
        }
    }
    /**
     * Projections equal to EPSG:3857.
     *
     * @const
     * @type {Array<import("./Projection.js").default>}
     */
    exports.PROJECTIONS = [
        new EPSG3857Projection('EPSG:3857'),
        new EPSG3857Projection('EPSG:102100'),
        new EPSG3857Projection('EPSG:102113'),
        new EPSG3857Projection('EPSG:900913'),
        new EPSG3857Projection('urn:ogc:def:crs:EPSG:6.18:3:3857'),
        new EPSG3857Projection('urn:ogc:def:crs:EPSG::3857'),
        new EPSG3857Projection('http://www.opengis.net/gml/srs/epsg.xml#3857'),
    ];
    /**
     * Transformation from EPSG:4326 to EPSG:3857.
     *
     * @param {Array<number>} input Input array of coordinate values.
     * @param {Array<number>=} opt_output Output array of coordinate values.
     * @param {number=} opt_dimension Dimension (default is `2`).
     * @return {Array<number>} Output array of coordinate values.
     */
    function fromEPSG4326(input, opt_output, opt_dimension) {
        const length = input.length;
        const dimension = opt_dimension > 1 ? opt_dimension : 2;
        let output = opt_output;
        if (output === undefined) {
            if (dimension > 2) {
                // preserve values beyond second dimension
                output = input.slice();
            }
            else {
                output = new Array(length);
            }
        }
        const halfSize = exports.HALF_SIZE;
        for (let i = 0; i < length; i += dimension) {
            output[i] = (halfSize * input[i]) / 180;
            let y = exports.RADIUS * Math.log(Math.tan((Math.PI * (+input[i + 1] + 90)) / 360));
            if (y > halfSize) {
                y = halfSize;
            }
            else if (y < -halfSize) {
                y = -halfSize;
            }
            output[i + 1] = y;
        }
        return output;
    }
    exports.fromEPSG4326 = fromEPSG4326;
    /**
     * Transformation from EPSG:3857 to EPSG:4326.
     *
     * @param {Array<number>} input Input array of coordinate values.
     * @param {Array<number>=} opt_output Output array of coordinate values.
     * @param {number=} opt_dimension Dimension (default is `2`).
     * @return {Array<number>} Output array of coordinate values.
     */
    function toEPSG4326(input, opt_output, opt_dimension) {
        const length = input.length;
        const dimension = opt_dimension > 1 ? opt_dimension : 2;
        let output = opt_output;
        if (output === undefined) {
            if (dimension > 2) {
                // preserve values beyond second dimension
                output = input.slice();
            }
            else {
                output = new Array(length);
            }
        }
        for (let i = 0; i < length; i += dimension) {
            output[i] = (180 * input[i]) / exports.HALF_SIZE;
            output[i + 1] =
                (360 * Math.atan(Math.exp(input[i + 1] / exports.RADIUS))) / Math.PI - 90;
        }
        return output;
    }
    exports.toEPSG4326 = toEPSG4326;
});
define("node_modules/ol/src/proj/epsg4326", ["require", "exports", "node_modules/ol/src/proj/Projection", "node_modules/ol/src/proj/Units"], function (require, exports, Projection_js_2, Units_js_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PROJECTIONS = exports.METERS_PER_UNIT = exports.EXTENT = exports.RADIUS = void 0;
    /**
     * Semi-major radius of the WGS84 ellipsoid.
     *
     * @const
     * @type {number}
     */
    exports.RADIUS = 6378137;
    /**
     * Extent of the EPSG:4326 projection which is the whole world.
     *
     * @const
     * @type {import("../extent.js").Extent}
     */
    exports.EXTENT = [-180, -90, 180, 90];
    /**
     * @const
     * @type {number}
     */
    exports.METERS_PER_UNIT = (Math.PI * exports.RADIUS) / 180;
    /**
     * @classdesc
     * Projection object for WGS84 geographic coordinates (EPSG:4326).
     *
     * Note that OpenLayers does not strictly comply with the EPSG definition.
     * The EPSG registry defines 4326 as a CRS for Latitude,Longitude (y,x).
     * OpenLayers treats EPSG:4326 as a pseudo-projection, with x,y coordinates.
     */
    class EPSG4326Projection extends Projection_js_2.default {
        /**
         * @param {string} code Code.
         * @param {string=} opt_axisOrientation Axis orientation.
         */
        constructor(code, opt_axisOrientation) {
            super({
                code: code,
                units: Units_js_3.default.DEGREES,
                extent: exports.EXTENT,
                axisOrientation: opt_axisOrientation,
                global: true,
                metersPerUnit: exports.METERS_PER_UNIT,
                worldExtent: exports.EXTENT,
            });
        }
    }
    /**
     * Projections equal to EPSG:4326.
     *
     * @const
     * @type {Array<import("./Projection.js").default>}
     */
    exports.PROJECTIONS = [
        new EPSG4326Projection('CRS:84'),
        new EPSG4326Projection('EPSG:4326', 'neu'),
        new EPSG4326Projection('urn:ogc:def:crs:EPSG::4326', 'neu'),
        new EPSG4326Projection('urn:ogc:def:crs:EPSG:6.6:4326', 'neu'),
        new EPSG4326Projection('urn:ogc:def:crs:OGC:1.3:CRS84'),
        new EPSG4326Projection('urn:ogc:def:crs:OGC:2:84'),
        new EPSG4326Projection('http://www.opengis.net/gml/srs/epsg.xml#4326', 'neu'),
        new EPSG4326Projection('urn:x-ogc:def:crs:EPSG:4326', 'neu'),
    ];
});
/**
 * @module ol/proj/projections
 */
define("node_modules/ol/src/proj/projections", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.add = exports.get = exports.clear = void 0;
    /**
     * @type {Object<string, import("./Projection.js").default>}
     */
    let cache = {};
    /**
     * Clear the projections cache.
     */
    function clear() {
        cache = {};
    }
    exports.clear = clear;
    /**
     * Get a cached projection by code.
     * @param {string} code The code for the projection.
     * @return {import("./Projection.js").default} The projection (if cached).
     */
    function get(code) {
        return cache[code] || null;
    }
    exports.get = get;
    /**
     * Add a projection to the cache.
     * @param {string} code The projection code.
     * @param {import("./Projection.js").default} projection The projection to cache.
     */
    function add(code, projection) {
        cache[code] = projection;
    }
    exports.add = add;
});
/**
 * @module ol/obj
 */
define("node_modules/ol/src/obj", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isEmpty = exports.getValues = exports.clear = exports.assign = void 0;
    /**
     * Polyfill for Object.assign().  Assigns enumerable and own properties from
     * one or more source objects to a target object.
     * See https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign.
     *
     * @param {!Object} target The target object.
     * @param {...Object} var_sources The source object(s).
     * @return {!Object} The modified target object.
     */
    exports.assign = typeof Object.assign === 'function'
        ? Object.assign
        : function (target, var_sources) {
            if (target === undefined || target === null) {
                throw new TypeError('Cannot convert undefined or null to object');
            }
            const output = Object(target);
            for (let i = 1, ii = arguments.length; i < ii; ++i) {
                const source = arguments[i];
                if (source !== undefined && source !== null) {
                    for (const key in source) {
                        if (source.hasOwnProperty(key)) {
                            output[key] = source[key];
                        }
                    }
                }
            }
            return output;
        };
    /**
     * Removes all properties from an object.
     * @param {Object} object The object to clear.
     */
    function clear(object) {
        for (const property in object) {
            delete object[property];
        }
    }
    exports.clear = clear;
    /**
     * Polyfill for Object.values().  Get an array of property values from an object.
     * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/values
     *
     * @param {!Object<K,V>} object The object from which to get the values.
     * @return {!Array<V>} The property values.
     * @template K,V
     */
    exports.getValues = typeof Object.values === 'function'
        ? Object.values
        : function (object) {
            const values = [];
            for (const property in object) {
                values.push(object[property]);
            }
            return values;
        };
    /**
     * Determine if an object has any properties.
     * @param {Object} object The object to check.
     * @return {boolean} The object is empty.
     */
    function isEmpty(object) {
        let property;
        for (property in object) {
            return false;
        }
        return !property;
    }
    exports.isEmpty = isEmpty;
});
define("node_modules/ol/src/proj/transforms", ["require", "exports", "node_modules/ol/src/obj"], function (require, exports, obj_js_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.get = exports.remove = exports.add = exports.clear = void 0;
    /**
     * @private
     * @type {!Object<string, Object<string, import("../proj.js").TransformFunction>>}
     */
    let transforms = {};
    /**
     * Clear the transform cache.
     */
    function clear() {
        transforms = {};
    }
    exports.clear = clear;
    /**
     * Registers a conversion function to convert coordinates from the source
     * projection to the destination projection.
     *
     * @param {import("./Projection.js").default} source Source.
     * @param {import("./Projection.js").default} destination Destination.
     * @param {import("../proj.js").TransformFunction} transformFn Transform.
     */
    function add(source, destination, transformFn) {
        const sourceCode = source.getCode();
        const destinationCode = destination.getCode();
        if (!(sourceCode in transforms)) {
            transforms[sourceCode] = {};
        }
        transforms[sourceCode][destinationCode] = transformFn;
    }
    exports.add = add;
    /**
     * Unregisters the conversion function to convert coordinates from the source
     * projection to the destination projection.  This method is used to clean up
     * cached transforms during testing.
     *
     * @param {import("./Projection.js").default} source Source projection.
     * @param {import("./Projection.js").default} destination Destination projection.
     * @return {import("../proj.js").TransformFunction} transformFn The unregistered transform.
     */
    function remove(source, destination) {
        const sourceCode = source.getCode();
        const destinationCode = destination.getCode();
        const transform = transforms[sourceCode][destinationCode];
        delete transforms[sourceCode][destinationCode];
        if (obj_js_1.isEmpty(transforms[sourceCode])) {
            delete transforms[sourceCode];
        }
        return transform;
    }
    exports.remove = remove;
    /**
     * Get a transform given a source code and a destination code.
     * @param {string} sourceCode The code for the source projection.
     * @param {string} destinationCode The code for the destination projection.
     * @return {import("../proj.js").TransformFunction|undefined} The transform function (if found).
     */
    function get(sourceCode, destinationCode) {
        let transform;
        if (sourceCode in transforms && destinationCode in transforms[sourceCode]) {
            transform = transforms[sourceCode][destinationCode];
        }
        return transform;
    }
    exports.get = get;
});
/**
 * @module ol/geom/GeometryType
 */
define("node_modules/ol/src/geom/GeometryType", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * The geometry type. One of `'Point'`, `'LineString'`, `'LinearRing'`,
     * `'Polygon'`, `'MultiPoint'`, `'MultiLineString'`, `'MultiPolygon'`,
     * `'GeometryCollection'`, `'Circle'`.
     * @enum {string}
     */
    exports.default = {
        POINT: 'Point',
        LINE_STRING: 'LineString',
        LINEAR_RING: 'LinearRing',
        POLYGON: 'Polygon',
        MULTI_POINT: 'MultiPoint',
        MULTI_LINE_STRING: 'MultiLineString',
        MULTI_POLYGON: 'MultiPolygon',
        GEOMETRY_COLLECTION: 'GeometryCollection',
        CIRCLE: 'Circle',
    };
});
/**
 * @module ol/events/Event
 */
define("node_modules/ol/src/events/Event", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.preventDefault = exports.stopPropagation = void 0;
    /**
     * @classdesc
     * Stripped down implementation of the W3C DOM Level 2 Event interface.
     * See https://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-interface.
     *
     * This implementation only provides `type` and `target` properties, and
     * `stopPropagation` and `preventDefault` methods. It is meant as base class
     * for higher level events defined in the library, and works with
     * {@link module:ol/events/Target~Target}.
     */
    class BaseEvent {
        /**
         * @param {string} type Type.
         */
        constructor(type) {
            /**
             * @type {boolean}
             */
            this.propagationStopped;
            /**
             * The event type.
             * @type {string}
             * @api
             */
            this.type = type;
            /**
             * The event target.
             * @type {Object}
             * @api
             */
            this.target = null;
        }
        /**
         * Stop event propagation.
         * @api
         */
        preventDefault() {
            this.propagationStopped = true;
        }
        /**
         * Stop event propagation.
         * @api
         */
        stopPropagation() {
            this.propagationStopped = true;
        }
    }
    /**
     * @param {Event|import("./Event.js").default} evt Event
     */
    function stopPropagation(evt) {
        evt.stopPropagation();
    }
    exports.stopPropagation = stopPropagation;
    /**
     * @param {Event|import("./Event.js").default} evt Event
     */
    function preventDefault(evt) {
        evt.preventDefault();
    }
    exports.preventDefault = preventDefault;
    exports.default = BaseEvent;
});
/**
 * @module ol/ObjectEventType
 */
define("node_modules/ol/src/ObjectEventType", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @enum {string}
     */
    exports.default = {
        /**
         * Triggered when a property is changed.
         * @event module:ol/Object.ObjectEvent#propertychange
         * @api
         */
        PROPERTYCHANGE: 'propertychange',
    };
});
define("node_modules/ol/src/events", ["require", "exports", "node_modules/ol/src/obj"], function (require, exports, obj_js_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.unlistenByKey = exports.listenOnce = exports.listen = void 0;
    /**
     * Key to use with {@link module:ol/Observable~Observable#unByKey}.
     * @typedef {Object} EventsKey
     * @property {ListenerFunction} listener
     * @property {import("./events/Target.js").EventTargetLike} target
     * @property {string} type
     * @api
     */
    /**
     * Listener function. This function is called with an event object as argument.
     * When the function returns `false`, event propagation will stop.
     *
     * @typedef {function((Event|import("./events/Event.js").default)): (void|boolean)} ListenerFunction
     * @api
     */
    /**
     * @typedef {Object} ListenerObject
     * @property {ListenerFunction} handleEvent
     */
    /**
     * @typedef {ListenerFunction|ListenerObject} Listener
     */
    /**
     * Registers an event listener on an event target. Inspired by
     * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html
     *
     * This function efficiently binds a `listener` to a `this` object, and returns
     * a key for use with {@link module:ol/events~unlistenByKey}.
     *
     * @param {import("./events/Target.js").EventTargetLike} target Event target.
     * @param {string} type Event type.
     * @param {ListenerFunction} listener Listener.
     * @param {Object=} opt_this Object referenced by the `this` keyword in the
     *     listener. Default is the `target`.
     * @param {boolean=} opt_once If true, add the listener as one-off listener.
     * @return {EventsKey} Unique key for the listener.
     */
    function listen(target, type, listener, opt_this, opt_once) {
        if (opt_this && opt_this !== target) {
            listener = listener.bind(opt_this);
        }
        if (opt_once) {
            const originalListener = listener;
            listener = function () {
                target.removeEventListener(type, listener);
                originalListener.apply(this, arguments);
            };
        }
        const eventsKey = {
            target: target,
            type: type,
            listener: listener,
        };
        target.addEventListener(type, listener);
        return eventsKey;
    }
    exports.listen = listen;
    /**
     * Registers a one-off event listener on an event target. Inspired by
     * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html
     *
     * This function efficiently binds a `listener` as self-unregistering listener
     * to a `this` object, and returns a key for use with
     * {@link module:ol/events~unlistenByKey} in case the listener needs to be
     * unregistered before it is called.
     *
     * When {@link module:ol/events~listen} is called with the same arguments after this
     * function, the self-unregistering listener will be turned into a permanent
     * listener.
     *
     * @param {import("./events/Target.js").EventTargetLike} target Event target.
     * @param {string} type Event type.
     * @param {ListenerFunction} listener Listener.
     * @param {Object=} opt_this Object referenced by the `this` keyword in the
     *     listener. Default is the `target`.
     * @return {EventsKey} Key for unlistenByKey.
     */
    function listenOnce(target, type, listener, opt_this) {
        return listen(target, type, listener, opt_this, true);
    }
    exports.listenOnce = listenOnce;
    /**
     * Unregisters event listeners on an event target. Inspired by
     * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html
     *
     * The argument passed to this function is the key returned from
     * {@link module:ol/events~listen} or {@link module:ol/events~listenOnce}.
     *
     * @param {EventsKey} key The key.
     */
    function unlistenByKey(key) {
        if (key && key.target) {
            key.target.removeEventListener(key.type, key.listener);
            obj_js_2.clear(key);
        }
    }
    exports.unlistenByKey = unlistenByKey;
});
define("node_modules/ol/src/events/Target", ["require", "exports", "node_modules/ol/src/Disposable", "node_modules/ol/src/events/Event", "node_modules/ol/src/functions", "node_modules/ol/src/obj"], function (require, exports, Disposable_js_1, Event_js_1, functions_js_1, obj_js_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @typedef {EventTarget|Target} EventTargetLike
     */
    /**
     * @classdesc
     * A simplified implementation of the W3C DOM Level 2 EventTarget interface.
     * See https://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-EventTarget.
     *
     * There are two important simplifications compared to the specification:
     *
     * 1. The handling of `useCapture` in `addEventListener` and
     *    `removeEventListener`. There is no real capture model.
     * 2. The handling of `stopPropagation` and `preventDefault` on `dispatchEvent`.
     *    There is no event target hierarchy. When a listener calls
     *    `stopPropagation` or `preventDefault` on an event object, it means that no
     *    more listeners after this one will be called. Same as when the listener
     *    returns false.
     */
    class Target extends Disposable_js_1.default {
        /**
         * @param {*=} opt_target Default event target for dispatched events.
         */
        constructor(opt_target) {
            super();
            /**
             * @private
             * @type {*}
             */
            this.eventTarget_ = opt_target;
            /**
             * @private
             * @type {Object<string, number>}
             */
            this.pendingRemovals_ = null;
            /**
             * @private
             * @type {Object<string, number>}
             */
            this.dispatching_ = null;
            /**
             * @private
             * @type {Object<string, Array<import("../events.js").Listener>>}
             */
            this.listeners_ = null;
        }
        /**
         * @param {string} type Type.
         * @param {import("../events.js").Listener} listener Listener.
         */
        addEventListener(type, listener) {
            if (!type || !listener) {
                return;
            }
            const listeners = this.listeners_ || (this.listeners_ = {});
            const listenersForType = listeners[type] || (listeners[type] = []);
            if (listenersForType.indexOf(listener) === -1) {
                listenersForType.push(listener);
            }
        }
        /**
         * Dispatches an event and calls all listeners listening for events
         * of this type. The event parameter can either be a string or an
         * Object with a `type` property.
         *
         * @param {import("./Event.js").default|string} event Event object.
         * @return {boolean|undefined} `false` if anyone called preventDefault on the
         *     event object or if any of the listeners returned false.
         * @api
         */
        dispatchEvent(event) {
            /** @type {import("./Event.js").default|Event} */
            const evt = typeof event === 'string' ? new Event_js_1.default(event) : event;
            const type = evt.type;
            if (!evt.target) {
                evt.target = this.eventTarget_ || this;
            }
            const listeners = this.listeners_ && this.listeners_[type];
            let propagate;
            if (listeners) {
                const dispatching = this.dispatching_ || (this.dispatching_ = {});
                const pendingRemovals = this.pendingRemovals_ || (this.pendingRemovals_ = {});
                if (!(type in dispatching)) {
                    dispatching[type] = 0;
                    pendingRemovals[type] = 0;
                }
                ++dispatching[type];
                for (let i = 0, ii = listeners.length; i < ii; ++i) {
                    if ('handleEvent' in listeners[i]) {
                        propagate = /** @type {import("../events.js").ListenerObject} */ (listeners[i]).handleEvent(evt);
                    }
                    else {
                        propagate = /** @type {import("../events.js").ListenerFunction} */ (listeners[i]).call(this, evt);
                    }
                    if (propagate === false || evt.propagationStopped) {
                        propagate = false;
                        break;
                    }
                }
                --dispatching[type];
                if (dispatching[type] === 0) {
                    let pr = pendingRemovals[type];
                    delete pendingRemovals[type];
                    while (pr--) {
                        this.removeEventListener(type, functions_js_1.VOID);
                    }
                    delete dispatching[type];
                }
                return propagate;
            }
        }
        /**
         * Clean up.
         */
        disposeInternal() {
            this.listeners_ && obj_js_3.clear(this.listeners_);
        }
        /**
         * Get the listeners for a specified event type. Listeners are returned in the
         * order that they will be called in.
         *
         * @param {string} type Type.
         * @return {Array<import("../events.js").Listener>|undefined} Listeners.
         */
        getListeners(type) {
            return (this.listeners_ && this.listeners_[type]) || undefined;
        }
        /**
         * @param {string=} opt_type Type. If not provided,
         *     `true` will be returned if this event target has any listeners.
         * @return {boolean} Has listeners.
         */
        hasListener(opt_type) {
            if (!this.listeners_) {
                return false;
            }
            return opt_type
                ? opt_type in this.listeners_
                : Object.keys(this.listeners_).length > 0;
        }
        /**
         * @param {string} type Type.
         * @param {import("../events.js").Listener} listener Listener.
         */
        removeEventListener(type, listener) {
            const listeners = this.listeners_ && this.listeners_[type];
            if (listeners) {
                const index = listeners.indexOf(listener);
                if (index !== -1) {
                    if (this.pendingRemovals_ && type in this.pendingRemovals_) {
                        // make listener a no-op, and remove later in #dispatchEvent()
                        listeners[index] = functions_js_1.VOID;
                        ++this.pendingRemovals_[type];
                    }
                    else {
                        listeners.splice(index, 1);
                        if (listeners.length === 0) {
                            delete this.listeners_[type];
                        }
                    }
                }
            }
        }
    }
    exports.default = Target;
});
/**
 * @module ol/events/EventType
 */
define("node_modules/ol/src/events/EventType", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @enum {string}
     * @const
     */
    exports.default = {
        /**
         * Generic change event. Triggered when the revision counter is increased.
         * @event module:ol/events/Event~BaseEvent#change
         * @api
         */
        CHANGE: 'change',
        /**
         * Generic error event. Triggered when an error occurs.
         * @event module:ol/events/Event~BaseEvent#error
         * @api
         */
        ERROR: 'error',
        BLUR: 'blur',
        CLEAR: 'clear',
        CONTEXTMENU: 'contextmenu',
        CLICK: 'click',
        DBLCLICK: 'dblclick',
        DRAGENTER: 'dragenter',
        DRAGOVER: 'dragover',
        DROP: 'drop',
        FOCUS: 'focus',
        KEYDOWN: 'keydown',
        KEYPRESS: 'keypress',
        LOAD: 'load',
        RESIZE: 'resize',
        TOUCHMOVE: 'touchmove',
        WHEEL: 'wheel',
    };
});
define("node_modules/ol/src/Observable", ["require", "exports", "node_modules/ol/src/events/Target", "node_modules/ol/src/events/EventType", "node_modules/ol/src/events"], function (require, exports, Target_js_1, EventType_js_1, events_js_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.unByKey = void 0;
    /**
     * @classdesc
     * Abstract base class; normally only used for creating subclasses and not
     * instantiated in apps.
     * An event target providing convenient methods for listener registration
     * and unregistration. A generic `change` event is always available through
     * {@link module:ol/Observable~Observable#changed}.
     *
     * @fires import("./events/Event.js").default
     * @api
     */
    class Observable extends Target_js_1.default {
        constructor() {
            super();
            /**
             * @private
             * @type {number}
             */
            this.revision_ = 0;
        }
        /**
         * Increases the revision counter and dispatches a 'change' event.
         * @api
         */
        changed() {
            ++this.revision_;
            this.dispatchEvent(EventType_js_1.default.CHANGE);
        }
        /**
         * Get the version number for this object.  Each time the object is modified,
         * its version number will be incremented.
         * @return {number} Revision.
         * @api
         */
        getRevision() {
            return this.revision_;
        }
        /**
         * Listen for a certain type of event.
         * @param {string|Array<string>} type The event type or array of event types.
         * @param {function(?): ?} listener The listener function.
         * @return {import("./events.js").EventsKey|Array<import("./events.js").EventsKey>} Unique key for the listener. If
         *     called with an array of event types as the first argument, the return
         *     will be an array of keys.
         * @api
         */
        on(type, listener) {
            if (Array.isArray(type)) {
                const len = type.length;
                const keys = new Array(len);
                for (let i = 0; i < len; ++i) {
                    keys[i] = events_js_1.listen(this, type[i], listener);
                }
                return keys;
            }
            else {
                return events_js_1.listen(this, /** @type {string} */ (type), listener);
            }
        }
        /**
         * Listen once for a certain type of event.
         * @param {string|Array<string>} type The event type or array of event types.
         * @param {function(?): ?} listener The listener function.
         * @return {import("./events.js").EventsKey|Array<import("./events.js").EventsKey>} Unique key for the listener. If
         *     called with an array of event types as the first argument, the return
         *     will be an array of keys.
         * @api
         */
        once(type, listener) {
            let key;
            if (Array.isArray(type)) {
                const len = type.length;
                key = new Array(len);
                for (let i = 0; i < len; ++i) {
                    key[i] = events_js_1.listenOnce(this, type[i], listener);
                }
            }
            else {
                key = events_js_1.listenOnce(this, /** @type {string} */ (type), listener);
            }
            /** @type {Object} */ (listener).ol_key = key;
            return key;
        }
        /**
         * Unlisten for a certain type of event.
         * @param {string|Array<string>} type The event type or array of event types.
         * @param {function(?): ?} listener The listener function.
         * @api
         */
        un(type, listener) {
            const key = /** @type {Object} */ (listener).ol_key;
            if (key) {
                unByKey(key);
            }
            else if (Array.isArray(type)) {
                for (let i = 0, ii = type.length; i < ii; ++i) {
                    this.removeEventListener(type[i], listener);
                }
            }
            else {
                this.removeEventListener(type, listener);
            }
        }
    }
    /**
     * Removes an event listener using the key returned by `on()` or `once()`.
     * @param {import("./events.js").EventsKey|Array<import("./events.js").EventsKey>} key The key returned by `on()`
     *     or `once()` (or an array of keys).
     * @api
     */
    function unByKey(key) {
        if (Array.isArray(key)) {
            for (let i = 0, ii = key.length; i < ii; ++i) {
                events_js_1.unlistenByKey(key[i]);
            }
        }
        else {
            events_js_1.unlistenByKey(/** @type {import("./events.js").EventsKey} */ (key));
        }
    }
    exports.unByKey = unByKey;
    exports.default = Observable;
});
define("node_modules/ol/src/Object", ["require", "exports", "node_modules/ol/src/events/Event", "node_modules/ol/src/ObjectEventType", "node_modules/ol/src/Observable", "node_modules/ol/src/obj", "node_modules/ol/src/util"], function (require, exports, Event_js_2, ObjectEventType_js_1, Observable_js_1, obj_js_4, util_js_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getChangeEventType = exports.ObjectEvent = void 0;
    /**
     * @classdesc
     * Events emitted by {@link module:ol/Object~BaseObject} instances are instances of this type.
     */
    class ObjectEvent extends Event_js_2.default {
        /**
         * @param {string} type The event type.
         * @param {string} key The property name.
         * @param {*} oldValue The old value for `key`.
         */
        constructor(type, key, oldValue) {
            super(type);
            /**
             * The name of the property whose value is changing.
             * @type {string}
             * @api
             */
            this.key = key;
            /**
             * The old value. To get the new value use `e.target.get(e.key)` where
             * `e` is the event object.
             * @type {*}
             * @api
             */
            this.oldValue = oldValue;
        }
    }
    exports.ObjectEvent = ObjectEvent;
    /**
     * @classdesc
     * Abstract base class; normally only used for creating subclasses and not
     * instantiated in apps.
     * Most non-trivial classes inherit from this.
     *
     * This extends {@link module:ol/Observable} with observable
     * properties, where each property is observable as well as the object as a
     * whole.
     *
     * Classes that inherit from this have pre-defined properties, to which you can
     * add your owns. The pre-defined properties are listed in this documentation as
     * 'Observable Properties', and have their own accessors; for example,
     * {@link module:ol/Map~Map} has a `target` property, accessed with
     * `getTarget()` and changed with `setTarget()`. Not all properties are however
     * settable. There are also general-purpose accessors `get()` and `set()`. For
     * example, `get('target')` is equivalent to `getTarget()`.
     *
     * The `set` accessors trigger a change event, and you can monitor this by
     * registering a listener. For example, {@link module:ol/View~View} has a
     * `center` property, so `view.on('change:center', function(evt) {...});` would
     * call the function whenever the value of the center property changes. Within
     * the function, `evt.target` would be the view, so `evt.target.getCenter()`
     * would return the new center.
     *
     * You can add your own observable properties with
     * `object.set('prop', 'value')`, and retrieve that with `object.get('prop')`.
     * You can listen for changes on that property value with
     * `object.on('change:prop', listener)`. You can get a list of all
     * properties with {@link module:ol/Object~BaseObject#getProperties}.
     *
     * Note that the observable properties are separate from standard JS properties.
     * You can, for example, give your map object a title with
     * `map.title='New title'` and with `map.set('title', 'Another title')`. The
     * first will be a `hasOwnProperty`; the second will appear in
     * `getProperties()`. Only the second is observable.
     *
     * Properties can be deleted by using the unset method. E.g.
     * object.unset('foo').
     *
     * @fires ObjectEvent
     * @api
     */
    class BaseObject extends Observable_js_1.default {
        /**
         * @param {Object<string, *>=} opt_values An object with key-value pairs.
         */
        constructor(opt_values) {
            super();
            // Call {@link module:ol/util~getUid} to ensure that the order of objects' ids is
            // the same as the order in which they were created.  This also helps to
            // ensure that object properties are always added in the same order, which
            // helps many JavaScript engines generate faster code.
            util_js_2.getUid(this);
            /**
             * @private
             * @type {Object<string, *>}
             */
            this.values_ = null;
            if (opt_values !== undefined) {
                this.setProperties(opt_values);
            }
        }
        /**
         * Gets a value.
         * @param {string} key Key name.
         * @return {*} Value.
         * @api
         */
        get(key) {
            let value;
            if (this.values_ && this.values_.hasOwnProperty(key)) {
                value = this.values_[key];
            }
            return value;
        }
        /**
         * Get a list of object property names.
         * @return {Array<string>} List of property names.
         * @api
         */
        getKeys() {
            return (this.values_ && Object.keys(this.values_)) || [];
        }
        /**
         * Get an object of all property names and values.
         * @return {Object<string, *>} Object.
         * @api
         */
        getProperties() {
            return (this.values_ && obj_js_4.assign({}, this.values_)) || {};
        }
        /**
         * @return {boolean} The object has properties.
         */
        hasProperties() {
            return !!this.values_;
        }
        /**
         * @param {string} key Key name.
         * @param {*} oldValue Old value.
         */
        notify(key, oldValue) {
            let eventType;
            eventType = getChangeEventType(key);
            this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));
            eventType = ObjectEventType_js_1.default.PROPERTYCHANGE;
            this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));
        }
        /**
         * Sets a value.
         * @param {string} key Key name.
         * @param {*} value Value.
         * @param {boolean=} opt_silent Update without triggering an event.
         * @api
         */
        set(key, value, opt_silent) {
            const values = this.values_ || (this.values_ = {});
            if (opt_silent) {
                values[key] = value;
            }
            else {
                const oldValue = values[key];
                values[key] = value;
                if (oldValue !== value) {
                    this.notify(key, oldValue);
                }
            }
        }
        /**
         * Sets a collection of key-value pairs.  Note that this changes any existing
         * properties and adds new ones (it does not remove any existing properties).
         * @param {Object<string, *>} values Values.
         * @param {boolean=} opt_silent Update without triggering an event.
         * @api
         */
        setProperties(values, opt_silent) {
            for (const key in values) {
                this.set(key, values[key], opt_silent);
            }
        }
        /**
         * Unsets a property.
         * @param {string} key Key name.
         * @param {boolean=} opt_silent Unset without triggering an event.
         * @api
         */
        unset(key, opt_silent) {
            if (this.values_ && key in this.values_) {
                const oldValue = this.values_[key];
                delete this.values_[key];
                if (obj_js_4.isEmpty(this.values_)) {
                    this.values_ = null;
                }
                if (!opt_silent) {
                    this.notify(key, oldValue);
                }
            }
        }
    }
    /**
     * @type {Object<string, string>}
     */
    const changeEventTypeCache = {};
    /**
     * @param {string} key Key name.
     * @return {string} Change name.
     */
    function getChangeEventType(key) {
        return changeEventTypeCache.hasOwnProperty(key)
            ? changeEventTypeCache[key]
            : (changeEventTypeCache[key] = 'change:' + key);
    }
    exports.getChangeEventType = getChangeEventType;
    exports.default = BaseObject;
});
/**
 * @module ol/geom/flat/transform
 */
define("node_modules/ol/src/geom/flat/transform", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.translate = exports.scale = exports.rotate = exports.transform2D = void 0;
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @param {import("../../transform.js").Transform} transform Transform.
     * @param {Array<number>=} opt_dest Destination.
     * @return {Array<number>} Transformed coordinates.
     */
    function transform2D(flatCoordinates, offset, end, stride, transform, opt_dest) {
        const dest = opt_dest ? opt_dest : [];
        let i = 0;
        for (let j = offset; j < end; j += stride) {
            const x = flatCoordinates[j];
            const y = flatCoordinates[j + 1];
            dest[i++] = transform[0] * x + transform[2] * y + transform[4];
            dest[i++] = transform[1] * x + transform[3] * y + transform[5];
        }
        if (opt_dest && dest.length != i) {
            dest.length = i;
        }
        return dest;
    }
    exports.transform2D = transform2D;
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @param {number} angle Angle.
     * @param {Array<number>} anchor Rotation anchor point.
     * @param {Array<number>=} opt_dest Destination.
     * @return {Array<number>} Transformed coordinates.
     */
    function rotate(flatCoordinates, offset, end, stride, angle, anchor, opt_dest) {
        const dest = opt_dest ? opt_dest : [];
        const cos = Math.cos(angle);
        const sin = Math.sin(angle);
        const anchorX = anchor[0];
        const anchorY = anchor[1];
        let i = 0;
        for (let j = offset; j < end; j += stride) {
            const deltaX = flatCoordinates[j] - anchorX;
            const deltaY = flatCoordinates[j + 1] - anchorY;
            dest[i++] = anchorX + deltaX * cos - deltaY * sin;
            dest[i++] = anchorY + deltaX * sin + deltaY * cos;
            for (let k = j + 2; k < j + stride; ++k) {
                dest[i++] = flatCoordinates[k];
            }
        }
        if (opt_dest && dest.length != i) {
            dest.length = i;
        }
        return dest;
    }
    exports.rotate = rotate;
    /**
     * Scale the coordinates.
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @param {number} sx Scale factor in the x-direction.
     * @param {number} sy Scale factor in the y-direction.
     * @param {Array<number>} anchor Scale anchor point.
     * @param {Array<number>=} opt_dest Destination.
     * @return {Array<number>} Transformed coordinates.
     */
    function scale(flatCoordinates, offset, end, stride, sx, sy, anchor, opt_dest) {
        const dest = opt_dest ? opt_dest : [];
        const anchorX = anchor[0];
        const anchorY = anchor[1];
        let i = 0;
        for (let j = offset; j < end; j += stride) {
            const deltaX = flatCoordinates[j] - anchorX;
            const deltaY = flatCoordinates[j + 1] - anchorY;
            dest[i++] = anchorX + sx * deltaX;
            dest[i++] = anchorY + sy * deltaY;
            for (let k = j + 2; k < j + stride; ++k) {
                dest[i++] = flatCoordinates[k];
            }
        }
        if (opt_dest && dest.length != i) {
            dest.length = i;
        }
        return dest;
    }
    exports.scale = scale;
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @param {number} deltaX Delta X.
     * @param {number} deltaY Delta Y.
     * @param {Array<number>=} opt_dest Destination.
     * @return {Array<number>} Transformed coordinates.
     */
    function translate(flatCoordinates, offset, end, stride, deltaX, deltaY, opt_dest) {
        const dest = opt_dest ? opt_dest : [];
        let i = 0;
        for (let j = offset; j < end; j += stride) {
            dest[i++] = flatCoordinates[j] + deltaX;
            dest[i++] = flatCoordinates[j + 1] + deltaY;
            for (let k = j + 2; k < j + stride; ++k) {
                dest[i++] = flatCoordinates[k];
            }
        }
        if (opt_dest && dest.length != i) {
            dest.length = i;
        }
        return dest;
    }
    exports.translate = translate;
});
define("node_modules/ol/src/geom/Geometry", ["require", "exports", "node_modules/ol/src/Object", "node_modules/ol/src/proj/Units", "node_modules/ol/src/util", "node_modules/ol/src/transform", "node_modules/ol/src/extent", "node_modules/ol/src/proj", "node_modules/ol/src/functions", "node_modules/ol/src/geom/flat/transform"], function (require, exports, Object_js_1, Units_js_4, util_js_3, transform_js_1, extent_js_2, proj_js_1, functions_js_2, transform_js_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @type {import("../transform.js").Transform}
     */
    const tmpTransform = transform_js_1.create();
    /**
     * @classdesc
     * Abstract base class; normally only used for creating subclasses and not
     * instantiated in apps.
     * Base class for vector geometries.
     *
     * To get notified of changes to the geometry, register a listener for the
     * generic `change` event on your geometry instance.
     *
     * @abstract
     * @api
     */
    class Geometry extends Object_js_1.default {
        constructor() {
            super();
            /**
             * @private
             * @type {import("../extent.js").Extent}
             */
            this.extent_ = extent_js_2.createEmpty();
            /**
             * @private
             * @type {number}
             */
            this.extentRevision_ = -1;
            /**
             * @protected
             * @type {number}
             */
            this.simplifiedGeometryMaxMinSquaredTolerance = 0;
            /**
             * @protected
             * @type {number}
             */
            this.simplifiedGeometryRevision = 0;
            /**
             * Get a transformed and simplified version of the geometry.
             * @abstract
             * @param {number} revision The geometry revision.
             * @param {number} squaredTolerance Squared tolerance.
             * @param {import("../proj.js").TransformFunction} [opt_transform] Optional transform function.
             * @return {Geometry} Simplified geometry.
             */
            this.simplifyTransformedInternal = functions_js_2.memoizeOne(function (revision, squaredTolerance, opt_transform) {
                if (!opt_transform) {
                    return this.getSimplifiedGeometry(squaredTolerance);
                }
                const clone = this.clone();
                clone.applyTransform(opt_transform);
                return clone.getSimplifiedGeometry(squaredTolerance);
            });
        }
        /**
         * Get a transformed and simplified version of the geometry.
         * @abstract
         * @param {number} squaredTolerance Squared tolerance.
         * @param {import("../proj.js").TransformFunction} [opt_transform] Optional transform function.
         * @return {Geometry} Simplified geometry.
         */
        simplifyTransformed(squaredTolerance, opt_transform) {
            return this.simplifyTransformedInternal(this.getRevision(), squaredTolerance, opt_transform);
        }
        /**
         * Make a complete copy of the geometry.
         * @abstract
         * @return {!Geometry} Clone.
         */
        clone() {
            return util_js_3.abstract();
        }
        /**
         * @abstract
         * @param {number} x X.
         * @param {number} y Y.
         * @param {import("../coordinate.js").Coordinate} closestPoint Closest point.
         * @param {number} minSquaredDistance Minimum squared distance.
         * @return {number} Minimum squared distance.
         */
        closestPointXY(x, y, closestPoint, minSquaredDistance) {
            return util_js_3.abstract();
        }
        /**
         * @param {number} x X.
         * @param {number} y Y.
         * @return {boolean} Contains (x, y).
         */
        containsXY(x, y) {
            const coord = this.getClosestPoint([x, y]);
            return coord[0] === x && coord[1] === y;
        }
        /**
         * Return the closest point of the geometry to the passed point as
         * {@link module:ol/coordinate~Coordinate coordinate}.
         * @param {import("../coordinate.js").Coordinate} point Point.
         * @param {import("../coordinate.js").Coordinate=} opt_closestPoint Closest point.
         * @return {import("../coordinate.js").Coordinate} Closest point.
         * @api
         */
        getClosestPoint(point, opt_closestPoint) {
            const closestPoint = opt_closestPoint ? opt_closestPoint : [NaN, NaN];
            this.closestPointXY(point[0], point[1], closestPoint, Infinity);
            return closestPoint;
        }
        /**
         * Returns true if this geometry includes the specified coordinate. If the
         * coordinate is on the boundary of the geometry, returns false.
         * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
         * @return {boolean} Contains coordinate.
         * @api
         */
        intersectsCoordinate(coordinate) {
            return this.containsXY(coordinate[0], coordinate[1]);
        }
        /**
         * @abstract
         * @param {import("../extent.js").Extent} extent Extent.
         * @protected
         * @return {import("../extent.js").Extent} extent Extent.
         */
        computeExtent(extent) {
            return util_js_3.abstract();
        }
        /**
         * Get the extent of the geometry.
         * @param {import("../extent.js").Extent=} opt_extent Extent.
         * @return {import("../extent.js").Extent} extent Extent.
         * @api
         */
        getExtent(opt_extent) {
            if (this.extentRevision_ != this.getRevision()) {
                const extent = this.computeExtent(this.extent_);
                if (isNaN(extent[0]) || isNaN(extent[1])) {
                    extent_js_2.createOrUpdateEmpty(extent);
                }
                this.extentRevision_ = this.getRevision();
            }
            return extent_js_2.returnOrUpdate(this.extent_, opt_extent);
        }
        /**
         * Rotate the geometry around a given coordinate. This modifies the geometry
         * coordinates in place.
         * @abstract
         * @param {number} angle Rotation angle in radians.
         * @param {import("../coordinate.js").Coordinate} anchor The rotation center.
         * @api
         */
        rotate(angle, anchor) {
            util_js_3.abstract();
        }
        /**
         * Scale the geometry (with an optional origin).  This modifies the geometry
         * coordinates in place.
         * @abstract
         * @param {number} sx The scaling factor in the x-direction.
         * @param {number=} opt_sy The scaling factor in the y-direction (defaults to sx).
         * @param {import("../coordinate.js").Coordinate=} opt_anchor The scale origin (defaults to the center
         *     of the geometry extent).
         * @api
         */
        scale(sx, opt_sy, opt_anchor) {
            util_js_3.abstract();
        }
        /**
         * Create a simplified version of this geometry.  For linestrings, this uses
         * the [Douglas Peucker](https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm)
         * algorithm.  For polygons, a quantization-based
         * simplification is used to preserve topology.
         * @param {number} tolerance The tolerance distance for simplification.
         * @return {Geometry} A new, simplified version of the original geometry.
         * @api
         */
        simplify(tolerance) {
            return this.getSimplifiedGeometry(tolerance * tolerance);
        }
        /**
         * Create a simplified version of this geometry using the Douglas Peucker
         * algorithm.
         * See https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm.
         * @abstract
         * @param {number} squaredTolerance Squared tolerance.
         * @return {Geometry} Simplified geometry.
         */
        getSimplifiedGeometry(squaredTolerance) {
            return util_js_3.abstract();
        }
        /**
         * Get the type of this geometry.
         * @abstract
         * @return {import("./GeometryType.js").default} Geometry type.
         */
        getType() {
            return util_js_3.abstract();
        }
        /**
         * Apply a transform function to the coordinates of the geometry.
         * The geometry is modified in place.
         * If you do not want the geometry modified in place, first `clone()` it and
         * then use this function on the clone.
         * @abstract
         * @param {import("../proj.js").TransformFunction} transformFn Transform function.
         * Called with a flat array of geometry coordinates.
         */
        applyTransform(transformFn) {
            util_js_3.abstract();
        }
        /**
         * Test if the geometry and the passed extent intersect.
         * @abstract
         * @param {import("../extent.js").Extent} extent Extent.
         * @return {boolean} `true` if the geometry and the extent intersect.
         */
        intersectsExtent(extent) {
            return util_js_3.abstract();
        }
        /**
         * Translate the geometry.  This modifies the geometry coordinates in place.  If
         * instead you want a new geometry, first `clone()` this geometry.
         * @abstract
         * @param {number} deltaX Delta X.
         * @param {number} deltaY Delta Y.
         * @api
         */
        translate(deltaX, deltaY) {
            util_js_3.abstract();
        }
        /**
         * Transform each coordinate of the geometry from one coordinate reference
         * system to another. The geometry is modified in place.
         * For example, a line will be transformed to a line and a circle to a circle.
         * If you do not want the geometry modified in place, first `clone()` it and
         * then use this function on the clone.
         *
         * @param {import("../proj.js").ProjectionLike} source The current projection.  Can be a
         *     string identifier or a {@link module:ol/proj/Projection~Projection} object.
         * @param {import("../proj.js").ProjectionLike} destination The desired projection.  Can be a
         *     string identifier or a {@link module:ol/proj/Projection~Projection} object.
         * @return {Geometry} This geometry.  Note that original geometry is
         *     modified in place.
         * @api
         */
        transform(source, destination) {
            /** @type {import("../proj/Projection.js").default} */
            const sourceProj = proj_js_1.get(source);
            const transformFn = sourceProj.getUnits() == Units_js_4.default.TILE_PIXELS
                ? function (inCoordinates, outCoordinates, stride) {
                    const pixelExtent = sourceProj.getExtent();
                    const projectedExtent = sourceProj.getWorldExtent();
                    const scale = extent_js_2.getHeight(projectedExtent) / extent_js_2.getHeight(pixelExtent);
                    transform_js_1.compose(tmpTransform, projectedExtent[0], projectedExtent[3], scale, -scale, 0, 0, 0);
                    transform_js_2.transform2D(inCoordinates, 0, inCoordinates.length, stride, tmpTransform, outCoordinates);
                    return proj_js_1.getTransform(sourceProj, destination)(inCoordinates, outCoordinates, stride);
                }
                : proj_js_1.getTransform(sourceProj, destination);
            this.applyTransform(transformFn);
            return this;
        }
    }
    exports.default = Geometry;
});
/**
 * @module ol/geom/GeometryLayout
 */
define("node_modules/ol/src/geom/GeometryLayout", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * The coordinate layout for geometries, indicating whether a 3rd or 4th z ('Z')
     * or measure ('M') coordinate is available. Supported values are `'XY'`,
     * `'XYZ'`, `'XYM'`, `'XYZM'`.
     * @enum {string}
     */
    exports.default = {
        XY: 'XY',
        XYZ: 'XYZ',
        XYM: 'XYM',
        XYZM: 'XYZM',
    };
});
define("node_modules/ol/src/geom/SimpleGeometry", ["require", "exports", "node_modules/ol/src/geom/Geometry", "node_modules/ol/src/geom/GeometryLayout", "node_modules/ol/src/util", "node_modules/ol/src/extent", "node_modules/ol/src/geom/flat/transform"], function (require, exports, Geometry_js_1, GeometryLayout_js_1, util_js_4, extent_js_3, transform_js_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.transformGeom2D = exports.getStrideForLayout = void 0;
    /**
     * @classdesc
     * Abstract base class; only used for creating subclasses; do not instantiate
     * in apps, as cannot be rendered.
     *
     * @abstract
     * @api
     */
    class SimpleGeometry extends Geometry_js_1.default {
        constructor() {
            super();
            /**
             * @protected
             * @type {import("./GeometryLayout.js").default}
             */
            this.layout = GeometryLayout_js_1.default.XY;
            /**
             * @protected
             * @type {number}
             */
            this.stride = 2;
            /**
             * @protected
             * @type {Array<number>}
             */
            this.flatCoordinates = null;
        }
        /**
         * @param {import("../extent.js").Extent} extent Extent.
         * @protected
         * @return {import("../extent.js").Extent} extent Extent.
         */
        computeExtent(extent) {
            return extent_js_3.createOrUpdateFromFlatCoordinates(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, extent);
        }
        /**
         * @abstract
         * @return {Array<*>} Coordinates.
         */
        getCoordinates() {
            return util_js_4.abstract();
        }
        /**
         * Return the first coordinate of the geometry.
         * @return {import("../coordinate.js").Coordinate} First coordinate.
         * @api
         */
        getFirstCoordinate() {
            return this.flatCoordinates.slice(0, this.stride);
        }
        /**
         * @return {Array<number>} Flat coordinates.
         */
        getFlatCoordinates() {
            return this.flatCoordinates;
        }
        /**
         * Return the last coordinate of the geometry.
         * @return {import("../coordinate.js").Coordinate} Last point.
         * @api
         */
        getLastCoordinate() {
            return this.flatCoordinates.slice(this.flatCoordinates.length - this.stride);
        }
        /**
         * Return the {@link module:ol/geom/GeometryLayout layout} of the geometry.
         * @return {import("./GeometryLayout.js").default} Layout.
         * @api
         */
        getLayout() {
            return this.layout;
        }
        /**
         * Create a simplified version of this geometry using the Douglas Peucker algorithm.
         * @param {number} squaredTolerance Squared tolerance.
         * @return {SimpleGeometry} Simplified geometry.
         */
        getSimplifiedGeometry(squaredTolerance) {
            if (this.simplifiedGeometryRevision !== this.getRevision()) {
                this.simplifiedGeometryMaxMinSquaredTolerance = 0;
                this.simplifiedGeometryRevision = this.getRevision();
            }
            // If squaredTolerance is negative or if we know that simplification will not
            // have any effect then just return this.
            if (squaredTolerance < 0 ||
                (this.simplifiedGeometryMaxMinSquaredTolerance !== 0 &&
                    squaredTolerance <= this.simplifiedGeometryMaxMinSquaredTolerance)) {
                return this;
            }
            const simplifiedGeometry = this.getSimplifiedGeometryInternal(squaredTolerance);
            const simplifiedFlatCoordinates = simplifiedGeometry.getFlatCoordinates();
            if (simplifiedFlatCoordinates.length < this.flatCoordinates.length) {
                return simplifiedGeometry;
            }
            else {
                // Simplification did not actually remove any coordinates.  We now know
                // that any calls to getSimplifiedGeometry with a squaredTolerance less
                // than or equal to the current squaredTolerance will also not have any
                // effect.  This allows us to short circuit simplification (saving CPU
                // cycles) and prevents the cache of simplified geometries from filling
                // up with useless identical copies of this geometry (saving memory).
                this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;
                return this;
            }
        }
        /**
         * @param {number} squaredTolerance Squared tolerance.
         * @return {SimpleGeometry} Simplified geometry.
         * @protected
         */
        getSimplifiedGeometryInternal(squaredTolerance) {
            return this;
        }
        /**
         * @return {number} Stride.
         */
        getStride() {
            return this.stride;
        }
        /**
         * @param {import("./GeometryLayout.js").default} layout Layout.
         * @param {Array<number>} flatCoordinates Flat coordinates.
         */
        setFlatCoordinates(layout, flatCoordinates) {
            this.stride = getStrideForLayout(layout);
            this.layout = layout;
            this.flatCoordinates = flatCoordinates;
        }
        /**
         * @abstract
         * @param {!Array<*>} coordinates Coordinates.
         * @param {import("./GeometryLayout.js").default=} opt_layout Layout.
         */
        setCoordinates(coordinates, opt_layout) {
            util_js_4.abstract();
        }
        /**
         * @param {import("./GeometryLayout.js").default|undefined} layout Layout.
         * @param {Array<*>} coordinates Coordinates.
         * @param {number} nesting Nesting.
         * @protected
         */
        setLayout(layout, coordinates, nesting) {
            /** @type {number} */
            let stride;
            if (layout) {
                stride = getStrideForLayout(layout);
            }
            else {
                for (let i = 0; i < nesting; ++i) {
                    if (coordinates.length === 0) {
                        this.layout = GeometryLayout_js_1.default.XY;
                        this.stride = 2;
                        return;
                    }
                    else {
                        coordinates = /** @type {Array} */ (coordinates[0]);
                    }
                }
                stride = coordinates.length;
                layout = getLayoutForStride(stride);
            }
            this.layout = layout;
            this.stride = stride;
        }
        /**
         * Apply a transform function to the coordinates of the geometry.
         * The geometry is modified in place.
         * If you do not want the geometry modified in place, first `clone()` it and
         * then use this function on the clone.
         * @param {import("../proj.js").TransformFunction} transformFn Transform function.
         * Called with a flat array of geometry coordinates.
         * @api
         */
        applyTransform(transformFn) {
            if (this.flatCoordinates) {
                transformFn(this.flatCoordinates, this.flatCoordinates, this.stride);
                this.changed();
            }
        }
        /**
         * Rotate the geometry around a given coordinate. This modifies the geometry
         * coordinates in place.
         * @param {number} angle Rotation angle in radians.
         * @param {import("../coordinate.js").Coordinate} anchor The rotation center.
         * @api
         */
        rotate(angle, anchor) {
            const flatCoordinates = this.getFlatCoordinates();
            if (flatCoordinates) {
                const stride = this.getStride();
                transform_js_3.rotate(flatCoordinates, 0, flatCoordinates.length, stride, angle, anchor, flatCoordinates);
                this.changed();
            }
        }
        /**
         * Scale the geometry (with an optional origin).  This modifies the geometry
         * coordinates in place.
         * @param {number} sx The scaling factor in the x-direction.
         * @param {number=} opt_sy The scaling factor in the y-direction (defaults to sx).
         * @param {import("../coordinate.js").Coordinate=} opt_anchor The scale origin (defaults to the center
         *     of the geometry extent).
         * @api
         */
        scale(sx, opt_sy, opt_anchor) {
            let sy = opt_sy;
            if (sy === undefined) {
                sy = sx;
            }
            let anchor = opt_anchor;
            if (!anchor) {
                anchor = extent_js_3.getCenter(this.getExtent());
            }
            const flatCoordinates = this.getFlatCoordinates();
            if (flatCoordinates) {
                const stride = this.getStride();
                transform_js_3.scale(flatCoordinates, 0, flatCoordinates.length, stride, sx, sy, anchor, flatCoordinates);
                this.changed();
            }
        }
        /**
         * Translate the geometry.  This modifies the geometry coordinates in place.  If
         * instead you want a new geometry, first `clone()` this geometry.
         * @param {number} deltaX Delta X.
         * @param {number} deltaY Delta Y.
         * @api
         */
        translate(deltaX, deltaY) {
            const flatCoordinates = this.getFlatCoordinates();
            if (flatCoordinates) {
                const stride = this.getStride();
                transform_js_3.translate(flatCoordinates, 0, flatCoordinates.length, stride, deltaX, deltaY, flatCoordinates);
                this.changed();
            }
        }
    }
    /**
     * @param {number} stride Stride.
     * @return {import("./GeometryLayout.js").default} layout Layout.
     */
    function getLayoutForStride(stride) {
        let layout;
        if (stride == 2) {
            layout = GeometryLayout_js_1.default.XY;
        }
        else if (stride == 3) {
            layout = GeometryLayout_js_1.default.XYZ;
        }
        else if (stride == 4) {
            layout = GeometryLayout_js_1.default.XYZM;
        }
        return /** @type {import("./GeometryLayout.js").default} */ (layout);
    }
    /**
     * @param {import("./GeometryLayout.js").default} layout Layout.
     * @return {number} Stride.
     */
    function getStrideForLayout(layout) {
        let stride;
        if (layout == GeometryLayout_js_1.default.XY) {
            stride = 2;
        }
        else if (layout == GeometryLayout_js_1.default.XYZ || layout == GeometryLayout_js_1.default.XYM) {
            stride = 3;
        }
        else if (layout == GeometryLayout_js_1.default.XYZM) {
            stride = 4;
        }
        return /** @type {number} */ (stride);
    }
    exports.getStrideForLayout = getStrideForLayout;
    /**
     * @param {SimpleGeometry} simpleGeometry Simple geometry.
     * @param {import("../transform.js").Transform} transform Transform.
     * @param {Array<number>=} opt_dest Destination.
     * @return {Array<number>} Transformed flat coordinates.
     */
    function transformGeom2D(simpleGeometry, transform, opt_dest) {
        const flatCoordinates = simpleGeometry.getFlatCoordinates();
        if (!flatCoordinates) {
            return null;
        }
        else {
            const stride = simpleGeometry.getStride();
            return transform_js_3.transform2D(flatCoordinates, 0, flatCoordinates.length, stride, transform, opt_dest);
        }
    }
    exports.transformGeom2D = transformGeom2D;
    exports.default = SimpleGeometry;
});
define("node_modules/ol/src/geom/GeometryCollection", ["require", "exports", "node_modules/ol/src/events/EventType", "node_modules/ol/src/geom/Geometry", "node_modules/ol/src/geom/GeometryType", "node_modules/ol/src/extent", "node_modules/ol/src/events"], function (require, exports, EventType_js_2, Geometry_js_2, GeometryType_js_1, extent_js_4, events_js_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @classdesc
     * An array of {@link module:ol/geom/Geometry} objects.
     *
     * @api
     */
    class GeometryCollection extends Geometry_js_2.default {
        /**
         * @param {Array<Geometry>=} opt_geometries Geometries.
         */
        constructor(opt_geometries) {
            super();
            /**
             * @private
             * @type {Array<Geometry>}
             */
            this.geometries_ = opt_geometries ? opt_geometries : null;
            /**
             * @type {Array<import("../events.js").EventsKey>}
             */
            this.changeEventsKeys_ = [];
            this.listenGeometriesChange_();
        }
        /**
         * @private
         */
        unlistenGeometriesChange_() {
            this.changeEventsKeys_.forEach(events_js_2.unlistenByKey);
            this.changeEventsKeys_.length = 0;
        }
        /**
         * @private
         */
        listenGeometriesChange_() {
            if (!this.geometries_) {
                return;
            }
            for (let i = 0, ii = this.geometries_.length; i < ii; ++i) {
                this.changeEventsKeys_.push(events_js_2.listen(this.geometries_[i], EventType_js_2.default.CHANGE, this.changed, this));
            }
        }
        /**
         * Make a complete copy of the geometry.
         * @return {!GeometryCollection} Clone.
         * @api
         */
        clone() {
            const geometryCollection = new GeometryCollection(null);
            geometryCollection.setGeometries(this.geometries_);
            return geometryCollection;
        }
        /**
         * @param {number} x X.
         * @param {number} y Y.
         * @param {import("../coordinate.js").Coordinate} closestPoint Closest point.
         * @param {number} minSquaredDistance Minimum squared distance.
         * @return {number} Minimum squared distance.
         */
        closestPointXY(x, y, closestPoint, minSquaredDistance) {
            if (minSquaredDistance < extent_js_4.closestSquaredDistanceXY(this.getExtent(), x, y)) {
                return minSquaredDistance;
            }
            const geometries = this.geometries_;
            for (let i = 0, ii = geometries.length; i < ii; ++i) {
                minSquaredDistance = geometries[i].closestPointXY(x, y, closestPoint, minSquaredDistance);
            }
            return minSquaredDistance;
        }
        /**
         * @param {number} x X.
         * @param {number} y Y.
         * @return {boolean} Contains (x, y).
         */
        containsXY(x, y) {
            const geometries = this.geometries_;
            for (let i = 0, ii = geometries.length; i < ii; ++i) {
                if (geometries[i].containsXY(x, y)) {
                    return true;
                }
            }
            return false;
        }
        /**
         * @param {import("../extent.js").Extent} extent Extent.
         * @protected
         * @return {import("../extent.js").Extent} extent Extent.
         */
        computeExtent(extent) {
            extent_js_4.createOrUpdateEmpty(extent);
            const geometries = this.geometries_;
            for (let i = 0, ii = geometries.length; i < ii; ++i) {
                extent_js_4.extend(extent, geometries[i].getExtent());
            }
            return extent;
        }
        /**
         * Return the geometries that make up this geometry collection.
         * @return {Array<Geometry>} Geometries.
         * @api
         */
        getGeometries() {
            return cloneGeometries(this.geometries_);
        }
        /**
         * @return {Array<Geometry>} Geometries.
         */
        getGeometriesArray() {
            return this.geometries_;
        }
        /**
         * @return {Array<Geometry>} Geometries.
         */
        getGeometriesArrayRecursive() {
            /** @type {Array<Geometry>} */
            let geometriesArray = [];
            const geometries = this.geometries_;
            for (let i = 0, ii = geometries.length; i < ii; ++i) {
                if (geometries[i].getType() === this.getType()) {
                    geometriesArray = geometriesArray.concat(
                    /** @type {GeometryCollection} */ (geometries[i]).getGeometriesArrayRecursive());
                }
                else {
                    geometriesArray.push(geometries[i]);
                }
            }
            return geometriesArray;
        }
        /**
         * Create a simplified version of this geometry using the Douglas Peucker algorithm.
         * @param {number} squaredTolerance Squared tolerance.
         * @return {GeometryCollection} Simplified GeometryCollection.
         */
        getSimplifiedGeometry(squaredTolerance) {
            if (this.simplifiedGeometryRevision !== this.getRevision()) {
                this.simplifiedGeometryMaxMinSquaredTolerance = 0;
                this.simplifiedGeometryRevision = this.getRevision();
            }
            if (squaredTolerance < 0 ||
                (this.simplifiedGeometryMaxMinSquaredTolerance !== 0 &&
                    squaredTolerance < this.simplifiedGeometryMaxMinSquaredTolerance)) {
                return this;
            }
            const simplifiedGeometries = [];
            const geometries = this.geometries_;
            let simplified = false;
            for (let i = 0, ii = geometries.length; i < ii; ++i) {
                const geometry = geometries[i];
                const simplifiedGeometry = geometry.getSimplifiedGeometry(squaredTolerance);
                simplifiedGeometries.push(simplifiedGeometry);
                if (simplifiedGeometry !== geometry) {
                    simplified = true;
                }
            }
            if (simplified) {
                const simplifiedGeometryCollection = new GeometryCollection(null);
                simplifiedGeometryCollection.setGeometriesArray(simplifiedGeometries);
                return simplifiedGeometryCollection;
            }
            else {
                this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;
                return this;
            }
        }
        /**
         * Get the type of this geometry.
         * @return {import("./GeometryType.js").default} Geometry type.
         * @api
         */
        getType() {
            return GeometryType_js_1.default.GEOMETRY_COLLECTION;
        }
        /**
         * Test if the geometry and the passed extent intersect.
         * @param {import("../extent.js").Extent} extent Extent.
         * @return {boolean} `true` if the geometry and the extent intersect.
         * @api
         */
        intersectsExtent(extent) {
            const geometries = this.geometries_;
            for (let i = 0, ii = geometries.length; i < ii; ++i) {
                if (geometries[i].intersectsExtent(extent)) {
                    return true;
                }
            }
            return false;
        }
        /**
         * @return {boolean} Is empty.
         */
        isEmpty() {
            return this.geometries_.length === 0;
        }
        /**
         * Rotate the geometry around a given coordinate. This modifies the geometry
         * coordinates in place.
         * @param {number} angle Rotation angle in radians.
         * @param {import("../coordinate.js").Coordinate} anchor The rotation center.
         * @api
         */
        rotate(angle, anchor) {
            const geometries = this.geometries_;
            for (let i = 0, ii = geometries.length; i < ii; ++i) {
                geometries[i].rotate(angle, anchor);
            }
            this.changed();
        }
        /**
         * Scale the geometry (with an optional origin).  This modifies the geometry
         * coordinates in place.
         * @abstract
         * @param {number} sx The scaling factor in the x-direction.
         * @param {number=} opt_sy The scaling factor in the y-direction (defaults to sx).
         * @param {import("../coordinate.js").Coordinate=} opt_anchor The scale origin (defaults to the center
         *     of the geometry extent).
         * @api
         */
        scale(sx, opt_sy, opt_anchor) {
            let anchor = opt_anchor;
            if (!anchor) {
                anchor = extent_js_4.getCenter(this.getExtent());
            }
            const geometries = this.geometries_;
            for (let i = 0, ii = geometries.length; i < ii; ++i) {
                geometries[i].scale(sx, opt_sy, anchor);
            }
            this.changed();
        }
        /**
         * Set the geometries that make up this geometry collection.
         * @param {Array<Geometry>} geometries Geometries.
         * @api
         */
        setGeometries(geometries) {
            this.setGeometriesArray(cloneGeometries(geometries));
        }
        /**
         * @param {Array<Geometry>} geometries Geometries.
         */
        setGeometriesArray(geometries) {
            this.unlistenGeometriesChange_();
            this.geometries_ = geometries;
            this.listenGeometriesChange_();
            this.changed();
        }
        /**
         * Apply a transform function to the coordinates of the geometry.
         * The geometry is modified in place.
         * If you do not want the geometry modified in place, first `clone()` it and
         * then use this function on the clone.
         * @param {import("../proj.js").TransformFunction} transformFn Transform function.
         * Called with a flat array of geometry coordinates.
         * @api
         */
        applyTransform(transformFn) {
            const geometries = this.geometries_;
            for (let i = 0, ii = geometries.length; i < ii; ++i) {
                geometries[i].applyTransform(transformFn);
            }
            this.changed();
        }
        /**
         * Translate the geometry.  This modifies the geometry coordinates in place.  If
         * instead you want a new geometry, first `clone()` this geometry.
         * @param {number} deltaX Delta X.
         * @param {number} deltaY Delta Y.
         * @api
         */
        translate(deltaX, deltaY) {
            const geometries = this.geometries_;
            for (let i = 0, ii = geometries.length; i < ii; ++i) {
                geometries[i].translate(deltaX, deltaY);
            }
            this.changed();
        }
        /**
         * Clean up.
         */
        disposeInternal() {
            this.unlistenGeometriesChange_();
            super.disposeInternal();
        }
    }
    /**
     * @param {Array<Geometry>} geometries Geometries.
     * @return {Array<Geometry>} Cloned geometries.
     */
    function cloneGeometries(geometries) {
        const clonedGeometries = [];
        for (let i = 0, ii = geometries.length; i < ii; ++i) {
            clonedGeometries.push(geometries[i].clone());
        }
        return clonedGeometries;
    }
    exports.default = GeometryCollection;
});
define("node_modules/ol/src/geom/flat/closest", ["require", "exports", "node_modules/ol/src/math"], function (require, exports, math_js_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.assignClosestMultiArrayPoint = exports.assignClosestArrayPoint = exports.assignClosestPoint = exports.multiArrayMaxSquaredDelta = exports.arrayMaxSquaredDelta = exports.maxSquaredDelta = void 0;
    /**
     * Returns the point on the 2D line segment flatCoordinates[offset1] to
     * flatCoordinates[offset2] that is closest to the point (x, y).  Extra
     * dimensions are linearly interpolated.
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset1 Offset 1.
     * @param {number} offset2 Offset 2.
     * @param {number} stride Stride.
     * @param {number} x X.
     * @param {number} y Y.
     * @param {Array<number>} closestPoint Closest point.
     */
    function assignClosest(flatCoordinates, offset1, offset2, stride, x, y, closestPoint) {
        const x1 = flatCoordinates[offset1];
        const y1 = flatCoordinates[offset1 + 1];
        const dx = flatCoordinates[offset2] - x1;
        const dy = flatCoordinates[offset2 + 1] - y1;
        let offset;
        if (dx === 0 && dy === 0) {
            offset = offset1;
        }
        else {
            const t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);
            if (t > 1) {
                offset = offset2;
            }
            else if (t > 0) {
                for (let i = 0; i < stride; ++i) {
                    closestPoint[i] = math_js_3.lerp(flatCoordinates[offset1 + i], flatCoordinates[offset2 + i], t);
                }
                closestPoint.length = stride;
                return;
            }
            else {
                offset = offset1;
            }
        }
        for (let i = 0; i < stride; ++i) {
            closestPoint[i] = flatCoordinates[offset + i];
        }
        closestPoint.length = stride;
    }
    /**
     * Return the squared of the largest distance between any pair of consecutive
     * coordinates.
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @param {number} max Max squared delta.
     * @return {number} Max squared delta.
     */
    function maxSquaredDelta(flatCoordinates, offset, end, stride, max) {
        let x1 = flatCoordinates[offset];
        let y1 = flatCoordinates[offset + 1];
        for (offset += stride; offset < end; offset += stride) {
            const x2 = flatCoordinates[offset];
            const y2 = flatCoordinates[offset + 1];
            const squaredDelta = math_js_3.squaredDistance(x1, y1, x2, y2);
            if (squaredDelta > max) {
                max = squaredDelta;
            }
            x1 = x2;
            y1 = y2;
        }
        return max;
    }
    exports.maxSquaredDelta = maxSquaredDelta;
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<number>} ends Ends.
     * @param {number} stride Stride.
     * @param {number} max Max squared delta.
     * @return {number} Max squared delta.
     */
    function arrayMaxSquaredDelta(flatCoordinates, offset, ends, stride, max) {
        for (let i = 0, ii = ends.length; i < ii; ++i) {
            const end = ends[i];
            max = maxSquaredDelta(flatCoordinates, offset, end, stride, max);
            offset = end;
        }
        return max;
    }
    exports.arrayMaxSquaredDelta = arrayMaxSquaredDelta;
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<Array<number>>} endss Endss.
     * @param {number} stride Stride.
     * @param {number} max Max squared delta.
     * @return {number} Max squared delta.
     */
    function multiArrayMaxSquaredDelta(flatCoordinates, offset, endss, stride, max) {
        for (let i = 0, ii = endss.length; i < ii; ++i) {
            const ends = endss[i];
            max = arrayMaxSquaredDelta(flatCoordinates, offset, ends, stride, max);
            offset = ends[ends.length - 1];
        }
        return max;
    }
    exports.multiArrayMaxSquaredDelta = multiArrayMaxSquaredDelta;
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @param {number} maxDelta Max delta.
     * @param {boolean} isRing Is ring.
     * @param {number} x X.
     * @param {number} y Y.
     * @param {Array<number>} closestPoint Closest point.
     * @param {number} minSquaredDistance Minimum squared distance.
     * @param {Array<number>=} opt_tmpPoint Temporary point object.
     * @return {number} Minimum squared distance.
     */
    function assignClosestPoint(flatCoordinates, offset, end, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, opt_tmpPoint) {
        if (offset == end) {
            return minSquaredDistance;
        }
        let i, squaredDistance;
        if (maxDelta === 0) {
            // All points are identical, so just test the first point.
            squaredDistance = math_js_3.squaredDistance(x, y, flatCoordinates[offset], flatCoordinates[offset + 1]);
            if (squaredDistance < minSquaredDistance) {
                for (i = 0; i < stride; ++i) {
                    closestPoint[i] = flatCoordinates[offset + i];
                }
                closestPoint.length = stride;
                return squaredDistance;
            }
            else {
                return minSquaredDistance;
            }
        }
        const tmpPoint = opt_tmpPoint ? opt_tmpPoint : [NaN, NaN];
        let index = offset + stride;
        while (index < end) {
            assignClosest(flatCoordinates, index - stride, index, stride, x, y, tmpPoint);
            squaredDistance = math_js_3.squaredDistance(x, y, tmpPoint[0], tmpPoint[1]);
            if (squaredDistance < minSquaredDistance) {
                minSquaredDistance = squaredDistance;
                for (i = 0; i < stride; ++i) {
                    closestPoint[i] = tmpPoint[i];
                }
                closestPoint.length = stride;
                index += stride;
            }
            else {
                // Skip ahead multiple points, because we know that all the skipped
                // points cannot be any closer than the closest point we have found so
                // far.  We know this because we know how close the current point is, how
                // close the closest point we have found so far is, and the maximum
                // distance between consecutive points.  For example, if we're currently
                // at distance 10, the best we've found so far is 3, and that the maximum
                // distance between consecutive points is 2, then we'll need to skip at
                // least (10 - 3) / 2 == 3 (rounded down) points to have any chance of
                // finding a closer point.  We use Math.max(..., 1) to ensure that we
                // always advance at least one point, to avoid an infinite loop.
                index +=
                    stride *
                        Math.max(((Math.sqrt(squaredDistance) - Math.sqrt(minSquaredDistance)) /
                            maxDelta) |
                            0, 1);
            }
        }
        if (isRing) {
            // Check the closing segment.
            assignClosest(flatCoordinates, end - stride, offset, stride, x, y, tmpPoint);
            squaredDistance = math_js_3.squaredDistance(x, y, tmpPoint[0], tmpPoint[1]);
            if (squaredDistance < minSquaredDistance) {
                minSquaredDistance = squaredDistance;
                for (i = 0; i < stride; ++i) {
                    closestPoint[i] = tmpPoint[i];
                }
                closestPoint.length = stride;
            }
        }
        return minSquaredDistance;
    }
    exports.assignClosestPoint = assignClosestPoint;
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<number>} ends Ends.
     * @param {number} stride Stride.
     * @param {number} maxDelta Max delta.
     * @param {boolean} isRing Is ring.
     * @param {number} x X.
     * @param {number} y Y.
     * @param {Array<number>} closestPoint Closest point.
     * @param {number} minSquaredDistance Minimum squared distance.
     * @param {Array<number>=} opt_tmpPoint Temporary point object.
     * @return {number} Minimum squared distance.
     */
    function assignClosestArrayPoint(flatCoordinates, offset, ends, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, opt_tmpPoint) {
        const tmpPoint = opt_tmpPoint ? opt_tmpPoint : [NaN, NaN];
        for (let i = 0, ii = ends.length; i < ii; ++i) {
            const end = ends[i];
            minSquaredDistance = assignClosestPoint(flatCoordinates, offset, end, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, tmpPoint);
            offset = end;
        }
        return minSquaredDistance;
    }
    exports.assignClosestArrayPoint = assignClosestArrayPoint;
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<Array<number>>} endss Endss.
     * @param {number} stride Stride.
     * @param {number} maxDelta Max delta.
     * @param {boolean} isRing Is ring.
     * @param {number} x X.
     * @param {number} y Y.
     * @param {Array<number>} closestPoint Closest point.
     * @param {number} minSquaredDistance Minimum squared distance.
     * @param {Array<number>=} opt_tmpPoint Temporary point object.
     * @return {number} Minimum squared distance.
     */
    function assignClosestMultiArrayPoint(flatCoordinates, offset, endss, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, opt_tmpPoint) {
        const tmpPoint = opt_tmpPoint ? opt_tmpPoint : [NaN, NaN];
        for (let i = 0, ii = endss.length; i < ii; ++i) {
            const ends = endss[i];
            minSquaredDistance = assignClosestArrayPoint(flatCoordinates, offset, ends, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, tmpPoint);
            offset = ends[ends.length - 1];
        }
        return minSquaredDistance;
    }
    exports.assignClosestMultiArrayPoint = assignClosestMultiArrayPoint;
});
/**
 * @module ol/geom/flat/deflate
 */
define("node_modules/ol/src/geom/flat/deflate", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.deflateMultiCoordinatesArray = exports.deflateCoordinatesArray = exports.deflateCoordinates = exports.deflateCoordinate = void 0;
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {import("../../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {number} stride Stride.
     * @return {number} offset Offset.
     */
    function deflateCoordinate(flatCoordinates, offset, coordinate, stride) {
        for (let i = 0, ii = coordinate.length; i < ii; ++i) {
            flatCoordinates[offset++] = coordinate[i];
        }
        return offset;
    }
    exports.deflateCoordinate = deflateCoordinate;
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<import("../../coordinate.js").Coordinate>} coordinates Coordinates.
     * @param {number} stride Stride.
     * @return {number} offset Offset.
     */
    function deflateCoordinates(flatCoordinates, offset, coordinates, stride) {
        for (let i = 0, ii = coordinates.length; i < ii; ++i) {
            const coordinate = coordinates[i];
            for (let j = 0; j < stride; ++j) {
                flatCoordinates[offset++] = coordinate[j];
            }
        }
        return offset;
    }
    exports.deflateCoordinates = deflateCoordinates;
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<Array<import("../../coordinate.js").Coordinate>>} coordinatess Coordinatess.
     * @param {number} stride Stride.
     * @param {Array<number>=} opt_ends Ends.
     * @return {Array<number>} Ends.
     */
    function deflateCoordinatesArray(flatCoordinates, offset, coordinatess, stride, opt_ends) {
        const ends = opt_ends ? opt_ends : [];
        let i = 0;
        for (let j = 0, jj = coordinatess.length; j < jj; ++j) {
            const end = deflateCoordinates(flatCoordinates, offset, coordinatess[j], stride);
            ends[i++] = end;
            offset = end;
        }
        ends.length = i;
        return ends;
    }
    exports.deflateCoordinatesArray = deflateCoordinatesArray;
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<Array<Array<import("../../coordinate.js").Coordinate>>>} coordinatesss Coordinatesss.
     * @param {number} stride Stride.
     * @param {Array<Array<number>>=} opt_endss Endss.
     * @return {Array<Array<number>>} Endss.
     */
    function deflateMultiCoordinatesArray(flatCoordinates, offset, coordinatesss, stride, opt_endss) {
        const endss = opt_endss ? opt_endss : [];
        let i = 0;
        for (let j = 0, jj = coordinatesss.length; j < jj; ++j) {
            const ends = deflateCoordinatesArray(flatCoordinates, offset, coordinatesss[j], stride, endss[i]);
            endss[i++] = ends;
            offset = ends[ends.length - 1];
        }
        endss.length = i;
        return endss;
    }
    exports.deflateMultiCoordinatesArray = deflateMultiCoordinatesArray;
});
/**
 * @module ol/geom/flat/simplify
 */
// Based on simplify-js https://github.com/mourner/simplify-js
// Copyright (c) 2012, Vladimir Agafonkin
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
//    1. Redistributions of source code must retain the above copyright notice,
//       this list of conditions and the following disclaimer.
//
//    2. Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
define("node_modules/ol/src/geom/flat/simplify", ["require", "exports", "node_modules/ol/src/math"], function (require, exports, math_js_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.quantizeMultiArray = exports.quantizeArray = exports.quantize = exports.snap = exports.radialDistance = exports.douglasPeuckerMultiArray = exports.douglasPeuckerArray = exports.douglasPeucker = exports.simplifyLineString = void 0;
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @param {number} squaredTolerance Squared tolerance.
     * @param {boolean} highQuality Highest quality.
     * @param {Array<number>=} opt_simplifiedFlatCoordinates Simplified flat
     *     coordinates.
     * @return {Array<number>} Simplified line string.
     */
    function simplifyLineString(flatCoordinates, offset, end, stride, squaredTolerance, highQuality, opt_simplifiedFlatCoordinates) {
        const simplifiedFlatCoordinates = opt_simplifiedFlatCoordinates !== undefined
            ? opt_simplifiedFlatCoordinates
            : [];
        if (!highQuality) {
            end = radialDistance(flatCoordinates, offset, end, stride, squaredTolerance, simplifiedFlatCoordinates, 0);
            flatCoordinates = simplifiedFlatCoordinates;
            offset = 0;
            stride = 2;
        }
        simplifiedFlatCoordinates.length = douglasPeucker(flatCoordinates, offset, end, stride, squaredTolerance, simplifiedFlatCoordinates, 0);
        return simplifiedFlatCoordinates;
    }
    exports.simplifyLineString = simplifyLineString;
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @param {number} squaredTolerance Squared tolerance.
     * @param {Array<number>} simplifiedFlatCoordinates Simplified flat
     *     coordinates.
     * @param {number} simplifiedOffset Simplified offset.
     * @return {number} Simplified offset.
     */
    function douglasPeucker(flatCoordinates, offset, end, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset) {
        const n = (end - offset) / stride;
        if (n < 3) {
            for (; offset < end; offset += stride) {
                simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset];
                simplifiedFlatCoordinates[simplifiedOffset++] =
                    flatCoordinates[offset + 1];
            }
            return simplifiedOffset;
        }
        /** @type {Array<number>} */
        const markers = new Array(n);
        markers[0] = 1;
        markers[n - 1] = 1;
        /** @type {Array<number>} */
        const stack = [offset, end - stride];
        let index = 0;
        while (stack.length > 0) {
            const last = stack.pop();
            const first = stack.pop();
            let maxSquaredDistance = 0;
            const x1 = flatCoordinates[first];
            const y1 = flatCoordinates[first + 1];
            const x2 = flatCoordinates[last];
            const y2 = flatCoordinates[last + 1];
            for (let i = first + stride; i < last; i += stride) {
                const x = flatCoordinates[i];
                const y = flatCoordinates[i + 1];
                const squaredDistance = math_js_4.squaredSegmentDistance(x, y, x1, y1, x2, y2);
                if (squaredDistance > maxSquaredDistance) {
                    index = i;
                    maxSquaredDistance = squaredDistance;
                }
            }
            if (maxSquaredDistance > squaredTolerance) {
                markers[(index - offset) / stride] = 1;
                if (first + stride < index) {
                    stack.push(first, index);
                }
                if (index + stride < last) {
                    stack.push(index, last);
                }
            }
        }
        for (let i = 0; i < n; ++i) {
            if (markers[i]) {
                simplifiedFlatCoordinates[simplifiedOffset++] =
                    flatCoordinates[offset + i * stride];
                simplifiedFlatCoordinates[simplifiedOffset++] =
                    flatCoordinates[offset + i * stride + 1];
            }
        }
        return simplifiedOffset;
    }
    exports.douglasPeucker = douglasPeucker;
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<number>} ends Ends.
     * @param {number} stride Stride.
     * @param {number} squaredTolerance Squared tolerance.
     * @param {Array<number>} simplifiedFlatCoordinates Simplified flat
     *     coordinates.
     * @param {number} simplifiedOffset Simplified offset.
     * @param {Array<number>} simplifiedEnds Simplified ends.
     * @return {number} Simplified offset.
     */
    function douglasPeuckerArray(flatCoordinates, offset, ends, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEnds) {
        for (let i = 0, ii = ends.length; i < ii; ++i) {
            const end = ends[i];
            simplifiedOffset = douglasPeucker(flatCoordinates, offset, end, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset);
            simplifiedEnds.push(simplifiedOffset);
            offset = end;
        }
        return simplifiedOffset;
    }
    exports.douglasPeuckerArray = douglasPeuckerArray;
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<Array<number>>} endss Endss.
     * @param {number} stride Stride.
     * @param {number} squaredTolerance Squared tolerance.
     * @param {Array<number>} simplifiedFlatCoordinates Simplified flat
     *     coordinates.
     * @param {number} simplifiedOffset Simplified offset.
     * @param {Array<Array<number>>} simplifiedEndss Simplified endss.
     * @return {number} Simplified offset.
     */
    function douglasPeuckerMultiArray(flatCoordinates, offset, endss, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEndss) {
        for (let i = 0, ii = endss.length; i < ii; ++i) {
            const ends = endss[i];
            const simplifiedEnds = [];
            simplifiedOffset = douglasPeuckerArray(flatCoordinates, offset, ends, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEnds);
            simplifiedEndss.push(simplifiedEnds);
            offset = ends[ends.length - 1];
        }
        return simplifiedOffset;
    }
    exports.douglasPeuckerMultiArray = douglasPeuckerMultiArray;
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @param {number} squaredTolerance Squared tolerance.
     * @param {Array<number>} simplifiedFlatCoordinates Simplified flat
     *     coordinates.
     * @param {number} simplifiedOffset Simplified offset.
     * @return {number} Simplified offset.
     */
    function radialDistance(flatCoordinates, offset, end, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset) {
        if (end <= offset + stride) {
            // zero or one point, no simplification possible, so copy and return
            for (; offset < end; offset += stride) {
                simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset];
                simplifiedFlatCoordinates[simplifiedOffset++] =
                    flatCoordinates[offset + 1];
            }
            return simplifiedOffset;
        }
        let x1 = flatCoordinates[offset];
        let y1 = flatCoordinates[offset + 1];
        // copy first point
        simplifiedFlatCoordinates[simplifiedOffset++] = x1;
        simplifiedFlatCoordinates[simplifiedOffset++] = y1;
        let x2 = x1;
        let y2 = y1;
        for (offset += stride; offset < end; offset += stride) {
            x2 = flatCoordinates[offset];
            y2 = flatCoordinates[offset + 1];
            if (math_js_4.squaredDistance(x1, y1, x2, y2) > squaredTolerance) {
                // copy point at offset
                simplifiedFlatCoordinates[simplifiedOffset++] = x2;
                simplifiedFlatCoordinates[simplifiedOffset++] = y2;
                x1 = x2;
                y1 = y2;
            }
        }
        if (x2 != x1 || y2 != y1) {
            // copy last point
            simplifiedFlatCoordinates[simplifiedOffset++] = x2;
            simplifiedFlatCoordinates[simplifiedOffset++] = y2;
        }
        return simplifiedOffset;
    }
    exports.radialDistance = radialDistance;
    /**
     * @param {number} value Value.
     * @param {number} tolerance Tolerance.
     * @return {number} Rounded value.
     */
    function snap(value, tolerance) {
        return tolerance * Math.round(value / tolerance);
    }
    exports.snap = snap;
    /**
     * Simplifies a line string using an algorithm designed by Tim Schaub.
     * Coordinates are snapped to the nearest value in a virtual grid and
     * consecutive duplicate coordinates are discarded.  This effectively preserves
     * topology as the simplification of any subsection of a line string is
     * independent of the rest of the line string.  This means that, for examples,
     * the common edge between two polygons will be simplified to the same line
     * string independently in both polygons.  This implementation uses a single
     * pass over the coordinates and eliminates intermediate collinear points.
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @param {number} tolerance Tolerance.
     * @param {Array<number>} simplifiedFlatCoordinates Simplified flat
     *     coordinates.
     * @param {number} simplifiedOffset Simplified offset.
     * @return {number} Simplified offset.
     */
    function quantize(flatCoordinates, offset, end, stride, tolerance, simplifiedFlatCoordinates, simplifiedOffset) {
        // do nothing if the line is empty
        if (offset == end) {
            return simplifiedOffset;
        }
        // snap the first coordinate (P1)
        let x1 = snap(flatCoordinates[offset], tolerance);
        let y1 = snap(flatCoordinates[offset + 1], tolerance);
        offset += stride;
        // add the first coordinate to the output
        simplifiedFlatCoordinates[simplifiedOffset++] = x1;
        simplifiedFlatCoordinates[simplifiedOffset++] = y1;
        // find the next coordinate that does not snap to the same value as the first
        // coordinate (P2)
        let x2, y2;
        do {
            x2 = snap(flatCoordinates[offset], tolerance);
            y2 = snap(flatCoordinates[offset + 1], tolerance);
            offset += stride;
            if (offset == end) {
                // all coordinates snap to the same value, the line collapses to a point
                // push the last snapped value anyway to ensure that the output contains
                // at least two points
                // FIXME should we really return at least two points anyway?
                simplifiedFlatCoordinates[simplifiedOffset++] = x2;
                simplifiedFlatCoordinates[simplifiedOffset++] = y2;
                return simplifiedOffset;
            }
        } while (x2 == x1 && y2 == y1);
        while (offset < end) {
            // snap the next coordinate (P3)
            const x3 = snap(flatCoordinates[offset], tolerance);
            const y3 = snap(flatCoordinates[offset + 1], tolerance);
            offset += stride;
            // skip P3 if it is equal to P2
            if (x3 == x2 && y3 == y2) {
                continue;
            }
            // calculate the delta between P1 and P2
            const dx1 = x2 - x1;
            const dy1 = y2 - y1;
            // calculate the delta between P3 and P1
            const dx2 = x3 - x1;
            const dy2 = y3 - y1;
            // if P1, P2, and P3 are colinear and P3 is further from P1 than P2 is from
            // P1 in the same direction then P2 is on the straight line between P1 and
            // P3
            if (dx1 * dy2 == dy1 * dx2 &&
                ((dx1 < 0 && dx2 < dx1) || dx1 == dx2 || (dx1 > 0 && dx2 > dx1)) &&
                ((dy1 < 0 && dy2 < dy1) || dy1 == dy2 || (dy1 > 0 && dy2 > dy1))) {
                // discard P2 and set P2 = P3
                x2 = x3;
                y2 = y3;
                continue;
            }
            // either P1, P2, and P3 are not colinear, or they are colinear but P3 is
            // between P3 and P1 or on the opposite half of the line to P2.  add P2,
            // and continue with P1 = P2 and P2 = P3
            simplifiedFlatCoordinates[simplifiedOffset++] = x2;
            simplifiedFlatCoordinates[simplifiedOffset++] = y2;
            x1 = x2;
            y1 = y2;
            x2 = x3;
            y2 = y3;
        }
        // add the last point (P2)
        simplifiedFlatCoordinates[simplifiedOffset++] = x2;
        simplifiedFlatCoordinates[simplifiedOffset++] = y2;
        return simplifiedOffset;
    }
    exports.quantize = quantize;
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<number>} ends Ends.
     * @param {number} stride Stride.
     * @param {number} tolerance Tolerance.
     * @param {Array<number>} simplifiedFlatCoordinates Simplified flat
     *     coordinates.
     * @param {number} simplifiedOffset Simplified offset.
     * @param {Array<number>} simplifiedEnds Simplified ends.
     * @return {number} Simplified offset.
     */
    function quantizeArray(flatCoordinates, offset, ends, stride, tolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEnds) {
        for (let i = 0, ii = ends.length; i < ii; ++i) {
            const end = ends[i];
            simplifiedOffset = quantize(flatCoordinates, offset, end, stride, tolerance, simplifiedFlatCoordinates, simplifiedOffset);
            simplifiedEnds.push(simplifiedOffset);
            offset = end;
        }
        return simplifiedOffset;
    }
    exports.quantizeArray = quantizeArray;
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<Array<number>>} endss Endss.
     * @param {number} stride Stride.
     * @param {number} tolerance Tolerance.
     * @param {Array<number>} simplifiedFlatCoordinates Simplified flat
     *     coordinates.
     * @param {number} simplifiedOffset Simplified offset.
     * @param {Array<Array<number>>} simplifiedEndss Simplified endss.
     * @return {number} Simplified offset.
     */
    function quantizeMultiArray(flatCoordinates, offset, endss, stride, tolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEndss) {
        for (let i = 0, ii = endss.length; i < ii; ++i) {
            const ends = endss[i];
            const simplifiedEnds = [];
            simplifiedOffset = quantizeArray(flatCoordinates, offset, ends, stride, tolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEnds);
            simplifiedEndss.push(simplifiedEnds);
            offset = ends[ends.length - 1];
        }
        return simplifiedOffset;
    }
    exports.quantizeMultiArray = quantizeMultiArray;
});
/**
 * @module ol/geom/flat/inflate
 */
define("node_modules/ol/src/geom/flat/inflate", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.inflateMultiCoordinatesArray = exports.inflateCoordinatesArray = exports.inflateCoordinates = void 0;
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @param {Array<import("../../coordinate.js").Coordinate>=} opt_coordinates Coordinates.
     * @return {Array<import("../../coordinate.js").Coordinate>} Coordinates.
     */
    function inflateCoordinates(flatCoordinates, offset, end, stride, opt_coordinates) {
        const coordinates = opt_coordinates !== undefined ? opt_coordinates : [];
        let i = 0;
        for (let j = offset; j < end; j += stride) {
            coordinates[i++] = flatCoordinates.slice(j, j + stride);
        }
        coordinates.length = i;
        return coordinates;
    }
    exports.inflateCoordinates = inflateCoordinates;
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<number>} ends Ends.
     * @param {number} stride Stride.
     * @param {Array<Array<import("../../coordinate.js").Coordinate>>=} opt_coordinatess Coordinatess.
     * @return {Array<Array<import("../../coordinate.js").Coordinate>>} Coordinatess.
     */
    function inflateCoordinatesArray(flatCoordinates, offset, ends, stride, opt_coordinatess) {
        const coordinatess = opt_coordinatess !== undefined ? opt_coordinatess : [];
        let i = 0;
        for (let j = 0, jj = ends.length; j < jj; ++j) {
            const end = ends[j];
            coordinatess[i++] = inflateCoordinates(flatCoordinates, offset, end, stride, coordinatess[i]);
            offset = end;
        }
        coordinatess.length = i;
        return coordinatess;
    }
    exports.inflateCoordinatesArray = inflateCoordinatesArray;
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<Array<number>>} endss Endss.
     * @param {number} stride Stride.
     * @param {Array<Array<Array<import("../../coordinate.js").Coordinate>>>=} opt_coordinatesss
     *     Coordinatesss.
     * @return {Array<Array<Array<import("../../coordinate.js").Coordinate>>>} Coordinatesss.
     */
    function inflateMultiCoordinatesArray(flatCoordinates, offset, endss, stride, opt_coordinatesss) {
        const coordinatesss = opt_coordinatesss !== undefined ? opt_coordinatesss : [];
        let i = 0;
        for (let j = 0, jj = endss.length; j < jj; ++j) {
            const ends = endss[j];
            coordinatesss[i++] = inflateCoordinatesArray(flatCoordinates, offset, ends, stride, coordinatesss[i]);
            offset = ends[ends.length - 1];
        }
        coordinatesss.length = i;
        return coordinatesss;
    }
    exports.inflateMultiCoordinatesArray = inflateMultiCoordinatesArray;
});
/**
 * @module ol/geom/flat/area
 */
define("node_modules/ol/src/geom/flat/area", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.linearRingss = exports.linearRings = exports.linearRing = void 0;
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @return {number} Area.
     */
    function linearRing(flatCoordinates, offset, end, stride) {
        let twiceArea = 0;
        let x1 = flatCoordinates[end - stride];
        let y1 = flatCoordinates[end - stride + 1];
        for (; offset < end; offset += stride) {
            const x2 = flatCoordinates[offset];
            const y2 = flatCoordinates[offset + 1];
            twiceArea += y1 * x2 - x1 * y2;
            x1 = x2;
            y1 = y2;
        }
        return twiceArea / 2;
    }
    exports.linearRing = linearRing;
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<number>} ends Ends.
     * @param {number} stride Stride.
     * @return {number} Area.
     */
    function linearRings(flatCoordinates, offset, ends, stride) {
        let area = 0;
        for (let i = 0, ii = ends.length; i < ii; ++i) {
            const end = ends[i];
            area += linearRing(flatCoordinates, offset, end, stride);
            offset = end;
        }
        return area;
    }
    exports.linearRings = linearRings;
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<Array<number>>} endss Endss.
     * @param {number} stride Stride.
     * @return {number} Area.
     */
    function linearRingss(flatCoordinates, offset, endss, stride) {
        let area = 0;
        for (let i = 0, ii = endss.length; i < ii; ++i) {
            const ends = endss[i];
            area += linearRings(flatCoordinates, offset, ends, stride);
            offset = ends[ends.length - 1];
        }
        return area;
    }
    exports.linearRingss = linearRingss;
});
define("node_modules/ol/src/geom/LinearRing", ["require", "exports", "node_modules/ol/src/geom/GeometryLayout", "node_modules/ol/src/geom/GeometryType", "node_modules/ol/src/geom/SimpleGeometry", "node_modules/ol/src/geom/flat/closest", "node_modules/ol/src/extent", "node_modules/ol/src/geom/flat/deflate", "node_modules/ol/src/geom/flat/simplify", "node_modules/ol/src/geom/flat/inflate", "node_modules/ol/src/geom/flat/area"], function (require, exports, GeometryLayout_js_2, GeometryType_js_2, SimpleGeometry_js_1, closest_js_1, extent_js_5, deflate_js_1, simplify_js_1, inflate_js_1, area_js_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @classdesc
     * Linear ring geometry. Only used as part of polygon; cannot be rendered
     * on its own.
     *
     * @api
     */
    class LinearRing extends SimpleGeometry_js_1.default {
        /**
         * @param {Array<import("../coordinate.js").Coordinate>|Array<number>} coordinates Coordinates.
         *     For internal use, flat coordinates in combination with `opt_layout` are also accepted.
         * @param {import("./GeometryLayout.js").default=} opt_layout Layout.
         */
        constructor(coordinates, opt_layout) {
            super();
            /**
             * @private
             * @type {number}
             */
            this.maxDelta_ = -1;
            /**
             * @private
             * @type {number}
             */
            this.maxDeltaRevision_ = -1;
            if (opt_layout !== undefined && !Array.isArray(coordinates[0])) {
                this.setFlatCoordinates(opt_layout, 
                /** @type {Array<number>} */ (coordinates));
            }
            else {
                this.setCoordinates(
                /** @type {Array<import("../coordinate.js").Coordinate>} */ (coordinates), opt_layout);
            }
        }
        /**
         * Make a complete copy of the geometry.
         * @return {!LinearRing} Clone.
         * @api
         */
        clone() {
            return new LinearRing(this.flatCoordinates.slice(), this.layout);
        }
        /**
         * @param {number} x X.
         * @param {number} y Y.
         * @param {import("../coordinate.js").Coordinate} closestPoint Closest point.
         * @param {number} minSquaredDistance Minimum squared distance.
         * @return {number} Minimum squared distance.
         */
        closestPointXY(x, y, closestPoint, minSquaredDistance) {
            if (minSquaredDistance < extent_js_5.closestSquaredDistanceXY(this.getExtent(), x, y)) {
                return minSquaredDistance;
            }
            if (this.maxDeltaRevision_ != this.getRevision()) {
                this.maxDelta_ = Math.sqrt(closest_js_1.maxSquaredDelta(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, 0));
                this.maxDeltaRevision_ = this.getRevision();
            }
            return closest_js_1.assignClosestPoint(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);
        }
        /**
         * Return the area of the linear ring on projected plane.
         * @return {number} Area (on projected plane).
         * @api
         */
        getArea() {
            return area_js_1.linearRing(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);
        }
        /**
         * Return the coordinates of the linear ring.
         * @return {Array<import("../coordinate.js").Coordinate>} Coordinates.
         * @api
         */
        getCoordinates() {
            return inflate_js_1.inflateCoordinates(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);
        }
        /**
         * @param {number} squaredTolerance Squared tolerance.
         * @return {LinearRing} Simplified LinearRing.
         * @protected
         */
        getSimplifiedGeometryInternal(squaredTolerance) {
            const simplifiedFlatCoordinates = [];
            simplifiedFlatCoordinates.length = simplify_js_1.douglasPeucker(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, squaredTolerance, simplifiedFlatCoordinates, 0);
            return new LinearRing(simplifiedFlatCoordinates, GeometryLayout_js_2.default.XY);
        }
        /**
         * Get the type of this geometry.
         * @return {import("./GeometryType.js").default} Geometry type.
         * @api
         */
        getType() {
            return GeometryType_js_2.default.LINEAR_RING;
        }
        /**
         * Test if the geometry and the passed extent intersect.
         * @param {import("../extent.js").Extent} extent Extent.
         * @return {boolean} `true` if the geometry and the extent intersect.
         * @api
         */
        intersectsExtent(extent) {
            return false;
        }
        /**
         * Set the coordinates of the linear ring.
         * @param {!Array<import("../coordinate.js").Coordinate>} coordinates Coordinates.
         * @param {import("./GeometryLayout.js").default=} opt_layout Layout.
         * @api
         */
        setCoordinates(coordinates, opt_layout) {
            this.setLayout(opt_layout, coordinates, 1);
            if (!this.flatCoordinates) {
                this.flatCoordinates = [];
            }
            this.flatCoordinates.length = deflate_js_1.deflateCoordinates(this.flatCoordinates, 0, coordinates, this.stride);
            this.changed();
        }
    }
    exports.default = LinearRing;
});
define("node_modules/ol/src/geom/Point", ["require", "exports", "node_modules/ol/src/geom/GeometryType", "node_modules/ol/src/geom/SimpleGeometry", "node_modules/ol/src/extent", "node_modules/ol/src/geom/flat/deflate", "node_modules/ol/src/math"], function (require, exports, GeometryType_js_3, SimpleGeometry_js_2, extent_js_6, deflate_js_2, math_js_5) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @classdesc
     * Point geometry.
     *
     * @api
     */
    class Point extends SimpleGeometry_js_2.default {
        /**
         * @param {import("../coordinate.js").Coordinate} coordinates Coordinates.
         * @param {import("./GeometryLayout.js").default=} opt_layout Layout.
         */
        constructor(coordinates, opt_layout) {
            super();
            this.setCoordinates(coordinates, opt_layout);
        }
        /**
         * Make a complete copy of the geometry.
         * @return {!Point} Clone.
         * @api
         */
        clone() {
            const point = new Point(this.flatCoordinates.slice(), this.layout);
            return point;
        }
        /**
         * @param {number} x X.
         * @param {number} y Y.
         * @param {import("../coordinate.js").Coordinate} closestPoint Closest point.
         * @param {number} minSquaredDistance Minimum squared distance.
         * @return {number} Minimum squared distance.
         */
        closestPointXY(x, y, closestPoint, minSquaredDistance) {
            const flatCoordinates = this.flatCoordinates;
            const squaredDistance = math_js_5.squaredDistance(x, y, flatCoordinates[0], flatCoordinates[1]);
            if (squaredDistance < minSquaredDistance) {
                const stride = this.stride;
                for (let i = 0; i < stride; ++i) {
                    closestPoint[i] = flatCoordinates[i];
                }
                closestPoint.length = stride;
                return squaredDistance;
            }
            else {
                return minSquaredDistance;
            }
        }
        /**
         * Return the coordinate of the point.
         * @return {import("../coordinate.js").Coordinate} Coordinates.
         * @api
         */
        getCoordinates() {
            return !this.flatCoordinates ? [] : this.flatCoordinates.slice();
        }
        /**
         * @param {import("../extent.js").Extent} extent Extent.
         * @protected
         * @return {import("../extent.js").Extent} extent Extent.
         */
        computeExtent(extent) {
            return extent_js_6.createOrUpdateFromCoordinate(this.flatCoordinates, extent);
        }
        /**
         * Get the type of this geometry.
         * @return {import("./GeometryType.js").default} Geometry type.
         * @api
         */
        getType() {
            return GeometryType_js_3.default.POINT;
        }
        /**
         * Test if the geometry and the passed extent intersect.
         * @param {import("../extent.js").Extent} extent Extent.
         * @return {boolean} `true` if the geometry and the extent intersect.
         * @api
         */
        intersectsExtent(extent) {
            return extent_js_6.containsXY(extent, this.flatCoordinates[0], this.flatCoordinates[1]);
        }
        /**
         * @param {!Array<*>} coordinates Coordinates.
         * @param {import("./GeometryLayout.js").default=} opt_layout Layout.
         * @api
         */
        setCoordinates(coordinates, opt_layout) {
            this.setLayout(opt_layout, coordinates, 0);
            if (!this.flatCoordinates) {
                this.flatCoordinates = [];
            }
            this.flatCoordinates.length = deflate_js_2.deflateCoordinate(this.flatCoordinates, 0, coordinates, this.stride);
            this.changed();
        }
    }
    exports.default = Point;
});
define("node_modules/ol/src/geom/flat/contains", ["require", "exports", "node_modules/ol/src/extent"], function (require, exports, extent_js_7) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.linearRingssContainsXY = exports.linearRingsContainsXY = exports.linearRingContainsXY = exports.linearRingContainsExtent = void 0;
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @param {import("../../extent.js").Extent} extent Extent.
     * @return {boolean} Contains extent.
     */
    function linearRingContainsExtent(flatCoordinates, offset, end, stride, extent) {
        const outside = extent_js_7.forEachCorner(extent, 
        /**
         * @param {import("../../coordinate.js").Coordinate} coordinate Coordinate.
         * @return {boolean} Contains (x, y).
         */
        function (coordinate) {
            return !linearRingContainsXY(flatCoordinates, offset, end, stride, coordinate[0], coordinate[1]);
        });
        return !outside;
    }
    exports.linearRingContainsExtent = linearRingContainsExtent;
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @param {number} x X.
     * @param {number} y Y.
     * @return {boolean} Contains (x, y).
     */
    function linearRingContainsXY(flatCoordinates, offset, end, stride, x, y) {
        // http://geomalgorithms.com/a03-_inclusion.html
        // Copyright 2000 softSurfer, 2012 Dan Sunday
        // This code may be freely used and modified for any purpose
        // providing that this copyright notice is included with it.
        // SoftSurfer makes no warranty for this code, and cannot be held
        // liable for any real or imagined damage resulting from its use.
        // Users of this code must verify correctness for their application.
        let wn = 0;
        let x1 = flatCoordinates[end - stride];
        let y1 = flatCoordinates[end - stride + 1];
        for (; offset < end; offset += stride) {
            const x2 = flatCoordinates[offset];
            const y2 = flatCoordinates[offset + 1];
            if (y1 <= y) {
                if (y2 > y && (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) > 0) {
                    wn++;
                }
            }
            else if (y2 <= y && (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) < 0) {
                wn--;
            }
            x1 = x2;
            y1 = y2;
        }
        return wn !== 0;
    }
    exports.linearRingContainsXY = linearRingContainsXY;
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<number>} ends Ends.
     * @param {number} stride Stride.
     * @param {number} x X.
     * @param {number} y Y.
     * @return {boolean} Contains (x, y).
     */
    function linearRingsContainsXY(flatCoordinates, offset, ends, stride, x, y) {
        if (ends.length === 0) {
            return false;
        }
        if (!linearRingContainsXY(flatCoordinates, offset, ends[0], stride, x, y)) {
            return false;
        }
        for (let i = 1, ii = ends.length; i < ii; ++i) {
            if (linearRingContainsXY(flatCoordinates, ends[i - 1], ends[i], stride, x, y)) {
                return false;
            }
        }
        return true;
    }
    exports.linearRingsContainsXY = linearRingsContainsXY;
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<Array<number>>} endss Endss.
     * @param {number} stride Stride.
     * @param {number} x X.
     * @param {number} y Y.
     * @return {boolean} Contains (x, y).
     */
    function linearRingssContainsXY(flatCoordinates, offset, endss, stride, x, y) {
        if (endss.length === 0) {
            return false;
        }
        for (let i = 0, ii = endss.length; i < ii; ++i) {
            const ends = endss[i];
            if (linearRingsContainsXY(flatCoordinates, offset, ends, stride, x, y)) {
                return true;
            }
            offset = ends[ends.length - 1];
        }
        return false;
    }
    exports.linearRingssContainsXY = linearRingssContainsXY;
});
define("node_modules/ol/src/geom/flat/interiorpoint", ["require", "exports", "node_modules/ol/src/geom/flat/contains", "node_modules/ol/src/array"], function (require, exports, contains_js_1, array_js_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getInteriorPointsOfMultiArray = exports.getInteriorPointOfArray = void 0;
    /**
     * Calculates a point that is likely to lie in the interior of the linear rings.
     * Inspired by JTS's com.vividsolutions.jts.geom.Geometry#getInteriorPoint.
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<number>} ends Ends.
     * @param {number} stride Stride.
     * @param {Array<number>} flatCenters Flat centers.
     * @param {number} flatCentersOffset Flat center offset.
     * @param {Array<number>=} opt_dest Destination.
     * @return {Array<number>} Destination point as XYM coordinate, where M is the
     * length of the horizontal intersection that the point belongs to.
     */
    function getInteriorPointOfArray(flatCoordinates, offset, ends, stride, flatCenters, flatCentersOffset, opt_dest) {
        let i, ii, x, x1, x2, y1, y2;
        const y = flatCenters[flatCentersOffset + 1];
        /** @type {Array<number>} */
        const intersections = [];
        // Calculate intersections with the horizontal line
        for (let r = 0, rr = ends.length; r < rr; ++r) {
            const end = ends[r];
            x1 = flatCoordinates[end - stride];
            y1 = flatCoordinates[end - stride + 1];
            for (i = offset; i < end; i += stride) {
                x2 = flatCoordinates[i];
                y2 = flatCoordinates[i + 1];
                if ((y <= y1 && y2 <= y) || (y1 <= y && y <= y2)) {
                    x = ((y - y1) / (y2 - y1)) * (x2 - x1) + x1;
                    intersections.push(x);
                }
                x1 = x2;
                y1 = y2;
            }
        }
        // Find the longest segment of the horizontal line that has its center point
        // inside the linear ring.
        let pointX = NaN;
        let maxSegmentLength = -Infinity;
        intersections.sort(array_js_3.numberSafeCompareFunction);
        x1 = intersections[0];
        for (i = 1, ii = intersections.length; i < ii; ++i) {
            x2 = intersections[i];
            const segmentLength = Math.abs(x2 - x1);
            if (segmentLength > maxSegmentLength) {
                x = (x1 + x2) / 2;
                if (contains_js_1.linearRingsContainsXY(flatCoordinates, offset, ends, stride, x, y)) {
                    pointX = x;
                    maxSegmentLength = segmentLength;
                }
            }
            x1 = x2;
        }
        if (isNaN(pointX)) {
            // There is no horizontal line that has its center point inside the linear
            // ring.  Use the center of the the linear ring's extent.
            pointX = flatCenters[flatCentersOffset];
        }
        if (opt_dest) {
            opt_dest.push(pointX, y, maxSegmentLength);
            return opt_dest;
        }
        else {
            return [pointX, y, maxSegmentLength];
        }
    }
    exports.getInteriorPointOfArray = getInteriorPointOfArray;
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<Array<number>>} endss Endss.
     * @param {number} stride Stride.
     * @param {Array<number>} flatCenters Flat centers.
     * @return {Array<number>} Interior points as XYM coordinates, where M is the
     * length of the horizontal intersection that the point belongs to.
     */
    function getInteriorPointsOfMultiArray(flatCoordinates, offset, endss, stride, flatCenters) {
        let interiorPoints = [];
        for (let i = 0, ii = endss.length; i < ii; ++i) {
            const ends = endss[i];
            interiorPoints = getInteriorPointOfArray(flatCoordinates, offset, ends, stride, flatCenters, 2 * i, interiorPoints);
            offset = ends[ends.length - 1];
        }
        return interiorPoints;
    }
    exports.getInteriorPointsOfMultiArray = getInteriorPointsOfMultiArray;
});
/**
 * @module ol/geom/flat/segments
 */
define("node_modules/ol/src/geom/flat/segments", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.forEach = void 0;
    /**
     * This function calls `callback` for each segment of the flat coordinates
     * array. If the callback returns a truthy value the function returns that
     * value immediately. Otherwise the function returns `false`.
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @param {function(import("../../coordinate.js").Coordinate, import("../../coordinate.js").Coordinate): T} callback Function
     *     called for each segment.
     * @return {T|boolean} Value.
     * @template T
     */
    function forEach(flatCoordinates, offset, end, stride, callback) {
        const point1 = [flatCoordinates[offset], flatCoordinates[offset + 1]];
        const point2 = [];
        let ret;
        for (; offset + stride < end; offset += stride) {
            point2[0] = flatCoordinates[offset + stride];
            point2[1] = flatCoordinates[offset + stride + 1];
            ret = callback(point1, point2);
            if (ret) {
                return ret;
            }
            point1[0] = point2[0];
            point1[1] = point2[1];
        }
        return false;
    }
    exports.forEach = forEach;
});
define("node_modules/ol/src/geom/flat/intersectsextent", ["require", "exports", "node_modules/ol/src/extent", "node_modules/ol/src/geom/flat/segments", "node_modules/ol/src/geom/flat/contains"], function (require, exports, extent_js_8, segments_js_1, contains_js_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.intersectsLinearRingMultiArray = exports.intersectsLinearRingArray = exports.intersectsLinearRing = exports.intersectsLineStringArray = exports.intersectsLineString = void 0;
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @param {import("../../extent.js").Extent} extent Extent.
     * @return {boolean} True if the geometry and the extent intersect.
     */
    function intersectsLineString(flatCoordinates, offset, end, stride, extent) {
        const coordinatesExtent = extent_js_8.extendFlatCoordinates(extent_js_8.createEmpty(), flatCoordinates, offset, end, stride);
        if (!extent_js_8.intersects(extent, coordinatesExtent)) {
            return false;
        }
        if (extent_js_8.containsExtent(extent, coordinatesExtent)) {
            return true;
        }
        if (coordinatesExtent[0] >= extent[0] && coordinatesExtent[2] <= extent[2]) {
            return true;
        }
        if (coordinatesExtent[1] >= extent[1] && coordinatesExtent[3] <= extent[3]) {
            return true;
        }
        return segments_js_1.forEach(flatCoordinates, offset, end, stride, 
        /**
         * @param {import("../../coordinate.js").Coordinate} point1 Start point.
         * @param {import("../../coordinate.js").Coordinate} point2 End point.
         * @return {boolean} `true` if the segment and the extent intersect,
         *     `false` otherwise.
         */
        function (point1, point2) {
            return extent_js_8.intersectsSegment(extent, point1, point2);
        });
    }
    exports.intersectsLineString = intersectsLineString;
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<number>} ends Ends.
     * @param {number} stride Stride.
     * @param {import("../../extent.js").Extent} extent Extent.
     * @return {boolean} True if the geometry and the extent intersect.
     */
    function intersectsLineStringArray(flatCoordinates, offset, ends, stride, extent) {
        for (let i = 0, ii = ends.length; i < ii; ++i) {
            if (intersectsLineString(flatCoordinates, offset, ends[i], stride, extent)) {
                return true;
            }
            offset = ends[i];
        }
        return false;
    }
    exports.intersectsLineStringArray = intersectsLineStringArray;
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @param {import("../../extent.js").Extent} extent Extent.
     * @return {boolean} True if the geometry and the extent intersect.
     */
    function intersectsLinearRing(flatCoordinates, offset, end, stride, extent) {
        if (intersectsLineString(flatCoordinates, offset, end, stride, extent)) {
            return true;
        }
        if (contains_js_2.linearRingContainsXY(flatCoordinates, offset, end, stride, extent[0], extent[1])) {
            return true;
        }
        if (contains_js_2.linearRingContainsXY(flatCoordinates, offset, end, stride, extent[0], extent[3])) {
            return true;
        }
        if (contains_js_2.linearRingContainsXY(flatCoordinates, offset, end, stride, extent[2], extent[1])) {
            return true;
        }
        if (contains_js_2.linearRingContainsXY(flatCoordinates, offset, end, stride, extent[2], extent[3])) {
            return true;
        }
        return false;
    }
    exports.intersectsLinearRing = intersectsLinearRing;
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<number>} ends Ends.
     * @param {number} stride Stride.
     * @param {import("../../extent.js").Extent} extent Extent.
     * @return {boolean} True if the geometry and the extent intersect.
     */
    function intersectsLinearRingArray(flatCoordinates, offset, ends, stride, extent) {
        if (!intersectsLinearRing(flatCoordinates, offset, ends[0], stride, extent)) {
            return false;
        }
        if (ends.length === 1) {
            return true;
        }
        for (let i = 1, ii = ends.length; i < ii; ++i) {
            if (contains_js_2.linearRingContainsExtent(flatCoordinates, ends[i - 1], ends[i], stride, extent)) {
                if (!intersectsLineString(flatCoordinates, ends[i - 1], ends[i], stride, extent)) {
                    return false;
                }
            }
        }
        return true;
    }
    exports.intersectsLinearRingArray = intersectsLinearRingArray;
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<Array<number>>} endss Endss.
     * @param {number} stride Stride.
     * @param {import("../../extent.js").Extent} extent Extent.
     * @return {boolean} True if the geometry and the extent intersect.
     */
    function intersectsLinearRingMultiArray(flatCoordinates, offset, endss, stride, extent) {
        for (let i = 0, ii = endss.length; i < ii; ++i) {
            const ends = endss[i];
            if (intersectsLinearRingArray(flatCoordinates, offset, ends, stride, extent)) {
                return true;
            }
            offset = ends[ends.length - 1];
        }
        return false;
    }
    exports.intersectsLinearRingMultiArray = intersectsLinearRingMultiArray;
});
/**
 * @module ol/geom/flat/reverse
 */
define("node_modules/ol/src/geom/flat/reverse", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.coordinates = void 0;
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     */
    function coordinates(flatCoordinates, offset, end, stride) {
        while (offset < end - stride) {
            for (let i = 0; i < stride; ++i) {
                const tmp = flatCoordinates[offset + i];
                flatCoordinates[offset + i] = flatCoordinates[end - stride + i];
                flatCoordinates[end - stride + i] = tmp;
            }
            offset += stride;
            end -= stride;
        }
    }
    exports.coordinates = coordinates;
});
define("node_modules/ol/src/geom/flat/orient", ["require", "exports", "node_modules/ol/src/geom/flat/reverse"], function (require, exports, reverse_js_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.orientLinearRingsArray = exports.orientLinearRings = exports.linearRingssAreOriented = exports.linearRingsAreOriented = exports.linearRingIsClockwise = void 0;
    /**
     * Is the linear ring oriented clockwise in a coordinate system with a bottom-left
     * coordinate origin? For a coordinate system with a top-left coordinate origin,
     * the ring's orientation is clockwise when this function returns false.
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @return {boolean} Is clockwise.
     */
    function linearRingIsClockwise(flatCoordinates, offset, end, stride) {
        // https://stackoverflow.com/a/1180256/2389327
        // https://en.wikipedia.org/wiki/Curve_orientation#Orientation_of_a_simple_polygon
        let firstVertexRepeated = true;
        for (let i = 0; i < stride; ++i) {
            if (flatCoordinates[offset + i] !== flatCoordinates[end - stride + i]) {
                firstVertexRepeated = false;
                break;
            }
        }
        if (firstVertexRepeated) {
            end -= stride;
        }
        const iMinVertex = findCornerVertex(flatCoordinates, offset, end, stride);
        // Orientation matrix:
        //     [ 1  xa  ya ]
        // O = | 1  xb  yb |
        //     [ 1  xc  yc ]
        let iPreviousVertex = iMinVertex - stride;
        if (iPreviousVertex < offset) {
            iPreviousVertex = end - stride;
        }
        let iNextVertex = iMinVertex + stride;
        if (iNextVertex >= end) {
            iNextVertex = offset;
        }
        const aX = flatCoordinates[iPreviousVertex];
        const aY = flatCoordinates[iPreviousVertex + 1];
        const bX = flatCoordinates[iMinVertex];
        const bY = flatCoordinates[iMinVertex + 1];
        const cX = flatCoordinates[iNextVertex];
        const cY = flatCoordinates[iNextVertex + 1];
        const determinant = bX * cY + aX * bY + aY * cX - (aY * bX + bY * cX + aX * cY);
        return determinant < 0;
    }
    exports.linearRingIsClockwise = linearRingIsClockwise;
    // Find vertex along one edge of bounding box.
    // In this case, we find smallest y; in case of tie also smallest x.
    function findCornerVertex(flatCoordinates, offset, end, stride) {
        let iMinVertex = -1;
        let minY = Infinity;
        let minXAtMinY = Infinity;
        for (let i = offset; i < end; i += stride) {
            const x = flatCoordinates[i];
            const y = flatCoordinates[i + 1];
            if (y > minY) {
                continue;
            }
            if (y == minY) {
                if (x >= minXAtMinY) {
                    continue;
                }
            }
            // Minimum so far.
            iMinVertex = i;
            minY = y;
            minXAtMinY = x;
        }
        return iMinVertex;
    }
    /**
     * Determines if linear rings are oriented.  By default, left-hand orientation
     * is tested (first ring must be clockwise, remaining rings counter-clockwise).
     * To test for right-hand orientation, use the `opt_right` argument.
     *
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<number>} ends Array of end indexes.
     * @param {number} stride Stride.
     * @param {boolean=} opt_right Test for right-hand orientation
     *     (counter-clockwise exterior ring and clockwise interior rings).
     * @return {boolean} Rings are correctly oriented.
     */
    function linearRingsAreOriented(flatCoordinates, offset, ends, stride, opt_right) {
        const right = opt_right !== undefined ? opt_right : false;
        for (let i = 0, ii = ends.length; i < ii; ++i) {
            const end = ends[i];
            const isClockwise = linearRingIsClockwise(flatCoordinates, offset, end, stride);
            if (i === 0) {
                if ((right && isClockwise) || (!right && !isClockwise)) {
                    return false;
                }
            }
            else {
                if ((right && !isClockwise) || (!right && isClockwise)) {
                    return false;
                }
            }
            offset = end;
        }
        return true;
    }
    exports.linearRingsAreOriented = linearRingsAreOriented;
    /**
     * Determines if linear rings are oriented.  By default, left-hand orientation
     * is tested (first ring must be clockwise, remaining rings counter-clockwise).
     * To test for right-hand orientation, use the `opt_right` argument.
     *
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<Array<number>>} endss Array of array of end indexes.
     * @param {number} stride Stride.
     * @param {boolean=} opt_right Test for right-hand orientation
     *     (counter-clockwise exterior ring and clockwise interior rings).
     * @return {boolean} Rings are correctly oriented.
     */
    function linearRingssAreOriented(flatCoordinates, offset, endss, stride, opt_right) {
        for (let i = 0, ii = endss.length; i < ii; ++i) {
            const ends = endss[i];
            if (!linearRingsAreOriented(flatCoordinates, offset, ends, stride, opt_right)) {
                return false;
            }
            if (ends.length) {
                offset = ends[ends.length - 1];
            }
        }
        return true;
    }
    exports.linearRingssAreOriented = linearRingssAreOriented;
    /**
     * Orient coordinates in a flat array of linear rings.  By default, rings
     * are oriented following the left-hand rule (clockwise for exterior and
     * counter-clockwise for interior rings).  To orient according to the
     * right-hand rule, use the `opt_right` argument.
     *
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<number>} ends Ends.
     * @param {number} stride Stride.
     * @param {boolean=} opt_right Follow the right-hand rule for orientation.
     * @return {number} End.
     */
    function orientLinearRings(flatCoordinates, offset, ends, stride, opt_right) {
        const right = opt_right !== undefined ? opt_right : false;
        for (let i = 0, ii = ends.length; i < ii; ++i) {
            const end = ends[i];
            const isClockwise = linearRingIsClockwise(flatCoordinates, offset, end, stride);
            const reverse = i === 0
                ? (right && isClockwise) || (!right && !isClockwise)
                : (right && !isClockwise) || (!right && isClockwise);
            if (reverse) {
                reverse_js_1.coordinates(flatCoordinates, offset, end, stride);
            }
            offset = end;
        }
        return offset;
    }
    exports.orientLinearRings = orientLinearRings;
    /**
     * Orient coordinates in a flat array of linear rings.  By default, rings
     * are oriented following the left-hand rule (clockwise for exterior and
     * counter-clockwise for interior rings).  To orient according to the
     * right-hand rule, use the `opt_right` argument.
     *
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<Array<number>>} endss Array of array of end indexes.
     * @param {number} stride Stride.
     * @param {boolean=} opt_right Follow the right-hand rule for orientation.
     * @return {number} End.
     */
    function orientLinearRingsArray(flatCoordinates, offset, endss, stride, opt_right) {
        for (let i = 0, ii = endss.length; i < ii; ++i) {
            offset = orientLinearRings(flatCoordinates, offset, endss[i], stride, opt_right);
        }
        return offset;
    }
    exports.orientLinearRingsArray = orientLinearRingsArray;
});
define("node_modules/ol/src/geom/Circle", ["require", "exports", "node_modules/ol/src/geom/GeometryType", "node_modules/ol/src/geom/SimpleGeometry", "node_modules/ol/src/extent", "node_modules/ol/src/geom/flat/deflate", "node_modules/ol/src/geom/flat/transform"], function (require, exports, GeometryType_js_4, SimpleGeometry_js_3, extent_js_9, deflate_js_3, transform_js_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @classdesc
     * Circle geometry.
     *
     * @api
     */
    class Circle extends SimpleGeometry_js_3.default {
        /**
         * @param {!import("../coordinate.js").Coordinate} center Center.
         *     For internal use, flat coordinates in combination with `opt_layout` and no
         *     `opt_radius` are also accepted.
         * @param {number=} opt_radius Radius.
         * @param {import("./GeometryLayout.js").default=} opt_layout Layout.
         */
        constructor(center, opt_radius, opt_layout) {
            super();
            if (opt_layout !== undefined && opt_radius === undefined) {
                this.setFlatCoordinates(opt_layout, center);
            }
            else {
                const radius = opt_radius ? opt_radius : 0;
                this.setCenterAndRadius(center, radius, opt_layout);
            }
        }
        /**
         * Make a complete copy of the geometry.
         * @return {!Circle} Clone.
         * @api
         */
        clone() {
            return new Circle(this.flatCoordinates.slice(), undefined, this.layout);
        }
        /**
         * @param {number} x X.
         * @param {number} y Y.
         * @param {import("../coordinate.js").Coordinate} closestPoint Closest point.
         * @param {number} minSquaredDistance Minimum squared distance.
         * @return {number} Minimum squared distance.
         */
        closestPointXY(x, y, closestPoint, minSquaredDistance) {
            const flatCoordinates = this.flatCoordinates;
            const dx = x - flatCoordinates[0];
            const dy = y - flatCoordinates[1];
            const squaredDistance = dx * dx + dy * dy;
            if (squaredDistance < minSquaredDistance) {
                if (squaredDistance === 0) {
                    for (let i = 0; i < this.stride; ++i) {
                        closestPoint[i] = flatCoordinates[i];
                    }
                }
                else {
                    const delta = this.getRadius() / Math.sqrt(squaredDistance);
                    closestPoint[0] = flatCoordinates[0] + delta * dx;
                    closestPoint[1] = flatCoordinates[1] + delta * dy;
                    for (let i = 2; i < this.stride; ++i) {
                        closestPoint[i] = flatCoordinates[i];
                    }
                }
                closestPoint.length = this.stride;
                return squaredDistance;
            }
            else {
                return minSquaredDistance;
            }
        }
        /**
         * @param {number} x X.
         * @param {number} y Y.
         * @return {boolean} Contains (x, y).
         */
        containsXY(x, y) {
            const flatCoordinates = this.flatCoordinates;
            const dx = x - flatCoordinates[0];
            const dy = y - flatCoordinates[1];
            return dx * dx + dy * dy <= this.getRadiusSquared_();
        }
        /**
         * Return the center of the circle as {@link module:ol/coordinate~Coordinate coordinate}.
         * @return {import("../coordinate.js").Coordinate} Center.
         * @api
         */
        getCenter() {
            return this.flatCoordinates.slice(0, this.stride);
        }
        /**
         * @param {import("../extent.js").Extent} extent Extent.
         * @protected
         * @return {import("../extent.js").Extent} extent Extent.
         */
        computeExtent(extent) {
            const flatCoordinates = this.flatCoordinates;
            const radius = flatCoordinates[this.stride] - flatCoordinates[0];
            return extent_js_9.createOrUpdate(flatCoordinates[0] - radius, flatCoordinates[1] - radius, flatCoordinates[0] + radius, flatCoordinates[1] + radius, extent);
        }
        /**
         * Return the radius of the circle.
         * @return {number} Radius.
         * @api
         */
        getRadius() {
            return Math.sqrt(this.getRadiusSquared_());
        }
        /**
         * @private
         * @return {number} Radius squared.
         */
        getRadiusSquared_() {
            const dx = this.flatCoordinates[this.stride] - this.flatCoordinates[0];
            const dy = this.flatCoordinates[this.stride + 1] - this.flatCoordinates[1];
            return dx * dx + dy * dy;
        }
        /**
         * Get the type of this geometry.
         * @return {import("./GeometryType.js").default} Geometry type.
         * @api
         */
        getType() {
            return GeometryType_js_4.default.CIRCLE;
        }
        /**
         * Test if the geometry and the passed extent intersect.
         * @param {import("../extent.js").Extent} extent Extent.
         * @return {boolean} `true` if the geometry and the extent intersect.
         * @api
         */
        intersectsExtent(extent) {
            const circleExtent = this.getExtent();
            if (extent_js_9.intersects(extent, circleExtent)) {
                const center = this.getCenter();
                if (extent[0] <= center[0] && extent[2] >= center[0]) {
                    return true;
                }
                if (extent[1] <= center[1] && extent[3] >= center[1]) {
                    return true;
                }
                return extent_js_9.forEachCorner(extent, this.intersectsCoordinate.bind(this));
            }
            return false;
        }
        /**
         * Set the center of the circle as {@link module:ol/coordinate~Coordinate coordinate}.
         * @param {import("../coordinate.js").Coordinate} center Center.
         * @api
         */
        setCenter(center) {
            const stride = this.stride;
            const radius = this.flatCoordinates[stride] - this.flatCoordinates[0];
            const flatCoordinates = center.slice();
            flatCoordinates[stride] = flatCoordinates[0] + radius;
            for (let i = 1; i < stride; ++i) {
                flatCoordinates[stride + i] = center[i];
            }
            this.setFlatCoordinates(this.layout, flatCoordinates);
            this.changed();
        }
        /**
         * Set the center (as {@link module:ol/coordinate~Coordinate coordinate}) and the radius (as
         * number) of the circle.
         * @param {!import("../coordinate.js").Coordinate} center Center.
         * @param {number} radius Radius.
         * @param {import("./GeometryLayout.js").default=} opt_layout Layout.
         * @api
         */
        setCenterAndRadius(center, radius, opt_layout) {
            this.setLayout(opt_layout, center, 0);
            if (!this.flatCoordinates) {
                this.flatCoordinates = [];
            }
            /** @type {Array<number>} */
            const flatCoordinates = this.flatCoordinates;
            let offset = deflate_js_3.deflateCoordinate(flatCoordinates, 0, center, this.stride);
            flatCoordinates[offset++] = flatCoordinates[0] + radius;
            for (let i = 1, ii = this.stride; i < ii; ++i) {
                flatCoordinates[offset++] = flatCoordinates[i];
            }
            flatCoordinates.length = offset;
            this.changed();
        }
        getCoordinates() {
            return null;
        }
        setCoordinates(coordinates, opt_layout) { }
        /**
         * Set the radius of the circle. The radius is in the units of the projection.
         * @param {number} radius Radius.
         * @api
         */
        setRadius(radius) {
            this.flatCoordinates[this.stride] = this.flatCoordinates[0] + radius;
            this.changed();
        }
        /**
         * Rotate the geometry around a given coordinate. This modifies the geometry
         * coordinates in place.
         * @param {number} angle Rotation angle in radians.
         * @param {import("../coordinate.js").Coordinate} anchor The rotation center.
         * @api
         */
        rotate(angle, anchor) {
            const center = this.getCenter();
            const stride = this.getStride();
            this.setCenter(transform_js_4.rotate(center, 0, center.length, stride, angle, anchor, center));
            this.changed();
        }
        /**
         * Translate the geometry.  This modifies the geometry coordinates in place.  If
         * instead you want a new geometry, first `clone()` this geometry.
         * @param {number} deltaX Delta X.
         * @param {number} deltaY Delta Y.
         * @api
         */
        translate(deltaX, deltaY) {
            const center = this.getCenter();
            const stride = this.getStride();
            this.setCenter(transform_js_4.translate(center, 0, center.length, stride, deltaX, deltaY, center));
            this.changed();
        }
    }
    /**
     * Transform each coordinate of the circle from one coordinate reference system
     * to another. The geometry is modified in place.
     * If you do not want the geometry modified in place, first clone() it and
     * then use this function on the clone.
     *
     * Internally a circle is currently represented by two points: the center of
     * the circle `[cx, cy]`, and the point to the right of the circle
     * `[cx + r, cy]`. This `transform` function just transforms these two points.
     * So the resulting geometry is also a circle, and that circle does not
     * correspond to the shape that would be obtained by transforming every point
     * of the original circle.
     *
     * @param {import("../proj.js").ProjectionLike} source The current projection.  Can be a
     *     string identifier or a {@link module:ol/proj/Projection~Projection} object.
     * @param {import("../proj.js").ProjectionLike} destination The desired projection.  Can be a
     *     string identifier or a {@link module:ol/proj/Projection~Projection} object.
     * @return {Circle} This geometry.  Note that original geometry is
     *     modified in place.
     * @function
     * @api
     */
    Circle.prototype.transform;
    exports.default = Circle;
});
define("node_modules/ol/src/geom/Polygon", ["require", "exports", "node_modules/ol/src/geom/GeometryLayout", "node_modules/ol/src/geom/GeometryType", "node_modules/ol/src/geom/LinearRing", "node_modules/ol/src/geom/Point", "node_modules/ol/src/geom/SimpleGeometry", "node_modules/ol/src/geom/flat/closest", "node_modules/ol/src/extent", "node_modules/ol/src/geom/flat/deflate", "node_modules/ol/src/array", "node_modules/ol/src/geom/flat/interiorpoint", "node_modules/ol/src/geom/flat/inflate", "node_modules/ol/src/geom/flat/intersectsextent", "node_modules/ol/src/geom/flat/orient", "node_modules/ol/src/geom/flat/area", "node_modules/ol/src/geom/flat/contains", "node_modules/ol/src/math", "node_modules/ol/src/geom/flat/simplify", "node_modules/ol/src/sphere"], function (require, exports, GeometryLayout_js_3, GeometryType_js_5, LinearRing_js_1, Point_js_1, SimpleGeometry_js_4, closest_js_2, extent_js_10, deflate_js_4, array_js_4, interiorpoint_js_1, inflate_js_2, intersectsextent_js_1, orient_js_1, area_js_2, contains_js_3, math_js_6, simplify_js_2, sphere_js_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.makeRegular = exports.fromCircle = exports.fromExtent = exports.circular = void 0;
    /**
     * @classdesc
     * Polygon geometry.
     *
     * @api
     */
    class Polygon extends SimpleGeometry_js_4.default {
        /**
         * @param {!Array<Array<import("../coordinate.js").Coordinate>>|!Array<number>} coordinates
         *     Array of linear rings that define the polygon. The first linear ring of the
         *     array defines the outer-boundary or surface of the polygon. Each subsequent
         *     linear ring defines a hole in the surface of the polygon. A linear ring is
         *     an array of vertices' coordinates where the first coordinate and the last are
         *     equivalent. (For internal use, flat coordinates in combination with
         *     `opt_layout` and `opt_ends` are also accepted.)
         * @param {import("./GeometryLayout.js").default=} opt_layout Layout.
         * @param {Array<number>=} opt_ends Ends (for internal use with flat coordinates).
         */
        constructor(coordinates, opt_layout, opt_ends) {
            super();
            /**
             * @type {Array<number>}
             * @private
             */
            this.ends_ = [];
            /**
             * @private
             * @type {number}
             */
            this.flatInteriorPointRevision_ = -1;
            /**
             * @private
             * @type {import("../coordinate.js").Coordinate}
             */
            this.flatInteriorPoint_ = null;
            /**
             * @private
             * @type {number}
             */
            this.maxDelta_ = -1;
            /**
             * @private
             * @type {number}
             */
            this.maxDeltaRevision_ = -1;
            /**
             * @private
             * @type {number}
             */
            this.orientedRevision_ = -1;
            /**
             * @private
             * @type {Array<number>}
             */
            this.orientedFlatCoordinates_ = null;
            if (opt_layout !== undefined && opt_ends) {
                this.setFlatCoordinates(opt_layout, 
                /** @type {Array<number>} */ (coordinates));
                this.ends_ = opt_ends;
            }
            else {
                this.setCoordinates(
                /** @type {Array<Array<import("../coordinate.js").Coordinate>>} */ (coordinates), opt_layout);
            }
        }
        /**
         * Append the passed linear ring to this polygon.
         * @param {LinearRing} linearRing Linear ring.
         * @api
         */
        appendLinearRing(linearRing) {
            if (!this.flatCoordinates) {
                this.flatCoordinates = linearRing.getFlatCoordinates().slice();
            }
            else {
                array_js_4.extend(this.flatCoordinates, linearRing.getFlatCoordinates());
            }
            this.ends_.push(this.flatCoordinates.length);
            this.changed();
        }
        /**
         * Make a complete copy of the geometry.
         * @return {!Polygon} Clone.
         * @api
         */
        clone() {
            return new Polygon(this.flatCoordinates.slice(), this.layout, this.ends_.slice());
        }
        /**
         * @param {number} x X.
         * @param {number} y Y.
         * @param {import("../coordinate.js").Coordinate} closestPoint Closest point.
         * @param {number} minSquaredDistance Minimum squared distance.
         * @return {number} Minimum squared distance.
         */
        closestPointXY(x, y, closestPoint, minSquaredDistance) {
            if (minSquaredDistance < extent_js_10.closestSquaredDistanceXY(this.getExtent(), x, y)) {
                return minSquaredDistance;
            }
            if (this.maxDeltaRevision_ != this.getRevision()) {
                this.maxDelta_ = Math.sqrt(closest_js_2.arrayMaxSquaredDelta(this.flatCoordinates, 0, this.ends_, this.stride, 0));
                this.maxDeltaRevision_ = this.getRevision();
            }
            return closest_js_2.assignClosestArrayPoint(this.flatCoordinates, 0, this.ends_, this.stride, this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);
        }
        /**
         * @param {number} x X.
         * @param {number} y Y.
         * @return {boolean} Contains (x, y).
         */
        containsXY(x, y) {
            return contains_js_3.linearRingsContainsXY(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, x, y);
        }
        /**
         * Return the area of the polygon on projected plane.
         * @return {number} Area (on projected plane).
         * @api
         */
        getArea() {
            return area_js_2.linearRings(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride);
        }
        /**
         * Get the coordinate array for this geometry.  This array has the structure
         * of a GeoJSON coordinate array for polygons.
         *
         * @param {boolean=} opt_right Orient coordinates according to the right-hand
         *     rule (counter-clockwise for exterior and clockwise for interior rings).
         *     If `false`, coordinates will be oriented according to the left-hand rule
         *     (clockwise for exterior and counter-clockwise for interior rings).
         *     By default, coordinate orientation will depend on how the geometry was
         *     constructed.
         * @return {Array<Array<import("../coordinate.js").Coordinate>>} Coordinates.
         * @api
         */
        getCoordinates(opt_right) {
            let flatCoordinates;
            if (opt_right !== undefined) {
                flatCoordinates = this.getOrientedFlatCoordinates().slice();
                orient_js_1.orientLinearRings(flatCoordinates, 0, this.ends_, this.stride, opt_right);
            }
            else {
                flatCoordinates = this.flatCoordinates;
            }
            return inflate_js_2.inflateCoordinatesArray(flatCoordinates, 0, this.ends_, this.stride);
        }
        /**
         * @return {Array<number>} Ends.
         */
        getEnds() {
            return this.ends_;
        }
        /**
         * @return {Array<number>} Interior point.
         */
        getFlatInteriorPoint() {
            if (this.flatInteriorPointRevision_ != this.getRevision()) {
                const flatCenter = extent_js_10.getCenter(this.getExtent());
                this.flatInteriorPoint_ = interiorpoint_js_1.getInteriorPointOfArray(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, flatCenter, 0);
                this.flatInteriorPointRevision_ = this.getRevision();
            }
            return this.flatInteriorPoint_;
        }
        /**
         * Return an interior point of the polygon.
         * @return {Point} Interior point as XYM coordinate, where M is the
         * length of the horizontal intersection that the point belongs to.
         * @api
         */
        getInteriorPoint() {
            return new Point_js_1.default(this.getFlatInteriorPoint(), GeometryLayout_js_3.default.XYM);
        }
        /**
         * Return the number of rings of the polygon,  this includes the exterior
         * ring and any interior rings.
         *
         * @return {number} Number of rings.
         * @api
         */
        getLinearRingCount() {
            return this.ends_.length;
        }
        /**
         * Return the Nth linear ring of the polygon geometry. Return `null` if the
         * given index is out of range.
         * The exterior linear ring is available at index `0` and the interior rings
         * at index `1` and beyond.
         *
         * @param {number} index Index.
         * @return {LinearRing} Linear ring.
         * @api
         */
        getLinearRing(index) {
            if (index < 0 || this.ends_.length <= index) {
                return null;
            }
            return new LinearRing_js_1.default(this.flatCoordinates.slice(index === 0 ? 0 : this.ends_[index - 1], this.ends_[index]), this.layout);
        }
        /**
         * Return the linear rings of the polygon.
         * @return {Array<LinearRing>} Linear rings.
         * @api
         */
        getLinearRings() {
            const layout = this.layout;
            const flatCoordinates = this.flatCoordinates;
            const ends = this.ends_;
            const linearRings = [];
            let offset = 0;
            for (let i = 0, ii = ends.length; i < ii; ++i) {
                const end = ends[i];
                const linearRing = new LinearRing_js_1.default(flatCoordinates.slice(offset, end), layout);
                linearRings.push(linearRing);
                offset = end;
            }
            return linearRings;
        }
        /**
         * @return {Array<number>} Oriented flat coordinates.
         */
        getOrientedFlatCoordinates() {
            if (this.orientedRevision_ != this.getRevision()) {
                const flatCoordinates = this.flatCoordinates;
                if (orient_js_1.linearRingsAreOriented(flatCoordinates, 0, this.ends_, this.stride)) {
                    this.orientedFlatCoordinates_ = flatCoordinates;
                }
                else {
                    this.orientedFlatCoordinates_ = flatCoordinates.slice();
                    this.orientedFlatCoordinates_.length = orient_js_1.orientLinearRings(this.orientedFlatCoordinates_, 0, this.ends_, this.stride);
                }
                this.orientedRevision_ = this.getRevision();
            }
            return this.orientedFlatCoordinates_;
        }
        /**
         * @param {number} squaredTolerance Squared tolerance.
         * @return {Polygon} Simplified Polygon.
         * @protected
         */
        getSimplifiedGeometryInternal(squaredTolerance) {
            const simplifiedFlatCoordinates = [];
            const simplifiedEnds = [];
            simplifiedFlatCoordinates.length = simplify_js_2.quantizeArray(this.flatCoordinates, 0, this.ends_, this.stride, Math.sqrt(squaredTolerance), simplifiedFlatCoordinates, 0, simplifiedEnds);
            return new Polygon(simplifiedFlatCoordinates, GeometryLayout_js_3.default.XY, simplifiedEnds);
        }
        /**
         * Get the type of this geometry.
         * @return {import("./GeometryType.js").default} Geometry type.
         * @api
         */
        getType() {
            return GeometryType_js_5.default.POLYGON;
        }
        /**
         * Test if the geometry and the passed extent intersect.
         * @param {import("../extent.js").Extent} extent Extent.
         * @return {boolean} `true` if the geometry and the extent intersect.
         * @api
         */
        intersectsExtent(extent) {
            return intersectsextent_js_1.intersectsLinearRingArray(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, extent);
        }
        /**
         * Set the coordinates of the polygon.
         * @param {!Array<Array<import("../coordinate.js").Coordinate>>} coordinates Coordinates.
         * @param {import("./GeometryLayout.js").default=} opt_layout Layout.
         * @api
         */
        setCoordinates(coordinates, opt_layout) {
            this.setLayout(opt_layout, coordinates, 2);
            if (!this.flatCoordinates) {
                this.flatCoordinates = [];
            }
            const ends = deflate_js_4.deflateCoordinatesArray(this.flatCoordinates, 0, coordinates, this.stride, this.ends_);
            this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];
            this.changed();
        }
    }
    exports.default = Polygon;
    /**
     * Create an approximation of a circle on the surface of a sphere.
     * @param {import("../coordinate.js").Coordinate} center Center (`[lon, lat]` in degrees).
     * @param {number} radius The great-circle distance from the center to
     *     the polygon vertices.
     * @param {number=} opt_n Optional number of vertices for the resulting
     *     polygon. Default is `32`.
     * @param {number=} opt_sphereRadius Optional radius for the sphere (defaults to
     *     the Earth's mean radius using the WGS84 ellipsoid).
     * @return {Polygon} The "circular" polygon.
     * @api
     */
    function circular(center, radius, opt_n, opt_sphereRadius) {
        const n = opt_n ? opt_n : 32;
        /** @type {Array<number>} */
        const flatCoordinates = [];
        for (let i = 0; i < n; ++i) {
            array_js_4.extend(flatCoordinates, sphere_js_1.offset(center, radius, (2 * Math.PI * i) / n, opt_sphereRadius));
        }
        flatCoordinates.push(flatCoordinates[0], flatCoordinates[1]);
        return new Polygon(flatCoordinates, GeometryLayout_js_3.default.XY, [
            flatCoordinates.length,
        ]);
    }
    exports.circular = circular;
    /**
     * Create a polygon from an extent. The layout used is `XY`.
     * @param {import("../extent.js").Extent} extent The extent.
     * @return {Polygon} The polygon.
     * @api
     */
    function fromExtent(extent) {
        const minX = extent[0];
        const minY = extent[1];
        const maxX = extent[2];
        const maxY = extent[3];
        const flatCoordinates = [
            minX,
            minY,
            minX,
            maxY,
            maxX,
            maxY,
            maxX,
            minY,
            minX,
            minY,
        ];
        return new Polygon(flatCoordinates, GeometryLayout_js_3.default.XY, [
            flatCoordinates.length,
        ]);
    }
    exports.fromExtent = fromExtent;
    /**
     * Create a regular polygon from a circle.
     * @param {import("./Circle.js").default} circle Circle geometry.
     * @param {number=} opt_sides Number of sides of the polygon. Default is 32.
     * @param {number=} opt_angle Start angle for the first vertex of the polygon in
     *     radians. Default is 0.
     * @return {Polygon} Polygon geometry.
     * @api
     */
    function fromCircle(circle, opt_sides, opt_angle) {
        const sides = opt_sides ? opt_sides : 32;
        const stride = circle.getStride();
        const layout = circle.getLayout();
        const center = circle.getCenter();
        const arrayLength = stride * (sides + 1);
        const flatCoordinates = new Array(arrayLength);
        for (let i = 0; i < arrayLength; i += stride) {
            flatCoordinates[i] = 0;
            flatCoordinates[i + 1] = 0;
            for (let j = 2; j < stride; j++) {
                flatCoordinates[i + j] = center[j];
            }
        }
        const ends = [flatCoordinates.length];
        const polygon = new Polygon(flatCoordinates, layout, ends);
        makeRegular(polygon, center, circle.getRadius(), opt_angle);
        return polygon;
    }
    exports.fromCircle = fromCircle;
    /**
     * Modify the coordinates of a polygon to make it a regular polygon.
     * @param {Polygon} polygon Polygon geometry.
     * @param {import("../coordinate.js").Coordinate} center Center of the regular polygon.
     * @param {number} radius Radius of the regular polygon.
     * @param {number=} opt_angle Start angle for the first vertex of the polygon in
     *     radians. Default is 0.
     */
    function makeRegular(polygon, center, radius, opt_angle) {
        const flatCoordinates = polygon.getFlatCoordinates();
        const stride = polygon.getStride();
        const sides = flatCoordinates.length / stride - 1;
        const startAngle = opt_angle ? opt_angle : 0;
        for (let i = 0; i <= sides; ++i) {
            const offset = i * stride;
            const angle = startAngle + (math_js_6.modulo(i, sides) * 2 * Math.PI) / sides;
            flatCoordinates[offset] = center[0] + radius * Math.cos(angle);
            flatCoordinates[offset + 1] = center[1] + radius * Math.sin(angle);
        }
        polygon.changed();
    }
    exports.makeRegular = makeRegular;
});
define("node_modules/ol/src/sphere", ["require", "exports", "node_modules/ol/src/geom/GeometryType", "node_modules/ol/src/math"], function (require, exports, GeometryType_js_6, math_js_7) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.offset = exports.getArea = exports.getLength = exports.getDistance = exports.DEFAULT_RADIUS = void 0;
    /**
     * Object literal with options for the {@link getLength} or {@link getArea}
     * functions.
     * @typedef {Object} SphereMetricOptions
     * @property {import("./proj.js").ProjectionLike} [projection='EPSG:3857']
     * Projection of the  geometry.  By default, the geometry is assumed to be in
     * Web Mercator.
     * @property {number} [radius=6371008.8] Sphere radius.  By default, the
     * [mean Earth radius](https://en.wikipedia.org/wiki/Earth_radius#Mean_radius)
     * for the WGS84 ellipsoid is used.
     */
    /**
     * The mean Earth radius (1/3 * (2a + b)) for the WGS84 ellipsoid.
     * https://en.wikipedia.org/wiki/Earth_radius#Mean_radius
     * @type {number}
     */
    exports.DEFAULT_RADIUS = 6371008.8;
    /**
     * Get the great circle distance (in meters) between two geographic coordinates.
     * @param {Array} c1 Starting coordinate.
     * @param {Array} c2 Ending coordinate.
     * @param {number=} opt_radius The sphere radius to use.  Defaults to the Earth's
     *     mean radius using the WGS84 ellipsoid.
     * @return {number} The great circle distance between the points (in meters).
     * @api
     */
    function getDistance(c1, c2, opt_radius) {
        const radius = opt_radius || exports.DEFAULT_RADIUS;
        const lat1 = math_js_7.toRadians(c1[1]);
        const lat2 = math_js_7.toRadians(c2[1]);
        const deltaLatBy2 = (lat2 - lat1) / 2;
        const deltaLonBy2 = math_js_7.toRadians(c2[0] - c1[0]) / 2;
        const a = Math.sin(deltaLatBy2) * Math.sin(deltaLatBy2) +
            Math.sin(deltaLonBy2) *
                Math.sin(deltaLonBy2) *
                Math.cos(lat1) *
                Math.cos(lat2);
        return 2 * radius * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    }
    exports.getDistance = getDistance;
    /**
     * Get the cumulative great circle length of linestring coordinates (geographic).
     * @param {Array} coordinates Linestring coordinates.
     * @param {number} radius The sphere radius to use.
     * @return {number} The length (in meters).
     */
    function getLengthInternal(coordinates, radius) {
        let length = 0;
        for (let i = 0, ii = coordinates.length; i < ii - 1; ++i) {
            length += getDistance(coordinates[i], coordinates[i + 1], radius);
        }
        return length;
    }
    /**
     * Get the spherical length of a geometry.  This length is the sum of the
     * great circle distances between coordinates.  For polygons, the length is
     * the sum of all rings.  For points, the length is zero.  For multi-part
     * geometries, the length is the sum of the length of each part.
     * @param {import("./geom/Geometry.js").default} geometry A geometry.
     * @param {SphereMetricOptions=} opt_options Options for the
     * length calculation.  By default, geometries are assumed to be in 'EPSG:3857'.
     * You can change this by providing a `projection` option.
     * @return {number} The spherical length (in meters).
     * @api
     */
    function getLength(geometry, opt_options) {
        const options = opt_options || {};
        const radius = options.radius || exports.DEFAULT_RADIUS;
        const projection = options.projection || 'EPSG:3857';
        const type = geometry.getType();
        if (type !== GeometryType_js_6.default.GEOMETRY_COLLECTION) {
            geometry = geometry.clone().transform(projection, 'EPSG:4326');
        }
        let length = 0;
        let coordinates, coords, i, ii, j, jj;
        switch (type) {
            case GeometryType_js_6.default.POINT:
            case GeometryType_js_6.default.MULTI_POINT: {
                break;
            }
            case GeometryType_js_6.default.LINE_STRING:
            case GeometryType_js_6.default.LINEAR_RING: {
                coordinates = /** @type {import("./geom/SimpleGeometry.js").default} */ (geometry).getCoordinates();
                length = getLengthInternal(coordinates, radius);
                break;
            }
            case GeometryType_js_6.default.MULTI_LINE_STRING:
            case GeometryType_js_6.default.POLYGON: {
                coordinates = /** @type {import("./geom/SimpleGeometry.js").default} */ (geometry).getCoordinates();
                for (i = 0, ii = coordinates.length; i < ii; ++i) {
                    length += getLengthInternal(coordinates[i], radius);
                }
                break;
            }
            case GeometryType_js_6.default.MULTI_POLYGON: {
                coordinates = /** @type {import("./geom/SimpleGeometry.js").default} */ (geometry).getCoordinates();
                for (i = 0, ii = coordinates.length; i < ii; ++i) {
                    coords = coordinates[i];
                    for (j = 0, jj = coords.length; j < jj; ++j) {
                        length += getLengthInternal(coords[j], radius);
                    }
                }
                break;
            }
            case GeometryType_js_6.default.GEOMETRY_COLLECTION: {
                const geometries = /** @type {import("./geom/GeometryCollection.js").default} */ (geometry).getGeometries();
                for (i = 0, ii = geometries.length; i < ii; ++i) {
                    length += getLength(geometries[i], opt_options);
                }
                break;
            }
            default: {
                throw new Error('Unsupported geometry type: ' + type);
            }
        }
        return length;
    }
    exports.getLength = getLength;
    /**
     * Returns the spherical area for a list of coordinates.
     *
     * [Reference](https://trs-new.jpl.nasa.gov/handle/2014/40409)
     * Robert. G. Chamberlain and William H. Duquette, "Some Algorithms for
     * Polygons on a Sphere", JPL Publication 07-03, Jet Propulsion
     * Laboratory, Pasadena, CA, June 2007
     *
     * @param {Array<import("./coordinate.js").Coordinate>} coordinates List of coordinates of a linear
     * ring. If the ring is oriented clockwise, the area will be positive,
     * otherwise it will be negative.
     * @param {number} radius The sphere radius.
     * @return {number} Area (in square meters).
     */
    function getAreaInternal(coordinates, radius) {
        let area = 0;
        const len = coordinates.length;
        let x1 = coordinates[len - 1][0];
        let y1 = coordinates[len - 1][1];
        for (let i = 0; i < len; i++) {
            const x2 = coordinates[i][0];
            const y2 = coordinates[i][1];
            area +=
                math_js_7.toRadians(x2 - x1) *
                    (2 + Math.sin(math_js_7.toRadians(y1)) + Math.sin(math_js_7.toRadians(y2)));
            x1 = x2;
            y1 = y2;
        }
        return (area * radius * radius) / 2.0;
    }
    /**
     * Get the spherical area of a geometry.  This is the area (in meters) assuming
     * that polygon edges are segments of great circles on a sphere.
     * @param {import("./geom/Geometry.js").default} geometry A geometry.
     * @param {SphereMetricOptions=} opt_options Options for the area
     *     calculation.  By default, geometries are assumed to be in 'EPSG:3857'.
     *     You can change this by providing a `projection` option.
     * @return {number} The spherical area (in square meters).
     * @api
     */
    function getArea(geometry, opt_options) {
        const options = opt_options || {};
        const radius = options.radius || exports.DEFAULT_RADIUS;
        const projection = options.projection || 'EPSG:3857';
        const type = geometry.getType();
        if (type !== GeometryType_js_6.default.GEOMETRY_COLLECTION) {
            geometry = geometry.clone().transform(projection, 'EPSG:4326');
        }
        let area = 0;
        let coordinates, coords, i, ii, j, jj;
        switch (type) {
            case GeometryType_js_6.default.POINT:
            case GeometryType_js_6.default.MULTI_POINT:
            case GeometryType_js_6.default.LINE_STRING:
            case GeometryType_js_6.default.MULTI_LINE_STRING:
            case GeometryType_js_6.default.LINEAR_RING: {
                break;
            }
            case GeometryType_js_6.default.POLYGON: {
                coordinates = /** @type {import("./geom/Polygon.js").default} */ (geometry).getCoordinates();
                area = Math.abs(getAreaInternal(coordinates[0], radius));
                for (i = 1, ii = coordinates.length; i < ii; ++i) {
                    area -= Math.abs(getAreaInternal(coordinates[i], radius));
                }
                break;
            }
            case GeometryType_js_6.default.MULTI_POLYGON: {
                coordinates = /** @type {import("./geom/SimpleGeometry.js").default} */ (geometry).getCoordinates();
                for (i = 0, ii = coordinates.length; i < ii; ++i) {
                    coords = coordinates[i];
                    area += Math.abs(getAreaInternal(coords[0], radius));
                    for (j = 1, jj = coords.length; j < jj; ++j) {
                        area -= Math.abs(getAreaInternal(coords[j], radius));
                    }
                }
                break;
            }
            case GeometryType_js_6.default.GEOMETRY_COLLECTION: {
                const geometries = /** @type {import("./geom/GeometryCollection.js").default} */ (geometry).getGeometries();
                for (i = 0, ii = geometries.length; i < ii; ++i) {
                    area += getArea(geometries[i], opt_options);
                }
                break;
            }
            default: {
                throw new Error('Unsupported geometry type: ' + type);
            }
        }
        return area;
    }
    exports.getArea = getArea;
    /**
     * Returns the coordinate at the given distance and bearing from `c1`.
     *
     * @param {import("./coordinate.js").Coordinate} c1 The origin point (`[lon, lat]` in degrees).
     * @param {number} distance The great-circle distance between the origin
     *     point and the target point.
     * @param {number} bearing The bearing (in radians).
     * @param {number=} opt_radius The sphere radius to use.  Defaults to the Earth's
     *     mean radius using the WGS84 ellipsoid.
     * @return {import("./coordinate.js").Coordinate} The target point.
     */
    function offset(c1, distance, bearing, opt_radius) {
        const radius = opt_radius || exports.DEFAULT_RADIUS;
        const lat1 = math_js_7.toRadians(c1[1]);
        const lon1 = math_js_7.toRadians(c1[0]);
        const dByR = distance / radius;
        const lat = Math.asin(Math.sin(lat1) * Math.cos(dByR) +
            Math.cos(lat1) * Math.sin(dByR) * Math.cos(bearing));
        const lon = lon1 +
            Math.atan2(Math.sin(bearing) * Math.sin(dByR) * Math.cos(lat1), Math.cos(dByR) - Math.sin(lat1) * Math.sin(lat));
        return [math_js_7.toDegrees(lon), math_js_7.toDegrees(lat)];
    }
    exports.offset = offset;
});
/**
 * @module ol/proj
 */
define("node_modules/ol/src/proj", ["require", "exports", "node_modules/ol/src/proj/Projection", "node_modules/ol/src/proj/Units", "node_modules/ol/src/proj/epsg3857", "node_modules/ol/src/proj/epsg4326", "node_modules/ol/src/proj/projections", "node_modules/ol/src/proj/transforms", "node_modules/ol/src/extent", "node_modules/ol/src/math", "node_modules/ol/src/sphere", "node_modules/ol/src/coordinate"], function (require, exports, Projection_js_3, Units_js_5, epsg3857_js_1, epsg4326_js_1, projections_js_1, transforms_js_1, extent_js_11, math_js_8, sphere_js_2, coordinate_js_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.addCommon = exports.createSafeCoordinateTransform = exports.fromUserExtent = exports.toUserExtent = exports.fromUserCoordinate = exports.toUserCoordinate = exports.useGeographic = exports.getUserProjection = exports.clearUserProjection = exports.setUserProjection = exports.transformWithProjections = exports.transformExtent = exports.transform = exports.getTransform = exports.getTransformFromProjections = exports.equivalent = exports.toLonLat = exports.fromLonLat = exports.addCoordinateTransforms = exports.createTransformFromCoordinateTransform = exports.createProjection = exports.clearAllProjections = exports.addEquivalentTransforms = exports.addEquivalentProjections = exports.getPointResolution = exports.get = exports.addProjections = exports.addProjection = exports.identityTransform = exports.cloneTransform = exports.Projection = exports.METERS_PER_UNIT = void 0;
    exports.Projection = Projection_js_3.default;
    Object.defineProperty(exports, "METERS_PER_UNIT", { enumerable: true, get: function () { return Units_js_5.METERS_PER_UNIT; } });
    /**
     * @param {Array<number>} input Input coordinate array.
     * @param {Array<number>=} opt_output Output array of coordinate values.
     * @param {number=} opt_dimension Dimension.
     * @return {Array<number>} Output coordinate array (new array, same coordinate
     *     values).
     */
    function cloneTransform(input, opt_output, opt_dimension) {
        let output;
        if (opt_output !== undefined) {
            for (let i = 0, ii = input.length; i < ii; ++i) {
                opt_output[i] = input[i];
            }
            output = opt_output;
        }
        else {
            output = input.slice();
        }
        return output;
    }
    exports.cloneTransform = cloneTransform;
    /**
     * @param {Array<number>} input Input coordinate array.
     * @param {Array<number>=} opt_output Output array of coordinate values.
     * @param {number=} opt_dimension Dimension.
     * @return {Array<number>} Input coordinate array (same array as input).
     */
    function identityTransform(input, opt_output, opt_dimension) {
        if (opt_output !== undefined && input !== opt_output) {
            for (let i = 0, ii = input.length; i < ii; ++i) {
                opt_output[i] = input[i];
            }
            input = opt_output;
        }
        return input;
    }
    exports.identityTransform = identityTransform;
    /**
     * Add a Projection object to the list of supported projections that can be
     * looked up by their code.
     *
     * @param {Projection} projection Projection instance.
     * @api
     */
    function addProjection(projection) {
        projections_js_1.add(projection.getCode(), projection);
        transforms_js_1.add(projection, projection, cloneTransform);
    }
    exports.addProjection = addProjection;
    /**
     * @param {Array<Projection>} projections Projections.
     */
    function addProjections(projections) {
        projections.forEach(addProjection);
    }
    exports.addProjections = addProjections;
    /**
     * Fetches a Projection object for the code specified.
     *
     * @param {ProjectionLike} projectionLike Either a code string which is
     *     a combination of authority and identifier such as "EPSG:4326", or an
     *     existing projection object, or undefined.
     * @return {Projection} Projection object, or null if not in list.
     * @api
     */
    function get(projectionLike) {
        return typeof projectionLike === 'string'
            ? projections_js_1.get(/** @type {string} */ (projectionLike))
            : /** @type {Projection} */ (projectionLike) || null;
    }
    exports.get = get;
    /**
     * Get the resolution of the point in degrees or distance units.
     * For projections with degrees as the unit this will simply return the
     * provided resolution. For other projections the point resolution is
     * by default estimated by transforming the 'point' pixel to EPSG:4326,
     * measuring its width and height on the normal sphere,
     * and taking the average of the width and height.
     * A custom function can be provided for a specific projection, either
     * by setting the `getPointResolution` option in the
     * {@link module:ol/proj/Projection~Projection} constructor or by using
     * {@link module:ol/proj/Projection~Projection#setGetPointResolution} to change an existing
     * projection object.
     * @param {ProjectionLike} projection The projection.
     * @param {number} resolution Nominal resolution in projection units.
     * @param {import("./coordinate.js").Coordinate} point Point to find adjusted resolution at.
     * @param {import("./proj/Units.js").default=} opt_units Units to get the point resolution in.
     * Default is the projection's units.
     * @return {number} Point resolution.
     * @api
     */
    function getPointResolution(projection, resolution, point, opt_units) {
        projection = get(projection);
        let pointResolution;
        const getter = projection.getPointResolutionFunc();
        if (getter) {
            pointResolution = getter(resolution, point);
            if (opt_units && opt_units !== projection.getUnits()) {
                const metersPerUnit = projection.getMetersPerUnit();
                if (metersPerUnit) {
                    pointResolution =
                        (pointResolution * metersPerUnit) / Units_js_5.METERS_PER_UNIT[opt_units];
                }
            }
        }
        else {
            const units = projection.getUnits();
            if ((units == Units_js_5.default.DEGREES && !opt_units) || opt_units == Units_js_5.default.DEGREES) {
                pointResolution = resolution;
            }
            else {
                // Estimate point resolution by transforming the center pixel to EPSG:4326,
                // measuring its width and height on the normal sphere, and taking the
                // average of the width and height.
                const toEPSG4326 = getTransformFromProjections(projection, get('EPSG:4326'));
                let vertices = [
                    point[0] - resolution / 2,
                    point[1],
                    point[0] + resolution / 2,
                    point[1],
                    point[0],
                    point[1] - resolution / 2,
                    point[0],
                    point[1] + resolution / 2,
                ];
                vertices = toEPSG4326(vertices, vertices, 2);
                const width = sphere_js_2.getDistance(vertices.slice(0, 2), vertices.slice(2, 4));
                const height = sphere_js_2.getDistance(vertices.slice(4, 6), vertices.slice(6, 8));
                pointResolution = (width + height) / 2;
                const metersPerUnit = opt_units
                    ? Units_js_5.METERS_PER_UNIT[opt_units]
                    : projection.getMetersPerUnit();
                if (metersPerUnit !== undefined) {
                    pointResolution /= metersPerUnit;
                }
            }
        }
        return pointResolution;
    }
    exports.getPointResolution = getPointResolution;
    /**
     * Registers transformation functions that don't alter coordinates. Those allow
     * to transform between projections with equal meaning.
     *
     * @param {Array<Projection>} projections Projections.
     * @api
     */
    function addEquivalentProjections(projections) {
        addProjections(projections);
        projections.forEach(function (source) {
            projections.forEach(function (destination) {
                if (source !== destination) {
                    transforms_js_1.add(source, destination, cloneTransform);
                }
            });
        });
    }
    exports.addEquivalentProjections = addEquivalentProjections;
    /**
     * Registers transformation functions to convert coordinates in any projection
     * in projection1 to any projection in projection2.
     *
     * @param {Array<Projection>} projections1 Projections with equal
     *     meaning.
     * @param {Array<Projection>} projections2 Projections with equal
     *     meaning.
     * @param {TransformFunction} forwardTransform Transformation from any
     *   projection in projection1 to any projection in projection2.
     * @param {TransformFunction} inverseTransform Transform from any projection
     *   in projection2 to any projection in projection1..
     */
    function addEquivalentTransforms(projections1, projections2, forwardTransform, inverseTransform) {
        projections1.forEach(function (projection1) {
            projections2.forEach(function (projection2) {
                transforms_js_1.add(projection1, projection2, forwardTransform);
                transforms_js_1.add(projection2, projection1, inverseTransform);
            });
        });
    }
    exports.addEquivalentTransforms = addEquivalentTransforms;
    /**
     * Clear all cached projections and transforms.
     */
    function clearAllProjections() {
        projections_js_1.clear();
        transforms_js_1.clear();
    }
    exports.clearAllProjections = clearAllProjections;
    /**
     * @param {Projection|string|undefined} projection Projection.
     * @param {string} defaultCode Default code.
     * @return {Projection} Projection.
     */
    function createProjection(projection, defaultCode) {
        if (!projection) {
            return get(defaultCode);
        }
        else if (typeof projection === 'string') {
            return get(projection);
        }
        else {
            return /** @type {Projection} */ (projection);
        }
    }
    exports.createProjection = createProjection;
    /**
     * Creates a {@link module:ol/proj~TransformFunction} from a simple 2D coordinate transform
     * function.
     * @param {function(import("./coordinate.js").Coordinate): import("./coordinate.js").Coordinate} coordTransform Coordinate
     *     transform.
     * @return {TransformFunction} Transform function.
     */
    function createTransformFromCoordinateTransform(coordTransform) {
        return (
        /**
         * @param {Array<number>} input Input.
         * @param {Array<number>=} opt_output Output.
         * @param {number=} opt_dimension Dimension.
         * @return {Array<number>} Output.
         */
        function (input, opt_output, opt_dimension) {
            const length = input.length;
            const dimension = opt_dimension !== undefined ? opt_dimension : 2;
            const output = opt_output !== undefined ? opt_output : new Array(length);
            for (let i = 0; i < length; i += dimension) {
                const point = coordTransform([input[i], input[i + 1]]);
                output[i] = point[0];
                output[i + 1] = point[1];
                for (let j = dimension - 1; j >= 2; --j) {
                    output[i + j] = input[i + j];
                }
            }
            return output;
        });
    }
    exports.createTransformFromCoordinateTransform = createTransformFromCoordinateTransform;
    /**
     * Registers coordinate transform functions to convert coordinates between the
     * source projection and the destination projection.
     * The forward and inverse functions convert coordinate pairs; this function
     * converts these into the functions used internally which also handle
     * extents and coordinate arrays.
     *
     * @param {ProjectionLike} source Source projection.
     * @param {ProjectionLike} destination Destination projection.
     * @param {function(import("./coordinate.js").Coordinate): import("./coordinate.js").Coordinate} forward The forward transform
     *     function (that is, from the source projection to the destination
     *     projection) that takes a {@link module:ol/coordinate~Coordinate} as argument and returns
     *     the transformed {@link module:ol/coordinate~Coordinate}.
     * @param {function(import("./coordinate.js").Coordinate): import("./coordinate.js").Coordinate} inverse The inverse transform
     *     function (that is, from the destination projection to the source
     *     projection) that takes a {@link module:ol/coordinate~Coordinate} as argument and returns
     *     the transformed {@link module:ol/coordinate~Coordinate}.
     * @api
     */
    function addCoordinateTransforms(source, destination, forward, inverse) {
        const sourceProj = get(source);
        const destProj = get(destination);
        transforms_js_1.add(sourceProj, destProj, createTransformFromCoordinateTransform(forward));
        transforms_js_1.add(destProj, sourceProj, createTransformFromCoordinateTransform(inverse));
    }
    exports.addCoordinateTransforms = addCoordinateTransforms;
    /**
     * Transforms a coordinate from longitude/latitude to a different projection.
     * @param {import("./coordinate.js").Coordinate} coordinate Coordinate as longitude and latitude, i.e.
     *     an array with longitude as 1st and latitude as 2nd element.
     * @param {ProjectionLike=} opt_projection Target projection. The
     *     default is Web Mercator, i.e. 'EPSG:3857'.
     * @return {import("./coordinate.js").Coordinate} Coordinate projected to the target projection.
     * @api
     */
    function fromLonLat(coordinate, opt_projection) {
        return transform(coordinate, 'EPSG:4326', opt_projection !== undefined ? opt_projection : 'EPSG:3857');
    }
    exports.fromLonLat = fromLonLat;
    /**
     * Transforms a coordinate to longitude/latitude.
     * @param {import("./coordinate.js").Coordinate} coordinate Projected coordinate.
     * @param {ProjectionLike=} opt_projection Projection of the coordinate.
     *     The default is Web Mercator, i.e. 'EPSG:3857'.
     * @return {import("./coordinate.js").Coordinate} Coordinate as longitude and latitude, i.e. an array
     *     with longitude as 1st and latitude as 2nd element.
     * @api
     */
    function toLonLat(coordinate, opt_projection) {
        const lonLat = transform(coordinate, opt_projection !== undefined ? opt_projection : 'EPSG:3857', 'EPSG:4326');
        const lon = lonLat[0];
        if (lon < -180 || lon > 180) {
            lonLat[0] = math_js_8.modulo(lon + 180, 360) - 180;
        }
        return lonLat;
    }
    exports.toLonLat = toLonLat;
    /**
     * Checks if two projections are the same, that is every coordinate in one
     * projection does represent the same geographic point as the same coordinate in
     * the other projection.
     *
     * @param {Projection} projection1 Projection 1.
     * @param {Projection} projection2 Projection 2.
     * @return {boolean} Equivalent.
     * @api
     */
    function equivalent(projection1, projection2) {
        if (projection1 === projection2) {
            return true;
        }
        const equalUnits = projection1.getUnits() === projection2.getUnits();
        if (projection1.getCode() === projection2.getCode()) {
            return equalUnits;
        }
        else {
            const transformFunc = getTransformFromProjections(projection1, projection2);
            return transformFunc === cloneTransform && equalUnits;
        }
    }
    exports.equivalent = equivalent;
    /**
     * Searches in the list of transform functions for the function for converting
     * coordinates from the source projection to the destination projection.
     *
     * @param {Projection} sourceProjection Source Projection object.
     * @param {Projection} destinationProjection Destination Projection
     *     object.
     * @return {TransformFunction} Transform function.
     */
    function getTransformFromProjections(sourceProjection, destinationProjection) {
        const sourceCode = sourceProjection.getCode();
        const destinationCode = destinationProjection.getCode();
        let transformFunc = transforms_js_1.get(sourceCode, destinationCode);
        if (!transformFunc) {
            transformFunc = identityTransform;
        }
        return transformFunc;
    }
    exports.getTransformFromProjections = getTransformFromProjections;
    /**
     * Given the projection-like objects, searches for a transformation
     * function to convert a coordinates array from the source projection to the
     * destination projection.
     *
     * @param {ProjectionLike} source Source.
     * @param {ProjectionLike} destination Destination.
     * @return {TransformFunction} Transform function.
     * @api
     */
    function getTransform(source, destination) {
        const sourceProjection = get(source);
        const destinationProjection = get(destination);
        return getTransformFromProjections(sourceProjection, destinationProjection);
    }
    exports.getTransform = getTransform;
    /**
     * Transforms a coordinate from source projection to destination projection.
     * This returns a new coordinate (and does not modify the original).
     *
     * See {@link module:ol/proj~transformExtent} for extent transformation.
     * See the transform method of {@link module:ol/geom/Geometry~Geometry} and its
     * subclasses for geometry transforms.
     *
     * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
     * @param {ProjectionLike} source Source projection-like.
     * @param {ProjectionLike} destination Destination projection-like.
     * @return {import("./coordinate.js").Coordinate} Coordinate.
     * @api
     */
    function transform(coordinate, source, destination) {
        const transformFunc = getTransform(source, destination);
        return transformFunc(coordinate, undefined, coordinate.length);
    }
    exports.transform = transform;
    /**
     * Transforms an extent from source projection to destination projection.  This
     * returns a new extent (and does not modify the original).
     *
     * @param {import("./extent.js").Extent} extent The extent to transform.
     * @param {ProjectionLike} source Source projection-like.
     * @param {ProjectionLike} destination Destination projection-like.
     * @param {number=} opt_stops Number of stops per side used for the transform.
     * By default only the corners are used.
     * @return {import("./extent.js").Extent} The transformed extent.
     * @api
     */
    function transformExtent(extent, source, destination, opt_stops) {
        const transformFunc = getTransform(source, destination);
        return extent_js_11.applyTransform(extent, transformFunc, undefined, opt_stops);
    }
    exports.transformExtent = transformExtent;
    /**
     * Transforms the given point to the destination projection.
     *
     * @param {import("./coordinate.js").Coordinate} point Point.
     * @param {Projection} sourceProjection Source projection.
     * @param {Projection} destinationProjection Destination projection.
     * @return {import("./coordinate.js").Coordinate} Point.
     */
    function transformWithProjections(point, sourceProjection, destinationProjection) {
        const transformFunc = getTransformFromProjections(sourceProjection, destinationProjection);
        return transformFunc(point);
    }
    exports.transformWithProjections = transformWithProjections;
    /**
     * @type {?Projection}
     */
    let userProjection = null;
    /**
     * Set the projection for coordinates supplied from and returned by API methods.
     * Note that this method is not yet a part of the stable API.  Support for user
     * projections is not yet complete and should be considered experimental.
     * @param {ProjectionLike} projection The user projection.
     */
    function setUserProjection(projection) {
        userProjection = get(projection);
    }
    exports.setUserProjection = setUserProjection;
    /**
     * Clear the user projection if set.  Note that this method is not yet a part of
     * the stable API.  Support for user projections is not yet complete and should
     * be considered experimental.
     */
    function clearUserProjection() {
        userProjection = null;
    }
    exports.clearUserProjection = clearUserProjection;
    /**
     * Get the projection for coordinates supplied from and returned by API methods.
     * Note that this method is not yet a part of the stable API.  Support for user
     * projections is not yet complete and should be considered experimental.
     * @returns {?Projection} The user projection (or null if not set).
     */
    function getUserProjection() {
        return userProjection;
    }
    exports.getUserProjection = getUserProjection;
    /**
     * Use geographic coordinates (WGS-84 datum) in API methods.  Note that this
     * method is not yet a part of the stable API.  Support for user projections is
     * not yet complete and should be considered experimental.
     */
    function useGeographic() {
        setUserProjection('EPSG:4326');
    }
    exports.useGeographic = useGeographic;
    /**
     * Return a coordinate transformed into the user projection.  If no user projection
     * is set, the original coordinate is returned.
     * @param {Array<number>} coordinate Input coordinate.
     * @param {ProjectionLike} sourceProjection The input coordinate projection.
     * @returns {Array<number>} The input coordinate in the user projection.
     */
    function toUserCoordinate(coordinate, sourceProjection) {
        if (!userProjection) {
            return coordinate;
        }
        return transform(coordinate, sourceProjection, userProjection);
    }
    exports.toUserCoordinate = toUserCoordinate;
    /**
     * Return a coordinate transformed from the user projection.  If no user projection
     * is set, the original coordinate is returned.
     * @param {Array<number>} coordinate Input coordinate.
     * @param {ProjectionLike} destProjection The destination projection.
     * @returns {Array<number>} The input coordinate transformed.
     */
    function fromUserCoordinate(coordinate, destProjection) {
        if (!userProjection) {
            return coordinate;
        }
        return transform(coordinate, userProjection, destProjection);
    }
    exports.fromUserCoordinate = fromUserCoordinate;
    /**
     * Return an extent transformed into the user projection.  If no user projection
     * is set, the original extent is returned.
     * @param {import("./extent.js").Extent} extent Input extent.
     * @param {ProjectionLike} sourceProjection The input extent projection.
     * @returns {import("./extent.js").Extent} The input extent in the user projection.
     */
    function toUserExtent(extent, sourceProjection) {
        if (!userProjection) {
            return extent;
        }
        return transformExtent(extent, sourceProjection, userProjection);
    }
    exports.toUserExtent = toUserExtent;
    /**
     * Return an extent transformed from the user projection.  If no user projection
     * is set, the original extent is returned.
     * @param {import("./extent.js").Extent} extent Input extent.
     * @param {ProjectionLike} destProjection The destination projection.
     * @returns {import("./extent.js").Extent} The input extent transformed.
     */
    function fromUserExtent(extent, destProjection) {
        if (!userProjection) {
            return extent;
        }
        return transformExtent(extent, userProjection, destProjection);
    }
    exports.fromUserExtent = fromUserExtent;
    /**
     * Creates a safe coordinate transform function from a coordinate transform function.
     * "Safe" means that it can handle wrapping of x-coordinates for global projections,
     * and that coordinates exceeding the source projection validity extent's range will be
     * clamped to the validity range.
     * @param {Projection} sourceProj Source projection.
     * @param {Projection} destProj Destination projection.
     * @param {function(import("./coordinate.js").Coordinate): import("./coordinate.js").Coordinate} transform Transform function (source to destiation).
     * @return {function(import("./coordinate.js").Coordinate): import("./coordinate.js").Coordinate} Safe transform function (source to destiation).
     */
    function createSafeCoordinateTransform(sourceProj, destProj, transform) {
        return function (coord) {
            let sourceX = coord[0];
            let sourceY = coord[1];
            let transformed, worldsAway;
            if (sourceProj.canWrapX()) {
                const sourceExtent = sourceProj.getExtent();
                const sourceExtentWidth = extent_js_11.getWidth(sourceExtent);
                worldsAway = coordinate_js_1.getWorldsAway(coord, sourceProj, sourceExtentWidth);
                if (worldsAway) {
                    // Move x to the real world
                    sourceX = sourceX - worldsAway * sourceExtentWidth;
                }
                sourceX = math_js_8.clamp(sourceX, sourceExtent[0], sourceExtent[2]);
                sourceY = math_js_8.clamp(sourceY, sourceExtent[1], sourceExtent[3]);
                transformed = transform([sourceX, sourceY]);
            }
            else {
                transformed = transform(coord);
            }
            if (worldsAway && destProj.canWrapX()) {
                // Move transformed coordinate back to the offset world
                transformed[0] += worldsAway * extent_js_11.getWidth(destProj.getExtent());
            }
            return transformed;
        };
    }
    exports.createSafeCoordinateTransform = createSafeCoordinateTransform;
    /**
     * Add transforms to and from EPSG:4326 and EPSG:3857.  This function is called
     * by when this module is executed and should only need to be called again after
     * `clearAllProjections()` is called (e.g. in tests).
     */
    function addCommon() {
        // Add transformations that don't alter coordinates to convert within set of
        // projections with equal meaning.
        addEquivalentProjections(epsg3857_js_1.PROJECTIONS);
        addEquivalentProjections(epsg4326_js_1.PROJECTIONS);
        // Add transformations to convert EPSG:4326 like coordinates to EPSG:3857 like
        // coordinates and back.
        addEquivalentTransforms(epsg4326_js_1.PROJECTIONS, epsg3857_js_1.PROJECTIONS, epsg3857_js_1.fromEPSG4326, epsg3857_js_1.toEPSG4326);
    }
    exports.addCommon = addCommon;
    addCommon();
});
define("node_modules/ol/src/extent", ["require", "exports", "node_modules/ol/src/extent/Corner", "node_modules/ol/src/extent/Relationship", "node_modules/ol/src/asserts"], function (require, exports, Corner_js_1, Relationship_js_1, asserts_js_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.wrapX = exports.applyTransform = exports.intersectsSegment = exports.scaleFromCenter = exports.returnOrUpdate = exports.isEmpty = exports.intersects = exports.getWidth = exports.getTopRight = exports.getTopLeft = exports.getSize = exports.getMargin = exports.getIntersection = exports.getIntersectionArea = exports.getHeight = exports.getForViewAndSize = exports.getEnlargedArea = exports.getCorner = exports.getCenter = exports.getBottomRight = exports.getBottomLeft = exports.getArea = exports.forEachCorner = exports.extendXY = exports.extendRings = exports.extendFlatCoordinates = exports.extendCoordinates = exports.extendCoordinate = exports.extend = exports.approximatelyEquals = exports.equals = exports.createOrUpdateFromRings = exports.createOrUpdateFromFlatCoordinates = exports.createOrUpdateFromCoordinates = exports.createOrUpdateFromCoordinate = exports.createOrUpdateEmpty = exports.createOrUpdate = exports.createEmpty = exports.coordinateRelationship = exports.containsXY = exports.containsExtent = exports.containsCoordinate = exports.closestSquaredDistanceXY = exports.clone = exports.buffer = exports.boundingExtent = void 0;
    /**
     * An array of numbers representing an extent: `[minx, miny, maxx, maxy]`.
     * @typedef {Array<number>} Extent
     * @api
     */
    /**
     * Build an extent that includes all given coordinates.
     *
     * @param {Array<import("./coordinate.js").Coordinate>} coordinates Coordinates.
     * @return {Extent} Bounding extent.
     * @api
     */
    function boundingExtent(coordinates) {
        const extent = createEmpty();
        for (let i = 0, ii = coordinates.length; i < ii; ++i) {
            extendCoordinate(extent, coordinates[i]);
        }
        return extent;
    }
    exports.boundingExtent = boundingExtent;
    /**
     * @param {Array<number>} xs Xs.
     * @param {Array<number>} ys Ys.
     * @param {Extent=} opt_extent Destination extent.
     * @private
     * @return {Extent} Extent.
     */
    function _boundingExtentXYs(xs, ys, opt_extent) {
        const minX = Math.min.apply(null, xs);
        const minY = Math.min.apply(null, ys);
        const maxX = Math.max.apply(null, xs);
        const maxY = Math.max.apply(null, ys);
        return createOrUpdate(minX, minY, maxX, maxY, opt_extent);
    }
    /**
     * Return extent increased by the provided value.
     * @param {Extent} extent Extent.
     * @param {number} value The amount by which the extent should be buffered.
     * @param {Extent=} opt_extent Extent.
     * @return {Extent} Extent.
     * @api
     */
    function buffer(extent, value, opt_extent) {
        if (opt_extent) {
            opt_extent[0] = extent[0] - value;
            opt_extent[1] = extent[1] - value;
            opt_extent[2] = extent[2] + value;
            opt_extent[3] = extent[3] + value;
            return opt_extent;
        }
        else {
            return [
                extent[0] - value,
                extent[1] - value,
                extent[2] + value,
                extent[3] + value,
            ];
        }
    }
    exports.buffer = buffer;
    /**
     * Creates a clone of an extent.
     *
     * @param {Extent} extent Extent to clone.
     * @param {Extent=} opt_extent Extent.
     * @return {Extent} The clone.
     */
    function clone(extent, opt_extent) {
        if (opt_extent) {
            opt_extent[0] = extent[0];
            opt_extent[1] = extent[1];
            opt_extent[2] = extent[2];
            opt_extent[3] = extent[3];
            return opt_extent;
        }
        else {
            return extent.slice();
        }
    }
    exports.clone = clone;
    /**
     * @param {Extent} extent Extent.
     * @param {number} x X.
     * @param {number} y Y.
     * @return {number} Closest squared distance.
     */
    function closestSquaredDistanceXY(extent, x, y) {
        let dx, dy;
        if (x < extent[0]) {
            dx = extent[0] - x;
        }
        else if (extent[2] < x) {
            dx = x - extent[2];
        }
        else {
            dx = 0;
        }
        if (y < extent[1]) {
            dy = extent[1] - y;
        }
        else if (extent[3] < y) {
            dy = y - extent[3];
        }
        else {
            dy = 0;
        }
        return dx * dx + dy * dy;
    }
    exports.closestSquaredDistanceXY = closestSquaredDistanceXY;
    /**
     * Check if the passed coordinate is contained or on the edge of the extent.
     *
     * @param {Extent} extent Extent.
     * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
     * @return {boolean} The coordinate is contained in the extent.
     * @api
     */
    function containsCoordinate(extent, coordinate) {
        return containsXY(extent, coordinate[0], coordinate[1]);
    }
    exports.containsCoordinate = containsCoordinate;
    /**
     * Check if one extent contains another.
     *
     * An extent is deemed contained if it lies completely within the other extent,
     * including if they share one or more edges.
     *
     * @param {Extent} extent1 Extent 1.
     * @param {Extent} extent2 Extent 2.
     * @return {boolean} The second extent is contained by or on the edge of the
     *     first.
     * @api
     */
    function containsExtent(extent1, extent2) {
        return (extent1[0] <= extent2[0] &&
            extent2[2] <= extent1[2] &&
            extent1[1] <= extent2[1] &&
            extent2[3] <= extent1[3]);
    }
    exports.containsExtent = containsExtent;
    /**
     * Check if the passed coordinate is contained or on the edge of the extent.
     *
     * @param {Extent} extent Extent.
     * @param {number} x X coordinate.
     * @param {number} y Y coordinate.
     * @return {boolean} The x, y values are contained in the extent.
     * @api
     */
    function containsXY(extent, x, y) {
        return extent[0] <= x && x <= extent[2] && extent[1] <= y && y <= extent[3];
    }
    exports.containsXY = containsXY;
    /**
     * Get the relationship between a coordinate and extent.
     * @param {Extent} extent The extent.
     * @param {import("./coordinate.js").Coordinate} coordinate The coordinate.
     * @return {import("./extent/Relationship.js").default} The relationship (bitwise compare with
     *     import("./extent/Relationship.js").Relationship).
     */
    function coordinateRelationship(extent, coordinate) {
        const minX = extent[0];
        const minY = extent[1];
        const maxX = extent[2];
        const maxY = extent[3];
        const x = coordinate[0];
        const y = coordinate[1];
        let relationship = Relationship_js_1.default.UNKNOWN;
        if (x < minX) {
            relationship = relationship | Relationship_js_1.default.LEFT;
        }
        else if (x > maxX) {
            relationship = relationship | Relationship_js_1.default.RIGHT;
        }
        if (y < minY) {
            relationship = relationship | Relationship_js_1.default.BELOW;
        }
        else if (y > maxY) {
            relationship = relationship | Relationship_js_1.default.ABOVE;
        }
        if (relationship === Relationship_js_1.default.UNKNOWN) {
            relationship = Relationship_js_1.default.INTERSECTING;
        }
        return relationship;
    }
    exports.coordinateRelationship = coordinateRelationship;
    /**
     * Create an empty extent.
     * @return {Extent} Empty extent.
     * @api
     */
    function createEmpty() {
        return [Infinity, Infinity, -Infinity, -Infinity];
    }
    exports.createEmpty = createEmpty;
    /**
     * Create a new extent or update the provided extent.
     * @param {number} minX Minimum X.
     * @param {number} minY Minimum Y.
     * @param {number} maxX Maximum X.
     * @param {number} maxY Maximum Y.
     * @param {Extent=} opt_extent Destination extent.
     * @return {Extent} Extent.
     */
    function createOrUpdate(minX, minY, maxX, maxY, opt_extent) {
        if (opt_extent) {
            opt_extent[0] = minX;
            opt_extent[1] = minY;
            opt_extent[2] = maxX;
            opt_extent[3] = maxY;
            return opt_extent;
        }
        else {
            return [minX, minY, maxX, maxY];
        }
    }
    exports.createOrUpdate = createOrUpdate;
    /**
     * Create a new empty extent or make the provided one empty.
     * @param {Extent=} opt_extent Extent.
     * @return {Extent} Extent.
     */
    function createOrUpdateEmpty(opt_extent) {
        return createOrUpdate(Infinity, Infinity, -Infinity, -Infinity, opt_extent);
    }
    exports.createOrUpdateEmpty = createOrUpdateEmpty;
    /**
     * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
     * @param {Extent=} opt_extent Extent.
     * @return {Extent} Extent.
     */
    function createOrUpdateFromCoordinate(coordinate, opt_extent) {
        const x = coordinate[0];
        const y = coordinate[1];
        return createOrUpdate(x, y, x, y, opt_extent);
    }
    exports.createOrUpdateFromCoordinate = createOrUpdateFromCoordinate;
    /**
     * @param {Array<import("./coordinate.js").Coordinate>} coordinates Coordinates.
     * @param {Extent=} opt_extent Extent.
     * @return {Extent} Extent.
     */
    function createOrUpdateFromCoordinates(coordinates, opt_extent) {
        const extent = createOrUpdateEmpty(opt_extent);
        return extendCoordinates(extent, coordinates);
    }
    exports.createOrUpdateFromCoordinates = createOrUpdateFromCoordinates;
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @param {Extent=} opt_extent Extent.
     * @return {Extent} Extent.
     */
    function createOrUpdateFromFlatCoordinates(flatCoordinates, offset, end, stride, opt_extent) {
        const extent = createOrUpdateEmpty(opt_extent);
        return extendFlatCoordinates(extent, flatCoordinates, offset, end, stride);
    }
    exports.createOrUpdateFromFlatCoordinates = createOrUpdateFromFlatCoordinates;
    /**
     * @param {Array<Array<import("./coordinate.js").Coordinate>>} rings Rings.
     * @param {Extent=} opt_extent Extent.
     * @return {Extent} Extent.
     */
    function createOrUpdateFromRings(rings, opt_extent) {
        const extent = createOrUpdateEmpty(opt_extent);
        return extendRings(extent, rings);
    }
    exports.createOrUpdateFromRings = createOrUpdateFromRings;
    /**
     * Determine if two extents are equivalent.
     * @param {Extent} extent1 Extent 1.
     * @param {Extent} extent2 Extent 2.
     * @return {boolean} The two extents are equivalent.
     * @api
     */
    function equals(extent1, extent2) {
        return (extent1[0] == extent2[0] &&
            extent1[2] == extent2[2] &&
            extent1[1] == extent2[1] &&
            extent1[3] == extent2[3]);
    }
    exports.equals = equals;
    /**
     * Determine if two extents are approximately equivalent.
     * @param {Extent} extent1 Extent 1.
     * @param {Extent} extent2 Extent 2.
     * @param {number} tolerance Tolerance in extent coordinate units.
     * @return {boolean} The two extents differ by less than the tolerance.
     */
    function approximatelyEquals(extent1, extent2, tolerance) {
        return (Math.abs(extent1[0] - extent2[0]) < tolerance &&
            Math.abs(extent1[2] - extent2[2]) < tolerance &&
            Math.abs(extent1[1] - extent2[1]) < tolerance &&
            Math.abs(extent1[3] - extent2[3]) < tolerance);
    }
    exports.approximatelyEquals = approximatelyEquals;
    /**
     * Modify an extent to include another extent.
     * @param {Extent} extent1 The extent to be modified.
     * @param {Extent} extent2 The extent that will be included in the first.
     * @return {Extent} A reference to the first (extended) extent.
     * @api
     */
    function extend(extent1, extent2) {
        if (extent2[0] < extent1[0]) {
            extent1[0] = extent2[0];
        }
        if (extent2[2] > extent1[2]) {
            extent1[2] = extent2[2];
        }
        if (extent2[1] < extent1[1]) {
            extent1[1] = extent2[1];
        }
        if (extent2[3] > extent1[3]) {
            extent1[3] = extent2[3];
        }
        return extent1;
    }
    exports.extend = extend;
    /**
     * @param {Extent} extent Extent.
     * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
     */
    function extendCoordinate(extent, coordinate) {
        if (coordinate[0] < extent[0]) {
            extent[0] = coordinate[0];
        }
        if (coordinate[0] > extent[2]) {
            extent[2] = coordinate[0];
        }
        if (coordinate[1] < extent[1]) {
            extent[1] = coordinate[1];
        }
        if (coordinate[1] > extent[3]) {
            extent[3] = coordinate[1];
        }
    }
    exports.extendCoordinate = extendCoordinate;
    /**
     * @param {Extent} extent Extent.
     * @param {Array<import("./coordinate.js").Coordinate>} coordinates Coordinates.
     * @return {Extent} Extent.
     */
    function extendCoordinates(extent, coordinates) {
        for (let i = 0, ii = coordinates.length; i < ii; ++i) {
            extendCoordinate(extent, coordinates[i]);
        }
        return extent;
    }
    exports.extendCoordinates = extendCoordinates;
    /**
     * @param {Extent} extent Extent.
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @return {Extent} Extent.
     */
    function extendFlatCoordinates(extent, flatCoordinates, offset, end, stride) {
        for (; offset < end; offset += stride) {
            extendXY(extent, flatCoordinates[offset], flatCoordinates[offset + 1]);
        }
        return extent;
    }
    exports.extendFlatCoordinates = extendFlatCoordinates;
    /**
     * @param {Extent} extent Extent.
     * @param {Array<Array<import("./coordinate.js").Coordinate>>} rings Rings.
     * @return {Extent} Extent.
     */
    function extendRings(extent, rings) {
        for (let i = 0, ii = rings.length; i < ii; ++i) {
            extendCoordinates(extent, rings[i]);
        }
        return extent;
    }
    exports.extendRings = extendRings;
    /**
     * @param {Extent} extent Extent.
     * @param {number} x X.
     * @param {number} y Y.
     */
    function extendXY(extent, x, y) {
        extent[0] = Math.min(extent[0], x);
        extent[1] = Math.min(extent[1], y);
        extent[2] = Math.max(extent[2], x);
        extent[3] = Math.max(extent[3], y);
    }
    exports.extendXY = extendXY;
    /**
     * This function calls `callback` for each corner of the extent. If the
     * callback returns a truthy value the function returns that value
     * immediately. Otherwise the function returns `false`.
     * @param {Extent} extent Extent.
     * @param {function(import("./coordinate.js").Coordinate): S} callback Callback.
     * @return {S|boolean} Value.
     * @template S
     */
    function forEachCorner(extent, callback) {
        let val;
        val = callback(getBottomLeft(extent));
        if (val) {
            return val;
        }
        val = callback(getBottomRight(extent));
        if (val) {
            return val;
        }
        val = callback(getTopRight(extent));
        if (val) {
            return val;
        }
        val = callback(getTopLeft(extent));
        if (val) {
            return val;
        }
        return false;
    }
    exports.forEachCorner = forEachCorner;
    /**
     * Get the size of an extent.
     * @param {Extent} extent Extent.
     * @return {number} Area.
     * @api
     */
    function getArea(extent) {
        let area = 0;
        if (!isEmpty(extent)) {
            area = getWidth(extent) * getHeight(extent);
        }
        return area;
    }
    exports.getArea = getArea;
    /**
     * Get the bottom left coordinate of an extent.
     * @param {Extent} extent Extent.
     * @return {import("./coordinate.js").Coordinate} Bottom left coordinate.
     * @api
     */
    function getBottomLeft(extent) {
        return [extent[0], extent[1]];
    }
    exports.getBottomLeft = getBottomLeft;
    /**
     * Get the bottom right coordinate of an extent.
     * @param {Extent} extent Extent.
     * @return {import("./coordinate.js").Coordinate} Bottom right coordinate.
     * @api
     */
    function getBottomRight(extent) {
        return [extent[2], extent[1]];
    }
    exports.getBottomRight = getBottomRight;
    /**
     * Get the center coordinate of an extent.
     * @param {Extent} extent Extent.
     * @return {import("./coordinate.js").Coordinate} Center.
     * @api
     */
    function getCenter(extent) {
        return [(extent[0] + extent[2]) / 2, (extent[1] + extent[3]) / 2];
    }
    exports.getCenter = getCenter;
    /**
     * Get a corner coordinate of an extent.
     * @param {Extent} extent Extent.
     * @param {import("./extent/Corner.js").default} corner Corner.
     * @return {import("./coordinate.js").Coordinate} Corner coordinate.
     */
    function getCorner(extent, corner) {
        let coordinate;
        if (corner === Corner_js_1.default.BOTTOM_LEFT) {
            coordinate = getBottomLeft(extent);
        }
        else if (corner === Corner_js_1.default.BOTTOM_RIGHT) {
            coordinate = getBottomRight(extent);
        }
        else if (corner === Corner_js_1.default.TOP_LEFT) {
            coordinate = getTopLeft(extent);
        }
        else if (corner === Corner_js_1.default.TOP_RIGHT) {
            coordinate = getTopRight(extent);
        }
        else {
            asserts_js_2.assert(false, 13); // Invalid corner
        }
        return coordinate;
    }
    exports.getCorner = getCorner;
    /**
     * @param {Extent} extent1 Extent 1.
     * @param {Extent} extent2 Extent 2.
     * @return {number} Enlarged area.
     */
    function getEnlargedArea(extent1, extent2) {
        const minX = Math.min(extent1[0], extent2[0]);
        const minY = Math.min(extent1[1], extent2[1]);
        const maxX = Math.max(extent1[2], extent2[2]);
        const maxY = Math.max(extent1[3], extent2[3]);
        return (maxX - minX) * (maxY - minY);
    }
    exports.getEnlargedArea = getEnlargedArea;
    /**
     * @param {import("./coordinate.js").Coordinate} center Center.
     * @param {number} resolution Resolution.
     * @param {number} rotation Rotation.
     * @param {import("./size.js").Size} size Size.
     * @param {Extent=} opt_extent Destination extent.
     * @return {Extent} Extent.
     */
    function getForViewAndSize(center, resolution, rotation, size, opt_extent) {
        const dx = (resolution * size[0]) / 2;
        const dy = (resolution * size[1]) / 2;
        const cosRotation = Math.cos(rotation);
        const sinRotation = Math.sin(rotation);
        const xCos = dx * cosRotation;
        const xSin = dx * sinRotation;
        const yCos = dy * cosRotation;
        const ySin = dy * sinRotation;
        const x = center[0];
        const y = center[1];
        const x0 = x - xCos + ySin;
        const x1 = x - xCos - ySin;
        const x2 = x + xCos - ySin;
        const x3 = x + xCos + ySin;
        const y0 = y - xSin - yCos;
        const y1 = y - xSin + yCos;
        const y2 = y + xSin + yCos;
        const y3 = y + xSin - yCos;
        return createOrUpdate(Math.min(x0, x1, x2, x3), Math.min(y0, y1, y2, y3), Math.max(x0, x1, x2, x3), Math.max(y0, y1, y2, y3), opt_extent);
    }
    exports.getForViewAndSize = getForViewAndSize;
    /**
     * Get the height of an extent.
     * @param {Extent} extent Extent.
     * @return {number} Height.
     * @api
     */
    function getHeight(extent) {
        return extent[3] - extent[1];
    }
    exports.getHeight = getHeight;
    /**
     * @param {Extent} extent1 Extent 1.
     * @param {Extent} extent2 Extent 2.
     * @return {number} Intersection area.
     */
    function getIntersectionArea(extent1, extent2) {
        const intersection = getIntersection(extent1, extent2);
        return getArea(intersection);
    }
    exports.getIntersectionArea = getIntersectionArea;
    /**
     * Get the intersection of two extents.
     * @param {Extent} extent1 Extent 1.
     * @param {Extent} extent2 Extent 2.
     * @param {Extent=} opt_extent Optional extent to populate with intersection.
     * @return {Extent} Intersecting extent.
     * @api
     */
    function getIntersection(extent1, extent2, opt_extent) {
        const intersection = opt_extent ? opt_extent : createEmpty();
        if (intersects(extent1, extent2)) {
            if (extent1[0] > extent2[0]) {
                intersection[0] = extent1[0];
            }
            else {
                intersection[0] = extent2[0];
            }
            if (extent1[1] > extent2[1]) {
                intersection[1] = extent1[1];
            }
            else {
                intersection[1] = extent2[1];
            }
            if (extent1[2] < extent2[2]) {
                intersection[2] = extent1[2];
            }
            else {
                intersection[2] = extent2[2];
            }
            if (extent1[3] < extent2[3]) {
                intersection[3] = extent1[3];
            }
            else {
                intersection[3] = extent2[3];
            }
        }
        else {
            createOrUpdateEmpty(intersection);
        }
        return intersection;
    }
    exports.getIntersection = getIntersection;
    /**
     * @param {Extent} extent Extent.
     * @return {number} Margin.
     */
    function getMargin(extent) {
        return getWidth(extent) + getHeight(extent);
    }
    exports.getMargin = getMargin;
    /**
     * Get the size (width, height) of an extent.
     * @param {Extent} extent The extent.
     * @return {import("./size.js").Size} The extent size.
     * @api
     */
    function getSize(extent) {
        return [extent[2] - extent[0], extent[3] - extent[1]];
    }
    exports.getSize = getSize;
    /**
     * Get the top left coordinate of an extent.
     * @param {Extent} extent Extent.
     * @return {import("./coordinate.js").Coordinate} Top left coordinate.
     * @api
     */
    function getTopLeft(extent) {
        return [extent[0], extent[3]];
    }
    exports.getTopLeft = getTopLeft;
    /**
     * Get the top right coordinate of an extent.
     * @param {Extent} extent Extent.
     * @return {import("./coordinate.js").Coordinate} Top right coordinate.
     * @api
     */
    function getTopRight(extent) {
        return [extent[2], extent[3]];
    }
    exports.getTopRight = getTopRight;
    /**
     * Get the width of an extent.
     * @param {Extent} extent Extent.
     * @return {number} Width.
     * @api
     */
    function getWidth(extent) {
        return extent[2] - extent[0];
    }
    exports.getWidth = getWidth;
    /**
     * Determine if one extent intersects another.
     * @param {Extent} extent1 Extent 1.
     * @param {Extent} extent2 Extent.
     * @return {boolean} The two extents intersect.
     * @api
     */
    function intersects(extent1, extent2) {
        return (extent1[0] <= extent2[2] &&
            extent1[2] >= extent2[0] &&
            extent1[1] <= extent2[3] &&
            extent1[3] >= extent2[1]);
    }
    exports.intersects = intersects;
    /**
     * Determine if an extent is empty.
     * @param {Extent} extent Extent.
     * @return {boolean} Is empty.
     * @api
     */
    function isEmpty(extent) {
        return extent[2] < extent[0] || extent[3] < extent[1];
    }
    exports.isEmpty = isEmpty;
    /**
     * @param {Extent} extent Extent.
     * @param {Extent=} opt_extent Extent.
     * @return {Extent} Extent.
     */
    function returnOrUpdate(extent, opt_extent) {
        if (opt_extent) {
            opt_extent[0] = extent[0];
            opt_extent[1] = extent[1];
            opt_extent[2] = extent[2];
            opt_extent[3] = extent[3];
            return opt_extent;
        }
        else {
            return extent;
        }
    }
    exports.returnOrUpdate = returnOrUpdate;
    /**
     * @param {Extent} extent Extent.
     * @param {number} value Value.
     */
    function scaleFromCenter(extent, value) {
        const deltaX = ((extent[2] - extent[0]) / 2) * (value - 1);
        const deltaY = ((extent[3] - extent[1]) / 2) * (value - 1);
        extent[0] -= deltaX;
        extent[2] += deltaX;
        extent[1] -= deltaY;
        extent[3] += deltaY;
    }
    exports.scaleFromCenter = scaleFromCenter;
    /**
     * Determine if the segment between two coordinates intersects (crosses,
     * touches, or is contained by) the provided extent.
     * @param {Extent} extent The extent.
     * @param {import("./coordinate.js").Coordinate} start Segment start coordinate.
     * @param {import("./coordinate.js").Coordinate} end Segment end coordinate.
     * @return {boolean} The segment intersects the extent.
     */
    function intersectsSegment(extent, start, end) {
        let intersects = false;
        const startRel = coordinateRelationship(extent, start);
        const endRel = coordinateRelationship(extent, end);
        if (startRel === Relationship_js_1.default.INTERSECTING ||
            endRel === Relationship_js_1.default.INTERSECTING) {
            intersects = true;
        }
        else {
            const minX = extent[0];
            const minY = extent[1];
            const maxX = extent[2];
            const maxY = extent[3];
            const startX = start[0];
            const startY = start[1];
            const endX = end[0];
            const endY = end[1];
            const slope = (endY - startY) / (endX - startX);
            let x, y;
            if (!!(endRel & Relationship_js_1.default.ABOVE) && !(startRel & Relationship_js_1.default.ABOVE)) {
                // potentially intersects top
                x = endX - (endY - maxY) / slope;
                intersects = x >= minX && x <= maxX;
            }
            if (!intersects &&
                !!(endRel & Relationship_js_1.default.RIGHT) &&
                !(startRel & Relationship_js_1.default.RIGHT)) {
                // potentially intersects right
                y = endY - (endX - maxX) * slope;
                intersects = y >= minY && y <= maxY;
            }
            if (!intersects &&
                !!(endRel & Relationship_js_1.default.BELOW) &&
                !(startRel & Relationship_js_1.default.BELOW)) {
                // potentially intersects bottom
                x = endX - (endY - minY) / slope;
                intersects = x >= minX && x <= maxX;
            }
            if (!intersects &&
                !!(endRel & Relationship_js_1.default.LEFT) &&
                !(startRel & Relationship_js_1.default.LEFT)) {
                // potentially intersects left
                y = endY - (endX - minX) * slope;
                intersects = y >= minY && y <= maxY;
            }
        }
        return intersects;
    }
    exports.intersectsSegment = intersectsSegment;
    /**
     * Apply a transform function to the extent.
     * @param {Extent} extent Extent.
     * @param {import("./proj.js").TransformFunction} transformFn Transform function.
     * Called with `[minX, minY, maxX, maxY]` extent coordinates.
     * @param {Extent=} opt_extent Destination extent.
     * @param {number=} opt_stops Number of stops per side used for the transform.
     * By default only the corners are used.
     * @return {Extent} Extent.
     * @api
     */
    function applyTransform(extent, transformFn, opt_extent, opt_stops) {
        let coordinates = [];
        if (opt_stops > 1) {
            const width = extent[2] - extent[0];
            const height = extent[3] - extent[1];
            for (let i = 0; i < opt_stops; ++i) {
                coordinates.push(extent[0] + (width * i) / opt_stops, extent[1], extent[2], extent[1] + (height * i) / opt_stops, extent[2] - (width * i) / opt_stops, extent[3], extent[0], extent[3] - (height * i) / opt_stops);
            }
        }
        else {
            coordinates = [
                extent[0],
                extent[1],
                extent[2],
                extent[1],
                extent[2],
                extent[3],
                extent[0],
                extent[3],
            ];
        }
        transformFn(coordinates, coordinates, 2);
        const xs = [];
        const ys = [];
        for (let i = 0, l = coordinates.length; i < l; i += 2) {
            xs.push(coordinates[i]);
            ys.push(coordinates[i + 1]);
        }
        return _boundingExtentXYs(xs, ys, opt_extent);
    }
    exports.applyTransform = applyTransform;
    /**
     * Modifies the provided extent in-place to be within the real world
     * extent.
     *
     * @param {Extent} extent Extent.
     * @param {import("./proj/Projection.js").default} projection Projection
     * @return {Extent} The extent within the real world extent.
     */
    function wrapX(extent, projection) {
        const projectionExtent = projection.getExtent();
        const center = getCenter(extent);
        if (projection.canWrapX() &&
            (center[0] < projectionExtent[0] || center[0] >= projectionExtent[2])) {
            const worldWidth = getWidth(projectionExtent);
            const worldsAway = Math.floor((center[0] - projectionExtent[0]) / worldWidth);
            const offset = worldsAway * worldWidth;
            extent[0] -= offset;
            extent[2] -= offset;
        }
        return extent;
    }
    exports.wrapX = wrapX;
});
/**
 * @module ol/string
 */
define("node_modules/ol/src/string", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.compareVersions = exports.padNumber = void 0;
    /**
     * @param {number} number Number to be formatted
     * @param {number} width The desired width
     * @param {number=} opt_precision Precision of the output string (i.e. number of decimal places)
     * @returns {string} Formatted string
     */
    function padNumber(number, width, opt_precision) {
        const numberString = opt_precision !== undefined ? number.toFixed(opt_precision) : '' + number;
        let decimal = numberString.indexOf('.');
        decimal = decimal === -1 ? numberString.length : decimal;
        return decimal > width
            ? numberString
            : new Array(1 + width - decimal).join('0') + numberString;
    }
    exports.padNumber = padNumber;
    /**
     * Adapted from https://github.com/omichelsen/compare-versions/blob/master/index.js
     * @param {string|number} v1 First version
     * @param {string|number} v2 Second version
     * @returns {number} Value
     */
    function compareVersions(v1, v2) {
        const s1 = ('' + v1).split('.');
        const s2 = ('' + v2).split('.');
        for (let i = 0; i < Math.max(s1.length, s2.length); i++) {
            const n1 = parseInt(s1[i] || '0', 10);
            const n2 = parseInt(s2[i] || '0', 10);
            if (n1 > n2) {
                return 1;
            }
            if (n2 > n1) {
                return -1;
            }
        }
        return 0;
    }
    exports.compareVersions = compareVersions;
});
define("node_modules/ol/src/coordinate", ["require", "exports", "node_modules/ol/src/extent", "node_modules/ol/src/math", "node_modules/ol/src/string"], function (require, exports, extent_js_12, math_js_9, string_js_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getWorldsAway = exports.wrapX = exports.toStringXY = exports.toStringHDMS = exports.squaredDistanceToSegment = exports.distance = exports.squaredDistance = exports.scale = exports.rotate = exports.equals = exports.format = exports.degreesToStringHDMS = exports.createStringXY = exports.closestOnSegment = exports.closestOnCircle = exports.add = void 0;
    /**
     * An array of numbers representing an xy coordinate. Example: `[16, 48]`.
     * @typedef {Array<number>} Coordinate
     * @api
     */
    /**
     * A function that takes a {@link module:ol/coordinate~Coordinate} and
     * transforms it into a `{string}`.
     *
     * @typedef {function((Coordinate|undefined)): string} CoordinateFormat
     * @api
     */
    /**
     * Add `delta` to `coordinate`. `coordinate` is modified in place and returned
     * by the function.
     *
     * Example:
     *
     *     import {add} from 'ol/coordinate';
     *
     *     var coord = [7.85, 47.983333];
     *     add(coord, [-2, 4]);
     *     // coord is now [5.85, 51.983333]
     *
     * @param {Coordinate} coordinate Coordinate.
     * @param {Coordinate} delta Delta.
     * @return {Coordinate} The input coordinate adjusted by
     * the given delta.
     * @api
     */
    function add(coordinate, delta) {
        coordinate[0] += +delta[0];
        coordinate[1] += +delta[1];
        return coordinate;
    }
    exports.add = add;
    /**
     * Calculates the point closest to the passed coordinate on the passed circle.
     *
     * @param {Coordinate} coordinate The coordinate.
     * @param {import("./geom/Circle.js").default} circle The circle.
     * @return {Coordinate} Closest point on the circumference.
     */
    function closestOnCircle(coordinate, circle) {
        const r = circle.getRadius();
        const center = circle.getCenter();
        const x0 = center[0];
        const y0 = center[1];
        const x1 = coordinate[0];
        const y1 = coordinate[1];
        let dx = x1 - x0;
        const dy = y1 - y0;
        if (dx === 0 && dy === 0) {
            dx = 1;
        }
        const d = Math.sqrt(dx * dx + dy * dy);
        const x = x0 + (r * dx) / d;
        const y = y0 + (r * dy) / d;
        return [x, y];
    }
    exports.closestOnCircle = closestOnCircle;
    /**
     * Calculates the point closest to the passed coordinate on the passed segment.
     * This is the foot of the perpendicular of the coordinate to the segment when
     * the foot is on the segment, or the closest segment coordinate when the foot
     * is outside the segment.
     *
     * @param {Coordinate} coordinate The coordinate.
     * @param {Array<Coordinate>} segment The two coordinates
     * of the segment.
     * @return {Coordinate} The foot of the perpendicular of
     * the coordinate to the segment.
     */
    function closestOnSegment(coordinate, segment) {
        const x0 = coordinate[0];
        const y0 = coordinate[1];
        const start = segment[0];
        const end = segment[1];
        const x1 = start[0];
        const y1 = start[1];
        const x2 = end[0];
        const y2 = end[1];
        const dx = x2 - x1;
        const dy = y2 - y1;
        const along = dx === 0 && dy === 0
            ? 0
            : (dx * (x0 - x1) + dy * (y0 - y1)) / (dx * dx + dy * dy || 0);
        let x, y;
        if (along <= 0) {
            x = x1;
            y = y1;
        }
        else if (along >= 1) {
            x = x2;
            y = y2;
        }
        else {
            x = x1 + along * dx;
            y = y1 + along * dy;
        }
        return [x, y];
    }
    exports.closestOnSegment = closestOnSegment;
    /**
     * Returns a {@link module:ol/coordinate~CoordinateFormat} function that can be
     * used to format
     * a {Coordinate} to a string.
     *
     * Example without specifying the fractional digits:
     *
     *     import {createStringXY} from 'ol/coordinate';
     *
     *     var coord = [7.85, 47.983333];
     *     var stringifyFunc = createStringXY();
     *     var out = stringifyFunc(coord);
     *     // out is now '8, 48'
     *
     * Example with explicitly specifying 2 fractional digits:
     *
     *     import {createStringXY} from 'ol/coordinate';
     *
     *     var coord = [7.85, 47.983333];
     *     var stringifyFunc = createStringXY(2);
     *     var out = stringifyFunc(coord);
     *     // out is now '7.85, 47.98'
     *
     * @param {number=} opt_fractionDigits The number of digits to include
     *    after the decimal point. Default is `0`.
     * @return {CoordinateFormat} Coordinate format.
     * @api
     */
    function createStringXY(opt_fractionDigits) {
        return (
        /**
         * @param {Coordinate} coordinate Coordinate.
         * @return {string} String XY.
         */
        function (coordinate) {
            return toStringXY(coordinate, opt_fractionDigits);
        });
    }
    exports.createStringXY = createStringXY;
    /**
     * @param {string} hemispheres Hemispheres.
     * @param {number} degrees Degrees.
     * @param {number=} opt_fractionDigits The number of digits to include
     *    after the decimal point. Default is `0`.
     * @return {string} String.
     */
    function degreesToStringHDMS(hemispheres, degrees, opt_fractionDigits) {
        const normalizedDegrees = math_js_9.modulo(degrees + 180, 360) - 180;
        const x = Math.abs(3600 * normalizedDegrees);
        const dflPrecision = opt_fractionDigits || 0;
        const precision = Math.pow(10, dflPrecision);
        let deg = Math.floor(x / 3600);
        let min = Math.floor((x - deg * 3600) / 60);
        let sec = x - deg * 3600 - min * 60;
        sec = Math.ceil(sec * precision) / precision;
        if (sec >= 60) {
            sec = 0;
            min += 1;
        }
        if (min >= 60) {
            min = 0;
            deg += 1;
        }
        return (deg +
            '\u00b0 ' +
            string_js_1.padNumber(min, 2) +
            '\u2032 ' +
            string_js_1.padNumber(sec, 2, dflPrecision) +
            '\u2033' +
            (normalizedDegrees == 0
                ? ''
                : ' ' + hemispheres.charAt(normalizedDegrees < 0 ? 1 : 0)));
    }
    exports.degreesToStringHDMS = degreesToStringHDMS;
    /**
     * Transforms the given {@link module:ol/coordinate~Coordinate} to a string
     * using the given string template. The strings `{x}` and `{y}` in the template
     * will be replaced with the first and second coordinate values respectively.
     *
     * Example without specifying the fractional digits:
     *
     *     import {format} from 'ol/coordinate';
     *
     *     var coord = [7.85, 47.983333];
     *     var template = 'Coordinate is ({x}|{y}).';
     *     var out = format(coord, template);
     *     // out is now 'Coordinate is (8|48).'
     *
     * Example explicitly specifying the fractional digits:
     *
     *     import {format} from 'ol/coordinate';
     *
     *     var coord = [7.85, 47.983333];
     *     var template = 'Coordinate is ({x}|{y}).';
     *     var out = format(coord, template, 2);
     *     // out is now 'Coordinate is (7.85|47.98).'
     *
     * @param {Coordinate} coordinate Coordinate.
     * @param {string} template A template string with `{x}` and `{y}` placeholders
     *     that will be replaced by first and second coordinate values.
     * @param {number=} opt_fractionDigits The number of digits to include
     *    after the decimal point. Default is `0`.
     * @return {string} Formatted coordinate.
     * @api
     */
    function format(coordinate, template, opt_fractionDigits) {
        if (coordinate) {
            return template
                .replace('{x}', coordinate[0].toFixed(opt_fractionDigits))
                .replace('{y}', coordinate[1].toFixed(opt_fractionDigits));
        }
        else {
            return '';
        }
    }
    exports.format = format;
    /**
     * @param {Coordinate} coordinate1 First coordinate.
     * @param {Coordinate} coordinate2 Second coordinate.
     * @return {boolean} The two coordinates are equal.
     */
    function equals(coordinate1, coordinate2) {
        let equals = true;
        for (let i = coordinate1.length - 1; i >= 0; --i) {
            if (coordinate1[i] != coordinate2[i]) {
                equals = false;
                break;
            }
        }
        return equals;
    }
    exports.equals = equals;
    /**
     * Rotate `coordinate` by `angle`. `coordinate` is modified in place and
     * returned by the function.
     *
     * Example:
     *
     *     import {rotate} from 'ol/coordinate';
     *
     *     var coord = [7.85, 47.983333];
     *     var rotateRadians = Math.PI / 2; // 90 degrees
     *     rotate(coord, rotateRadians);
     *     // coord is now [-47.983333, 7.85]
     *
     * @param {Coordinate} coordinate Coordinate.
     * @param {number} angle Angle in radian.
     * @return {Coordinate} Coordinate.
     * @api
     */
    function rotate(coordinate, angle) {
        const cosAngle = Math.cos(angle);
        const sinAngle = Math.sin(angle);
        const x = coordinate[0] * cosAngle - coordinate[1] * sinAngle;
        const y = coordinate[1] * cosAngle + coordinate[0] * sinAngle;
        coordinate[0] = x;
        coordinate[1] = y;
        return coordinate;
    }
    exports.rotate = rotate;
    /**
     * Scale `coordinate` by `scale`. `coordinate` is modified in place and returned
     * by the function.
     *
     * Example:
     *
     *     import {scale as scaleCoordinate} from 'ol/coordinate';
     *
     *     var coord = [7.85, 47.983333];
     *     var scale = 1.2;
     *     scaleCoordinate(coord, scale);
     *     // coord is now [9.42, 57.5799996]
     *
     * @param {Coordinate} coordinate Coordinate.
     * @param {number} scale Scale factor.
     * @return {Coordinate} Coordinate.
     */
    function scale(coordinate, scale) {
        coordinate[0] *= scale;
        coordinate[1] *= scale;
        return coordinate;
    }
    exports.scale = scale;
    /**
     * @param {Coordinate} coord1 First coordinate.
     * @param {Coordinate} coord2 Second coordinate.
     * @return {number} Squared distance between coord1 and coord2.
     */
    function squaredDistance(coord1, coord2) {
        const dx = coord1[0] - coord2[0];
        const dy = coord1[1] - coord2[1];
        return dx * dx + dy * dy;
    }
    exports.squaredDistance = squaredDistance;
    /**
     * @param {Coordinate} coord1 First coordinate.
     * @param {Coordinate} coord2 Second coordinate.
     * @return {number} Distance between coord1 and coord2.
     */
    function distance(coord1, coord2) {
        return Math.sqrt(squaredDistance(coord1, coord2));
    }
    exports.distance = distance;
    /**
     * Calculate the squared distance from a coordinate to a line segment.
     *
     * @param {Coordinate} coordinate Coordinate of the point.
     * @param {Array<Coordinate>} segment Line segment (2
     * coordinates).
     * @return {number} Squared distance from the point to the line segment.
     */
    function squaredDistanceToSegment(coordinate, segment) {
        return squaredDistance(coordinate, closestOnSegment(coordinate, segment));
    }
    exports.squaredDistanceToSegment = squaredDistanceToSegment;
    /**
     * Format a geographic coordinate with the hemisphere, degrees, minutes, and
     * seconds.
     *
     * Example without specifying fractional digits:
     *
     *     import {toStringHDMS} from 'ol/coordinate';
     *
     *     var coord = [7.85, 47.983333];
     *     var out = toStringHDMS(coord);
     *     // out is now '47° 58′ 60″ N 7° 50′ 60″ E'
     *
     * Example explicitly specifying 1 fractional digit:
     *
     *     import {toStringHDMS} from 'ol/coordinate';
     *
     *     var coord = [7.85, 47.983333];
     *     var out = toStringHDMS(coord, 1);
     *     // out is now '47° 58′ 60.0″ N 7° 50′ 60.0″ E'
     *
     * @param {Coordinate} coordinate Coordinate.
     * @param {number=} opt_fractionDigits The number of digits to include
     *    after the decimal point. Default is `0`.
     * @return {string} Hemisphere, degrees, minutes and seconds.
     * @api
     */
    function toStringHDMS(coordinate, opt_fractionDigits) {
        if (coordinate) {
            return (degreesToStringHDMS('NS', coordinate[1], opt_fractionDigits) +
                ' ' +
                degreesToStringHDMS('EW', coordinate[0], opt_fractionDigits));
        }
        else {
            return '';
        }
    }
    exports.toStringHDMS = toStringHDMS;
    /**
     * Format a coordinate as a comma delimited string.
     *
     * Example without specifying fractional digits:
     *
     *     import {toStringXY} from 'ol/coordinate';
     *
     *     var coord = [7.85, 47.983333];
     *     var out = toStringXY(coord);
     *     // out is now '8, 48'
     *
     * Example explicitly specifying 1 fractional digit:
     *
     *     import {toStringXY} from 'ol/coordinate';
     *
     *     var coord = [7.85, 47.983333];
     *     var out = toStringXY(coord, 1);
     *     // out is now '7.8, 48.0'
     *
     * @param {Coordinate} coordinate Coordinate.
     * @param {number=} opt_fractionDigits The number of digits to include
     *    after the decimal point. Default is `0`.
     * @return {string} XY.
     * @api
     */
    function toStringXY(coordinate, opt_fractionDigits) {
        return format(coordinate, '{x}, {y}', opt_fractionDigits);
    }
    exports.toStringXY = toStringXY;
    /**
     * Modifies the provided coordinate in-place to be within the real world
     * extent. The lower projection extent boundary is inclusive, the upper one
     * exclusive.
     *
     * @param {Coordinate} coordinate Coordinate.
     * @param {import("./proj/Projection.js").default} projection Projection.
     * @return {Coordinate} The coordinate within the real world extent.
     */
    function wrapX(coordinate, projection) {
        if (projection.canWrapX()) {
            const worldWidth = extent_js_12.getWidth(projection.getExtent());
            const worldsAway = getWorldsAway(coordinate, projection, worldWidth);
            if (worldsAway) {
                coordinate[0] -= worldsAway * worldWidth;
            }
        }
        return coordinate;
    }
    exports.wrapX = wrapX;
    /**
     * @param {Coordinate} coordinate Coordinate.
     * @param {import("./proj/Projection.js").default} projection Projection.
     * @param {number=} opt_sourceExtentWidth Width of the source extent.
     * @return {number} Offset in world widths.
     */
    function getWorldsAway(coordinate, projection, opt_sourceExtentWidth) {
        const projectionExtent = projection.getExtent();
        let worldsAway = 0;
        if (projection.canWrapX() &&
            (coordinate[0] < projectionExtent[0] || coordinate[0] > projectionExtent[2])) {
            const sourceExtentWidth = opt_sourceExtentWidth || extent_js_12.getWidth(projectionExtent);
            worldsAway = Math.floor((coordinate[0] - projectionExtent[0]) / sourceExtentWidth);
        }
        return worldsAway;
    }
    exports.getWorldsAway = getWorldsAway;
});
/**
 * @module ol/pixel
 */
define("node_modules/ol/src/pixel", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.nothing = void 0;
});
define("node_modules/ol/src/transform", ["require", "exports", "node_modules/ol/src/asserts"], function (require, exports, asserts_js_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toString = exports.determinant = exports.makeInverse = exports.invert = exports.composeCssTransform = exports.compose = exports.translate = exports.makeScale = exports.scale = exports.rotate = exports.apply = exports.setFromArray = exports.set = exports.multiply = exports.reset = exports.create = void 0;
    /**
     * An array representing an affine 2d transformation for use with
     * {@link module:ol/transform} functions. The array has 6 elements.
     * @typedef {!Array<number>} Transform
     * @api
     */
    /**
     * Collection of affine 2d transformation functions. The functions work on an
     * array of 6 elements. The element order is compatible with the [SVGMatrix
     * interface](https://developer.mozilla.org/en-US/docs/Web/API/SVGMatrix) and is
     * a subset (elements a to f) of a 3×3 matrix:
     * ```
     * [ a c e ]
     * [ b d f ]
     * [ 0 0 1 ]
     * ```
     */
    /**
     * @private
     * @type {Transform}
     */
    const tmp_ = new Array(6);
    /**
     * Create an identity transform.
     * @return {!Transform} Identity transform.
     */
    function create() {
        return [1, 0, 0, 1, 0, 0];
    }
    exports.create = create;
    /**
     * Resets the given transform to an identity transform.
     * @param {!Transform} transform Transform.
     * @return {!Transform} Transform.
     */
    function reset(transform) {
        return set(transform, 1, 0, 0, 1, 0, 0);
    }
    exports.reset = reset;
    /**
     * Multiply the underlying matrices of two transforms and return the result in
     * the first transform.
     * @param {!Transform} transform1 Transform parameters of matrix 1.
     * @param {!Transform} transform2 Transform parameters of matrix 2.
     * @return {!Transform} transform1 multiplied with transform2.
     */
    function multiply(transform1, transform2) {
        const a1 = transform1[0];
        const b1 = transform1[1];
        const c1 = transform1[2];
        const d1 = transform1[3];
        const e1 = transform1[4];
        const f1 = transform1[5];
        const a2 = transform2[0];
        const b2 = transform2[1];
        const c2 = transform2[2];
        const d2 = transform2[3];
        const e2 = transform2[4];
        const f2 = transform2[5];
        transform1[0] = a1 * a2 + c1 * b2;
        transform1[1] = b1 * a2 + d1 * b2;
        transform1[2] = a1 * c2 + c1 * d2;
        transform1[3] = b1 * c2 + d1 * d2;
        transform1[4] = a1 * e2 + c1 * f2 + e1;
        transform1[5] = b1 * e2 + d1 * f2 + f1;
        return transform1;
    }
    exports.multiply = multiply;
    /**
     * Set the transform components a-f on a given transform.
     * @param {!Transform} transform Transform.
     * @param {number} a The a component of the transform.
     * @param {number} b The b component of the transform.
     * @param {number} c The c component of the transform.
     * @param {number} d The d component of the transform.
     * @param {number} e The e component of the transform.
     * @param {number} f The f component of the transform.
     * @return {!Transform} Matrix with transform applied.
     */
    function set(transform, a, b, c, d, e, f) {
        transform[0] = a;
        transform[1] = b;
        transform[2] = c;
        transform[3] = d;
        transform[4] = e;
        transform[5] = f;
        return transform;
    }
    exports.set = set;
    /**
     * Set transform on one matrix from another matrix.
     * @param {!Transform} transform1 Matrix to set transform to.
     * @param {!Transform} transform2 Matrix to set transform from.
     * @return {!Transform} transform1 with transform from transform2 applied.
     */
    function setFromArray(transform1, transform2) {
        transform1[0] = transform2[0];
        transform1[1] = transform2[1];
        transform1[2] = transform2[2];
        transform1[3] = transform2[3];
        transform1[4] = transform2[4];
        transform1[5] = transform2[5];
        return transform1;
    }
    exports.setFromArray = setFromArray;
    /**
     * Transforms the given coordinate with the given transform returning the
     * resulting, transformed coordinate. The coordinate will be modified in-place.
     *
     * @param {Transform} transform The transformation.
     * @param {import("./coordinate.js").Coordinate|import("./pixel.js").Pixel} coordinate The coordinate to transform.
     * @return {import("./coordinate.js").Coordinate|import("./pixel.js").Pixel} return coordinate so that operations can be
     *     chained together.
     */
    function apply(transform, coordinate) {
        const x = coordinate[0];
        const y = coordinate[1];
        coordinate[0] = transform[0] * x + transform[2] * y + transform[4];
        coordinate[1] = transform[1] * x + transform[3] * y + transform[5];
        return coordinate;
    }
    exports.apply = apply;
    /**
     * Applies rotation to the given transform.
     * @param {!Transform} transform Transform.
     * @param {number} angle Angle in radians.
     * @return {!Transform} The rotated transform.
     */
    function rotate(transform, angle) {
        const cos = Math.cos(angle);
        const sin = Math.sin(angle);
        return multiply(transform, set(tmp_, cos, sin, -sin, cos, 0, 0));
    }
    exports.rotate = rotate;
    /**
     * Applies scale to a given transform.
     * @param {!Transform} transform Transform.
     * @param {number} x Scale factor x.
     * @param {number} y Scale factor y.
     * @return {!Transform} The scaled transform.
     */
    function scale(transform, x, y) {
        return multiply(transform, set(tmp_, x, 0, 0, y, 0, 0));
    }
    exports.scale = scale;
    /**
     * Creates a scale transform.
     * @param {!Transform} target Transform to overwrite.
     * @param {number} x Scale factor x.
     * @param {number} y Scale factor y.
     * @return {!Transform} The scale transform.
     */
    function makeScale(target, x, y) {
        return set(target, x, 0, 0, y, 0, 0);
    }
    exports.makeScale = makeScale;
    /**
     * Applies translation to the given transform.
     * @param {!Transform} transform Transform.
     * @param {number} dx Translation x.
     * @param {number} dy Translation y.
     * @return {!Transform} The translated transform.
     */
    function translate(transform, dx, dy) {
        return multiply(transform, set(tmp_, 1, 0, 0, 1, dx, dy));
    }
    exports.translate = translate;
    /**
     * Creates a composite transform given an initial translation, scale, rotation, and
     * final translation (in that order only, not commutative).
     * @param {!Transform} transform The transform (will be modified in place).
     * @param {number} dx1 Initial translation x.
     * @param {number} dy1 Initial translation y.
     * @param {number} sx Scale factor x.
     * @param {number} sy Scale factor y.
     * @param {number} angle Rotation (in counter-clockwise radians).
     * @param {number} dx2 Final translation x.
     * @param {number} dy2 Final translation y.
     * @return {!Transform} The composite transform.
     */
    function compose(transform, dx1, dy1, sx, sy, angle, dx2, dy2) {
        const sin = Math.sin(angle);
        const cos = Math.cos(angle);
        transform[0] = sx * cos;
        transform[1] = sy * sin;
        transform[2] = -sx * sin;
        transform[3] = sy * cos;
        transform[4] = dx2 * sx * cos - dy2 * sx * sin + dx1;
        transform[5] = dx2 * sy * sin + dy2 * sy * cos + dy1;
        return transform;
    }
    exports.compose = compose;
    /**
     * Creates a composite transform given an initial translation, scale, rotation, and
     * final translation (in that order only, not commutative). The resulting transform
     * string can be applied as `transform` porperty of an HTMLElement's style.
     * @param {number} dx1 Initial translation x.
     * @param {number} dy1 Initial translation y.
     * @param {number} sx Scale factor x.
     * @param {number} sy Scale factor y.
     * @param {number} angle Rotation (in counter-clockwise radians).
     * @param {number} dx2 Final translation x.
     * @param {number} dy2 Final translation y.
     * @return {string} The composite css transform.
     * @api
     */
    function composeCssTransform(dx1, dy1, sx, sy, angle, dx2, dy2) {
        return toString(compose(create(), dx1, dy1, sx, sy, angle, dx2, dy2));
    }
    exports.composeCssTransform = composeCssTransform;
    /**
     * Invert the given transform.
     * @param {!Transform} source The source transform to invert.
     * @return {!Transform} The inverted (source) transform.
     */
    function invert(source) {
        return makeInverse(source, source);
    }
    exports.invert = invert;
    /**
     * Invert the given transform.
     * @param {!Transform} target Transform to be set as the inverse of
     *     the source transform.
     * @param {!Transform} source The source transform to invert.
     * @return {!Transform} The inverted (target) transform.
     */
    function makeInverse(target, source) {
        const det = determinant(source);
        asserts_js_3.assert(det !== 0, 32); // Transformation matrix cannot be inverted
        const a = source[0];
        const b = source[1];
        const c = source[2];
        const d = source[3];
        const e = source[4];
        const f = source[5];
        target[0] = d / det;
        target[1] = -b / det;
        target[2] = -c / det;
        target[3] = a / det;
        target[4] = (c * f - d * e) / det;
        target[5] = -(a * f - b * e) / det;
        return target;
    }
    exports.makeInverse = makeInverse;
    /**
     * Returns the determinant of the given matrix.
     * @param {!Transform} mat Matrix.
     * @return {number} Determinant.
     */
    function determinant(mat) {
        return mat[0] * mat[3] - mat[1] * mat[2];
    }
    exports.determinant = determinant;
    /**
     * A string version of the transform.  This can be used
     * for CSS transforms.
     * @param {!Transform} mat Matrix.
     * @return {string} The transform as a string.
     */
    function toString(mat) {
        return 'matrix(' + mat.join(', ') + ')';
    }
    exports.toString = toString;
});
define("node_modules/ol/src/color", ["require", "exports", "node_modules/ol/src/asserts", "node_modules/ol/src/math"], function (require, exports, asserts_js_4, math_js_10) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isStringColor = exports.toString = exports.normalize = exports.asArray = exports.fromString = exports.asString = void 0;
    /**
     * A color represented as a short array [red, green, blue, alpha].
     * red, green, and blue should be integers in the range 0..255 inclusive.
     * alpha should be a float in the range 0..1 inclusive. If no alpha value is
     * given then `1` will be used.
     * @typedef {Array<number>} Color
     * @api
     */
    /**
     * This RegExp matches # followed by 3, 4, 6, or 8 hex digits.
     * @const
     * @type {RegExp}
     * @private
     */
    const HEX_COLOR_RE_ = /^#([a-f0-9]{3}|[a-f0-9]{4}(?:[a-f0-9]{2}){0,2})$/i;
    /**
     * Regular expression for matching potential named color style strings.
     * @const
     * @type {RegExp}
     * @private
     */
    const NAMED_COLOR_RE_ = /^([a-z]*)$|^hsla?\(.*\)$/i;
    /**
     * Return the color as an rgba string.
     * @param {Color|string} color Color.
     * @return {string} Rgba string.
     * @api
     */
    function asString(color) {
        if (typeof color === 'string') {
            return color;
        }
        else {
            return toString(color);
        }
    }
    exports.asString = asString;
    /**
     * Return named color as an rgba string.
     * @param {string} color Named color.
     * @return {string} Rgb string.
     */
    function fromNamed(color) {
        const el = document.createElement('div');
        el.style.color = color;
        if (el.style.color !== '') {
            document.body.appendChild(el);
            const rgb = getComputedStyle(el).color;
            document.body.removeChild(el);
            return rgb;
        }
        else {
            return '';
        }
    }
    /**
     * @param {string} s String.
     * @return {Color} Color.
     */
    exports.fromString = (function () {
        // We maintain a small cache of parsed strings.  To provide cheap LRU-like
        // semantics, whenever the cache grows too large we simply delete an
        // arbitrary 25% of the entries.
        /**
         * @const
         * @type {number}
         */
        const MAX_CACHE_SIZE = 1024;
        /**
         * @type {Object<string, Color>}
         */
        const cache = {};
        /**
         * @type {number}
         */
        let cacheSize = 0;
        return (
        /**
         * @param {string} s String.
         * @return {Color} Color.
         */
        function (s) {
            let color;
            if (cache.hasOwnProperty(s)) {
                color = cache[s];
            }
            else {
                if (cacheSize >= MAX_CACHE_SIZE) {
                    let i = 0;
                    for (const key in cache) {
                        if ((i++ & 3) === 0) {
                            delete cache[key];
                            --cacheSize;
                        }
                    }
                }
                color = fromStringInternal_(s);
                cache[s] = color;
                ++cacheSize;
            }
            return color;
        });
    })();
    /**
     * Return the color as an array. This function maintains a cache of calculated
     * arrays which means the result should not be modified.
     * @param {Color|string} color Color.
     * @return {Color} Color.
     * @api
     */
    function asArray(color) {
        if (Array.isArray(color)) {
            return color;
        }
        else {
            return exports.fromString(color);
        }
    }
    exports.asArray = asArray;
    /**
     * @param {string} s String.
     * @private
     * @return {Color} Color.
     */
    function fromStringInternal_(s) {
        let r, g, b, a, color;
        if (NAMED_COLOR_RE_.exec(s)) {
            s = fromNamed(s);
        }
        if (HEX_COLOR_RE_.exec(s)) {
            // hex
            const n = s.length - 1; // number of hex digits
            let d; // number of digits per channel
            if (n <= 4) {
                d = 1;
            }
            else {
                d = 2;
            }
            const hasAlpha = n === 4 || n === 8;
            r = parseInt(s.substr(1 + 0 * d, d), 16);
            g = parseInt(s.substr(1 + 1 * d, d), 16);
            b = parseInt(s.substr(1 + 2 * d, d), 16);
            if (hasAlpha) {
                a = parseInt(s.substr(1 + 3 * d, d), 16);
            }
            else {
                a = 255;
            }
            if (d == 1) {
                r = (r << 4) + r;
                g = (g << 4) + g;
                b = (b << 4) + b;
                if (hasAlpha) {
                    a = (a << 4) + a;
                }
            }
            color = [r, g, b, a / 255];
        }
        else if (s.indexOf('rgba(') == 0) {
            // rgba()
            color = s.slice(5, -1).split(',').map(Number);
            normalize(color);
        }
        else if (s.indexOf('rgb(') == 0) {
            // rgb()
            color = s.slice(4, -1).split(',').map(Number);
            color.push(1);
            normalize(color);
        }
        else {
            asserts_js_4.assert(false, 14); // Invalid color
        }
        return color;
    }
    /**
     * TODO this function is only used in the test, we probably shouldn't export it
     * @param {Color} color Color.
     * @return {Color} Clamped color.
     */
    function normalize(color) {
        color[0] = math_js_10.clamp((color[0] + 0.5) | 0, 0, 255);
        color[1] = math_js_10.clamp((color[1] + 0.5) | 0, 0, 255);
        color[2] = math_js_10.clamp((color[2] + 0.5) | 0, 0, 255);
        color[3] = math_js_10.clamp(color[3], 0, 1);
        return color;
    }
    exports.normalize = normalize;
    /**
     * @param {Color} color Color.
     * @return {string} String.
     */
    function toString(color) {
        let r = color[0];
        if (r != (r | 0)) {
            r = (r + 0.5) | 0;
        }
        let g = color[1];
        if (g != (g | 0)) {
            g = (g + 0.5) | 0;
        }
        let b = color[2];
        if (b != (b | 0)) {
            b = (b + 0.5) | 0;
        }
        const a = color[3] === undefined ? 1 : color[3];
        return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';
    }
    exports.toString = toString;
    /**
     * @param {string} s String.
     * @return {boolean} Whether the string is actually a valid color
     */
    function isStringColor(s) {
        if (NAMED_COLOR_RE_.test(s)) {
            s = fromNamed(s);
        }
        return (HEX_COLOR_RE_.test(s) || s.indexOf('rgba(') === 0 || s.indexOf('rgb(') === 0);
    }
    exports.isStringColor = isStringColor;
});
/**
 * @module ol/ImageState
 */
define("node_modules/ol/src/ImageState", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @enum {number}
     */
    exports.default = {
        IDLE: 0,
        LOADING: 1,
        LOADED: 2,
        ERROR: 3,
        EMPTY: 4,
    };
});
/**
 * @module ol/has
 */
define("node_modules/ol/src/has", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PASSIVE_EVENT_LISTENERS = exports.IMAGE_DECODE = exports.WORKER_OFFSCREEN_CANVAS = exports.DEVICE_PIXEL_RATIO = exports.MAC = exports.WEBKIT = exports.SAFARI = exports.FIREFOX = void 0;
    const ua = typeof navigator !== 'undefined' && typeof navigator.userAgent !== 'undefined'
        ? navigator.userAgent.toLowerCase()
        : '';
    /**
     * User agent string says we are dealing with Firefox as browser.
     * @type {boolean}
     */
    exports.FIREFOX = ua.indexOf('firefox') !== -1;
    /**
     * User agent string says we are dealing with Safari as browser.
     * @type {boolean}
     */
    exports.SAFARI = ua.indexOf('safari') !== -1 && ua.indexOf('chrom') == -1;
    /**
     * User agent string says we are dealing with a WebKit engine.
     * @type {boolean}
     */
    exports.WEBKIT = ua.indexOf('webkit') !== -1 && ua.indexOf('edge') == -1;
    /**
     * User agent string says we are dealing with a Mac as platform.
     * @type {boolean}
     */
    exports.MAC = ua.indexOf('macintosh') !== -1;
    /**
     * The ratio between physical pixels and device-independent pixels
     * (dips) on the device (`window.devicePixelRatio`).
     * @const
     * @type {number}
     * @api
     */
    exports.DEVICE_PIXEL_RATIO = typeof devicePixelRatio !== 'undefined' ? devicePixelRatio : 1;
    /**
     * The execution context is a worker with OffscreenCanvas available.
     * @const
     * @type {boolean}
     */
    exports.WORKER_OFFSCREEN_CANVAS = typeof WorkerGlobalScope !== 'undefined' &&
        typeof OffscreenCanvas !== 'undefined' &&
        self instanceof WorkerGlobalScope; //eslint-disable-line
    /**
     * Image.prototype.decode() is supported.
     * @type {boolean}
     */
    exports.IMAGE_DECODE = typeof Image !== 'undefined' && Image.prototype.decode;
    /**
     * @type {boolean}
     */
    exports.PASSIVE_EVENT_LISTENERS = (function () {
        let passive = false;
        try {
            const options = Object.defineProperty({}, 'passive', {
                get: function () {
                    passive = true;
                },
            });
            window.addEventListener('_', null, options);
            window.removeEventListener('_', null, options);
        }
        catch (error) {
            // passive not supported
        }
        return passive;
    })();
});
define("node_modules/ol/src/dom", ["require", "exports", "node_modules/ol/src/has"], function (require, exports, has_js_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.replaceChildren = exports.removeChildren = exports.removeNode = exports.replaceNode = exports.outerHeight = exports.outerWidth = exports.createCanvasContext2D = void 0;
    /**
     * @module ol/dom
     */
    //FIXME Move this function to the canvas module
    /**
     * Create an html canvas element and returns its 2d context.
     * @param {number=} opt_width Canvas width.
     * @param {number=} opt_height Canvas height.
     * @param {Array<HTMLCanvasElement>=} opt_canvasPool Canvas pool to take existing canvas from.
     * @return {CanvasRenderingContext2D} The context.
     */
    function createCanvasContext2D(opt_width, opt_height, opt_canvasPool) {
        const canvas = opt_canvasPool && opt_canvasPool.length
            ? opt_canvasPool.shift()
            : has_js_1.WORKER_OFFSCREEN_CANVAS
                ? new OffscreenCanvas(opt_width || 300, opt_height || 300)
                : document.createElement('canvas');
        if (opt_width) {
            canvas.width = opt_width;
        }
        if (opt_height) {
            canvas.height = opt_height;
        }
        //FIXME Allow OffscreenCanvasRenderingContext2D as return type
        return /** @type {CanvasRenderingContext2D} */ (canvas.getContext('2d'));
    }
    exports.createCanvasContext2D = createCanvasContext2D;
    /**
     * Get the current computed width for the given element including margin,
     * padding and border.
     * Equivalent to jQuery's `$(el).outerWidth(true)`.
     * @param {!HTMLElement} element Element.
     * @return {number} The width.
     */
    function outerWidth(element) {
        let width = element.offsetWidth;
        const style = getComputedStyle(element);
        width += parseInt(style.marginLeft, 10) + parseInt(style.marginRight, 10);
        return width;
    }
    exports.outerWidth = outerWidth;
    /**
     * Get the current computed height for the given element including margin,
     * padding and border.
     * Equivalent to jQuery's `$(el).outerHeight(true)`.
     * @param {!HTMLElement} element Element.
     * @return {number} The height.
     */
    function outerHeight(element) {
        let height = element.offsetHeight;
        const style = getComputedStyle(element);
        height += parseInt(style.marginTop, 10) + parseInt(style.marginBottom, 10);
        return height;
    }
    exports.outerHeight = outerHeight;
    /**
     * @param {Node} newNode Node to replace old node
     * @param {Node} oldNode The node to be replaced
     */
    function replaceNode(newNode, oldNode) {
        const parent = oldNode.parentNode;
        if (parent) {
            parent.replaceChild(newNode, oldNode);
        }
    }
    exports.replaceNode = replaceNode;
    /**
     * @param {Node} node The node to remove.
     * @returns {Node} The node that was removed or null.
     */
    function removeNode(node) {
        return node && node.parentNode ? node.parentNode.removeChild(node) : null;
    }
    exports.removeNode = removeNode;
    /**
     * @param {Node} node The node to remove the children from.
     */
    function removeChildren(node) {
        while (node.lastChild) {
            node.removeChild(node.lastChild);
        }
    }
    exports.removeChildren = removeChildren;
    /**
     * Transform the children of a parent node so they match the
     * provided list of children.  This function aims to efficiently
     * remove, add, and reorder child nodes while maintaining a simple
     * implementation (it is not guaranteed to minimize DOM operations).
     * @param {Node} node The parent node whose children need reworking.
     * @param {Array<Node>} children The desired children.
     */
    function replaceChildren(node, children) {
        const oldChildren = node.childNodes;
        for (let i = 0; true; ++i) {
            const oldChild = oldChildren[i];
            const newChild = children[i];
            // check if our work is done
            if (!oldChild && !newChild) {
                break;
            }
            // check if children match
            if (oldChild === newChild) {
                continue;
            }
            // check if a new child needs to be added
            if (!oldChild) {
                node.appendChild(newChild);
                continue;
            }
            // check if an old child needs to be removed
            if (!newChild) {
                node.removeChild(oldChild);
                --i;
                continue;
            }
            // reorder
            node.insertBefore(newChild, oldChild);
        }
    }
    exports.replaceChildren = replaceChildren;
});
define("node_modules/ol/src/ImageBase", ["require", "exports", "node_modules/ol/src/events/Target", "node_modules/ol/src/events/EventType", "node_modules/ol/src/util"], function (require, exports, Target_js_2, EventType_js_3, util_js_5) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @abstract
     */
    class ImageBase extends Target_js_2.default {
        /**
         * @param {import("./extent.js").Extent} extent Extent.
         * @param {number|undefined} resolution Resolution.
         * @param {number} pixelRatio Pixel ratio.
         * @param {import("./ImageState.js").default} state State.
         */
        constructor(extent, resolution, pixelRatio, state) {
            super();
            /**
             * @protected
             * @type {import("./extent.js").Extent}
             */
            this.extent = extent;
            /**
             * @private
             * @type {number}
             */
            this.pixelRatio_ = pixelRatio;
            /**
             * @protected
             * @type {number|undefined}
             */
            this.resolution = resolution;
            /**
             * @protected
             * @type {import("./ImageState.js").default}
             */
            this.state = state;
        }
        /**
         * @protected
         */
        changed() {
            this.dispatchEvent(EventType_js_3.default.CHANGE);
        }
        /**
         * @return {import("./extent.js").Extent} Extent.
         */
        getExtent() {
            return this.extent;
        }
        /**
         * @abstract
         * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.
         */
        getImage() {
            return util_js_5.abstract();
        }
        /**
         * @return {number} PixelRatio.
         */
        getPixelRatio() {
            return this.pixelRatio_;
        }
        /**
         * @return {number} Resolution.
         */
        getResolution() {
            return /** @type {number} */ (this.resolution);
        }
        /**
         * @return {import("./ImageState.js").default} State.
         */
        getState() {
            return this.state;
        }
        /**
         * Load not yet loaded URI.
         * @abstract
         */
        load() {
            util_js_5.abstract();
        }
    }
    exports.default = ImageBase;
});
define("node_modules/ol/src/Image", ["require", "exports", "node_modules/ol/src/events/EventType", "node_modules/ol/src/ImageBase", "node_modules/ol/src/ImageState", "node_modules/ol/src/has", "node_modules/ol/src/extent", "node_modules/ol/src/events"], function (require, exports, EventType_js_4, ImageBase_js_1, ImageState_js_1, has_js_2, extent_js_13, events_js_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.listenImage = void 0;
    /**
     * A function that takes an {@link module:ol/Image~Image} for the image and a
     * `{string}` for the src as arguments. It is supposed to make it so the
     * underlying image {@link module:ol/Image~Image#getImage} is assigned the
     * content specified by the src. If not specified, the default is
     *
     *     function(image, src) {
     *       image.getImage().src = src;
     *     }
     *
     * Providing a custom `imageLoadFunction` can be useful to load images with
     * post requests or - in general - through XHR requests, where the src of the
     * image element would be set to a data URI when the content is loaded.
     *
     * @typedef {function(ImageWrapper, string): void} LoadFunction
     * @api
     */
    class ImageWrapper extends ImageBase_js_1.default {
        /**
         * @param {import("./extent.js").Extent} extent Extent.
         * @param {number|undefined} resolution Resolution.
         * @param {number} pixelRatio Pixel ratio.
         * @param {string} src Image source URI.
         * @param {?string} crossOrigin Cross origin.
         * @param {LoadFunction} imageLoadFunction Image load function.
         */
        constructor(extent, resolution, pixelRatio, src, crossOrigin, imageLoadFunction) {
            super(extent, resolution, pixelRatio, ImageState_js_1.default.IDLE);
            /**
             * @private
             * @type {string}
             */
            this.src_ = src;
            /**
             * @private
             * @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement}
             */
            this.image_ = new Image();
            if (crossOrigin !== null) {
                this.image_.crossOrigin = crossOrigin;
            }
            /**
             * @private
             * @type {?function():void}
             */
            this.unlisten_ = null;
            /**
             * @protected
             * @type {import("./ImageState.js").default}
             */
            this.state = ImageState_js_1.default.IDLE;
            /**
             * @private
             * @type {LoadFunction}
             */
            this.imageLoadFunction_ = imageLoadFunction;
        }
        /**
         * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.
         * @api
         */
        getImage() {
            return this.image_;
        }
        /**
         * Tracks loading or read errors.
         *
         * @private
         */
        handleImageError_() {
            this.state = ImageState_js_1.default.ERROR;
            this.unlistenImage_();
            this.changed();
        }
        /**
         * Tracks successful image load.
         *
         * @private
         */
        handleImageLoad_() {
            if (this.resolution === undefined) {
                this.resolution = extent_js_13.getHeight(this.extent) / this.image_.height;
            }
            this.state = ImageState_js_1.default.LOADED;
            this.unlistenImage_();
            this.changed();
        }
        /**
         * Load the image or retry if loading previously failed.
         * Loading is taken care of by the tile queue, and calling this method is
         * only needed for preloading or for reloading in case of an error.
         * @api
         */
        load() {
            if (this.state == ImageState_js_1.default.IDLE || this.state == ImageState_js_1.default.ERROR) {
                this.state = ImageState_js_1.default.LOADING;
                this.changed();
                this.imageLoadFunction_(this, this.src_);
                this.unlisten_ = listenImage(this.image_, this.handleImageLoad_.bind(this), this.handleImageError_.bind(this));
            }
        }
        /**
         * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image.
         */
        setImage(image) {
            this.image_ = image;
        }
        /**
         * Discards event handlers which listen for load completion or errors.
         *
         * @private
         */
        unlistenImage_() {
            if (this.unlisten_) {
                this.unlisten_();
                this.unlisten_ = null;
            }
        }
    }
    /**
     * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image element.
     * @param {function():any} loadHandler Load callback function.
     * @param {function():any} errorHandler Error callback function.
     * @return {function():void} Callback to stop listening.
     */
    function listenImage(image, loadHandler, errorHandler) {
        const img = /** @type {HTMLImageElement} */ (image);
        if (img.src && has_js_2.IMAGE_DECODE) {
            const promise = img.decode();
            let listening = true;
            const unlisten = function () {
                listening = false;
            };
            promise
                .then(function () {
                if (listening) {
                    loadHandler();
                }
            })
                .catch(function (error) {
                if (listening) {
                    // FIXME: Unconditionally call errorHandler() when this bug is fixed upstream:
                    //        https://bugs.webkit.org/show_bug.cgi?id=198527
                    if (error.name === 'EncodingError' &&
                        error.message === 'Invalid image type.') {
                        loadHandler();
                    }
                    else {
                        errorHandler();
                    }
                }
            });
            return unlisten;
        }
        const listenerKeys = [
            events_js_3.listenOnce(img, EventType_js_4.default.LOAD, loadHandler),
            events_js_3.listenOnce(img, EventType_js_4.default.ERROR, errorHandler),
        ];
        return function unlisten() {
            listenerKeys.forEach(events_js_3.unlistenByKey);
        };
    }
    exports.listenImage = listenImage;
    exports.default = ImageWrapper;
});
/**
 * @module ol/style/IconImage
 */
define("node_modules/ol/src/style/IconImage", ["require", "exports", "node_modules/ol/src/events/Target", "node_modules/ol/src/events/EventType", "node_modules/ol/src/ImageState", "node_modules/ol/src/dom", "node_modules/ol/src/style/IconImageCache", "node_modules/ol/src/Image"], function (require, exports, Target_js_3, EventType_js_5, ImageState_js_2, dom_js_1, IconImageCache_js_1, Image_js_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.get = void 0;
    /**
     * @type {CanvasRenderingContext2D}
     */
    let taintedTestContext = null;
    class IconImage extends Target_js_3.default {
        /**
         * @param {HTMLImageElement|HTMLCanvasElement} image Image.
         * @param {string|undefined} src Src.
         * @param {import("../size.js").Size} size Size.
         * @param {?string} crossOrigin Cross origin.
         * @param {import("../ImageState.js").default} imageState Image state.
         * @param {import("../color.js").Color} color Color.
         */
        constructor(image, src, size, crossOrigin, imageState, color) {
            super();
            /**
             * @private
             * @type {HTMLImageElement|HTMLCanvasElement}
             */
            this.hitDetectionImage_ = null;
            /**
             * @private
             * @type {HTMLImageElement|HTMLCanvasElement}
             */
            this.image_ = !image ? new Image() : image;
            if (crossOrigin !== null) {
                /** @type {HTMLImageElement} */ (this.image_).crossOrigin = crossOrigin;
            }
            /**
             * @private
             * @type {Object<number, HTMLCanvasElement>}
             */
            this.canvas_ = {};
            /**
             * @private
             * @type {import("../color.js").Color}
             */
            this.color_ = color;
            /**
             * @private
             * @type {?function():void}
             */
            this.unlisten_ = null;
            /**
             * @private
             * @type {import("../ImageState.js").default}
             */
            this.imageState_ = imageState;
            /**
             * @private
             * @type {import("../size.js").Size}
             */
            this.size_ = size;
            /**
             * @private
             * @type {string|undefined}
             */
            this.src_ = src;
            /**
             * @private
             */
            this.tainted_;
        }
        /**
         * @private
         * @return {boolean} The image canvas is tainted.
         */
        isTainted_() {
            if (this.tainted_ === undefined && this.imageState_ === ImageState_js_2.default.LOADED) {
                if (!taintedTestContext) {
                    taintedTestContext = dom_js_1.createCanvasContext2D(1, 1);
                }
                taintedTestContext.drawImage(this.image_, 0, 0);
                try {
                    taintedTestContext.getImageData(0, 0, 1, 1);
                    this.tainted_ = false;
                }
                catch (e) {
                    taintedTestContext = null;
                    this.tainted_ = true;
                }
            }
            return this.tainted_ === true;
        }
        /**
         * @private
         */
        dispatchChangeEvent_() {
            this.dispatchEvent(EventType_js_5.default.CHANGE);
        }
        /**
         * @private
         */
        handleImageError_() {
            this.imageState_ = ImageState_js_2.default.ERROR;
            this.unlistenImage_();
            this.dispatchChangeEvent_();
        }
        /**
         * @private
         */
        handleImageLoad_() {
            this.imageState_ = ImageState_js_2.default.LOADED;
            if (this.size_) {
                this.image_.width = this.size_[0];
                this.image_.height = this.size_[1];
            }
            else {
                this.size_ = [this.image_.width, this.image_.height];
            }
            this.unlistenImage_();
            this.dispatchChangeEvent_();
        }
        /**
         * @param {number} pixelRatio Pixel ratio.
         * @return {HTMLImageElement|HTMLCanvasElement} Image or Canvas element.
         */
        getImage(pixelRatio) {
            this.replaceColor_(pixelRatio);
            return this.canvas_[pixelRatio] ? this.canvas_[pixelRatio] : this.image_;
        }
        /**
         * @param {number} pixelRatio Pixel ratio.
         * @return {number} Image or Canvas element.
         */
        getPixelRatio(pixelRatio) {
            this.replaceColor_(pixelRatio);
            return this.canvas_[pixelRatio] ? pixelRatio : 1;
        }
        /**
         * @return {import("../ImageState.js").default} Image state.
         */
        getImageState() {
            return this.imageState_;
        }
        /**
         * @return {HTMLImageElement|HTMLCanvasElement} Image element.
         */
        getHitDetectionImage() {
            if (!this.hitDetectionImage_) {
                if (this.isTainted_()) {
                    const width = this.size_[0];
                    const height = this.size_[1];
                    const context = dom_js_1.createCanvasContext2D(width, height);
                    context.fillRect(0, 0, width, height);
                    this.hitDetectionImage_ = context.canvas;
                }
                else {
                    this.hitDetectionImage_ = this.image_;
                }
            }
            return this.hitDetectionImage_;
        }
        /**
         * Get the size of the icon (in pixels).
         * @return {import("../size.js").Size} Image size.
         */
        getSize() {
            return this.size_;
        }
        /**
         * @return {string|undefined} Image src.
         */
        getSrc() {
            return this.src_;
        }
        /**
         * Load not yet loaded URI.
         */
        load() {
            if (this.imageState_ == ImageState_js_2.default.IDLE) {
                this.imageState_ = ImageState_js_2.default.LOADING;
                try {
                    /** @type {HTMLImageElement} */ (this.image_).src = this.src_;
                }
                catch (e) {
                    this.handleImageError_();
                }
                this.unlisten_ = Image_js_1.listenImage(this.image_, this.handleImageLoad_.bind(this), this.handleImageError_.bind(this));
            }
        }
        /**
         * @param {number} pixelRatio Pixel ratio.
         * @private
         */
        replaceColor_(pixelRatio) {
            if (!this.color_ || this.canvas_[pixelRatio]) {
                return;
            }
            const canvas = document.createElement('canvas');
            this.canvas_[pixelRatio] = canvas;
            canvas.width = Math.ceil(this.image_.width * pixelRatio);
            canvas.height = Math.ceil(this.image_.height * pixelRatio);
            const ctx = canvas.getContext('2d');
            ctx.scale(pixelRatio, pixelRatio);
            ctx.drawImage(this.image_, 0, 0);
            if (this.isTainted_()) {
                // If reading from the canvas throws a SecurityError the same effect can be
                // achieved with globalCompositeOperation.
                // This could be used as the default, but it is not fully supported by all
                // browsers. E. g. Internet Explorer 11 does not support the multiply
                // operation and the resulting image shape will be completelly filled with
                // the provided color.
                // So this is only used as a fallback. It is still better than having no icon
                // at all.
                const c = this.color_;
                ctx.globalCompositeOperation = 'multiply';
                ctx.fillStyle = 'rgb(' + c[0] + ',' + c[1] + ',' + c[2] + ')';
                ctx.fillRect(0, 0, canvas.width, canvas.height);
                ctx.globalCompositeOperation = 'destination-in';
                ctx.drawImage(this.image_, 0, 0);
                return;
            }
            const imgData = ctx.getImageData(0, 0, canvas.width, canvas.height);
            const data = imgData.data;
            const r = this.color_[0] / 255.0;
            const g = this.color_[1] / 255.0;
            const b = this.color_[2] / 255.0;
            for (let i = 0, ii = data.length; i < ii; i += 4) {
                data[i] *= r;
                data[i + 1] *= g;
                data[i + 2] *= b;
            }
            ctx.putImageData(imgData, 0, 0);
        }
        /**
         * Discards event handlers which listen for load completion or errors.
         *
         * @private
         */
        unlistenImage_() {
            if (this.unlisten_) {
                this.unlisten_();
                this.unlisten_ = null;
            }
        }
    }
    /**
     * @param {HTMLImageElement|HTMLCanvasElement} image Image.
     * @param {string} src Src.
     * @param {import("../size.js").Size} size Size.
     * @param {?string} crossOrigin Cross origin.
     * @param {import("../ImageState.js").default} imageState Image state.
     * @param {import("../color.js").Color} color Color.
     * @return {IconImage} Icon image.
     */
    function get(image, src, size, crossOrigin, imageState, color) {
        let iconImage = IconImageCache_js_1.shared.get(src, crossOrigin, color);
        if (!iconImage) {
            iconImage = new IconImage(image, src, size, crossOrigin, imageState, color);
            IconImageCache_js_1.shared.set(src, crossOrigin, color, iconImage);
        }
        return iconImage;
    }
    exports.get = get;
    exports.default = IconImage;
});
define("node_modules/ol/src/style/IconImageCache", ["require", "exports", "node_modules/ol/src/color"], function (require, exports, color_js_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.shared = void 0;
    /**
     * @classdesc
     * Singleton class. Available through {@link module:ol/style/IconImageCache~shared}.
     */
    class IconImageCache {
        constructor() {
            /**
             * @type {!Object<string, import("./IconImage.js").default>}
             * @private
             */
            this.cache_ = {};
            /**
             * @type {number}
             * @private
             */
            this.cacheSize_ = 0;
            /**
             * @type {number}
             * @private
             */
            this.maxCacheSize_ = 32;
        }
        /**
         * FIXME empty description for jsdoc
         */
        clear() {
            this.cache_ = {};
            this.cacheSize_ = 0;
        }
        /**
         * @return {boolean} Can expire cache.
         */
        canExpireCache() {
            return this.cacheSize_ > this.maxCacheSize_;
        }
        /**
         * FIXME empty description for jsdoc
         */
        expire() {
            if (this.canExpireCache()) {
                let i = 0;
                for (const key in this.cache_) {
                    const iconImage = this.cache_[key];
                    if ((i++ & 3) === 0 && !iconImage.hasListener()) {
                        delete this.cache_[key];
                        --this.cacheSize_;
                    }
                }
            }
        }
        /**
         * @param {string} src Src.
         * @param {?string} crossOrigin Cross origin.
         * @param {import("../color.js").Color} color Color.
         * @return {import("./IconImage.js").default} Icon image.
         */
        get(src, crossOrigin, color) {
            const key = getKey(src, crossOrigin, color);
            return key in this.cache_ ? this.cache_[key] : null;
        }
        /**
         * @param {string} src Src.
         * @param {?string} crossOrigin Cross origin.
         * @param {import("../color.js").Color} color Color.
         * @param {import("./IconImage.js").default} iconImage Icon image.
         */
        set(src, crossOrigin, color, iconImage) {
            const key = getKey(src, crossOrigin, color);
            this.cache_[key] = iconImage;
            ++this.cacheSize_;
        }
        /**
         * Set the cache size of the icon cache. Default is `32`. Change this value when
         * your map uses more than 32 different icon images and you are not caching icon
         * styles on the application level.
         * @param {number} maxCacheSize Cache max size.
         * @api
         */
        setSize(maxCacheSize) {
            this.maxCacheSize_ = maxCacheSize;
            this.expire();
        }
    }
    /**
     * @param {string} src Src.
     * @param {?string} crossOrigin Cross origin.
     * @param {import("../color.js").Color} color Color.
     * @return {string} Cache key.
     */
    function getKey(src, crossOrigin, color) {
        const colorString = color ? color_js_1.asString(color) : 'null';
        return crossOrigin + ':' + src + ':' + colorString;
    }
    exports.default = IconImageCache;
    /**
     * The {@link module:ol/style/IconImageCache~IconImageCache} for
     * {@link module:ol/style/Icon~Icon} images.
     * @api
     */
    exports.shared = new IconImageCache();
});
/**
 * @module ol/layer/Property
 */
define("node_modules/ol/src/layer/Property", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @enum {string}
     */
    exports.default = {
        OPACITY: 'opacity',
        VISIBLE: 'visible',
        EXTENT: 'extent',
        Z_INDEX: 'zIndex',
        MAX_RESOLUTION: 'maxResolution',
        MIN_RESOLUTION: 'minResolution',
        MAX_ZOOM: 'maxZoom',
        MIN_ZOOM: 'minZoom',
        SOURCE: 'source',
    };
});
/**
 * @module ol/source/State
 */
define("node_modules/ol/src/source/State", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @enum {string}
     * State of the source, one of 'undefined', 'loading', 'ready' or 'error'.
     */
    exports.default = {
        UNDEFINED: 'undefined',
        LOADING: 'loading',
        READY: 'ready',
        ERROR: 'error',
    };
});
define("node_modules/ol/src/layer/Base", ["require", "exports", "node_modules/ol/src/Object", "node_modules/ol/src/layer/Property", "node_modules/ol/src/util", "node_modules/ol/src/asserts", "node_modules/ol/src/obj", "node_modules/ol/src/math"], function (require, exports, Object_js_2, Property_js_1, util_js_6, asserts_js_5, obj_js_5, math_js_11) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @typedef {Object} Options
     * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.
     * @property {number} [opacity=1] Opacity (0, 1).
     * @property {boolean} [visible=true] Visibility.
     * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
     * rendered outside of this extent.
     * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
     * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
     * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
     * method was used.
     * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
     * visible.
     * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
     * be visible.
     * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be
     * visible.
     * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will
     * be visible.
     */
    /**
     * @classdesc
     * Abstract base class; normally only used for creating subclasses and not
     * instantiated in apps.
     * Note that with {@link module:ol/layer/Base} and all its subclasses, any property set in
     * the options is set as a {@link module:ol/Object} property on the layer object, so
     * is observable, and has get/set accessors.
     *
     * @api
     */
    class BaseLayer extends Object_js_2.default {
        /**
         * @param {Options} options Layer options.
         */
        constructor(options) {
            super();
            /**
             * @type {Object<string, *>}
             */
            const properties = obj_js_5.assign({}, options);
            properties[Property_js_1.default.OPACITY] =
                options.opacity !== undefined ? options.opacity : 1;
            asserts_js_5.assert(typeof properties[Property_js_1.default.OPACITY] === 'number', 64); // Layer opacity must be a number
            properties[Property_js_1.default.VISIBLE] =
                options.visible !== undefined ? options.visible : true;
            properties[Property_js_1.default.Z_INDEX] = options.zIndex;
            properties[Property_js_1.default.MAX_RESOLUTION] =
                options.maxResolution !== undefined ? options.maxResolution : Infinity;
            properties[Property_js_1.default.MIN_RESOLUTION] =
                options.minResolution !== undefined ? options.minResolution : 0;
            properties[Property_js_1.default.MIN_ZOOM] =
                options.minZoom !== undefined ? options.minZoom : -Infinity;
            properties[Property_js_1.default.MAX_ZOOM] =
                options.maxZoom !== undefined ? options.maxZoom : Infinity;
            /**
             * @type {string}
             * @private
             */
            this.className_ =
                properties.className !== undefined ? options.className : 'ol-layer';
            delete properties.className;
            this.setProperties(properties);
            /**
             * @type {import("./Layer.js").State}
             * @private
             */
            this.state_ = null;
        }
        /**
         * @return {string} CSS class name.
         */
        getClassName() {
            return this.className_;
        }
        /**
         * This method is not meant to be called by layers or layer renderers because the state
         * is incorrect if the layer is included in a layer group.
         *
         * @param {boolean=} opt_managed Layer is managed.
         * @return {import("./Layer.js").State} Layer state.
         */
        getLayerState(opt_managed) {
            /** @type {import("./Layer.js").State} */
            const state = this.state_ ||
                /** @type {?} */ ({
                    layer: this,
                    managed: opt_managed === undefined ? true : opt_managed,
                });
            const zIndex = this.getZIndex();
            state.opacity = math_js_11.clamp(Math.round(this.getOpacity() * 100) / 100, 0, 1);
            state.sourceState = this.getSourceState();
            state.visible = this.getVisible();
            state.extent = this.getExtent();
            state.zIndex =
                zIndex !== undefined ? zIndex : state.managed === false ? Infinity : 0;
            state.maxResolution = this.getMaxResolution();
            state.minResolution = Math.max(this.getMinResolution(), 0);
            state.minZoom = this.getMinZoom();
            state.maxZoom = this.getMaxZoom();
            this.state_ = state;
            return state;
        }
        /**
         * @abstract
         * @param {Array<import("./Layer.js").default>=} opt_array Array of layers (to be
         *     modified in place).
         * @return {Array<import("./Layer.js").default>} Array of layers.
         */
        getLayersArray(opt_array) {
            return util_js_6.abstract();
        }
        /**
         * @abstract
         * @param {Array<import("./Layer.js").State>=} opt_states Optional list of layer
         *     states (to be modified in place).
         * @return {Array<import("./Layer.js").State>} List of layer states.
         */
        getLayerStatesArray(opt_states) {
            return util_js_6.abstract();
        }
        /**
         * Return the {@link module:ol/extent~Extent extent} of the layer or `undefined` if it
         * will be visible regardless of extent.
         * @return {import("../extent.js").Extent|undefined} The layer extent.
         * @observable
         * @api
         */
        getExtent() {
            return /** @type {import("../extent.js").Extent|undefined} */ (this.get(Property_js_1.default.EXTENT));
        }
        /**
         * Return the maximum resolution of the layer.
         * @return {number} The maximum resolution of the layer.
         * @observable
         * @api
         */
        getMaxResolution() {
            return /** @type {number} */ (this.get(Property_js_1.default.MAX_RESOLUTION));
        }
        /**
         * Return the minimum resolution of the layer.
         * @return {number} The minimum resolution of the layer.
         * @observable
         * @api
         */
        getMinResolution() {
            return /** @type {number} */ (this.get(Property_js_1.default.MIN_RESOLUTION));
        }
        /**
         * Return the minimum zoom level of the layer.
         * @return {number} The minimum zoom level of the layer.
         * @observable
         * @api
         */
        getMinZoom() {
            return /** @type {number} */ (this.get(Property_js_1.default.MIN_ZOOM));
        }
        /**
         * Return the maximum zoom level of the layer.
         * @return {number} The maximum zoom level of the layer.
         * @observable
         * @api
         */
        getMaxZoom() {
            return /** @type {number} */ (this.get(Property_js_1.default.MAX_ZOOM));
        }
        /**
         * Return the opacity of the layer (between 0 and 1).
         * @return {number} The opacity of the layer.
         * @observable
         * @api
         */
        getOpacity() {
            return /** @type {number} */ (this.get(Property_js_1.default.OPACITY));
        }
        /**
         * @abstract
         * @return {import("../source/State.js").default} Source state.
         */
        getSourceState() {
            return util_js_6.abstract();
        }
        /**
         * Return the visibility of the layer (`true` or `false`).
         * @return {boolean} The visibility of the layer.
         * @observable
         * @api
         */
        getVisible() {
            return /** @type {boolean} */ (this.get(Property_js_1.default.VISIBLE));
        }
        /**
         * Return the Z-index of the layer, which is used to order layers before
         * rendering. The default Z-index is 0.
         * @return {number} The Z-index of the layer.
         * @observable
         * @api
         */
        getZIndex() {
            return /** @type {number} */ (this.get(Property_js_1.default.Z_INDEX));
        }
        /**
         * Set the extent at which the layer is visible.  If `undefined`, the layer
         * will be visible at all extents.
         * @param {import("../extent.js").Extent|undefined} extent The extent of the layer.
         * @observable
         * @api
         */
        setExtent(extent) {
            this.set(Property_js_1.default.EXTENT, extent);
        }
        /**
         * Set the maximum resolution at which the layer is visible.
         * @param {number} maxResolution The maximum resolution of the layer.
         * @observable
         * @api
         */
        setMaxResolution(maxResolution) {
            this.set(Property_js_1.default.MAX_RESOLUTION, maxResolution);
        }
        /**
         * Set the minimum resolution at which the layer is visible.
         * @param {number} minResolution The minimum resolution of the layer.
         * @observable
         * @api
         */
        setMinResolution(minResolution) {
            this.set(Property_js_1.default.MIN_RESOLUTION, minResolution);
        }
        /**
         * Set the maximum zoom (exclusive) at which the layer is visible.
         * Note that the zoom levels for layer visibility are based on the
         * view zoom level, which may be different from a tile source zoom level.
         * @param {number} maxZoom The maximum zoom of the layer.
         * @observable
         * @api
         */
        setMaxZoom(maxZoom) {
            this.set(Property_js_1.default.MAX_ZOOM, maxZoom);
        }
        /**
         * Set the minimum zoom (inclusive) at which the layer is visible.
         * Note that the zoom levels for layer visibility are based on the
         * view zoom level, which may be different from a tile source zoom level.
         * @param {number} minZoom The minimum zoom of the layer.
         * @observable
         * @api
         */
        setMinZoom(minZoom) {
            this.set(Property_js_1.default.MIN_ZOOM, minZoom);
        }
        /**
         * Set the opacity of the layer, allowed values range from 0 to 1.
         * @param {number} opacity The opacity of the layer.
         * @observable
         * @api
         */
        setOpacity(opacity) {
            asserts_js_5.assert(typeof opacity === 'number', 64); // Layer opacity must be a number
            this.set(Property_js_1.default.OPACITY, opacity);
        }
        /**
         * Set the visibility of the layer (`true` or `false`).
         * @param {boolean} visible The visibility of the layer.
         * @observable
         * @api
         */
        setVisible(visible) {
            this.set(Property_js_1.default.VISIBLE, visible);
        }
        /**
         * Set Z-index of the layer, which is used to order layers before rendering.
         * The default Z-index is 0.
         * @param {number} zindex The z-index of the layer.
         * @observable
         * @api
         */
        setZIndex(zindex) {
            this.set(Property_js_1.default.Z_INDEX, zindex);
        }
        /**
         * Clean up.
         */
        disposeInternal() {
            if (this.state_) {
                this.state_.layer = null;
                this.state_ = null;
            }
            super.disposeInternal();
        }
    }
    exports.default = BaseLayer;
});
/**
 * @module ol/render/EventType
 */
define("node_modules/ol/src/render/EventType", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @enum {string}
     */
    exports.default = {
        /**
         * Triggered before a layer is rendered.
         * @event module:ol/render/Event~RenderEvent#prerender
         * @api
         */
        PRERENDER: 'prerender',
        /**
         * Triggered after a layer is rendered.
         * @event module:ol/render/Event~RenderEvent#postrender
         * @api
         */
        POSTRENDER: 'postrender',
        /**
         * Triggered before layers are rendered.
         * The event object will not have a `context` set.
         * @event module:ol/render/Event~RenderEvent#precompose
         * @api
         */
        PRECOMPOSE: 'precompose',
        /**
         * Triggered after all layers are rendered.
         * The event object will not have a `context` set.
         * @event module:ol/render/Event~RenderEvent#postcompose
         * @api
         */
        POSTCOMPOSE: 'postcompose',
        /**
         * Triggered when rendering is complete, i.e. all sources and tiles have
         * finished loading for the current viewport, and all tiles are faded in.
         * The event object will not have a `context` set.
         * @event module:ol/render/Event~RenderEvent#rendercomplete
         * @api
         */
        RENDERCOMPLETE: 'rendercomplete',
    };
});
/**
 * @module ol/CollectionEventType
 */
define("node_modules/ol/src/CollectionEventType", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @enum {string}
     */
    exports.default = {
        /**
         * Triggered when an item is added to the collection.
         * @event module:ol/Collection.CollectionEvent#add
         * @api
         */
        ADD: 'add',
        /**
         * Triggered when an item is removed from the collection.
         * @event module:ol/Collection.CollectionEvent#remove
         * @api
         */
        REMOVE: 'remove',
    };
});
define("node_modules/ol/src/Collection", ["require", "exports", "node_modules/ol/src/AssertionError", "node_modules/ol/src/Object", "node_modules/ol/src/CollectionEventType", "node_modules/ol/src/events/Event"], function (require, exports, AssertionError_js_2, Object_js_3, CollectionEventType_js_1, Event_js_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CollectionEvent = void 0;
    /**
     * @enum {string}
     * @private
     */
    const Property = {
        LENGTH: 'length',
    };
    /**
     * @classdesc
     * Events emitted by {@link module:ol/Collection~Collection} instances are instances of this
     * type.
     */
    class CollectionEvent extends Event_js_3.default {
        /**
         * @param {import("./CollectionEventType.js").default} type Type.
         * @param {*=} opt_element Element.
         * @param {number=} opt_index The index of the added or removed element.
         */
        constructor(type, opt_element, opt_index) {
            super(type);
            /**
             * The element that is added to or removed from the collection.
             * @type {*}
             * @api
             */
            this.element = opt_element;
            /**
             * The index of the added or removed element.
             * @type {number}
             * @api
             */
            this.index = opt_index;
        }
    }
    exports.CollectionEvent = CollectionEvent;
    /**
     * @typedef {Object} Options
     * @property {boolean} [unique=false] Disallow the same item from being added to
     * the collection twice.
     */
    /**
     * @classdesc
     * An expanded version of standard JS Array, adding convenience methods for
     * manipulation. Add and remove changes to the Collection trigger a Collection
     * event. Note that this does not cover changes to the objects _within_ the
     * Collection; they trigger events on the appropriate object, not on the
     * Collection as a whole.
     *
     * @fires CollectionEvent
     *
     * @template T
     * @api
     */
    class Collection extends Object_js_3.default {
        /**
         * @param {Array<T>=} opt_array Array.
         * @param {Options=} opt_options Collection options.
         */
        constructor(opt_array, opt_options) {
            super();
            const options = opt_options || {};
            /**
             * @private
             * @type {boolean}
             */
            this.unique_ = !!options.unique;
            /**
             * @private
             * @type {!Array<T>}
             */
            this.array_ = opt_array ? opt_array : [];
            if (this.unique_) {
                for (let i = 0, ii = this.array_.length; i < ii; ++i) {
                    this.assertUnique_(this.array_[i], i);
                }
            }
            this.updateLength_();
        }
        /**
         * Remove all elements from the collection.
         * @api
         */
        clear() {
            while (this.getLength() > 0) {
                this.pop();
            }
        }
        /**
         * Add elements to the collection.  This pushes each item in the provided array
         * to the end of the collection.
         * @param {!Array<T>} arr Array.
         * @return {Collection<T>} This collection.
         * @api
         */
        extend(arr) {
            for (let i = 0, ii = arr.length; i < ii; ++i) {
                this.push(arr[i]);
            }
            return this;
        }
        /**
         * Iterate over each element, calling the provided callback.
         * @param {function(T, number, Array<T>): *} f The function to call
         *     for every element. This function takes 3 arguments (the element, the
         *     index and the array). The return value is ignored.
         * @api
         */
        forEach(f) {
            const array = this.array_;
            for (let i = 0, ii = array.length; i < ii; ++i) {
                f(array[i], i, array);
            }
        }
        /**
         * Get a reference to the underlying Array object. Warning: if the array
         * is mutated, no events will be dispatched by the collection, and the
         * collection's "length" property won't be in sync with the actual length
         * of the array.
         * @return {!Array<T>} Array.
         * @api
         */
        getArray() {
            return this.array_;
        }
        /**
         * Get the element at the provided index.
         * @param {number} index Index.
         * @return {T} Element.
         * @api
         */
        item(index) {
            return this.array_[index];
        }
        /**
         * Get the length of this collection.
         * @return {number} The length of the array.
         * @observable
         * @api
         */
        getLength() {
            return this.get(Property.LENGTH);
        }
        /**
         * Insert an element at the provided index.
         * @param {number} index Index.
         * @param {T} elem Element.
         * @api
         */
        insertAt(index, elem) {
            if (this.unique_) {
                this.assertUnique_(elem);
            }
            this.array_.splice(index, 0, elem);
            this.updateLength_();
            this.dispatchEvent(new CollectionEvent(CollectionEventType_js_1.default.ADD, elem, index));
        }
        /**
         * Remove the last element of the collection and return it.
         * Return `undefined` if the collection is empty.
         * @return {T|undefined} Element.
         * @api
         */
        pop() {
            return this.removeAt(this.getLength() - 1);
        }
        /**
         * Insert the provided element at the end of the collection.
         * @param {T} elem Element.
         * @return {number} New length of the collection.
         * @api
         */
        push(elem) {
            if (this.unique_) {
                this.assertUnique_(elem);
            }
            const n = this.getLength();
            this.insertAt(n, elem);
            return this.getLength();
        }
        /**
         * Remove the first occurrence of an element from the collection.
         * @param {T} elem Element.
         * @return {T|undefined} The removed element or undefined if none found.
         * @api
         */
        remove(elem) {
            const arr = this.array_;
            for (let i = 0, ii = arr.length; i < ii; ++i) {
                if (arr[i] === elem) {
                    return this.removeAt(i);
                }
            }
            return undefined;
        }
        /**
         * Remove the element at the provided index and return it.
         * Return `undefined` if the collection does not contain this index.
         * @param {number} index Index.
         * @return {T|undefined} Value.
         * @api
         */
        removeAt(index) {
            const prev = this.array_[index];
            this.array_.splice(index, 1);
            this.updateLength_();
            this.dispatchEvent(new CollectionEvent(CollectionEventType_js_1.default.REMOVE, prev, index));
            return prev;
        }
        /**
         * Set the element at the provided index.
         * @param {number} index Index.
         * @param {T} elem Element.
         * @api
         */
        setAt(index, elem) {
            const n = this.getLength();
            if (index < n) {
                if (this.unique_) {
                    this.assertUnique_(elem, index);
                }
                const prev = this.array_[index];
                this.array_[index] = elem;
                this.dispatchEvent(new CollectionEvent(CollectionEventType_js_1.default.REMOVE, prev, index));
                this.dispatchEvent(new CollectionEvent(CollectionEventType_js_1.default.ADD, elem, index));
            }
            else {
                for (let j = n; j < index; ++j) {
                    this.insertAt(j, undefined);
                }
                this.insertAt(index, elem);
            }
        }
        /**
         * @private
         */
        updateLength_() {
            this.set(Property.LENGTH, this.array_.length);
        }
        /**
         * @private
         * @param {T} elem Element.
         * @param {number=} opt_except Optional index to ignore.
         */
        assertUnique_(elem, opt_except) {
            for (let i = 0, ii = this.array_.length; i < ii; ++i) {
                if (this.array_[i] === elem && i !== opt_except) {
                    throw new AssertionError_js_2.default(58);
                }
            }
        }
    }
    exports.default = Collection;
});
define("node_modules/ol/src/layer/Group", ["require", "exports", "node_modules/ol/src/layer/Base", "node_modules/ol/src/Collection", "node_modules/ol/src/CollectionEventType", "node_modules/ol/src/events/EventType", "node_modules/ol/src/ObjectEventType", "node_modules/ol/src/source/State", "node_modules/ol/src/asserts", "node_modules/ol/src/obj", "node_modules/ol/src/Object", "node_modules/ol/src/extent", "node_modules/ol/src/util", "node_modules/ol/src/events"], function (require, exports, Base_js_1, Collection_js_1, CollectionEventType_js_2, EventType_js_6, ObjectEventType_js_2, State_js_1, asserts_js_6, obj_js_6, Object_js_4, extent_js_14, util_js_7, events_js_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @typedef {Object} Options
     * @property {number} [opacity=1] Opacity (0, 1).
     * @property {boolean} [visible=true] Visibility.
     * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
     * rendered outside of this extent.
     * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
     * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
     * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
     * method was used.
     * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
     * visible.
     * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
     * be visible.
     * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be
     * visible.
     * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will
     * be visible.
     * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be
     * visible.
     * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will
     * be visible.
     * @property {Array<import("./Base.js").default>|import("../Collection.js").default<import("./Base.js").default>} [layers] Child layers.
     */
    /**
     * @enum {string}
     * @private
     */
    const Property = {
        LAYERS: 'layers',
    };
    /**
     * @classdesc
     * A {@link module:ol/Collection~Collection} of layers that are handled together.
     *
     * A generic `change` event is triggered when the group/Collection changes.
     *
     * @api
     */
    class LayerGroup extends Base_js_1.default {
        /**
         * @param {Options=} opt_options Layer options.
         */
        constructor(opt_options) {
            const options = opt_options || {};
            const baseOptions = /** @type {Options} */ (obj_js_6.assign({}, options));
            delete baseOptions.layers;
            let layers = options.layers;
            super(baseOptions);
            /**
             * @private
             * @type {Array<import("../events.js").EventsKey>}
             */
            this.layersListenerKeys_ = [];
            /**
             * @private
             * @type {Object<string, Array<import("../events.js").EventsKey>>}
             */
            this.listenerKeys_ = {};
            this.addEventListener(Object_js_4.getChangeEventType(Property.LAYERS), this.handleLayersChanged_);
            if (layers) {
                if (Array.isArray(layers)) {
                    layers = new Collection_js_1.default(layers.slice(), { unique: true });
                }
                else {
                    asserts_js_6.assert(typeof ( /** @type {?} */(layers).getArray) === 'function', 43); // Expected `layers` to be an array or a `Collection`
                }
            }
            else {
                layers = new Collection_js_1.default(undefined, { unique: true });
            }
            this.setLayers(layers);
        }
        /**
         * @private
         */
        handleLayerChange_() {
            this.changed();
        }
        /**
         * @private
         */
        handleLayersChanged_() {
            this.layersListenerKeys_.forEach(events_js_4.unlistenByKey);
            this.layersListenerKeys_.length = 0;
            const layers = this.getLayers();
            this.layersListenerKeys_.push(events_js_4.listen(layers, CollectionEventType_js_2.default.ADD, this.handleLayersAdd_, this), events_js_4.listen(layers, CollectionEventType_js_2.default.REMOVE, this.handleLayersRemove_, this));
            for (const id in this.listenerKeys_) {
                this.listenerKeys_[id].forEach(events_js_4.unlistenByKey);
            }
            obj_js_6.clear(this.listenerKeys_);
            const layersArray = layers.getArray();
            for (let i = 0, ii = layersArray.length; i < ii; i++) {
                const layer = layersArray[i];
                this.listenerKeys_[util_js_7.getUid(layer)] = [
                    events_js_4.listen(layer, ObjectEventType_js_2.default.PROPERTYCHANGE, this.handleLayerChange_, this),
                    events_js_4.listen(layer, EventType_js_6.default.CHANGE, this.handleLayerChange_, this),
                ];
            }
            this.changed();
        }
        /**
         * @param {import("../Collection.js").CollectionEvent} collectionEvent CollectionEvent.
         * @private
         */
        handleLayersAdd_(collectionEvent) {
            const layer = /** @type {import("./Base.js").default} */ (collectionEvent.element);
            this.listenerKeys_[util_js_7.getUid(layer)] = [
                events_js_4.listen(layer, ObjectEventType_js_2.default.PROPERTYCHANGE, this.handleLayerChange_, this),
                events_js_4.listen(layer, EventType_js_6.default.CHANGE, this.handleLayerChange_, this),
            ];
            this.changed();
        }
        /**
         * @param {import("../Collection.js").CollectionEvent} collectionEvent CollectionEvent.
         * @private
         */
        handleLayersRemove_(collectionEvent) {
            const layer = /** @type {import("./Base.js").default} */ (collectionEvent.element);
            const key = util_js_7.getUid(layer);
            this.listenerKeys_[key].forEach(events_js_4.unlistenByKey);
            delete this.listenerKeys_[key];
            this.changed();
        }
        /**
         * Returns the {@link module:ol/Collection collection} of {@link module:ol/layer/Layer~Layer layers}
         * in this group.
         * @return {!import("../Collection.js").default<import("./Base.js").default>} Collection of
         *   {@link module:ol/layer/Base layers} that are part of this group.
         * @observable
         * @api
         */
        getLayers() {
            return /** @type {!import("../Collection.js").default<import("./Base.js").default>} */ (this.get(Property.LAYERS));
        }
        /**
         * Set the {@link module:ol/Collection collection} of {@link module:ol/layer/Layer~Layer layers}
         * in this group.
         * @param {!import("../Collection.js").default<import("./Base.js").default>} layers Collection of
         *   {@link module:ol/layer/Base layers} that are part of this group.
         * @observable
         * @api
         */
        setLayers(layers) {
            this.set(Property.LAYERS, layers);
        }
        /**
         * @param {Array<import("./Layer.js").default>=} opt_array Array of layers (to be modified in place).
         * @return {Array<import("./Layer.js").default>} Array of layers.
         */
        getLayersArray(opt_array) {
            const array = opt_array !== undefined ? opt_array : [];
            this.getLayers().forEach(function (layer) {
                layer.getLayersArray(array);
            });
            return array;
        }
        /**
         * @param {Array<import("./Layer.js").State>=} opt_states Optional list of layer states (to be modified in place).
         * @return {Array<import("./Layer.js").State>} List of layer states.
         */
        getLayerStatesArray(opt_states) {
            const states = opt_states !== undefined ? opt_states : [];
            const pos = states.length;
            this.getLayers().forEach(function (layer) {
                layer.getLayerStatesArray(states);
            });
            const ownLayerState = this.getLayerState();
            for (let i = pos, ii = states.length; i < ii; i++) {
                const layerState = states[i];
                layerState.opacity *= ownLayerState.opacity;
                layerState.visible = layerState.visible && ownLayerState.visible;
                layerState.maxResolution = Math.min(layerState.maxResolution, ownLayerState.maxResolution);
                layerState.minResolution = Math.max(layerState.minResolution, ownLayerState.minResolution);
                layerState.minZoom = Math.max(layerState.minZoom, ownLayerState.minZoom);
                layerState.maxZoom = Math.min(layerState.maxZoom, ownLayerState.maxZoom);
                if (ownLayerState.extent !== undefined) {
                    if (layerState.extent !== undefined) {
                        layerState.extent = extent_js_14.getIntersection(layerState.extent, ownLayerState.extent);
                    }
                    else {
                        layerState.extent = ownLayerState.extent;
                    }
                }
            }
            return states;
        }
        /**
         * @return {import("../source/State.js").default} Source state.
         */
        getSourceState() {
            return State_js_1.default.READY;
        }
    }
    exports.default = LayerGroup;
});
define("node_modules/ol/src/MapEvent", ["require", "exports", "node_modules/ol/src/events/Event"], function (require, exports, Event_js_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @classdesc
     * Events emitted as map events are instances of this type.
     * See {@link module:ol/PluggableMap~PluggableMap} for which events trigger a map event.
     */
    class MapEvent extends Event_js_4.default {
        /**
         * @param {string} type Event type.
         * @param {import("./PluggableMap.js").default} map Map.
         * @param {?import("./PluggableMap.js").FrameState=} opt_frameState Frame state.
         */
        constructor(type, map, opt_frameState) {
            super(type);
            /**
             * The map where the event occurred.
             * @type {import("./PluggableMap.js").default}
             * @api
             */
            this.map = map;
            /**
             * The frame state at the time of the event.
             * @type {?import("./PluggableMap.js").FrameState}
             * @api
             */
            this.frameState = opt_frameState !== undefined ? opt_frameState : null;
        }
    }
    exports.default = MapEvent;
});
define("node_modules/ol/src/MapBrowserEvent", ["require", "exports", "node_modules/ol/src/MapEvent"], function (require, exports, MapEvent_js_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @classdesc
     * Events emitted as map browser events are instances of this type.
     * See {@link module:ol/PluggableMap~PluggableMap} for which events trigger a map browser event.
     * @template {UIEvent} EVENT
     */
    class MapBrowserEvent extends MapEvent_js_1.default {
        /**
         * @param {string} type Event type.
         * @param {import("./PluggableMap.js").default} map Map.
         * @param {EVENT} originalEvent Original event.
         * @param {boolean=} opt_dragging Is the map currently being dragged?
         * @param {?import("./PluggableMap.js").FrameState=} opt_frameState Frame state.
         */
        constructor(type, map, originalEvent, opt_dragging, opt_frameState) {
            super(type, map, opt_frameState);
            /**
             * The original browser event.
             * @const
             * @type {EVENT}
             * @api
             */
            this.originalEvent = originalEvent;
            /**
             * The map pixel relative to the viewport corresponding to the original browser event.
             * @type {?import("./pixel.js").Pixel}
             */
            this.pixel_ = null;
            /**
             * The coordinate in the user projection corresponding to the original browser event.
             * @type {?import("./coordinate.js").Coordinate}
             */
            this.coordinate_ = null;
            /**
             * Indicates if the map is currently being dragged. Only set for
             * `POINTERDRAG` and `POINTERMOVE` events. Default is `false`.
             *
             * @type {boolean}
             * @api
             */
            this.dragging = opt_dragging !== undefined ? opt_dragging : false;
        }
        /**
         * The map pixel relative to the viewport corresponding to the original event.
         * @type {import("./pixel.js").Pixel}
         * @api
         */
        get pixel() {
            if (!this.pixel_) {
                this.pixel_ = this.map.getEventPixel(this.originalEvent);
            }
            return this.pixel_;
        }
        set pixel(pixel) {
            this.pixel_ = pixel;
        }
        /**
         * The coordinate corresponding to the original browser event.  This will be in the user
         * projection if one is set.  Otherwise it will be in the view projection.
         * @type {import("./coordinate.js").Coordinate}
         * @api
         */
        get coordinate() {
            if (!this.coordinate_) {
                this.coordinate_ = this.map.getCoordinateFromPixel(this.pixel);
            }
            return this.coordinate_;
        }
        set coordinate(coordinate) {
            this.coordinate_ = coordinate;
        }
        /**
         * Prevents the default browser action.
         * See https://developer.mozilla.org/en-US/docs/Web/API/event.preventDefault.
         * @api
         */
        preventDefault() {
            super.preventDefault();
            this.originalEvent.preventDefault();
        }
        /**
         * Prevents further propagation of the current event.
         * See https://developer.mozilla.org/en-US/docs/Web/API/event.stopPropagation.
         * @api
         */
        stopPropagation() {
            super.stopPropagation();
            this.originalEvent.stopPropagation();
        }
    }
    exports.default = MapBrowserEvent;
});
define("node_modules/ol/src/MapBrowserEventType", ["require", "exports", "node_modules/ol/src/events/EventType"], function (require, exports, EventType_js_7) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Constants for event names.
     * @enum {string}
     */
    exports.default = {
        /**
         * A true single click with no dragging and no double click. Note that this
         * event is delayed by 250 ms to ensure that it is not a double click.
         * @event module:ol/MapBrowserEvent~MapBrowserEvent#singleclick
         * @api
         */
        SINGLECLICK: 'singleclick',
        /**
         * A click with no dragging. A double click will fire two of this.
         * @event module:ol/MapBrowserEvent~MapBrowserEvent#click
         * @api
         */
        CLICK: EventType_js_7.default.CLICK,
        /**
         * A true double click, with no dragging.
         * @event module:ol/MapBrowserEvent~MapBrowserEvent#dblclick
         * @api
         */
        DBLCLICK: EventType_js_7.default.DBLCLICK,
        /**
         * Triggered when a pointer is dragged.
         * @event module:ol/MapBrowserEvent~MapBrowserEvent#pointerdrag
         * @api
         */
        POINTERDRAG: 'pointerdrag',
        /**
         * Triggered when a pointer is moved. Note that on touch devices this is
         * triggered when the map is panned, so is not the same as mousemove.
         * @event module:ol/MapBrowserEvent~MapBrowserEvent#pointermove
         * @api
         */
        POINTERMOVE: 'pointermove',
        POINTERDOWN: 'pointerdown',
        POINTERUP: 'pointerup',
        POINTEROVER: 'pointerover',
        POINTEROUT: 'pointerout',
        POINTERENTER: 'pointerenter',
        POINTERLEAVE: 'pointerleave',
        POINTERCANCEL: 'pointercancel',
    };
});
/**
 * @module ol/pointer/EventType
 */
define("node_modules/ol/src/pointer/EventType", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Constants for event names.
     * @enum {string}
     */
    exports.default = {
        POINTERMOVE: 'pointermove',
        POINTERDOWN: 'pointerdown',
        POINTERUP: 'pointerup',
        POINTEROVER: 'pointerover',
        POINTEROUT: 'pointerout',
        POINTERENTER: 'pointerenter',
        POINTERLEAVE: 'pointerleave',
        POINTERCANCEL: 'pointercancel',
    };
});
/**
 * @module ol/MapBrowserEventHandler
 */
define("node_modules/ol/src/MapBrowserEventHandler", ["require", "exports", "node_modules/ol/src/events/Target", "node_modules/ol/src/events/EventType", "node_modules/ol/src/MapBrowserEvent", "node_modules/ol/src/MapBrowserEventType", "node_modules/ol/src/pointer/EventType", "node_modules/ol/src/has", "node_modules/ol/src/events"], function (require, exports, Target_js_4, EventType_js_8, MapBrowserEvent_js_1, MapBrowserEventType_js_1, EventType_js_9, has_js_3, events_js_5) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    class MapBrowserEventHandler extends Target_js_4.default {
        /**
         * @param {import("./PluggableMap.js").default} map The map with the viewport to listen to events on.
         * @param {number=} moveTolerance The minimal distance the pointer must travel to trigger a move.
         */
        constructor(map, moveTolerance) {
            super(map);
            /**
             * This is the element that we will listen to the real events on.
             * @type {import("./PluggableMap.js").default}
             * @private
             */
            this.map_ = map;
            /**
             * @type {any}
             * @private
             */
            this.clickTimeoutId_;
            /**
             * @type {boolean}
             * @private
             */
            this.dragging_ = false;
            /**
             * @type {!Array<import("./events.js").EventsKey>}
             * @private
             */
            this.dragListenerKeys_ = [];
            /**
             * @type {number}
             * @private
             */
            this.moveTolerance_ = moveTolerance
                ? moveTolerance * has_js_3.DEVICE_PIXEL_RATIO
                : has_js_3.DEVICE_PIXEL_RATIO;
            /**
             * The most recent "down" type event (or null if none have occurred).
             * Set on pointerdown.
             * @type {PointerEvent}
             * @private
             */
            this.down_ = null;
            const element = this.map_.getViewport();
            /**
             * @type {number}
             * @private
             */
            this.activePointers_ = 0;
            /**
             * @type {!Object<number, boolean>}
             * @private
             */
            this.trackedTouches_ = {};
            this.element_ = element;
            /**
             * @type {?import("./events.js").EventsKey}
             * @private
             */
            this.pointerdownListenerKey_ = events_js_5.listen(element, EventType_js_9.default.POINTERDOWN, this.handlePointerDown_, this);
            /**
             * @type {PointerEvent}
             * @private
             */
            this.originalPointerMoveEvent_;
            /**
             * @type {?import("./events.js").EventsKey}
             * @private
             */
            this.relayedListenerKey_ = events_js_5.listen(element, EventType_js_9.default.POINTERMOVE, this.relayEvent_, this);
            /**
             * @private
             */
            this.boundHandleTouchMove_ = this.handleTouchMove_.bind(this);
            this.element_.addEventListener(EventType_js_8.default.TOUCHMOVE, this.boundHandleTouchMove_, has_js_3.PASSIVE_EVENT_LISTENERS ? { passive: false } : false);
        }
        /**
         * @param {PointerEvent} pointerEvent Pointer
         * event.
         * @private
         */
        emulateClick_(pointerEvent) {
            let newEvent = new MapBrowserEvent_js_1.default(MapBrowserEventType_js_1.default.CLICK, this.map_, pointerEvent);
            this.dispatchEvent(newEvent);
            if (this.clickTimeoutId_ !== undefined) {
                // double-click
                clearTimeout(this.clickTimeoutId_);
                this.clickTimeoutId_ = undefined;
                newEvent = new MapBrowserEvent_js_1.default(MapBrowserEventType_js_1.default.DBLCLICK, this.map_, pointerEvent);
                this.dispatchEvent(newEvent);
            }
            else {
                // click
                this.clickTimeoutId_ = setTimeout(function () {
                    this.clickTimeoutId_ = undefined;
                    const newEvent = new MapBrowserEvent_js_1.default(MapBrowserEventType_js_1.default.SINGLECLICK, this.map_, pointerEvent);
                    this.dispatchEvent(newEvent);
                }.bind(this), 250);
            }
        }
        /**
         * Keeps track on how many pointers are currently active.
         *
         * @param {PointerEvent} pointerEvent Pointer
         * event.
         * @private
         */
        updateActivePointers_(pointerEvent) {
            const event = pointerEvent;
            if (event.type == MapBrowserEventType_js_1.default.POINTERUP ||
                event.type == MapBrowserEventType_js_1.default.POINTERCANCEL) {
                delete this.trackedTouches_[event.pointerId];
            }
            else if (event.type == MapBrowserEventType_js_1.default.POINTERDOWN) {
                this.trackedTouches_[event.pointerId] = true;
            }
            this.activePointers_ = Object.keys(this.trackedTouches_).length;
        }
        /**
         * @param {PointerEvent} pointerEvent Pointer
         * event.
         * @private
         */
        handlePointerUp_(pointerEvent) {
            this.updateActivePointers_(pointerEvent);
            const newEvent = new MapBrowserEvent_js_1.default(MapBrowserEventType_js_1.default.POINTERUP, this.map_, pointerEvent);
            this.dispatchEvent(newEvent);
            // We emulate click events on left mouse button click, touch contact, and pen
            // contact. isMouseActionButton returns true in these cases (evt.button is set
            // to 0).
            // See http://www.w3.org/TR/pointerevents/#button-states
            // We only fire click, singleclick, and doubleclick if nobody has called
            // event.stopPropagation() or event.preventDefault().
            if (!newEvent.propagationStopped &&
                !this.dragging_ &&
                this.isMouseActionButton_(pointerEvent)) {
                this.emulateClick_(this.down_);
            }
            if (this.activePointers_ === 0) {
                this.dragListenerKeys_.forEach(events_js_5.unlistenByKey);
                this.dragListenerKeys_.length = 0;
                this.dragging_ = false;
                this.down_ = null;
            }
        }
        /**
         * @param {PointerEvent} pointerEvent Pointer
         * event.
         * @return {boolean} If the left mouse button was pressed.
         * @private
         */
        isMouseActionButton_(pointerEvent) {
            return pointerEvent.button === 0;
        }
        /**
         * @param {PointerEvent} pointerEvent Pointer
         * event.
         * @private
         */
        handlePointerDown_(pointerEvent) {
            this.updateActivePointers_(pointerEvent);
            const newEvent = new MapBrowserEvent_js_1.default(MapBrowserEventType_js_1.default.POINTERDOWN, this.map_, pointerEvent);
            this.dispatchEvent(newEvent);
            this.down_ = pointerEvent;
            if (this.dragListenerKeys_.length === 0) {
                this.dragListenerKeys_.push(events_js_5.listen(document, MapBrowserEventType_js_1.default.POINTERMOVE, this.handlePointerMove_, this), events_js_5.listen(document, MapBrowserEventType_js_1.default.POINTERUP, this.handlePointerUp_, this), 
                /* Note that the listener for `pointercancel is set up on
                 * `pointerEventHandler_` and not `documentPointerEventHandler_` like
                 * the `pointerup` and `pointermove` listeners.
                 *
                 * The reason for this is the following: `TouchSource.vacuumTouches_()`
                 * issues `pointercancel` events, when there was no `touchend` for a
                 * `touchstart`. Now, let's say a first `touchstart` is registered on
                 * `pointerEventHandler_`. The `documentPointerEventHandler_` is set up.
                 * But `documentPointerEventHandler_` doesn't know about the first
                 * `touchstart`. If there is no `touchend` for the `touchstart`, we can
                 * only receive a `touchcancel` from `pointerEventHandler_`, because it is
                 * only registered there.
                 */
                events_js_5.listen(this.element_, MapBrowserEventType_js_1.default.POINTERCANCEL, this.handlePointerUp_, this));
                if (this.element_.getRootNode &&
                    this.element_.getRootNode() !== document) {
                    this.dragListenerKeys_.push(events_js_5.listen(this.element_.getRootNode(), MapBrowserEventType_js_1.default.POINTERUP, this.handlePointerUp_, this));
                }
            }
        }
        /**
         * @param {PointerEvent} pointerEvent Pointer
         * event.
         * @private
         */
        handlePointerMove_(pointerEvent) {
            // Between pointerdown and pointerup, pointermove events are triggered.
            // To avoid a 'false' touchmove event to be dispatched, we test if the pointer
            // moved a significant distance.
            if (this.isMoving_(pointerEvent)) {
                this.dragging_ = true;
                const newEvent = new MapBrowserEvent_js_1.default(MapBrowserEventType_js_1.default.POINTERDRAG, this.map_, pointerEvent, this.dragging_);
                this.dispatchEvent(newEvent);
            }
        }
        /**
         * Wrap and relay a pointer event.  Note that this requires that the type
         * string for the MapBrowserEvent matches the PointerEvent type.
         * @param {PointerEvent} pointerEvent Pointer
         * event.
         * @private
         */
        relayEvent_(pointerEvent) {
            this.originalPointerMoveEvent_ = pointerEvent;
            const dragging = !!(this.down_ && this.isMoving_(pointerEvent));
            this.dispatchEvent(new MapBrowserEvent_js_1.default(pointerEvent.type, this.map_, pointerEvent, dragging));
        }
        /**
         * Flexible handling of a `touch-action: none` css equivalent: because calling
         * `preventDefault()` on a `pointermove` event does not stop native page scrolling
         * and zooming, we also listen for `touchmove` and call `preventDefault()` on it
         * when an interaction (currently `DragPan` handles the event.
         * @param {TouchEvent} event Event.
         * @private
         */
        handleTouchMove_(event) {
            // Due to https://github.com/mpizenberg/elm-pep/issues/2, `this.originalPointerMoveEvent_`
            // may not be initialized yet when we get here on a platform without native pointer events.
            if (!this.originalPointerMoveEvent_ ||
                this.originalPointerMoveEvent_.defaultPrevented) {
                event.preventDefault();
            }
        }
        /**
         * @param {PointerEvent} pointerEvent Pointer
         * event.
         * @return {boolean} Is moving.
         * @private
         */
        isMoving_(pointerEvent) {
            return (this.dragging_ ||
                Math.abs(pointerEvent.clientX - this.down_.clientX) >
                    this.moveTolerance_ ||
                Math.abs(pointerEvent.clientY - this.down_.clientY) > this.moveTolerance_);
        }
        /**
         * Clean up.
         */
        disposeInternal() {
            if (this.relayedListenerKey_) {
                events_js_5.unlistenByKey(this.relayedListenerKey_);
                this.relayedListenerKey_ = null;
            }
            this.element_.removeEventListener(EventType_js_8.default.TOUCHMOVE, this.boundHandleTouchMove_);
            if (this.pointerdownListenerKey_) {
                events_js_5.unlistenByKey(this.pointerdownListenerKey_);
                this.pointerdownListenerKey_ = null;
            }
            this.dragListenerKeys_.forEach(events_js_5.unlistenByKey);
            this.dragListenerKeys_.length = 0;
            this.element_ = null;
            super.disposeInternal();
        }
    }
    exports.default = MapBrowserEventHandler;
});
/**
 * @module ol/MapEventType
 */
define("node_modules/ol/src/MapEventType", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @enum {string}
     */
    exports.default = {
        /**
         * Triggered after a map frame is rendered.
         * @event module:ol/MapEvent~MapEvent#postrender
         * @api
         */
        POSTRENDER: 'postrender',
        /**
         * Triggered when the map starts moving.
         * @event module:ol/MapEvent~MapEvent#movestart
         * @api
         */
        MOVESTART: 'movestart',
        /**
         * Triggered after the map is moved.
         * @event module:ol/MapEvent~MapEvent#moveend
         * @api
         */
        MOVEEND: 'moveend',
    };
});
/**
 * @module ol/MapProperty
 */
define("node_modules/ol/src/MapProperty", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @enum {string}
     */
    exports.default = {
        LAYERGROUP: 'layergroup',
        SIZE: 'size',
        TARGET: 'target',
        VIEW: 'view',
    };
});
define("node_modules/ol/src/structs/PriorityQueue", ["require", "exports", "node_modules/ol/src/asserts", "node_modules/ol/src/obj"], function (require, exports, asserts_js_7, obj_js_7) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DROP = void 0;
    /**
     * @type {number}
     */
    exports.DROP = Infinity;
    /**
     * @classdesc
     * Priority queue.
     *
     * The implementation is inspired from the Closure Library's Heap class and
     * Python's heapq module.
     *
     * See http://closure-library.googlecode.com/svn/docs/closure_goog_structs_heap.js.source.html
     * and http://hg.python.org/cpython/file/2.7/Lib/heapq.py.
     *
     * @template T
     */
    class PriorityQueue {
        /**
         * @param {function(T): number} priorityFunction Priority function.
         * @param {function(T): string} keyFunction Key function.
         */
        constructor(priorityFunction, keyFunction) {
            /**
             * @type {function(T): number}
             * @private
             */
            this.priorityFunction_ = priorityFunction;
            /**
             * @type {function(T): string}
             * @private
             */
            this.keyFunction_ = keyFunction;
            /**
             * @type {Array<T>}
             * @private
             */
            this.elements_ = [];
            /**
             * @type {Array<number>}
             * @private
             */
            this.priorities_ = [];
            /**
             * @type {!Object<string, boolean>}
             * @private
             */
            this.queuedElements_ = {};
        }
        /**
         * FIXME empty description for jsdoc
         */
        clear() {
            this.elements_.length = 0;
            this.priorities_.length = 0;
            obj_js_7.clear(this.queuedElements_);
        }
        /**
         * Remove and return the highest-priority element. O(log N).
         * @return {T} Element.
         */
        dequeue() {
            const elements = this.elements_;
            const priorities = this.priorities_;
            const element = elements[0];
            if (elements.length == 1) {
                elements.length = 0;
                priorities.length = 0;
            }
            else {
                elements[0] = elements.pop();
                priorities[0] = priorities.pop();
                this.siftUp_(0);
            }
            const elementKey = this.keyFunction_(element);
            delete this.queuedElements_[elementKey];
            return element;
        }
        /**
         * Enqueue an element. O(log N).
         * @param {T} element Element.
         * @return {boolean} The element was added to the queue.
         */
        enqueue(element) {
            asserts_js_7.assert(!(this.keyFunction_(element) in this.queuedElements_), 31); // Tried to enqueue an `element` that was already added to the queue
            const priority = this.priorityFunction_(element);
            if (priority != exports.DROP) {
                this.elements_.push(element);
                this.priorities_.push(priority);
                this.queuedElements_[this.keyFunction_(element)] = true;
                this.siftDown_(0, this.elements_.length - 1);
                return true;
            }
            return false;
        }
        /**
         * @return {number} Count.
         */
        getCount() {
            return this.elements_.length;
        }
        /**
         * Gets the index of the left child of the node at the given index.
         * @param {number} index The index of the node to get the left child for.
         * @return {number} The index of the left child.
         * @private
         */
        getLeftChildIndex_(index) {
            return index * 2 + 1;
        }
        /**
         * Gets the index of the right child of the node at the given index.
         * @param {number} index The index of the node to get the right child for.
         * @return {number} The index of the right child.
         * @private
         */
        getRightChildIndex_(index) {
            return index * 2 + 2;
        }
        /**
         * Gets the index of the parent of the node at the given index.
         * @param {number} index The index of the node to get the parent for.
         * @return {number} The index of the parent.
         * @private
         */
        getParentIndex_(index) {
            return (index - 1) >> 1;
        }
        /**
         * Make this a heap. O(N).
         * @private
         */
        heapify_() {
            let i;
            for (i = (this.elements_.length >> 1) - 1; i >= 0; i--) {
                this.siftUp_(i);
            }
        }
        /**
         * @return {boolean} Is empty.
         */
        isEmpty() {
            return this.elements_.length === 0;
        }
        /**
         * @param {string} key Key.
         * @return {boolean} Is key queued.
         */
        isKeyQueued(key) {
            return key in this.queuedElements_;
        }
        /**
         * @param {T} element Element.
         * @return {boolean} Is queued.
         */
        isQueued(element) {
            return this.isKeyQueued(this.keyFunction_(element));
        }
        /**
         * @param {number} index The index of the node to move down.
         * @private
         */
        siftUp_(index) {
            const elements = this.elements_;
            const priorities = this.priorities_;
            const count = elements.length;
            const element = elements[index];
            const priority = priorities[index];
            const startIndex = index;
            while (index < count >> 1) {
                const lIndex = this.getLeftChildIndex_(index);
                const rIndex = this.getRightChildIndex_(index);
                const smallerChildIndex = rIndex < count && priorities[rIndex] < priorities[lIndex]
                    ? rIndex
                    : lIndex;
                elements[index] = elements[smallerChildIndex];
                priorities[index] = priorities[smallerChildIndex];
                index = smallerChildIndex;
            }
            elements[index] = element;
            priorities[index] = priority;
            this.siftDown_(startIndex, index);
        }
        /**
         * @param {number} startIndex The index of the root.
         * @param {number} index The index of the node to move up.
         * @private
         */
        siftDown_(startIndex, index) {
            const elements = this.elements_;
            const priorities = this.priorities_;
            const element = elements[index];
            const priority = priorities[index];
            while (index > startIndex) {
                const parentIndex = this.getParentIndex_(index);
                if (priorities[parentIndex] > priority) {
                    elements[index] = elements[parentIndex];
                    priorities[index] = priorities[parentIndex];
                    index = parentIndex;
                }
                else {
                    break;
                }
            }
            elements[index] = element;
            priorities[index] = priority;
        }
        /**
         * FIXME empty description for jsdoc
         */
        reprioritize() {
            const priorityFunction = this.priorityFunction_;
            const elements = this.elements_;
            const priorities = this.priorities_;
            let index = 0;
            const n = elements.length;
            let element, i, priority;
            for (i = 0; i < n; ++i) {
                element = elements[i];
                priority = priorityFunction(element);
                if (priority == exports.DROP) {
                    delete this.queuedElements_[this.keyFunction_(element)];
                }
                else {
                    priorities[index] = priority;
                    elements[index++] = element;
                }
            }
            elements.length = index;
            priorities.length = index;
            this.heapify_();
        }
    }
    exports.default = PriorityQueue;
});
/**
 * @module ol/TileState
 */
define("node_modules/ol/src/TileState", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @enum {number}
     */
    exports.default = {
        IDLE: 0,
        LOADING: 1,
        LOADED: 2,
        /**
         * Indicates that tile loading failed
         * @type {number}
         */
        ERROR: 3,
        EMPTY: 4,
    };
});
/**
 * @module ol/easing
 */
define("node_modules/ol/src/easing", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.upAndDown = exports.linear = exports.inAndOut = exports.easeOut = exports.easeIn = void 0;
    /**
     * Start slow and speed up.
     * @param {number} t Input between 0 and 1.
     * @return {number} Output between 0 and 1.
     * @api
     */
    function easeIn(t) {
        return Math.pow(t, 3);
    }
    exports.easeIn = easeIn;
    /**
     * Start fast and slow down.
     * @param {number} t Input between 0 and 1.
     * @return {number} Output between 0 and 1.
     * @api
     */
    function easeOut(t) {
        return 1 - easeIn(1 - t);
    }
    exports.easeOut = easeOut;
    /**
     * Start slow, speed up, and then slow down again.
     * @param {number} t Input between 0 and 1.
     * @return {number} Output between 0 and 1.
     * @api
     */
    function inAndOut(t) {
        return 3 * t * t - 2 * t * t * t;
    }
    exports.inAndOut = inAndOut;
    /**
     * Maintain a constant speed over time.
     * @param {number} t Input between 0 and 1.
     * @return {number} Output between 0 and 1.
     * @api
     */
    function linear(t) {
        return t;
    }
    exports.linear = linear;
    /**
     * Start slow, speed up, and at the very end slow down again.  This has the
     * same general behavior as {@link module:ol/easing~inAndOut}, but the final
     * slowdown is delayed.
     * @param {number} t Input between 0 and 1.
     * @return {number} Output between 0 and 1.
     * @api
     */
    function upAndDown(t) {
        if (t < 0.5) {
            return inAndOut(2 * t);
        }
        else {
            return 1 - inAndOut(2 * (t - 0.5));
        }
    }
    exports.upAndDown = upAndDown;
});
define("node_modules/ol/src/Tile", ["require", "exports", "node_modules/ol/src/events/Target", "node_modules/ol/src/events/EventType", "node_modules/ol/src/TileState", "node_modules/ol/src/util", "node_modules/ol/src/easing"], function (require, exports, Target_js_5, EventType_js_10, TileState_js_1, util_js_8, easing_js_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * A function that takes an {@link module:ol/Tile} for the tile and a
     * `{string}` for the url as arguments. The default is
     * ```js
     * source.setTileLoadFunction(function(tile, src) {
     *   tile.getImage().src = src;
     * });
     * ```
     * For more fine grained control, the load function can use fetch or XMLHttpRequest and involve
     * error handling:
     *
     * ```js
     * import TileState from 'ol/TileState';
     *
     * source.setTileLoadFunction(function(tile, src) {
     *   var xhr = new XMLHttpRequest();
     *   xhr.responseType = 'blob';
     *   xhr.addEventListener('loadend', function (evt) {
     *     var data = this.response;
     *     if (data !== undefined) {
     *       tile.getImage().src = URL.createObjectURL(data);
     *     } else {
     *       tile.setState(TileState.ERROR);
     *     }
     *   });
     *   xhr.addEventListener('error', function () {
     *     tile.setState(TileState.ERROR);
     *   });
     *   xhr.open('GET', src);
     *   xhr.send();
     * });
     * ```
     *
     * @typedef {function(Tile, string): void} LoadFunction
     * @api
     */
    /**
     * {@link module:ol/source/Tile~Tile} sources use a function of this type to get
     * the url that provides a tile for a given tile coordinate.
     *
     * This function takes an {@link module:ol/tilecoord~TileCoord} for the tile
     * coordinate, a `{number}` representing the pixel ratio and a
     * {@link module:ol/proj/Projection} for the projection  as arguments
     * and returns a `{string}` representing the tile URL, or undefined if no tile
     * should be requested for the passed tile coordinate.
     *
     * @typedef {function(import("./tilecoord.js").TileCoord, number,
     *           import("./proj/Projection.js").default): (string|undefined)} UrlFunction
     * @api
     */
    /**
     * @typedef {Object} Options
     * @property {number} [transition=250] A duration for tile opacity
     * transitions in milliseconds. A duration of 0 disables the opacity transition.
     * @api
     */
    /**
     * @classdesc
     * Base class for tiles.
     *
     * @abstract
     */
    class Tile extends Target_js_5.default {
        /**
         * @param {import("./tilecoord.js").TileCoord} tileCoord Tile coordinate.
         * @param {import("./TileState.js").default} state State.
         * @param {Options=} opt_options Tile options.
         */
        constructor(tileCoord, state, opt_options) {
            super();
            const options = opt_options ? opt_options : {};
            /**
             * @type {import("./tilecoord.js").TileCoord}
             */
            this.tileCoord = tileCoord;
            /**
             * @protected
             * @type {import("./TileState.js").default}
             */
            this.state = state;
            /**
             * An "interim" tile for this tile. The interim tile may be used while this
             * one is loading, for "smooth" transitions when changing params/dimensions
             * on the source.
             * @type {Tile}
             */
            this.interimTile = null;
            /**
             * The tile is available at the highest possible resolution. Subclasses can
             * set this to `false` initially. Tile load listeners will not be
             * unregistered before this is set to `true` and a `#changed()` is called.
             * @type {boolean}
             */
            this.hifi = true;
            /**
             * A key assigned to the tile. This is used by the tile source to determine
             * if this tile can effectively be used, or if a new tile should be created
             * and this one be used as an interim tile for this new tile.
             * @type {string}
             */
            this.key = '';
            /**
             * The duration for the opacity transition.
             * @type {number}
             */
            this.transition_ =
                options.transition === undefined ? 250 : options.transition;
            /**
             * Lookup of start times for rendering transitions.  If the start time is
             * equal to -1, the transition is complete.
             * @type {Object<string, number>}
             */
            this.transitionStarts_ = {};
        }
        /**
         * @protected
         */
        changed() {
            this.dispatchEvent(EventType_js_10.default.CHANGE);
        }
        /**
         * Called by the tile cache when the tile is removed from the cache due to expiry
         */
        release() { }
        /**
         * @return {string} Key.
         */
        getKey() {
            return this.key + '/' + this.tileCoord;
        }
        /**
         * Get the interim tile most suitable for rendering using the chain of interim
         * tiles. This corresponds to the  most recent tile that has been loaded, if no
         * such tile exists, the original tile is returned.
         * @return {!Tile} Best tile for rendering.
         */
        getInterimTile() {
            if (!this.interimTile) {
                //empty chain
                return this;
            }
            let tile = this.interimTile;
            // find the first loaded tile and return it. Since the chain is sorted in
            // decreasing order of creation time, there is no need to search the remainder
            // of the list (all those tiles correspond to older requests and will be
            // cleaned up by refreshInterimChain)
            do {
                if (tile.getState() == TileState_js_1.default.LOADED) {
                    // Show tile immediately instead of fading it in after loading, because
                    // the interim tile is in place already
                    this.transition_ = 0;
                    return tile;
                }
                tile = tile.interimTile;
            } while (tile);
            // we can not find a better tile
            return this;
        }
        /**
         * Goes through the chain of interim tiles and discards sections of the chain
         * that are no longer relevant.
         */
        refreshInterimChain() {
            if (!this.interimTile) {
                return;
            }
            let tile = this.interimTile;
            let prev = /** @type {Tile} */ (this);
            do {
                if (tile.getState() == TileState_js_1.default.LOADED) {
                    //we have a loaded tile, we can discard the rest of the list
                    //we would could abort any LOADING tile request
                    //older than this tile (i.e. any LOADING tile following this entry in the chain)
                    tile.interimTile = null;
                    break;
                }
                else if (tile.getState() == TileState_js_1.default.LOADING) {
                    //keep this LOADING tile any loaded tiles later in the chain are
                    //older than this tile, so we're still interested in the request
                    prev = tile;
                }
                else if (tile.getState() == TileState_js_1.default.IDLE) {
                    //the head of the list is the most current tile, we don't need
                    //to start any other requests for this chain
                    prev.interimTile = tile.interimTile;
                }
                else {
                    prev = tile;
                }
                tile = prev.interimTile;
            } while (tile);
        }
        /**
         * Get the tile coordinate for this tile.
         * @return {import("./tilecoord.js").TileCoord} The tile coordinate.
         * @api
         */
        getTileCoord() {
            return this.tileCoord;
        }
        /**
         * @return {import("./TileState.js").default} State.
         */
        getState() {
            return this.state;
        }
        /**
         * Sets the state of this tile. If you write your own {@link module:ol/Tile~LoadFunction tileLoadFunction} ,
         * it is important to set the state correctly to {@link module:ol/TileState~ERROR}
         * when the tile cannot be loaded. Otherwise the tile cannot be removed from
         * the tile queue and will block other requests.
         * @param {import("./TileState.js").default} state State.
         * @api
         */
        setState(state) {
            if (this.state !== TileState_js_1.default.ERROR && this.state > state) {
                throw new Error('Tile load sequence violation');
            }
            this.state = state;
            this.changed();
        }
        /**
         * Load the image or retry if loading previously failed.
         * Loading is taken care of by the tile queue, and calling this method is
         * only needed for preloading or for reloading in case of an error.
         * @abstract
         * @api
         */
        load() {
            util_js_8.abstract();
        }
        /**
         * Get the alpha value for rendering.
         * @param {string} id An id for the renderer.
         * @param {number} time The render frame time.
         * @return {number} A number between 0 and 1.
         */
        getAlpha(id, time) {
            if (!this.transition_) {
                return 1;
            }
            let start = this.transitionStarts_[id];
            if (!start) {
                start = time;
                this.transitionStarts_[id] = start;
            }
            else if (start === -1) {
                return 1;
            }
            const delta = time - start + 1000 / 60; // avoid rendering at 0
            if (delta >= this.transition_) {
                return 1;
            }
            return easing_js_1.easeIn(delta / this.transition_);
        }
        /**
         * Determine if a tile is in an alpha transition.  A tile is considered in
         * transition if tile.getAlpha() has not yet been called or has been called
         * and returned 1.
         * @param {string} id An id for the renderer.
         * @return {boolean} The tile is in transition.
         */
        inTransition(id) {
            if (!this.transition_) {
                return false;
            }
            return this.transitionStarts_[id] !== -1;
        }
        /**
         * Mark a transition as complete.
         * @param {string} id An id for the renderer.
         */
        endTransition(id) {
            if (this.transition_) {
                this.transitionStarts_[id] = -1;
            }
        }
    }
    exports.default = Tile;
});
define("node_modules/ol/src/TileQueue", ["require", "exports", "node_modules/ol/src/events/EventType", "node_modules/ol/src/structs/PriorityQueue", "node_modules/ol/src/TileState"], function (require, exports, EventType_js_11, PriorityQueue_js_1, TileState_js_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getTilePriority = void 0;
    /**
     * @typedef {function(import("./Tile.js").default, string, import("./coordinate.js").Coordinate, number): number} PriorityFunction
     */
    class TileQueue extends PriorityQueue_js_1.default {
        /**
         * @param {PriorityFunction} tilePriorityFunction Tile priority function.
         * @param {function(): ?} tileChangeCallback Function called on each tile change event.
         */
        constructor(tilePriorityFunction, tileChangeCallback) {
            super(
            /**
             * @param {Array} element Element.
             * @return {number} Priority.
             */
            function (element) {
                return tilePriorityFunction.apply(null, element);
            }, 
            /**
             * @param {Array} element Element.
             * @return {string} Key.
             */
            function (element) {
                return /** @type {import("./Tile.js").default} */ (element[0]).getKey();
            });
            /** @private */
            this.boundHandleTileChange_ = this.handleTileChange.bind(this);
            /**
             * @private
             * @type {function(): ?}
             */
            this.tileChangeCallback_ = tileChangeCallback;
            /**
             * @private
             * @type {number}
             */
            this.tilesLoading_ = 0;
            /**
             * @private
             * @type {!Object<string,boolean>}
             */
            this.tilesLoadingKeys_ = {};
        }
        /**
         * @param {Array} element Element.
         * @return {boolean} The element was added to the queue.
         */
        enqueue(element) {
            const added = super.enqueue(element);
            if (added) {
                const tile = element[0];
                tile.addEventListener(EventType_js_11.default.CHANGE, this.boundHandleTileChange_);
            }
            return added;
        }
        /**
         * @return {number} Number of tiles loading.
         */
        getTilesLoading() {
            return this.tilesLoading_;
        }
        /**
         * @param {import("./events/Event.js").default} event Event.
         * @protected
         */
        handleTileChange(event) {
            const tile = /** @type {import("./Tile.js").default} */ (event.target);
            const state = tile.getState();
            if ((tile.hifi && state === TileState_js_2.default.LOADED) ||
                state === TileState_js_2.default.ERROR ||
                state === TileState_js_2.default.EMPTY) {
                tile.removeEventListener(EventType_js_11.default.CHANGE, this.boundHandleTileChange_);
                const tileKey = tile.getKey();
                if (tileKey in this.tilesLoadingKeys_) {
                    delete this.tilesLoadingKeys_[tileKey];
                    --this.tilesLoading_;
                }
                this.tileChangeCallback_();
            }
        }
        /**
         * @param {number} maxTotalLoading Maximum number tiles to load simultaneously.
         * @param {number} maxNewLoads Maximum number of new tiles to load.
         */
        loadMoreTiles(maxTotalLoading, maxNewLoads) {
            let newLoads = 0;
            let state, tile, tileKey;
            while (this.tilesLoading_ < maxTotalLoading &&
                newLoads < maxNewLoads &&
                this.getCount() > 0) {
                tile = /** @type {import("./Tile.js").default} */ (this.dequeue()[0]);
                tileKey = tile.getKey();
                state = tile.getState();
                if (state === TileState_js_2.default.IDLE && !(tileKey in this.tilesLoadingKeys_)) {
                    this.tilesLoadingKeys_[tileKey] = true;
                    ++this.tilesLoading_;
                    ++newLoads;
                    tile.load();
                }
            }
        }
    }
    exports.default = TileQueue;
    /**
     * @param {import('./PluggableMap.js').FrameState} frameState Frame state.
     * @param {import("./Tile.js").default} tile Tile.
     * @param {string} tileSourceKey Tile source key.
     * @param {import("./coordinate.js").Coordinate} tileCenter Tile center.
     * @param {number} tileResolution Tile resolution.
     * @return {number} Tile priority.
     */
    function getTilePriority(frameState, tile, tileSourceKey, tileCenter, tileResolution) {
        // Filter out tiles at higher zoom levels than the current zoom level, or that
        // are outside the visible extent.
        if (!frameState || !(tileSourceKey in frameState.wantedTiles)) {
            return PriorityQueue_js_1.DROP;
        }
        if (!frameState.wantedTiles[tileSourceKey][tile.getKey()]) {
            return PriorityQueue_js_1.DROP;
        }
        // Prioritize the highest zoom level tiles closest to the focus.
        // Tiles at higher zoom levels are prioritized using Math.log(tileResolution).
        // Within a zoom level, tiles are prioritized by the distance in pixels between
        // the center of the tile and the center of the viewport.  The factor of 65536
        // means that the prioritization should behave as desired for tiles up to
        // 65536 * Math.log(2) = 45426 pixels from the focus.
        const center = frameState.viewState.center;
        const deltaX = tileCenter[0] - center[0];
        const deltaY = tileCenter[1] - center[1];
        return (65536 * Math.log(tileResolution) +
            Math.sqrt(deltaX * deltaX + deltaY * deltaY) / tileResolution);
    }
    exports.getTilePriority = getTilePriority;
});
/**
 * @module ol/ViewHint
 */
define("node_modules/ol/src/ViewHint", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @enum {number}
     */
    exports.default = {
        ANIMATING: 0,
        INTERACTING: 1,
    };
});
/**
 * @module ol/ViewProperty
 */
define("node_modules/ol/src/ViewProperty", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @enum {string}
     */
    exports.default = {
        CENTER: 'center',
        RESOLUTION: 'resolution',
        ROTATION: 'rotation',
    };
});
define("node_modules/ol/src/centerconstraint", ["require", "exports", "node_modules/ol/src/math"], function (require, exports, math_js_12) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.none = exports.createExtent = void 0;
    /**
     * @typedef {function((import("./coordinate.js").Coordinate|undefined), number, import("./size.js").Size, boolean=): (import("./coordinate.js").Coordinate|undefined)} Type
     */
    /**
     * @param {import("./extent.js").Extent} extent Extent.
     * @param {boolean} onlyCenter If true, the constraint will only apply to the view center.
     * @param {boolean} smooth If true, the view will be able to go slightly out of the given extent
     * (only during interaction and animation).
     * @return {Type} The constraint.
     */
    function createExtent(extent, onlyCenter, smooth) {
        return (
        /**
         * @param {import("./coordinate.js").Coordinate|undefined} center Center.
         * @param {number} resolution Resolution.
         * @param {import("./size.js").Size} size Viewport size; unused if `onlyCenter` was specified.
         * @param {boolean=} opt_isMoving True if an interaction or animation is in progress.
         * @return {import("./coordinate.js").Coordinate|undefined} Center.
         */
        function (center, resolution, size, opt_isMoving) {
            if (center) {
                const viewWidth = onlyCenter ? 0 : size[0] * resolution;
                const viewHeight = onlyCenter ? 0 : size[1] * resolution;
                let minX = extent[0] + viewWidth / 2;
                let maxX = extent[2] - viewWidth / 2;
                let minY = extent[1] + viewHeight / 2;
                let maxY = extent[3] - viewHeight / 2;
                // note: when zooming out of bounds, min and max values for x and y may
                // end up inverted (min > max); this has to be accounted for
                if (minX > maxX) {
                    minX = (maxX + minX) / 2;
                    maxX = minX;
                }
                if (minY > maxY) {
                    minY = (maxY + minY) / 2;
                    maxY = minY;
                }
                let x = math_js_12.clamp(center[0], minX, maxX);
                let y = math_js_12.clamp(center[1], minY, maxY);
                const ratio = 30 * resolution;
                // during an interaction, allow some overscroll
                if (opt_isMoving && smooth) {
                    x +=
                        -ratio * Math.log(1 + Math.max(0, minX - center[0]) / ratio) +
                            ratio * Math.log(1 + Math.max(0, center[0] - maxX) / ratio);
                    y +=
                        -ratio * Math.log(1 + Math.max(0, minY - center[1]) / ratio) +
                            ratio * Math.log(1 + Math.max(0, center[1] - maxY) / ratio);
                }
                return [x, y];
            }
            else {
                return undefined;
            }
        });
    }
    exports.createExtent = createExtent;
    /**
     * @param {import("./coordinate.js").Coordinate=} center Center.
     * @return {import("./coordinate.js").Coordinate|undefined} Center.
     */
    function none(center) {
        return center;
    }
    exports.none = none;
});
define("node_modules/ol/src/resolutionconstraint", ["require", "exports", "node_modules/ol/src/math", "node_modules/ol/src/extent", "node_modules/ol/src/array"], function (require, exports, math_js_13, extent_js_15, array_js_5) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createMinMaxResolution = exports.createSnapToPower = exports.createSnapToResolutions = void 0;
    /**
     * @typedef {function((number|undefined), number, import("./size.js").Size, boolean=): (number|undefined)} Type
     */
    /**
     * Returns a modified resolution taking into account the viewport size and maximum
     * allowed extent.
     * @param {number} resolution Resolution
     * @param {import("./extent.js").Extent=} maxExtent Maximum allowed extent.
     * @param {import("./size.js").Size} viewportSize Viewport size.
     * @param {boolean} showFullExtent Whether to show the full extent.
     * @return {number} Capped resolution.
     */
    function getViewportClampedResolution(resolution, maxExtent, viewportSize, showFullExtent) {
        const xResolution = extent_js_15.getWidth(maxExtent) / viewportSize[0];
        const yResolution = extent_js_15.getHeight(maxExtent) / viewportSize[1];
        if (showFullExtent) {
            return Math.min(resolution, Math.max(xResolution, yResolution));
        }
        return Math.min(resolution, Math.min(xResolution, yResolution));
    }
    /**
     * Returns a modified resolution to be between maxResolution and minResolution while
     * still allowing the value to be slightly out of bounds.
     * Note: the computation is based on the logarithm function (ln):
     *  - at 1, ln(x) is 0
     *  - above 1, ln(x) keeps increasing but at a much slower pace than x
     * The final result is clamped to prevent getting too far away from bounds.
     * @param {number} resolution Resolution.
     * @param {number} maxResolution Max resolution.
     * @param {number} minResolution Min resolution.
     * @return {number} Smoothed resolution.
     */
    function getSmoothClampedResolution(resolution, maxResolution, minResolution) {
        let result = Math.min(resolution, maxResolution);
        const ratio = 50;
        result *=
            Math.log(1 + ratio * Math.max(0, resolution / maxResolution - 1)) / ratio +
                1;
        if (minResolution) {
            result = Math.max(result, minResolution);
            result /=
                Math.log(1 + ratio * Math.max(0, minResolution / resolution - 1)) /
                    ratio +
                    1;
        }
        return math_js_13.clamp(result, minResolution / 2, maxResolution * 2);
    }
    /**
     * @param {Array<number>} resolutions Resolutions.
     * @param {boolean=} opt_smooth If true, the view will be able to slightly exceed resolution limits. Default: true.
     * @param {import("./extent.js").Extent=} opt_maxExtent Maximum allowed extent.
     * @param {boolean=} opt_showFullExtent If true, allows us to show the full extent. Default: false.
     * @return {Type} Zoom function.
     */
    function createSnapToResolutions(resolutions, opt_smooth, opt_maxExtent, opt_showFullExtent) {
        return (
        /**
         * @param {number|undefined} resolution Resolution.
         * @param {number} direction Direction.
         * @param {import("./size.js").Size} size Viewport size.
         * @param {boolean=} opt_isMoving True if an interaction or animation is in progress.
         * @return {number|undefined} Resolution.
         */
        function (resolution, direction, size, opt_isMoving) {
            if (resolution !== undefined) {
                const maxResolution = resolutions[0];
                const minResolution = resolutions[resolutions.length - 1];
                const cappedMaxRes = opt_maxExtent
                    ? getViewportClampedResolution(maxResolution, opt_maxExtent, size, opt_showFullExtent)
                    : maxResolution;
                // during interacting or animating, allow intermediary values
                if (opt_isMoving) {
                    const smooth = opt_smooth !== undefined ? opt_smooth : true;
                    if (!smooth) {
                        return math_js_13.clamp(resolution, minResolution, cappedMaxRes);
                    }
                    return getSmoothClampedResolution(resolution, cappedMaxRes, minResolution);
                }
                const capped = Math.min(cappedMaxRes, resolution);
                const z = Math.floor(array_js_5.linearFindNearest(resolutions, capped, direction));
                if (resolutions[z] > cappedMaxRes && z < resolutions.length - 1) {
                    return resolutions[z + 1];
                }
                return resolutions[z];
            }
            else {
                return undefined;
            }
        });
    }
    exports.createSnapToResolutions = createSnapToResolutions;
    /**
     * @param {number} power Power.
     * @param {number} maxResolution Maximum resolution.
     * @param {number=} opt_minResolution Minimum resolution.
     * @param {boolean=} opt_smooth If true, the view will be able to slightly exceed resolution limits. Default: true.
     * @param {import("./extent.js").Extent=} opt_maxExtent Maximum allowed extent.
     * @param {boolean=} opt_showFullExtent If true, allows us to show the full extent. Default: false.
     * @return {Type} Zoom function.
     */
    function createSnapToPower(power, maxResolution, opt_minResolution, opt_smooth, opt_maxExtent, opt_showFullExtent) {
        return (
        /**
         * @param {number|undefined} resolution Resolution.
         * @param {number} direction Direction.
         * @param {import("./size.js").Size} size Viewport size.
         * @param {boolean=} opt_isMoving True if an interaction or animation is in progress.
         * @return {number|undefined} Resolution.
         */
        function (resolution, direction, size, opt_isMoving) {
            if (resolution !== undefined) {
                const cappedMaxRes = opt_maxExtent
                    ? getViewportClampedResolution(maxResolution, opt_maxExtent, size, opt_showFullExtent)
                    : maxResolution;
                const minResolution = opt_minResolution !== undefined ? opt_minResolution : 0;
                // during interacting or animating, allow intermediary values
                if (opt_isMoving) {
                    const smooth = opt_smooth !== undefined ? opt_smooth : true;
                    if (!smooth) {
                        return math_js_13.clamp(resolution, minResolution, cappedMaxRes);
                    }
                    return getSmoothClampedResolution(resolution, cappedMaxRes, minResolution);
                }
                const tolerance = 1e-9;
                const minZoomLevel = Math.ceil(Math.log(maxResolution / cappedMaxRes) / Math.log(power) - tolerance);
                const offset = -direction * (0.5 - tolerance) + 0.5;
                const capped = Math.min(cappedMaxRes, resolution);
                const cappedZoomLevel = Math.floor(Math.log(maxResolution / capped) / Math.log(power) + offset);
                const zoomLevel = Math.max(minZoomLevel, cappedZoomLevel);
                const newResolution = maxResolution / Math.pow(power, zoomLevel);
                return math_js_13.clamp(newResolution, minResolution, cappedMaxRes);
            }
            else {
                return undefined;
            }
        });
    }
    exports.createSnapToPower = createSnapToPower;
    /**
     * @param {number} maxResolution Max resolution.
     * @param {number} minResolution Min resolution.
     * @param {boolean=} opt_smooth If true, the view will be able to slightly exceed resolution limits. Default: true.
     * @param {import("./extent.js").Extent=} opt_maxExtent Maximum allowed extent.
     * @param {boolean=} opt_showFullExtent If true, allows us to show the full extent. Default: false.
     * @return {Type} Zoom function.
     */
    function createMinMaxResolution(maxResolution, minResolution, opt_smooth, opt_maxExtent, opt_showFullExtent) {
        return (
        /**
         * @param {number|undefined} resolution Resolution.
         * @param {number} direction Direction.
         * @param {import("./size.js").Size} size Viewport size.
         * @param {boolean=} opt_isMoving True if an interaction or animation is in progress.
         * @return {number|undefined} Resolution.
         */
        function (resolution, direction, size, opt_isMoving) {
            if (resolution !== undefined) {
                const cappedMaxRes = opt_maxExtent
                    ? getViewportClampedResolution(maxResolution, opt_maxExtent, size, opt_showFullExtent)
                    : maxResolution;
                const smooth = opt_smooth !== undefined ? opt_smooth : true;
                if (!smooth || !opt_isMoving) {
                    return math_js_13.clamp(resolution, minResolution, cappedMaxRes);
                }
                return getSmoothClampedResolution(resolution, cappedMaxRes, minResolution);
            }
            else {
                return undefined;
            }
        });
    }
    exports.createMinMaxResolution = createMinMaxResolution;
});
define("node_modules/ol/src/rotationconstraint", ["require", "exports", "node_modules/ol/src/math"], function (require, exports, math_js_14) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createSnapToZero = exports.createSnapToN = exports.none = exports.disable = void 0;
    /**
     * @typedef {function((number|undefined), boolean=): (number|undefined)} Type
     */
    /**
     * @param {number|undefined} rotation Rotation.
     * @return {number|undefined} Rotation.
     */
    function disable(rotation) {
        if (rotation !== undefined) {
            return 0;
        }
        else {
            return undefined;
        }
    }
    exports.disable = disable;
    /**
     * @param {number|undefined} rotation Rotation.
     * @return {number|undefined} Rotation.
     */
    function none(rotation) {
        if (rotation !== undefined) {
            return rotation;
        }
        else {
            return undefined;
        }
    }
    exports.none = none;
    /**
     * @param {number} n N.
     * @return {Type} Rotation constraint.
     */
    function createSnapToN(n) {
        const theta = (2 * Math.PI) / n;
        return (
        /**
         * @param {number|undefined} rotation Rotation.
         * @param {boolean=} opt_isMoving True if an interaction or animation is in progress.
         * @return {number|undefined} Rotation.
         */
        function (rotation, opt_isMoving) {
            if (opt_isMoving) {
                return rotation;
            }
            if (rotation !== undefined) {
                rotation = Math.floor(rotation / theta + 0.5) * theta;
                return rotation;
            }
            else {
                return undefined;
            }
        });
    }
    exports.createSnapToN = createSnapToN;
    /**
     * @param {number=} opt_tolerance Tolerance.
     * @return {Type} Rotation constraint.
     */
    function createSnapToZero(opt_tolerance) {
        const tolerance = opt_tolerance || math_js_14.toRadians(5);
        return (
        /**
         * @param {number|undefined} rotation Rotation.
         * @param {boolean=} opt_isMoving True if an interaction or animation is in progress.
         * @return {number|undefined} Rotation.
         */
        function (rotation, opt_isMoving) {
            if (opt_isMoving) {
                return rotation;
            }
            if (rotation !== undefined) {
                if (Math.abs(rotation) <= tolerance) {
                    return 0;
                }
                else {
                    return rotation;
                }
            }
            else {
                return undefined;
            }
        });
    }
    exports.createSnapToZero = createSnapToZero;
});
define("node_modules/ol/src/View", ["require", "exports", "node_modules/ol/src/Object", "node_modules/ol/src/geom/GeometryType", "node_modules/ol/src/proj/Units", "node_modules/ol/src/ViewHint", "node_modules/ol/src/ViewProperty", "node_modules/ol/src/tilegrid/common", "node_modules/ol/src/proj", "node_modules/ol/src/functions", "node_modules/ol/src/coordinate", "node_modules/ol/src/asserts", "node_modules/ol/src/obj", "node_modules/ol/src/centerconstraint", "node_modules/ol/src/math", "node_modules/ol/src/resolutionconstraint", "node_modules/ol/src/rotationconstraint", "node_modules/ol/src/resolutionconstraint", "node_modules/ol/src/easing", "node_modules/ol/src/coordinate", "node_modules/ol/src/extent", "node_modules/ol/src/easing", "node_modules/ol/src/array", "node_modules/ol/src/geom/Polygon"], function (require, exports, Object_js_5, GeometryType_js_7, Units_js_6, ViewHint_js_1, ViewProperty_js_1, common_js_2, proj_js_2, functions_js_3, coordinate_js_2, asserts_js_8, obj_js_8, centerconstraint_js_1, math_js_15, resolutionconstraint_js_1, rotationconstraint_js_1, resolutionconstraint_js_2, easing_js_2, coordinate_js_3, extent_js_16, easing_js_3, array_js_6, Polygon_js_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isNoopAnimation = exports.createRotationConstraint = exports.createResolutionConstraint = exports.createCenterConstraint = void 0;
    /**
     * An animation configuration
     *
     * @typedef {Object} Animation
     * @property {import("./coordinate.js").Coordinate} [sourceCenter]
     * @property {import("./coordinate.js").Coordinate} [targetCenter]
     * @property {number} [sourceResolution]
     * @property {number} [targetResolution]
     * @property {number} [sourceRotation]
     * @property {number} [targetRotation]
     * @property {import("./coordinate.js").Coordinate} [anchor]
     * @property {number} start
     * @property {number} duration
     * @property {boolean} complete
     * @property {function(number):number} easing
     * @property {function(boolean):void} callback
     */
    /**
     * @typedef {Object} Constraints
     * @property {import("./centerconstraint.js").Type} center
     * @property {import("./resolutionconstraint.js").Type} resolution
     * @property {import("./rotationconstraint.js").Type} rotation
     */
    /**
     * @typedef {Object} FitOptions
     * @property {import("./size.js").Size} [size] The size in pixels of the box to fit
     * the extent into. Default is the current size of the first map in the DOM that
     * uses this view, or `[100, 100]` if no such map is found.
     * @property {!Array<number>} [padding=[0, 0, 0, 0]] Padding (in pixels) to be
     * cleared inside the view. Values in the array are top, right, bottom and left
     * padding.
     * @property {boolean} [nearest=false] If the view `constrainResolution` option is `true`,
     * get the nearest extent instead of the closest that actually fits the view.
     * @property {number} [minResolution=0] Minimum resolution that we zoom to.
     * @property {number} [maxZoom] Maximum zoom level that we zoom to. If
     * `minResolution` is given, this property is ignored.
     * @property {number} [duration] The duration of the animation in milliseconds.
     * By default, there is no animation to the target extent.
     * @property {function(number):number} [easing] The easing function used during
     * the animation (defaults to {@link module:ol/easing~inAndOut}).
     * The function will be called for each frame with a number representing a
     * fraction of the animation's duration.  The function should return a number
     * between 0 and 1 representing the progress toward the destination state.
     * @property {function(boolean):void} [callback] Function called when the view is in
     * its final position. The callback will be called with `true` if the animation
     * series completed on its own or `false` if it was cancelled.
     */
    /**
     * @typedef {Object} ViewOptions
     * @property {import("./coordinate.js").Coordinate} [center] The initial center for
     * the view. If a user projection is not set, the coordinate system for the center is
     * specified with the `projection` option. Layer sources will not be fetched if this
     * is not set, but the center can be set later with {@link #setCenter}.
     * @property {boolean|number} [constrainRotation=true] Rotation constraint.
     * `false` means no constraint. `true` means no constraint, but snap to zero
     * near zero. A number constrains the rotation to that number of values. For
     * example, `4` will constrain the rotation to 0, 90, 180, and 270 degrees.
     * @property {boolean} [enableRotation=true] Enable rotation.
     * If `false`, a rotation constraint that always sets the rotation to zero is
     * used. The `constrainRotation` option has no effect if `enableRotation` is
     * `false`.
     * @property {import("./extent.js").Extent} [extent] The extent that constrains the
     * view, in other words, nothing outside of this extent can be visible on the map.
     * @property {boolean} [constrainOnlyCenter=false] If true, the extent
     * constraint will only apply to the view center and not the whole extent.
     * @property {boolean} [smoothExtentConstraint=true] If true, the extent
     * constraint will be applied smoothly, i.e. allow the view to go slightly outside
     * of the given `extent`.
     * @property {number} [maxResolution] The maximum resolution used to determine
     * the resolution constraint. It is used together with `minResolution` (or
     * `maxZoom`) and `zoomFactor`. If unspecified it is calculated in such a way
     * that the projection's validity extent fits in a 256x256 px tile. If the
     * projection is Spherical Mercator (the default) then `maxResolution` defaults
     * to `40075016.68557849 / 256 = 156543.03392804097`.
     * @property {number} [minResolution] The minimum resolution used to determine
     * the resolution constraint.  It is used together with `maxResolution` (or
     * `minZoom`) and `zoomFactor`.  If unspecified it is calculated assuming 29
     * zoom levels (with a factor of 2). If the projection is Spherical Mercator
     * (the default) then `minResolution` defaults to
     * `40075016.68557849 / 256 / Math.pow(2, 28) = 0.0005831682455839253`.
     * @property {number} [maxZoom=28] The maximum zoom level used to determine the
     * resolution constraint. It is used together with `minZoom` (or
     * `maxResolution`) and `zoomFactor`.  Note that if `minResolution` is also
     * provided, it is given precedence over `maxZoom`.
     * @property {number} [minZoom=0] The minimum zoom level used to determine the
     * resolution constraint. It is used together with `maxZoom` (or
     * `minResolution`) and `zoomFactor`.  Note that if `maxResolution` is also
     * provided, it is given precedence over `minZoom`.
     * @property {boolean} [multiWorld=false] If `false` the view is constrained so
     * only one world is visible, and you cannot pan off the edge.  If `true` the map
     * may show multiple worlds at low zoom levels.  Only used if the `projection` is
     * global.  Note that if `extent` is also provided it is given precedence.
     * @property {boolean} [constrainResolution=false] If true, the view will always
     * animate to the closest zoom level after an interaction; false means
     * intermediary zoom levels are allowed.
     * @property {boolean} [smoothResolutionConstraint=true] If true, the resolution
     * min/max values will be applied smoothly, i. e. allow the view to exceed slightly
     * the given resolution or zoom bounds.
     * @property {boolean} [showFullExtent=false] Allow the view to be zoomed out to
     * show the full configured extent. By default, when a view is configured with an
     * extent, users will not be able to zoom out so the viewport exceeds the extent in
     * either dimension. This means the full extent may not be visible if the viewport
     * is taller or wider than the aspect ratio of the configured extent. If
     * showFullExtent is true, the user will be able to zoom out so that the viewport
     * exceeds the height or width of the configured extent, but not both, allowing the
     * full extent to be shown.
     * @property {import("./proj.js").ProjectionLike} [projection='EPSG:3857'] The
     * projection. The default is Spherical Mercator.
     * @property {number} [resolution] The initial resolution for the view. The
     * units are `projection` units per pixel (e.g. meters per pixel). An
     * alternative to setting this is to set `zoom`. Layer sources will not be
     * fetched if neither this nor `zoom` are defined, but they can be set later
     * with {@link #setZoom} or {@link #setResolution}.
     * @property {Array<number>} [resolutions] Resolutions to determine the
     * resolution constraint. If set the `maxResolution`, `minResolution`,
     * `minZoom`, `maxZoom`, and `zoomFactor` options are ignored.
     * @property {number} [rotation=0] The initial rotation for the view in radians
     * (positive rotation clockwise, 0 means North).
     * @property {number} [zoom] Only used if `resolution` is not defined. Zoom
     * level used to calculate the initial resolution for the view.
     * @property {number} [zoomFactor=2] The zoom factor used to compute the
     * corresponding resolution.
     */
    /**
     * @typedef {Object} AnimationOptions
     * @property {import("./coordinate.js").Coordinate} [center] The center of the view at the end of
     * the animation.
     * @property {number} [zoom] The zoom level of the view at the end of the
     * animation. This takes precedence over `resolution`.
     * @property {number} [resolution] The resolution of the view at the end
     * of the animation.  If `zoom` is also provided, this option will be ignored.
     * @property {number} [rotation] The rotation of the view at the end of
     * the animation.
     * @property {import("./coordinate.js").Coordinate} [anchor] Optional anchor to remain fixed
     * during a rotation or resolution animation.
     * @property {number} [duration=1000] The duration of the animation in milliseconds.
     * @property {function(number):number} [easing] The easing function used
     * during the animation (defaults to {@link module:ol/easing~inAndOut}).
     * The function will be called for each frame with a number representing a
     * fraction of the animation's duration.  The function should return a number
     * between 0 and 1 representing the progress toward the destination state.
     */
    /**
     * @typedef {Object} State
     * @property {import("./coordinate.js").Coordinate} center
     * @property {import("./proj/Projection.js").default} projection
     * @property {number} resolution
     * @property {number} rotation
     * @property {number} zoom
     */
    /**
     * Default min zoom level for the map view.
     * @type {number}
     */
    const DEFAULT_MIN_ZOOM = 0;
    /**
     * @classdesc
     * A View object represents a simple 2D view of the map.
     *
     * This is the object to act upon to change the center, resolution,
     * and rotation of the map.
     *
     * A View has a `projection`. The projection determines the
     * coordinate system of the center, and its units determine the units of the
     * resolution (projection units per pixel). The default projection is
     * Spherical Mercator (EPSG:3857).
     *
     * ### The view states
     *
     * A View is determined by three states: `center`, `resolution`,
     * and `rotation`. Each state has a corresponding getter and setter, e.g.
     * `getCenter` and `setCenter` for the `center` state.
     *
     * The `zoom` state is actually not saved on the view: all computations
     * internally use the `resolution` state. Still, the `setZoom` and `getZoom`
     * methods are available, as well as `getResolutionForZoom` and
     * `getZoomForResolution` to switch from one system to the other.
     *
     * ### The constraints
     *
     * `setCenter`, `setResolution` and `setRotation` can be used to change the
     * states of the view, but any constraint defined in the constructor will
     * be applied along the way.
     *
     * A View object can have a *resolution constraint*, a *rotation constraint*
     * and a *center constraint*.
     *
     * The *resolution constraint* typically restricts min/max values and
     * snaps to specific resolutions. It is determined by the following
     * options: `resolutions`, `maxResolution`, `maxZoom` and `zoomFactor`.
     * If `resolutions` is set, the other three options are ignored. See
     * documentation for each option for more information. By default, the view
     * only has a min/max restriction and allow intermediary zoom levels when
     * pinch-zooming for example.
     *
     * The *rotation constraint* snaps to specific angles. It is determined
     * by the following options: `enableRotation` and `constrainRotation`.
     * By default rotation is allowed and its value is snapped to zero when approaching the
     * horizontal.
     *
     * The *center constraint* is determined by the `extent` option. By
     * default the view center is not constrained at all.
     *
     * ### Changing the view state
     *
     * It is important to note that `setZoom`, `setResolution`, `setCenter` and
     * `setRotation` are subject to the above mentioned constraints. As such, it
     * may sometimes not be possible to know in advance the resulting state of the
     * View. For example, calling `setResolution(10)` does not guarantee that
     * `getResolution()` will return `10`.
     *
     * A consequence of this is that, when applying a delta on the view state, one
     * should use `adjustCenter`, `adjustRotation`, `adjustZoom` and `adjustResolution`
     * rather than the corresponding setters. This will let view do its internal
     * computations. Besides, the `adjust*` methods also take an `opt_anchor`
     * argument which allows specifying an origin for the transformation.
     *
     * ### Interacting with the view
     *
     * View constraints are usually only applied when the view is *at rest*, meaning that
     * no interaction or animation is ongoing. As such, if the user puts the view in a
     * state that is not equivalent to a constrained one (e.g. rotating the view when
     * the snap angle is 0), an animation will be triggered at the interaction end to
     * put back the view to a stable state;
     *
     * @api
     */
    class View extends Object_js_5.default {
        /**
         * @param {ViewOptions=} opt_options View options.
         */
        constructor(opt_options) {
            super();
            const options = obj_js_8.assign({}, opt_options);
            /**
             * @private
             * @type {Array<number>}
             */
            this.hints_ = [0, 0];
            /**
             * @private
             * @type {Array<Array<Animation>>}
             */
            this.animations_ = [];
            /**
             * @private
             * @type {number|undefined}
             */
            this.updateAnimationKey_;
            /**
             * @private
             * @const
             * @type {import("./proj/Projection.js").default}
             */
            this.projection_ = proj_js_2.createProjection(options.projection, 'EPSG:3857');
            /**
             * @private
             * @type {import("./size.js").Size}
             */
            this.viewportSize_ = [100, 100];
            /**
             * @private
             * @type {import("./coordinate.js").Coordinate|undefined}
             */
            this.targetCenter_ = null;
            /**
             * @private
             * @type {number|undefined}
             */
            this.targetResolution_;
            /**
             * @private
             * @type {number|undefined}
             */
            this.targetRotation_;
            /**
             * @private
             * @type {import("./coordinate.js").Coordinate|undefined}
             */
            this.cancelAnchor_ = undefined;
            if (options.center) {
                options.center = proj_js_2.fromUserCoordinate(options.center, this.projection_);
            }
            if (options.extent) {
                options.extent = proj_js_2.fromUserExtent(options.extent, this.projection_);
            }
            this.applyOptions_(options);
        }
        /**
         * Set up the view with the given options.
         * @param {ViewOptions} options View options.
         */
        applyOptions_(options) {
            /**
             * @type {Object<string, *>}
             */
            const properties = {};
            const resolutionConstraintInfo = createResolutionConstraint(options);
            /**
             * @private
             * @type {number}
             */
            this.maxResolution_ = resolutionConstraintInfo.maxResolution;
            /**
             * @private
             * @type {number}
             */
            this.minResolution_ = resolutionConstraintInfo.minResolution;
            /**
             * @private
             * @type {number}
             */
            this.zoomFactor_ = resolutionConstraintInfo.zoomFactor;
            /**
             * @private
             * @type {Array<number>|undefined}
             */
            this.resolutions_ = options.resolutions;
            /**
             * @private
             * @type {number}
             */
            this.minZoom_ = resolutionConstraintInfo.minZoom;
            const centerConstraint = createCenterConstraint(options);
            const resolutionConstraint = resolutionConstraintInfo.constraint;
            const rotationConstraint = createRotationConstraint(options);
            /**
             * @private
             * @type {Constraints}
             */
            this.constraints_ = {
                center: centerConstraint,
                resolution: resolutionConstraint,
                rotation: rotationConstraint,
            };
            this.setRotation(options.rotation !== undefined ? options.rotation : 0);
            this.setCenterInternal(options.center !== undefined ? options.center : null);
            if (options.resolution !== undefined) {
                this.setResolution(options.resolution);
            }
            else if (options.zoom !== undefined) {
                this.setZoom(options.zoom);
            }
            this.setProperties(properties);
            /**
             * @private
             * @type {ViewOptions}
             */
            this.options_ = options;
        }
        /**
         * Get an updated version of the view options used to construct the view.  The
         * current resolution (or zoom), center, and rotation are applied to any stored
         * options.  The provided options can be used to apply new min/max zoom or
         * resolution limits.
         * @param {ViewOptions} newOptions New options to be applied.
         * @return {ViewOptions} New options updated with the current view state.
         */
        getUpdatedOptions_(newOptions) {
            const options = obj_js_8.assign({}, this.options_);
            // preserve resolution (or zoom)
            if (options.resolution !== undefined) {
                options.resolution = this.getResolution();
            }
            else {
                options.zoom = this.getZoom();
            }
            // preserve center
            options.center = this.getCenterInternal();
            // preserve rotation
            options.rotation = this.getRotation();
            return obj_js_8.assign({}, options, newOptions);
        }
        /**
         * Animate the view.  The view's center, zoom (or resolution), and rotation
         * can be animated for smooth transitions between view states.  For example,
         * to animate the view to a new zoom level:
         *
         *     view.animate({zoom: view.getZoom() + 1});
         *
         * By default, the animation lasts one second and uses in-and-out easing.  You
         * can customize this behavior by including `duration` (in milliseconds) and
         * `easing` options (see {@link module:ol/easing}).
         *
         * To chain together multiple animations, call the method with multiple
         * animation objects.  For example, to first zoom and then pan:
         *
         *     view.animate({zoom: 10}, {center: [0, 0]});
         *
         * If you provide a function as the last argument to the animate method, it
         * will get called at the end of an animation series.  The callback will be
         * called with `true` if the animation series completed on its own or `false`
         * if it was cancelled.
         *
         * Animations are cancelled by user interactions (e.g. dragging the map) or by
         * calling `view.setCenter()`, `view.setResolution()`, or `view.setRotation()`
         * (or another method that calls one of these).
         *
         * @param {...(AnimationOptions|function(boolean): void)} var_args Animation
         *     options.  Multiple animations can be run in series by passing multiple
         *     options objects.  To run multiple animations in parallel, call the method
         *     multiple times.  An optional callback can be provided as a final
         *     argument.  The callback will be called with a boolean indicating whether
         *     the animation completed without being cancelled.
         * @api
         */
        animate(var_args) {
            if (this.isDef() && !this.getAnimating()) {
                this.resolveConstraints(0);
            }
            const args = new Array(arguments.length);
            for (let i = 0; i < args.length; ++i) {
                let options = arguments[i];
                if (options.center) {
                    options = obj_js_8.assign({}, options);
                    options.center = proj_js_2.fromUserCoordinate(options.center, this.getProjection());
                }
                if (options.anchor) {
                    options = obj_js_8.assign({}, options);
                    options.anchor = proj_js_2.fromUserCoordinate(options.anchor, this.getProjection());
                }
                args[i] = options;
            }
            this.animateInternal.apply(this, args);
        }
        /**
         * @param {...(AnimationOptions|function(boolean): void)} var_args Animation options.
         */
        animateInternal(var_args) {
            let animationCount = arguments.length;
            let callback;
            if (animationCount > 1 &&
                typeof arguments[animationCount - 1] === 'function') {
                callback = arguments[animationCount - 1];
                --animationCount;
            }
            if (!this.isDef()) {
                // if view properties are not yet set, shortcut to the final state
                const state = arguments[animationCount - 1];
                if (state.center) {
                    this.setCenterInternal(state.center);
                }
                if (state.zoom !== undefined) {
                    this.setZoom(state.zoom);
                }
                if (state.rotation !== undefined) {
                    this.setRotation(state.rotation);
                }
                if (callback) {
                    animationCallback(callback, true);
                }
                return;
            }
            let start = Date.now();
            let center = this.targetCenter_.slice();
            let resolution = this.targetResolution_;
            let rotation = this.targetRotation_;
            const series = [];
            for (let i = 0; i < animationCount; ++i) {
                const options = /** @type {AnimationOptions} */ (arguments[i]);
                const animation = {
                    start: start,
                    complete: false,
                    anchor: options.anchor,
                    duration: options.duration !== undefined ? options.duration : 1000,
                    easing: options.easing || easing_js_3.inAndOut,
                    callback: callback,
                };
                if (options.center) {
                    animation.sourceCenter = center;
                    animation.targetCenter = options.center.slice();
                    center = animation.targetCenter;
                }
                if (options.zoom !== undefined) {
                    animation.sourceResolution = resolution;
                    animation.targetResolution = this.getResolutionForZoom(options.zoom);
                    resolution = animation.targetResolution;
                }
                else if (options.resolution) {
                    animation.sourceResolution = resolution;
                    animation.targetResolution = options.resolution;
                    resolution = animation.targetResolution;
                }
                if (options.rotation !== undefined) {
                    animation.sourceRotation = rotation;
                    const delta = math_js_15.modulo(options.rotation - rotation + Math.PI, 2 * Math.PI) - Math.PI;
                    animation.targetRotation = rotation + delta;
                    rotation = animation.targetRotation;
                }
                // check if animation is a no-op
                if (isNoopAnimation(animation)) {
                    animation.complete = true;
                    // we still push it onto the series for callback handling
                }
                else {
                    start += animation.duration;
                }
                series.push(animation);
            }
            this.animations_.push(series);
            this.setHint(ViewHint_js_1.default.ANIMATING, 1);
            this.updateAnimations_();
        }
        /**
         * Determine if the view is being animated.
         * @return {boolean} The view is being animated.
         * @api
         */
        getAnimating() {
            return this.hints_[ViewHint_js_1.default.ANIMATING] > 0;
        }
        /**
         * Determine if the user is interacting with the view, such as panning or zooming.
         * @return {boolean} The view is being interacted with.
         * @api
         */
        getInteracting() {
            return this.hints_[ViewHint_js_1.default.INTERACTING] > 0;
        }
        /**
         * Cancel any ongoing animations.
         * @api
         */
        cancelAnimations() {
            this.setHint(ViewHint_js_1.default.ANIMATING, -this.hints_[ViewHint_js_1.default.ANIMATING]);
            let anchor;
            for (let i = 0, ii = this.animations_.length; i < ii; ++i) {
                const series = this.animations_[i];
                if (series[0].callback) {
                    animationCallback(series[0].callback, false);
                }
                if (!anchor) {
                    for (let j = 0, jj = series.length; j < jj; ++j) {
                        const animation = series[j];
                        if (!animation.complete) {
                            anchor = animation.anchor;
                            break;
                        }
                    }
                }
            }
            this.animations_.length = 0;
            this.cancelAnchor_ = anchor;
        }
        /**
         * Update all animations.
         */
        updateAnimations_() {
            if (this.updateAnimationKey_ !== undefined) {
                cancelAnimationFrame(this.updateAnimationKey_);
                this.updateAnimationKey_ = undefined;
            }
            if (!this.getAnimating()) {
                return;
            }
            const now = Date.now();
            let more = false;
            for (let i = this.animations_.length - 1; i >= 0; --i) {
                const series = this.animations_[i];
                let seriesComplete = true;
                for (let j = 0, jj = series.length; j < jj; ++j) {
                    const animation = series[j];
                    if (animation.complete) {
                        continue;
                    }
                    const elapsed = now - animation.start;
                    let fraction = animation.duration > 0 ? elapsed / animation.duration : 1;
                    if (fraction >= 1) {
                        animation.complete = true;
                        fraction = 1;
                    }
                    else {
                        seriesComplete = false;
                    }
                    const progress = animation.easing(fraction);
                    if (animation.sourceCenter) {
                        const x0 = animation.sourceCenter[0];
                        const y0 = animation.sourceCenter[1];
                        const x1 = animation.targetCenter[0];
                        const y1 = animation.targetCenter[1];
                        const x = x0 + progress * (x1 - x0);
                        const y = y0 + progress * (y1 - y0);
                        this.targetCenter_ = [x, y];
                    }
                    if (animation.sourceResolution && animation.targetResolution) {
                        const resolution = progress === 1
                            ? animation.targetResolution
                            : animation.sourceResolution +
                                progress *
                                    (animation.targetResolution - animation.sourceResolution);
                        if (animation.anchor) {
                            const size = this.getViewportSize_(this.getRotation());
                            const constrainedResolution = this.constraints_.resolution(resolution, 0, size, true);
                            this.targetCenter_ = this.calculateCenterZoom(constrainedResolution, animation.anchor);
                        }
                        this.targetResolution_ = resolution;
                        this.applyTargetState_(true);
                    }
                    if (animation.sourceRotation !== undefined &&
                        animation.targetRotation !== undefined) {
                        const rotation = progress === 1
                            ? math_js_15.modulo(animation.targetRotation + Math.PI, 2 * Math.PI) -
                                Math.PI
                            : animation.sourceRotation +
                                progress *
                                    (animation.targetRotation - animation.sourceRotation);
                        if (animation.anchor) {
                            const constrainedRotation = this.constraints_.rotation(rotation, true);
                            this.targetCenter_ = this.calculateCenterRotate(constrainedRotation, animation.anchor);
                        }
                        this.targetRotation_ = rotation;
                    }
                    this.applyTargetState_(true);
                    more = true;
                    if (!animation.complete) {
                        break;
                    }
                }
                if (seriesComplete) {
                    this.animations_[i] = null;
                    this.setHint(ViewHint_js_1.default.ANIMATING, -1);
                    const callback = series[0].callback;
                    if (callback) {
                        animationCallback(callback, true);
                    }
                }
            }
            // prune completed series
            this.animations_ = this.animations_.filter(Boolean);
            if (more && this.updateAnimationKey_ === undefined) {
                this.updateAnimationKey_ = requestAnimationFrame(this.updateAnimations_.bind(this));
            }
        }
        /**
         * @param {number} rotation Target rotation.
         * @param {import("./coordinate.js").Coordinate} anchor Rotation anchor.
         * @return {import("./coordinate.js").Coordinate|undefined} Center for rotation and anchor.
         */
        calculateCenterRotate(rotation, anchor) {
            let center;
            const currentCenter = this.getCenterInternal();
            if (currentCenter !== undefined) {
                center = [currentCenter[0] - anchor[0], currentCenter[1] - anchor[1]];
                coordinate_js_2.rotate(center, rotation - this.getRotation());
                coordinate_js_2.add(center, anchor);
            }
            return center;
        }
        /**
         * @param {number} resolution Target resolution.
         * @param {import("./coordinate.js").Coordinate} anchor Zoom anchor.
         * @return {import("./coordinate.js").Coordinate|undefined} Center for resolution and anchor.
         */
        calculateCenterZoom(resolution, anchor) {
            let center;
            const currentCenter = this.getCenterInternal();
            const currentResolution = this.getResolution();
            if (currentCenter !== undefined && currentResolution !== undefined) {
                const x = anchor[0] -
                    (resolution * (anchor[0] - currentCenter[0])) / currentResolution;
                const y = anchor[1] -
                    (resolution * (anchor[1] - currentCenter[1])) / currentResolution;
                center = [x, y];
            }
            return center;
        }
        /**
         * Returns the current viewport size.
         * @private
         * @param {number=} opt_rotation Take into account the rotation of the viewport when giving the size
         * @return {import("./size.js").Size} Viewport size or `[100, 100]` when no viewport is found.
         */
        getViewportSize_(opt_rotation) {
            const size = this.viewportSize_;
            if (opt_rotation) {
                const w = size[0];
                const h = size[1];
                return [
                    Math.abs(w * Math.cos(opt_rotation)) +
                        Math.abs(h * Math.sin(opt_rotation)),
                    Math.abs(w * Math.sin(opt_rotation)) +
                        Math.abs(h * Math.cos(opt_rotation)),
                ];
            }
            else {
                return size;
            }
        }
        /**
         * Stores the viewport size on the view. The viewport size is not read every time from the DOM
         * to avoid performance hit and layout reflow.
         * This should be done on map size change.
         * Note: the constraints are not resolved during an animation to avoid stopping it
         * @param {import("./size.js").Size=} opt_size Viewport size; if undefined, [100, 100] is assumed
         */
        setViewportSize(opt_size) {
            this.viewportSize_ = Array.isArray(opt_size)
                ? opt_size.slice()
                : [100, 100];
            if (!this.getAnimating()) {
                this.resolveConstraints(0);
            }
        }
        /**
         * Get the view center.
         * @return {import("./coordinate.js").Coordinate|undefined} The center of the view.
         * @observable
         * @api
         */
        getCenter() {
            const center = this.getCenterInternal();
            if (!center) {
                return center;
            }
            return proj_js_2.toUserCoordinate(center, this.getProjection());
        }
        /**
         * Get the view center without transforming to user projection.
         * @return {import("./coordinate.js").Coordinate|undefined} The center of the view.
         */
        getCenterInternal() {
            return /** @type {import("./coordinate.js").Coordinate|undefined} */ (this.get(ViewProperty_js_1.default.CENTER));
        }
        /**
         * @return {Constraints} Constraints.
         */
        getConstraints() {
            return this.constraints_;
        }
        /**
         * @return {boolean} Resolution constraint is set
         */
        getConstrainResolution() {
            return this.options_.constrainResolution;
        }
        /**
         * @param {Array<number>=} opt_hints Destination array.
         * @return {Array<number>} Hint.
         */
        getHints(opt_hints) {
            if (opt_hints !== undefined) {
                opt_hints[0] = this.hints_[0];
                opt_hints[1] = this.hints_[1];
                return opt_hints;
            }
            else {
                return this.hints_.slice();
            }
        }
        /**
         * Calculate the extent for the current view state and the passed size.
         * The size is the pixel dimensions of the box into which the calculated extent
         * should fit. In most cases you want to get the extent of the entire map,
         * that is `map.getSize()`.
         * @param {import("./size.js").Size=} opt_size Box pixel size. If not provided, the size
         * of the map that uses this view will be used.
         * @return {import("./extent.js").Extent} Extent.
         * @api
         */
        calculateExtent(opt_size) {
            const extent = this.calculateExtentInternal(opt_size);
            return proj_js_2.toUserExtent(extent, this.getProjection());
        }
        /**
         * @param {import("./size.js").Size=} opt_size Box pixel size. If not provided, the size of the
         * first map that uses this view will be used.
         * @return {import("./extent.js").Extent} Extent.
         */
        calculateExtentInternal(opt_size) {
            const size = opt_size || this.getViewportSize_();
            const center = /** @type {!import("./coordinate.js").Coordinate} */ (this.getCenterInternal());
            asserts_js_8.assert(center, 1); // The view center is not defined
            const resolution = /** @type {!number} */ (this.getResolution());
            asserts_js_8.assert(resolution !== undefined, 2); // The view resolution is not defined
            const rotation = /** @type {!number} */ (this.getRotation());
            asserts_js_8.assert(rotation !== undefined, 3); // The view rotation is not defined
            return extent_js_16.getForViewAndSize(center, resolution, rotation, size);
        }
        /**
         * Get the maximum resolution of the view.
         * @return {number} The maximum resolution of the view.
         * @api
         */
        getMaxResolution() {
            return this.maxResolution_;
        }
        /**
         * Get the minimum resolution of the view.
         * @return {number} The minimum resolution of the view.
         * @api
         */
        getMinResolution() {
            return this.minResolution_;
        }
        /**
         * Get the maximum zoom level for the view.
         * @return {number} The maximum zoom level.
         * @api
         */
        getMaxZoom() {
            return /** @type {number} */ (this.getZoomForResolution(this.minResolution_));
        }
        /**
         * Set a new maximum zoom level for the view.
         * @param {number} zoom The maximum zoom level.
         * @api
         */
        setMaxZoom(zoom) {
            this.applyOptions_(this.getUpdatedOptions_({ maxZoom: zoom }));
        }
        /**
         * Get the minimum zoom level for the view.
         * @return {number} The minimum zoom level.
         * @api
         */
        getMinZoom() {
            return /** @type {number} */ (this.getZoomForResolution(this.maxResolution_));
        }
        /**
         * Set a new minimum zoom level for the view.
         * @param {number} zoom The minimum zoom level.
         * @api
         */
        setMinZoom(zoom) {
            this.applyOptions_(this.getUpdatedOptions_({ minZoom: zoom }));
        }
        /**
         * Set whether the view shoud allow intermediary zoom levels.
         * @param {boolean} enabled Whether the resolution is constrained.
         * @api
         */
        setConstrainResolution(enabled) {
            this.applyOptions_(this.getUpdatedOptions_({ constrainResolution: enabled }));
        }
        /**
         * Get the view projection.
         * @return {import("./proj/Projection.js").default} The projection of the view.
         * @api
         */
        getProjection() {
            return this.projection_;
        }
        /**
         * Get the view resolution.
         * @return {number|undefined} The resolution of the view.
         * @observable
         * @api
         */
        getResolution() {
            return /** @type {number|undefined} */ (this.get(ViewProperty_js_1.default.RESOLUTION));
        }
        /**
         * Get the resolutions for the view. This returns the array of resolutions
         * passed to the constructor of the View, or undefined if none were given.
         * @return {Array<number>|undefined} The resolutions of the view.
         * @api
         */
        getResolutions() {
            return this.resolutions_;
        }
        /**
         * Get the resolution for a provided extent (in map units) and size (in pixels).
         * @param {import("./extent.js").Extent} extent Extent.
         * @param {import("./size.js").Size=} opt_size Box pixel size.
         * @return {number} The resolution at which the provided extent will render at
         *     the given size.
         * @api
         */
        getResolutionForExtent(extent, opt_size) {
            return this.getResolutionForExtentInternal(proj_js_2.fromUserExtent(extent, this.getProjection()), opt_size);
        }
        /**
         * Get the resolution for a provided extent (in map units) and size (in pixels).
         * @param {import("./extent.js").Extent} extent Extent.
         * @param {import("./size.js").Size=} opt_size Box pixel size.
         * @return {number} The resolution at which the provided extent will render at
         *     the given size.
         */
        getResolutionForExtentInternal(extent, opt_size) {
            const size = opt_size || this.getViewportSize_();
            const xResolution = extent_js_16.getWidth(extent) / size[0];
            const yResolution = extent_js_16.getHeight(extent) / size[1];
            return Math.max(xResolution, yResolution);
        }
        /**
         * Return a function that returns a value between 0 and 1 for a
         * resolution. Exponential scaling is assumed.
         * @param {number=} opt_power Power.
         * @return {function(number): number} Resolution for value function.
         */
        getResolutionForValueFunction(opt_power) {
            const power = opt_power || 2;
            const maxResolution = this.getConstrainedResolution(this.maxResolution_);
            const minResolution = this.minResolution_;
            const max = Math.log(maxResolution / minResolution) / Math.log(power);
            return (
            /**
             * @param {number} value Value.
             * @return {number} Resolution.
             */
            function (value) {
                const resolution = maxResolution / Math.pow(power, value * max);
                return resolution;
            });
        }
        /**
         * Get the view rotation.
         * @return {number} The rotation of the view in radians.
         * @observable
         * @api
         */
        getRotation() {
            return /** @type {number} */ (this.get(ViewProperty_js_1.default.ROTATION));
        }
        /**
         * Return a function that returns a resolution for a value between
         * 0 and 1. Exponential scaling is assumed.
         * @param {number=} opt_power Power.
         * @return {function(number): number} Value for resolution function.
         */
        getValueForResolutionFunction(opt_power) {
            const logPower = Math.log(opt_power || 2);
            const maxResolution = this.getConstrainedResolution(this.maxResolution_);
            const minResolution = this.minResolution_;
            const max = Math.log(maxResolution / minResolution) / logPower;
            return (
            /**
             * @param {number} resolution Resolution.
             * @return {number} Value.
             */
            function (resolution) {
                const value = Math.log(maxResolution / resolution) / logPower / max;
                return value;
            });
        }
        /**
         * @return {State} View state.
         */
        getState() {
            const center = /** @type {import("./coordinate.js").Coordinate} */ (this.getCenterInternal());
            const projection = this.getProjection();
            const resolution = /** @type {number} */ (this.getResolution());
            const rotation = this.getRotation();
            return {
                center: center.slice(0),
                projection: projection !== undefined ? projection : null,
                resolution: resolution,
                rotation: rotation,
                zoom: this.getZoom(),
            };
        }
        /**
         * Get the current zoom level. This method may return non-integer zoom levels
         * if the view does not constrain the resolution, or if an interaction or
         * animation is underway.
         * @return {number|undefined} Zoom.
         * @api
         */
        getZoom() {
            let zoom;
            const resolution = this.getResolution();
            if (resolution !== undefined) {
                zoom = this.getZoomForResolution(resolution);
            }
            return zoom;
        }
        /**
         * Get the zoom level for a resolution.
         * @param {number} resolution The resolution.
         * @return {number|undefined} The zoom level for the provided resolution.
         * @api
         */
        getZoomForResolution(resolution) {
            let offset = this.minZoom_ || 0;
            let max, zoomFactor;
            if (this.resolutions_) {
                const nearest = array_js_6.linearFindNearest(this.resolutions_, resolution, 1);
                offset = nearest;
                max = this.resolutions_[nearest];
                if (nearest == this.resolutions_.length - 1) {
                    zoomFactor = 2;
                }
                else {
                    zoomFactor = max / this.resolutions_[nearest + 1];
                }
            }
            else {
                max = this.maxResolution_;
                zoomFactor = this.zoomFactor_;
            }
            return offset + Math.log(max / resolution) / Math.log(zoomFactor);
        }
        /**
         * Get the resolution for a zoom level.
         * @param {number} zoom Zoom level.
         * @return {number} The view resolution for the provided zoom level.
         * @api
         */
        getResolutionForZoom(zoom) {
            if (this.resolutions_) {
                if (this.resolutions_.length <= 1) {
                    return 0;
                }
                const baseLevel = math_js_15.clamp(Math.floor(zoom), 0, this.resolutions_.length - 2);
                const zoomFactor = this.resolutions_[baseLevel] / this.resolutions_[baseLevel + 1];
                return (this.resolutions_[baseLevel] /
                    Math.pow(zoomFactor, math_js_15.clamp(zoom - baseLevel, 0, 1)));
            }
            else {
                return (this.maxResolution_ / Math.pow(this.zoomFactor_, zoom - this.minZoom_));
            }
        }
        /**
         * Fit the given geometry or extent based on the given map size and border.
         * The size is pixel dimensions of the box to fit the extent into.
         * In most cases you will want to use the map size, that is `map.getSize()`.
         * Takes care of the map angle.
         * @param {import("./geom/SimpleGeometry.js").default|import("./extent.js").Extent} geometryOrExtent The geometry or
         *     extent to fit the view to.
         * @param {FitOptions=} opt_options Options.
         * @api
         */
        fit(geometryOrExtent, opt_options) {
            const options = obj_js_8.assign({ size: this.getViewportSize_() }, opt_options || {});
            /** @type {import("./geom/SimpleGeometry.js").default} */
            let geometry;
            asserts_js_8.assert(Array.isArray(geometryOrExtent) ||
                typeof ( /** @type {?} */(geometryOrExtent).getSimplifiedGeometry) ===
                    'function', 24); // Invalid extent or geometry provided as `geometry`
            if (Array.isArray(geometryOrExtent)) {
                asserts_js_8.assert(!extent_js_16.isEmpty(geometryOrExtent), 25); // Cannot fit empty extent provided as `geometry`
                const extent = proj_js_2.fromUserExtent(geometryOrExtent, this.getProjection());
                geometry = Polygon_js_1.fromExtent(extent);
            }
            else if (geometryOrExtent.getType() === GeometryType_js_7.default.CIRCLE) {
                const extent = proj_js_2.fromUserExtent(geometryOrExtent.getExtent(), this.getProjection());
                geometry = Polygon_js_1.fromExtent(extent);
                geometry.rotate(this.getRotation(), extent_js_16.getCenter(extent));
            }
            else {
                const userProjection = proj_js_2.getUserProjection();
                if (userProjection) {
                    geometry = /** @type {import("./geom/SimpleGeometry.js").default} */ (geometryOrExtent
                        .clone()
                        .transform(userProjection, this.getProjection()));
                }
                else {
                    geometry = geometryOrExtent;
                }
            }
            this.fitInternal(geometry, options);
        }
        /**
         * @param {import("./geom/SimpleGeometry.js").default} geometry The geometry.
         * @param {FitOptions=} opt_options Options.
         */
        fitInternal(geometry, opt_options) {
            const options = opt_options || {};
            let size = options.size;
            if (!size) {
                size = this.getViewportSize_();
            }
            const padding = options.padding !== undefined ? options.padding : [0, 0, 0, 0];
            const nearest = options.nearest !== undefined ? options.nearest : false;
            let minResolution;
            if (options.minResolution !== undefined) {
                minResolution = options.minResolution;
            }
            else if (options.maxZoom !== undefined) {
                minResolution = this.getResolutionForZoom(options.maxZoom);
            }
            else {
                minResolution = 0;
            }
            const coords = geometry.getFlatCoordinates();
            // calculate rotated extent
            const rotation = this.getRotation();
            const cosAngle = Math.cos(-rotation);
            let sinAngle = Math.sin(-rotation);
            let minRotX = +Infinity;
            let minRotY = +Infinity;
            let maxRotX = -Infinity;
            let maxRotY = -Infinity;
            const stride = geometry.getStride();
            for (let i = 0, ii = coords.length; i < ii; i += stride) {
                const rotX = coords[i] * cosAngle - coords[i + 1] * sinAngle;
                const rotY = coords[i] * sinAngle + coords[i + 1] * cosAngle;
                minRotX = Math.min(minRotX, rotX);
                minRotY = Math.min(minRotY, rotY);
                maxRotX = Math.max(maxRotX, rotX);
                maxRotY = Math.max(maxRotY, rotY);
            }
            // calculate resolution
            let resolution = this.getResolutionForExtentInternal([minRotX, minRotY, maxRotX, maxRotY], [size[0] - padding[1] - padding[3], size[1] - padding[0] - padding[2]]);
            resolution = isNaN(resolution)
                ? minResolution
                : Math.max(resolution, minResolution);
            resolution = this.getConstrainedResolution(resolution, nearest ? 0 : 1);
            // calculate center
            sinAngle = -sinAngle; // go back to original rotation
            let centerRotX = (minRotX + maxRotX) / 2;
            let centerRotY = (minRotY + maxRotY) / 2;
            centerRotX += ((padding[1] - padding[3]) / 2) * resolution;
            centerRotY += ((padding[0] - padding[2]) / 2) * resolution;
            const centerX = centerRotX * cosAngle - centerRotY * sinAngle;
            const centerY = centerRotY * cosAngle + centerRotX * sinAngle;
            const center = [centerX, centerY];
            const callback = options.callback ? options.callback : functions_js_3.VOID;
            if (options.duration !== undefined) {
                this.animateInternal({
                    resolution: resolution,
                    center: this.getConstrainedCenter(center, resolution),
                    duration: options.duration,
                    easing: options.easing,
                }, callback);
            }
            else {
                this.targetResolution_ = resolution;
                this.targetCenter_ = center;
                this.applyTargetState_(false, true);
                animationCallback(callback, true);
            }
        }
        /**
         * Center on coordinate and view position.
         * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
         * @param {import("./size.js").Size} size Box pixel size.
         * @param {import("./pixel.js").Pixel} position Position on the view to center on.
         * @api
         */
        centerOn(coordinate, size, position) {
            this.centerOnInternal(proj_js_2.fromUserCoordinate(coordinate, this.getProjection()), size, position);
        }
        /**
         * @param {import("./coordinate.js").Coordinate} coordinate Coordinate.
         * @param {import("./size.js").Size} size Box pixel size.
         * @param {import("./pixel.js").Pixel} position Position on the view to center on.
         */
        centerOnInternal(coordinate, size, position) {
            // calculate rotated position
            const rotation = this.getRotation();
            const cosAngle = Math.cos(-rotation);
            let sinAngle = Math.sin(-rotation);
            let rotX = coordinate[0] * cosAngle - coordinate[1] * sinAngle;
            let rotY = coordinate[1] * cosAngle + coordinate[0] * sinAngle;
            const resolution = this.getResolution();
            rotX += (size[0] / 2 - position[0]) * resolution;
            rotY += (position[1] - size[1] / 2) * resolution;
            // go back to original angle
            sinAngle = -sinAngle; // go back to original rotation
            const centerX = rotX * cosAngle - rotY * sinAngle;
            const centerY = rotY * cosAngle + rotX * sinAngle;
            this.setCenterInternal([centerX, centerY]);
        }
        /**
         * @return {boolean} Is defined.
         */
        isDef() {
            return !!this.getCenterInternal() && this.getResolution() !== undefined;
        }
        /**
         * Adds relative coordinates to the center of the view. Any extent constraint will apply.
         * @param {import("./coordinate.js").Coordinate} deltaCoordinates Relative value to add.
         * @api
         */
        adjustCenter(deltaCoordinates) {
            const center = proj_js_2.toUserCoordinate(this.targetCenter_, this.getProjection());
            this.setCenter([
                center[0] + deltaCoordinates[0],
                center[1] + deltaCoordinates[1],
            ]);
        }
        /**
         * Adds relative coordinates to the center of the view. Any extent constraint will apply.
         * @param {import("./coordinate.js").Coordinate} deltaCoordinates Relative value to add.
         */
        adjustCenterInternal(deltaCoordinates) {
            const center = this.targetCenter_;
            this.setCenterInternal([
                center[0] + deltaCoordinates[0],
                center[1] + deltaCoordinates[1],
            ]);
        }
        /**
         * Multiply the view resolution by a ratio, optionally using an anchor. Any resolution
         * constraint will apply.
         * @param {number} ratio The ratio to apply on the view resolution.
         * @param {import("./coordinate.js").Coordinate=} opt_anchor The origin of the transformation.
         * @api
         */
        adjustResolution(ratio, opt_anchor) {
            const anchor = opt_anchor && proj_js_2.fromUserCoordinate(opt_anchor, this.getProjection());
            this.adjustResolutionInternal(ratio, anchor);
        }
        /**
         * Multiply the view resolution by a ratio, optionally using an anchor. Any resolution
         * constraint will apply.
         * @param {number} ratio The ratio to apply on the view resolution.
         * @param {import("./coordinate.js").Coordinate=} opt_anchor The origin of the transformation.
         */
        adjustResolutionInternal(ratio, opt_anchor) {
            const isMoving = this.getAnimating() || this.getInteracting();
            const size = this.getViewportSize_(this.getRotation());
            const newResolution = this.constraints_.resolution(this.targetResolution_ * ratio, 0, size, isMoving);
            if (opt_anchor) {
                this.targetCenter_ = this.calculateCenterZoom(newResolution, opt_anchor);
            }
            this.targetResolution_ *= ratio;
            this.applyTargetState_();
        }
        /**
         * Adds a value to the view zoom level, optionally using an anchor. Any resolution
         * constraint will apply.
         * @param {number} delta Relative value to add to the zoom level.
         * @param {import("./coordinate.js").Coordinate=} opt_anchor The origin of the transformation.
         * @api
         */
        adjustZoom(delta, opt_anchor) {
            this.adjustResolution(Math.pow(this.zoomFactor_, -delta), opt_anchor);
        }
        /**
         * Adds a value to the view rotation, optionally using an anchor. Any rotation
         * constraint will apply.
         * @param {number} delta Relative value to add to the zoom rotation, in radians.
         * @param {import("./coordinate.js").Coordinate=} opt_anchor The rotation center.
         * @api
         */
        adjustRotation(delta, opt_anchor) {
            if (opt_anchor) {
                opt_anchor = proj_js_2.fromUserCoordinate(opt_anchor, this.getProjection());
            }
            this.adjustRotationInternal(delta, opt_anchor);
        }
        /**
         * @param {number} delta Relative value to add to the zoom rotation, in radians.
         * @param {import("./coordinate.js").Coordinate=} opt_anchor The rotation center.
         */
        adjustRotationInternal(delta, opt_anchor) {
            const isMoving = this.getAnimating() || this.getInteracting();
            const newRotation = this.constraints_.rotation(this.targetRotation_ + delta, isMoving);
            if (opt_anchor) {
                this.targetCenter_ = this.calculateCenterRotate(newRotation, opt_anchor);
            }
            this.targetRotation_ += delta;
            this.applyTargetState_();
        }
        /**
         * Set the center of the current view. Any extent constraint will apply.
         * @param {import("./coordinate.js").Coordinate|undefined} center The center of the view.
         * @observable
         * @api
         */
        setCenter(center) {
            this.setCenterInternal(proj_js_2.fromUserCoordinate(center, this.getProjection()));
        }
        /**
         * Set the center using the view projection (not the user projection).
         * @param {import("./coordinate.js").Coordinate|undefined} center The center of the view.
         */
        setCenterInternal(center) {
            this.targetCenter_ = center;
            this.applyTargetState_();
        }
        /**
         * @param {import("./ViewHint.js").default} hint Hint.
         * @param {number} delta Delta.
         * @return {number} New value.
         */
        setHint(hint, delta) {
            this.hints_[hint] += delta;
            this.changed();
            return this.hints_[hint];
        }
        /**
         * Set the resolution for this view. Any resolution constraint will apply.
         * @param {number|undefined} resolution The resolution of the view.
         * @observable
         * @api
         */
        setResolution(resolution) {
            this.targetResolution_ = resolution;
            this.applyTargetState_();
        }
        /**
         * Set the rotation for this view. Any rotation constraint will apply.
         * @param {number} rotation The rotation of the view in radians.
         * @observable
         * @api
         */
        setRotation(rotation) {
            this.targetRotation_ = rotation;
            this.applyTargetState_();
        }
        /**
         * Zoom to a specific zoom level. Any resolution constrain will apply.
         * @param {number} zoom Zoom level.
         * @api
         */
        setZoom(zoom) {
            this.setResolution(this.getResolutionForZoom(zoom));
        }
        /**
         * Recompute rotation/resolution/center based on target values.
         * Note: we have to compute rotation first, then resolution and center considering that
         * parameters can influence one another in case a view extent constraint is present.
         * @param {boolean=} opt_doNotCancelAnims Do not cancel animations.
         * @param {boolean=} opt_forceMoving Apply constraints as if the view is moving.
         * @private
         */
        applyTargetState_(opt_doNotCancelAnims, opt_forceMoving) {
            const isMoving = this.getAnimating() || this.getInteracting() || opt_forceMoving;
            // compute rotation
            const newRotation = this.constraints_.rotation(this.targetRotation_, isMoving);
            const size = this.getViewportSize_(newRotation);
            const newResolution = this.constraints_.resolution(this.targetResolution_, 0, size, isMoving);
            const newCenter = this.constraints_.center(this.targetCenter_, newResolution, size, isMoving);
            if (this.get(ViewProperty_js_1.default.ROTATION) !== newRotation) {
                this.set(ViewProperty_js_1.default.ROTATION, newRotation);
            }
            if (this.get(ViewProperty_js_1.default.RESOLUTION) !== newResolution) {
                this.set(ViewProperty_js_1.default.RESOLUTION, newResolution);
            }
            if (!this.get(ViewProperty_js_1.default.CENTER) ||
                !coordinate_js_3.equals(this.get(ViewProperty_js_1.default.CENTER), newCenter)) {
                this.set(ViewProperty_js_1.default.CENTER, newCenter);
            }
            if (this.getAnimating() && !opt_doNotCancelAnims) {
                this.cancelAnimations();
            }
            this.cancelAnchor_ = undefined;
        }
        /**
         * If any constraints need to be applied, an animation will be triggered.
         * This is typically done on interaction end.
         * Note: calling this with a duration of 0 will apply the constrained values straight away,
         * without animation.
         * @param {number=} opt_duration The animation duration in ms.
         * @param {number=} opt_resolutionDirection Which direction to zoom.
         * @param {import("./coordinate.js").Coordinate=} opt_anchor The origin of the transformation.
         */
        resolveConstraints(opt_duration, opt_resolutionDirection, opt_anchor) {
            const duration = opt_duration !== undefined ? opt_duration : 200;
            const direction = opt_resolutionDirection || 0;
            const newRotation = this.constraints_.rotation(this.targetRotation_);
            const size = this.getViewportSize_(newRotation);
            const newResolution = this.constraints_.resolution(this.targetResolution_, direction, size);
            const newCenter = this.constraints_.center(this.targetCenter_, newResolution, size);
            if (duration === 0 && !this.cancelAnchor_) {
                this.targetResolution_ = newResolution;
                this.targetRotation_ = newRotation;
                this.targetCenter_ = newCenter;
                this.applyTargetState_();
                return;
            }
            const anchor = opt_anchor || (duration === 0 ? this.cancelAnchor_ : undefined);
            this.cancelAnchor_ = undefined;
            if (this.getResolution() !== newResolution ||
                this.getRotation() !== newRotation ||
                !this.getCenterInternal() ||
                !coordinate_js_3.equals(this.getCenterInternal(), newCenter)) {
                if (this.getAnimating()) {
                    this.cancelAnimations();
                }
                this.animateInternal({
                    rotation: newRotation,
                    center: newCenter,
                    resolution: newResolution,
                    duration: duration,
                    easing: easing_js_2.easeOut,
                    anchor: anchor,
                });
            }
        }
        /**
         * Notify the View that an interaction has started.
         * The view state will be resolved to a stable one if needed
         * (depending on its constraints).
         * @api
         */
        beginInteraction() {
            this.resolveConstraints(0);
            this.setHint(ViewHint_js_1.default.INTERACTING, 1);
        }
        /**
         * Notify the View that an interaction has ended. The view state will be resolved
         * to a stable one if needed (depending on its constraints).
         * @param {number=} opt_duration Animation duration in ms.
         * @param {number=} opt_resolutionDirection Which direction to zoom.
         * @param {import("./coordinate.js").Coordinate=} opt_anchor The origin of the transformation.
         * @api
         */
        endInteraction(opt_duration, opt_resolutionDirection, opt_anchor) {
            const anchor = opt_anchor && proj_js_2.fromUserCoordinate(opt_anchor, this.getProjection());
            this.endInteractionInternal(opt_duration, opt_resolutionDirection, anchor);
        }
        /**
         * Notify the View that an interaction has ended. The view state will be resolved
         * to a stable one if needed (depending on its constraints).
         * @param {number=} opt_duration Animation duration in ms.
         * @param {number=} opt_resolutionDirection Which direction to zoom.
         * @param {import("./coordinate.js").Coordinate=} opt_anchor The origin of the transformation.
         */
        endInteractionInternal(opt_duration, opt_resolutionDirection, opt_anchor) {
            this.setHint(ViewHint_js_1.default.INTERACTING, -1);
            this.resolveConstraints(opt_duration, opt_resolutionDirection, opt_anchor);
        }
        /**
         * Get a valid position for the view center according to the current constraints.
         * @param {import("./coordinate.js").Coordinate|undefined} targetCenter Target center position.
         * @param {number=} opt_targetResolution Target resolution. If not supplied, the current one will be used.
         * This is useful to guess a valid center position at a different zoom level.
         * @return {import("./coordinate.js").Coordinate|undefined} Valid center position.
         */
        getConstrainedCenter(targetCenter, opt_targetResolution) {
            const size = this.getViewportSize_(this.getRotation());
            return this.constraints_.center(targetCenter, opt_targetResolution || this.getResolution(), size);
        }
        /**
         * Get a valid zoom level according to the current view constraints.
         * @param {number|undefined} targetZoom Target zoom.
         * @param {number=} [opt_direction=0] Indicate which resolution should be used
         * by a renderer if the view resolution does not match any resolution of the tile source.
         * If 0, the nearest resolution will be used. If 1, the nearest lower resolution
         * will be used. If -1, the nearest higher resolution will be used.
         * @return {number|undefined} Valid zoom level.
         */
        getConstrainedZoom(targetZoom, opt_direction) {
            const targetRes = this.getResolutionForZoom(targetZoom);
            return this.getZoomForResolution(this.getConstrainedResolution(targetRes, opt_direction));
        }
        /**
         * Get a valid resolution according to the current view constraints.
         * @param {number|undefined} targetResolution Target resolution.
         * @param {number=} [opt_direction=0] Indicate which resolution should be used
         * by a renderer if the view resolution does not match any resolution of the tile source.
         * If 0, the nearest resolution will be used. If 1, the nearest lower resolution
         * will be used. If -1, the nearest higher resolution will be used.
         * @return {number|undefined} Valid resolution.
         */
        getConstrainedResolution(targetResolution, opt_direction) {
            const direction = opt_direction || 0;
            const size = this.getViewportSize_(this.getRotation());
            return this.constraints_.resolution(targetResolution, direction, size);
        }
    }
    /**
     * @param {Function} callback Callback.
     * @param {*} returnValue Return value.
     */
    function animationCallback(callback, returnValue) {
        setTimeout(function () {
            callback(returnValue);
        }, 0);
    }
    /**
     * @param {ViewOptions} options View options.
     * @return {import("./centerconstraint.js").Type} The constraint.
     */
    function createCenterConstraint(options) {
        if (options.extent !== undefined) {
            const smooth = options.smoothExtentConstraint !== undefined
                ? options.smoothExtentConstraint
                : true;
            return centerconstraint_js_1.createExtent(options.extent, options.constrainOnlyCenter, smooth);
        }
        const projection = proj_js_2.createProjection(options.projection, 'EPSG:3857');
        if (options.multiWorld !== true && projection.isGlobal()) {
            const extent = projection.getExtent().slice();
            extent[0] = -Infinity;
            extent[2] = Infinity;
            return centerconstraint_js_1.createExtent(extent, false, false);
        }
        return centerconstraint_js_1.none;
    }
    exports.createCenterConstraint = createCenterConstraint;
    /**
     * @param {ViewOptions} options View options.
     * @return {{constraint: import("./resolutionconstraint.js").Type, maxResolution: number,
     *     minResolution: number, minZoom: number, zoomFactor: number}} The constraint.
     */
    function createResolutionConstraint(options) {
        let resolutionConstraint;
        let maxResolution;
        let minResolution;
        // TODO: move these to be ol constants
        // see https://github.com/openlayers/openlayers/issues/2076
        const defaultMaxZoom = 28;
        const defaultZoomFactor = 2;
        let minZoom = options.minZoom !== undefined ? options.minZoom : DEFAULT_MIN_ZOOM;
        let maxZoom = options.maxZoom !== undefined ? options.maxZoom : defaultMaxZoom;
        const zoomFactor = options.zoomFactor !== undefined ? options.zoomFactor : defaultZoomFactor;
        const multiWorld = options.multiWorld !== undefined ? options.multiWorld : false;
        const smooth = options.smoothResolutionConstraint !== undefined
            ? options.smoothResolutionConstraint
            : true;
        const showFullExtent = options.showFullExtent !== undefined ? options.showFullExtent : false;
        const projection = proj_js_2.createProjection(options.projection, 'EPSG:3857');
        const projExtent = projection.getExtent();
        let constrainOnlyCenter = options.constrainOnlyCenter;
        let extent = options.extent;
        if (!multiWorld && !extent && projection.isGlobal()) {
            constrainOnlyCenter = false;
            extent = projExtent;
        }
        if (options.resolutions !== undefined) {
            const resolutions = options.resolutions;
            maxResolution = resolutions[minZoom];
            minResolution =
                resolutions[maxZoom] !== undefined
                    ? resolutions[maxZoom]
                    : resolutions[resolutions.length - 1];
            if (options.constrainResolution) {
                resolutionConstraint = resolutionconstraint_js_2.createSnapToResolutions(resolutions, smooth, !constrainOnlyCenter && extent, showFullExtent);
            }
            else {
                resolutionConstraint = resolutionconstraint_js_1.createMinMaxResolution(maxResolution, minResolution, smooth, !constrainOnlyCenter && extent, showFullExtent);
            }
        }
        else {
            // calculate the default min and max resolution
            const size = !projExtent
                ? // use an extent that can fit the whole world if need be
                    (360 * proj_js_2.METERS_PER_UNIT[Units_js_6.default.DEGREES]) / projection.getMetersPerUnit()
                : Math.max(extent_js_16.getWidth(projExtent), extent_js_16.getHeight(projExtent));
            const defaultMaxResolution = size / common_js_2.DEFAULT_TILE_SIZE / Math.pow(defaultZoomFactor, DEFAULT_MIN_ZOOM);
            const defaultMinResolution = defaultMaxResolution /
                Math.pow(defaultZoomFactor, defaultMaxZoom - DEFAULT_MIN_ZOOM);
            // user provided maxResolution takes precedence
            maxResolution = options.maxResolution;
            if (maxResolution !== undefined) {
                minZoom = 0;
            }
            else {
                maxResolution = defaultMaxResolution / Math.pow(zoomFactor, minZoom);
            }
            // user provided minResolution takes precedence
            minResolution = options.minResolution;
            if (minResolution === undefined) {
                if (options.maxZoom !== undefined) {
                    if (options.maxResolution !== undefined) {
                        minResolution = maxResolution / Math.pow(zoomFactor, maxZoom);
                    }
                    else {
                        minResolution = defaultMaxResolution / Math.pow(zoomFactor, maxZoom);
                    }
                }
                else {
                    minResolution = defaultMinResolution;
                }
            }
            // given discrete zoom levels, minResolution may be different than provided
            maxZoom =
                minZoom +
                    Math.floor(Math.log(maxResolution / minResolution) / Math.log(zoomFactor));
            minResolution = maxResolution / Math.pow(zoomFactor, maxZoom - minZoom);
            if (options.constrainResolution) {
                resolutionConstraint = resolutionconstraint_js_2.createSnapToPower(zoomFactor, maxResolution, minResolution, smooth, !constrainOnlyCenter && extent, showFullExtent);
            }
            else {
                resolutionConstraint = resolutionconstraint_js_1.createMinMaxResolution(maxResolution, minResolution, smooth, !constrainOnlyCenter && extent, showFullExtent);
            }
        }
        return {
            constraint: resolutionConstraint,
            maxResolution: maxResolution,
            minResolution: minResolution,
            minZoom: minZoom,
            zoomFactor: zoomFactor,
        };
    }
    exports.createResolutionConstraint = createResolutionConstraint;
    /**
     * @param {ViewOptions} options View options.
     * @return {import("./rotationconstraint.js").Type} Rotation constraint.
     */
    function createRotationConstraint(options) {
        const enableRotation = options.enableRotation !== undefined ? options.enableRotation : true;
        if (enableRotation) {
            const constrainRotation = options.constrainRotation;
            if (constrainRotation === undefined || constrainRotation === true) {
                return rotationconstraint_js_1.createSnapToZero();
            }
            else if (constrainRotation === false) {
                return rotationconstraint_js_1.none;
            }
            else if (typeof constrainRotation === 'number') {
                return rotationconstraint_js_1.createSnapToN(constrainRotation);
            }
            else {
                return rotationconstraint_js_1.none;
            }
        }
        else {
            return rotationconstraint_js_1.disable;
        }
    }
    exports.createRotationConstraint = createRotationConstraint;
    /**
     * Determine if an animation involves no view change.
     * @param {Animation} animation The animation.
     * @return {boolean} The animation involves no view change.
     */
    function isNoopAnimation(animation) {
        if (animation.sourceCenter && animation.targetCenter) {
            if (!coordinate_js_2.equals(animation.sourceCenter, animation.targetCenter)) {
                return false;
            }
        }
        if (animation.sourceResolution !== animation.targetResolution) {
            return false;
        }
        if (animation.sourceRotation !== animation.targetRotation) {
            return false;
        }
        return true;
    }
    exports.isNoopAnimation = isNoopAnimation;
    exports.default = View;
});
define("node_modules/ol/src/control/Control", ["require", "exports", "node_modules/ol/src/Object", "node_modules/ol/src/MapEventType", "node_modules/ol/src/functions", "node_modules/ol/src/events", "node_modules/ol/src/dom"], function (require, exports, Object_js_6, MapEventType_js_1, functions_js_4, events_js_6, dom_js_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @typedef {Object} Options
     * @property {HTMLElement} [element] The element is the control's
     * container element. This only needs to be specified if you're developing
     * a custom control.
     * @property {function(import("../MapEvent.js").default):void} [render] Function called when
     * the control should be re-rendered. This is called in a `requestAnimationFrame`
     * callback.
     * @property {HTMLElement|string} [target] Specify a target if you want
     * the control to be rendered outside of the map's viewport.
     */
    /**
     * @classdesc
     * A control is a visible widget with a DOM element in a fixed position on the
     * screen. They can involve user input (buttons), or be informational only;
     * the position is determined using CSS. By default these are placed in the
     * container with CSS class name `ol-overlaycontainer-stopevent`, but can use
     * any outside DOM element.
     *
     * This is the base class for controls. You can use it for simple custom
     * controls by creating the element with listeners, creating an instance:
     * ```js
     * var myControl = new Control({element: myElement});
     * ```
     * and then adding this to the map.
     *
     * The main advantage of having this as a control rather than a simple separate
     * DOM element is that preventing propagation is handled for you. Controls
     * will also be objects in a {@link module:ol/Collection~Collection}, so you can use their methods.
     *
     * You can also extend this base for your own control class. See
     * examples/custom-controls for an example of how to do this.
     *
     * @api
     */
    class Control extends Object_js_6.default {
        /**
         * @param {Options} options Control options.
         */
        constructor(options) {
            super();
            const element = options.element;
            if (element && !options.target && !element.style.pointerEvents) {
                element.style.pointerEvents = 'auto';
            }
            /**
             * @protected
             * @type {HTMLElement}
             */
            this.element = element ? element : null;
            /**
             * @private
             * @type {HTMLElement}
             */
            this.target_ = null;
            /**
             * @private
             * @type {import("../PluggableMap.js").default}
             */
            this.map_ = null;
            /**
             * @protected
             * @type {!Array<import("../events.js").EventsKey>}
             */
            this.listenerKeys = [];
            if (options.render) {
                this.render = options.render;
            }
            if (options.target) {
                this.setTarget(options.target);
            }
        }
        /**
         * Clean up.
         */
        disposeInternal() {
            dom_js_2.removeNode(this.element);
            super.disposeInternal();
        }
        /**
         * Get the map associated with this control.
         * @return {import("../PluggableMap.js").default} Map.
         * @api
         */
        getMap() {
            return this.map_;
        }
        /**
         * Remove the control from its current map and attach it to the new map.
         * Subclasses may set up event handlers to get notified about changes to
         * the map here.
         * @param {import("../PluggableMap.js").default} map Map.
         * @api
         */
        setMap(map) {
            if (this.map_) {
                dom_js_2.removeNode(this.element);
            }
            for (let i = 0, ii = this.listenerKeys.length; i < ii; ++i) {
                events_js_6.unlistenByKey(this.listenerKeys[i]);
            }
            this.listenerKeys.length = 0;
            this.map_ = map;
            if (this.map_) {
                const target = this.target_
                    ? this.target_
                    : map.getOverlayContainerStopEvent();
                target.appendChild(this.element);
                if (this.render !== functions_js_4.VOID) {
                    this.listenerKeys.push(events_js_6.listen(map, MapEventType_js_1.default.POSTRENDER, this.render, this));
                }
                map.render();
            }
        }
        /**
         * Renders the control.
         * @param {import("../MapEvent.js").default} mapEvent Map event.
         * @api
         */
        render(mapEvent) { }
        /**
         * This function is used to set a target element for the control. It has no
         * effect if it is called after the control has been added to the map (i.e.
         * after `setMap` is called on the control). If no `target` is set in the
         * options passed to the control constructor and if `setTarget` is not called
         * then the control is added to the map's overlay container.
         * @param {HTMLElement|string} target Target.
         * @api
         */
        setTarget(target) {
            this.target_ =
                typeof target === 'string' ? document.getElementById(target) : target;
        }
    }
    exports.default = Control;
});
/**
 * @module ol/interaction/Property
 */
define("node_modules/ol/src/interaction/Property", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @enum {string}
     */
    exports.default = {
        ACTIVE: 'active',
    };
});
define("node_modules/ol/src/interaction/Interaction", ["require", "exports", "node_modules/ol/src/Object", "node_modules/ol/src/interaction/Property", "node_modules/ol/src/easing"], function (require, exports, Object_js_7, Property_js_2, easing_js_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.zoomByDelta = exports.pan = void 0;
    /**
     * Object literal with config options for interactions.
     * @typedef {Object} InteractionOptions
     * @property {function(import("../MapBrowserEvent.js").default):boolean} handleEvent
     * Method called by the map to notify the interaction that a browser event was
     * dispatched to the map. If the function returns a falsy value, propagation of
     * the event to other interactions in the map's interactions chain will be
     * prevented (this includes functions with no explicit return). The interactions
     * are traversed in reverse order of the interactions collection of the map.
     */
    /**
     * @classdesc
     * Abstract base class; normally only used for creating subclasses and not
     * instantiated in apps.
     * User actions that change the state of the map. Some are similar to controls,
     * but are not associated with a DOM element.
     * For example, {@link module:ol/interaction/KeyboardZoom~KeyboardZoom} is
     * functionally the same as {@link module:ol/control/Zoom~Zoom}, but triggered
     * by a keyboard event not a button element event.
     * Although interactions do not have a DOM element, some of them do render
     * vectors and so are visible on the screen.
     * @api
     */
    class Interaction extends Object_js_7.default {
        /**
         * @param {InteractionOptions=} opt_options Options.
         */
        constructor(opt_options) {
            super();
            if (opt_options && opt_options.handleEvent) {
                this.handleEvent = opt_options.handleEvent;
            }
            /**
             * @private
             * @type {import("../PluggableMap.js").default}
             */
            this.map_ = null;
            this.setActive(true);
        }
        /**
         * Return whether the interaction is currently active.
         * @return {boolean} `true` if the interaction is active, `false` otherwise.
         * @observable
         * @api
         */
        getActive() {
            return /** @type {boolean} */ (this.get(Property_js_2.default.ACTIVE));
        }
        /**
         * Get the map associated with this interaction.
         * @return {import("../PluggableMap.js").default} Map.
         * @api
         */
        getMap() {
            return this.map_;
        }
        /**
         * Handles the {@link module:ol/MapBrowserEvent map browser event}.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
         * @return {boolean} `false` to stop event propagation.
         * @api
         */
        handleEvent(mapBrowserEvent) {
            return true;
        }
        /**
         * Activate or deactivate the interaction.
         * @param {boolean} active Active.
         * @observable
         * @api
         */
        setActive(active) {
            this.set(Property_js_2.default.ACTIVE, active);
        }
        /**
         * Remove the interaction from its current map and attach it to the new map.
         * Subclasses may set up event handlers to get notified about changes to
         * the map here.
         * @param {import("../PluggableMap.js").default} map Map.
         */
        setMap(map) {
            this.map_ = map;
        }
    }
    /**
     * @param {import("../View.js").default} view View.
     * @param {import("../coordinate.js").Coordinate} delta Delta.
     * @param {number=} opt_duration Duration.
     */
    function pan(view, delta, opt_duration) {
        const currentCenter = view.getCenterInternal();
        if (currentCenter) {
            const center = [currentCenter[0] + delta[0], currentCenter[1] + delta[1]];
            view.animateInternal({
                duration: opt_duration !== undefined ? opt_duration : 250,
                easing: easing_js_4.linear,
                center: view.getConstrainedCenter(center),
            });
        }
    }
    exports.pan = pan;
    /**
     * @param {import("../View.js").default} view View.
     * @param {number} delta Delta from previous zoom level.
     * @param {import("../coordinate.js").Coordinate=} opt_anchor Anchor coordinate in the user projection.
     * @param {number=} opt_duration Duration.
     */
    function zoomByDelta(view, delta, opt_anchor, opt_duration) {
        const currentZoom = view.getZoom();
        if (currentZoom === undefined) {
            return;
        }
        const newZoom = view.getConstrainedZoom(currentZoom + delta);
        const newResolution = view.getResolutionForZoom(newZoom);
        if (view.getAnimating()) {
            view.cancelAnimations();
        }
        view.animate({
            resolution: newResolution,
            anchor: opt_anchor,
            duration: opt_duration !== undefined ? opt_duration : 250,
            easing: easing_js_4.easeOut,
        });
    }
    exports.zoomByDelta = zoomByDelta;
    exports.default = Interaction;
});
/**
 * @module ol/OverlayPositioning
 */
define("node_modules/ol/src/OverlayPositioning", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Overlay position: `'bottom-left'`, `'bottom-center'`,  `'bottom-right'`,
     * `'center-left'`, `'center-center'`, `'center-right'`, `'top-left'`,
     * `'top-center'`, `'top-right'`
     * @enum {string}
     */
    exports.default = {
        BOTTOM_LEFT: 'bottom-left',
        BOTTOM_CENTER: 'bottom-center',
        BOTTOM_RIGHT: 'bottom-right',
        CENTER_LEFT: 'center-left',
        CENTER_CENTER: 'center-center',
        CENTER_RIGHT: 'center-right',
        TOP_LEFT: 'top-left',
        TOP_CENTER: 'top-center',
        TOP_RIGHT: 'top-right',
    };
});
/**
 * @module ol/css
 */
define("node_modules/ol/src/css", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getFontParameters = exports.CLASS_COLLAPSED = exports.CLASS_CONTROL = exports.CLASS_UNSUPPORTED = exports.CLASS_UNSELECTABLE = exports.CLASS_SELECTABLE = exports.CLASS_HIDDEN = void 0;
    /**
     * @typedef {Object} FontParameters
     * @property {string} style
     * @property {string} variant
     * @property {string} weight
     * @property {string} size
     * @property {string} lineHeight
     * @property {string} family
     * @property {Array<string>} families
     */
    /**
     * The CSS class for hidden feature.
     *
     * @const
     * @type {string}
     */
    exports.CLASS_HIDDEN = 'ol-hidden';
    /**
     * The CSS class that we'll give the DOM elements to have them selectable.
     *
     * @const
     * @type {string}
     */
    exports.CLASS_SELECTABLE = 'ol-selectable';
    /**
     * The CSS class that we'll give the DOM elements to have them unselectable.
     *
     * @const
     * @type {string}
     */
    exports.CLASS_UNSELECTABLE = 'ol-unselectable';
    /**
     * The CSS class for unsupported feature.
     *
     * @const
     * @type {string}
     */
    exports.CLASS_UNSUPPORTED = 'ol-unsupported';
    /**
     * The CSS class for controls.
     *
     * @const
     * @type {string}
     */
    exports.CLASS_CONTROL = 'ol-control';
    /**
     * The CSS class that we'll give the DOM elements that are collapsed, i.e.
     * to those elements which usually can be expanded.
     *
     * @const
     * @type {string}
     */
    exports.CLASS_COLLAPSED = 'ol-collapsed';
    /**
     * From http://stackoverflow.com/questions/10135697/regex-to-parse-any-css-font
     * @type {RegExp}
     */
    const fontRegEx = new RegExp([
        '^\\s*(?=(?:(?:[-a-z]+\\s*){0,2}(italic|oblique))?)',
        '(?=(?:(?:[-a-z]+\\s*){0,2}(small-caps))?)',
        '(?=(?:(?:[-a-z]+\\s*){0,2}(bold(?:er)?|lighter|[1-9]00 ))?)',
        '(?:(?:normal|\\1|\\2|\\3)\\s*){0,3}((?:xx?-)?',
        '(?:small|large)|medium|smaller|larger|[\\.\\d]+(?:\\%|in|[cem]m|ex|p[ctx]))',
        '(?:\\s*\\/\\s*(normal|[\\.\\d]+(?:\\%|in|[cem]m|ex|p[ctx])?))',
        '?\\s*([-,\\"\\\'\\sa-z]+?)\\s*$',
    ].join(''), 'i');
    const fontRegExMatchIndex = [
        'style',
        'variant',
        'weight',
        'size',
        'lineHeight',
        'family',
    ];
    /**
     * Get the list of font families from a font spec.  Note that this doesn't work
     * for font families that have commas in them.
     * @param {string} fontSpec The CSS font property.
     * @return {FontParameters} The font parameters (or null if the input spec is invalid).
     */
    const getFontParameters = function (fontSpec) {
        const match = fontSpec.match(fontRegEx);
        if (!match) {
            return null;
        }
        const style = /** @type {FontParameters} */ ({
            lineHeight: 'normal',
            size: '1.2em',
            style: 'normal',
            weight: 'normal',
            variant: 'normal',
        });
        for (let i = 0, ii = fontRegExMatchIndex.length; i < ii; ++i) {
            const value = match[i + 1];
            if (value !== undefined) {
                style[fontRegExMatchIndex[i]] = value;
            }
        }
        style.families = style.family.split(/,\s?/);
        return style;
    };
    exports.getFontParameters = getFontParameters;
});
define("node_modules/ol/src/Overlay", ["require", "exports", "node_modules/ol/src/Object", "node_modules/ol/src/MapEventType", "node_modules/ol/src/OverlayPositioning", "node_modules/ol/src/css", "node_modules/ol/src/extent", "node_modules/ol/src/events", "node_modules/ol/src/dom"], function (require, exports, Object_js_8, MapEventType_js_2, OverlayPositioning_js_1, css_js_1, extent_js_17, events_js_7, dom_js_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @typedef {Object} Options
     * @property {number|string} [id] Set the overlay id. The overlay id can be used
     * with the {@link module:ol/Map~Map#getOverlayById} method.
     * @property {HTMLElement} [element] The overlay element.
     * @property {Array<number>} [offset=[0, 0]] Offsets in pixels used when positioning
     * the overlay. The first element in the
     * array is the horizontal offset. A positive value shifts the overlay right.
     * The second element in the array is the vertical offset. A positive value
     * shifts the overlay down.
     * @property {import("./coordinate.js").Coordinate} [position] The overlay position
     * in map projection.
     * @property {import("./OverlayPositioning.js").default} [positioning='top-left'] Defines how
     * the overlay is actually positioned with respect to its `position` property.
     * Possible values are `'bottom-left'`, `'bottom-center'`, `'bottom-right'`,
     * `'center-left'`, `'center-center'`, `'center-right'`, `'top-left'`,
     * `'top-center'`, and `'top-right'`.
     * @property {boolean} [stopEvent=true] Whether event propagation to the map
     * viewport should be stopped. If `true` the overlay is placed in the same
     * container as that of the controls (CSS class name
     * `ol-overlaycontainer-stopevent`); if `false` it is placed in the container
     * with CSS class name specified by the `className` property.
     * @property {boolean} [insertFirst=true] Whether the overlay is inserted first
     * in the overlay container, or appended. If the overlay is placed in the same
     * container as that of the controls (see the `stopEvent` option) you will
     * probably set `insertFirst` to `true` so the overlay is displayed below the
     * controls.
     * @property {PanIntoViewOptions|boolean} [autoPan=false] Pan the map when calling
     * `setPosition`, so that the overlay is entirely visible in the current viewport?
     * If `true` (deprecated), then `autoPanAnimation` and `autoPanMargin` will be
     * used to determine the panning parameters; if an object is supplied then other
     * parameters are ignored.
     * @property {PanOptions} [autoPanAnimation] The animation options used to pan
     * the overlay into view. This animation is only used when `autoPan` is enabled.
     * A `duration` and `easing` may be provided to customize the animation.
     * Deprecated and ignored if `autoPan` is supplied as an object.
     * @property {number} [autoPanMargin=20] The margin (in pixels) between the
     * overlay and the borders of the map when autopanning. Deprecated and ignored
     * if `autoPan` is supplied as an object.
     * @property {PanIntoViewOptions} [autoPanOptions] The options to use for the
     * autoPan. This is only used when `autoPan` is enabled and has preference over
     * the individual `autoPanMargin` and `autoPanOptions`.
     * @property {string} [className='ol-overlay-container ol-selectable'] CSS class
     * name.
     */
    /**
     * @typedef {Object} PanOptions
     * @property {number} [duration=1000] The duration of the animation in
     * milliseconds.
     * @property {function(number):number} [easing] The easing function to use. Can
     * be one from {@link module:ol/easing} or a custom function.
     * Default is {@link module:ol/easing~inAndOut}.
     */
    /**
     * @typedef {Object} PanIntoViewOptions
     * @property {PanOptions} [animation={}] The animation parameters for the pan
     * @property {number} [margin=20] The margin (in pixels) between the
     * overlay and the borders of the map when panning into view.
     */
    /**
     * @enum {string}
     * @protected
     */
    const Property = {
        ELEMENT: 'element',
        MAP: 'map',
        OFFSET: 'offset',
        POSITION: 'position',
        POSITIONING: 'positioning',
    };
    /**
     * @classdesc
     * An element to be displayed over the map and attached to a single map
     * location.  Like {@link module:ol/control/Control~Control}, Overlays are
     * visible widgets. Unlike Controls, they are not in a fixed position on the
     * screen, but are tied to a geographical coordinate, so panning the map will
     * move an Overlay but not a Control.
     *
     * Example:
     *
     *     import Overlay from 'ol/Overlay';
     *
     *     var popup = new Overlay({
     *       element: document.getElementById('popup')
     *     });
     *     popup.setPosition(coordinate);
     *     map.addOverlay(popup);
     *
     * @api
     */
    class Overlay extends Object_js_8.default {
        /**
         * @param {Options} options Overlay options.
         */
        constructor(options) {
            super();
            /**
             * @protected
             * @type {Options}
             */
            this.options = options;
            /**
             * @protected
             * @type {number|string|undefined}
             */
            this.id = options.id;
            /**
             * @protected
             * @type {boolean}
             */
            this.insertFirst =
                options.insertFirst !== undefined ? options.insertFirst : true;
            /**
             * @protected
             * @type {boolean}
             */
            this.stopEvent = options.stopEvent !== undefined ? options.stopEvent : true;
            /**
             * @protected
             * @type {HTMLElement}
             */
            this.element = document.createElement('div');
            this.element.className =
                options.className !== undefined
                    ? options.className
                    : 'ol-overlay-container ' + css_js_1.CLASS_SELECTABLE;
            this.element.style.position = 'absolute';
            this.element.style.pointerEvents = 'auto';
            let autoPan = options.autoPan;
            if (autoPan && 'object' !== typeof autoPan) {
                autoPan = {
                    animation: options.autoPanAnimation,
                    margin: options.autoPanMargin,
                };
            }
            /**
             * @protected
             * @type {PanIntoViewOptions|false}
             */
            this.autoPan = /** @type {PanIntoViewOptions} */ (autoPan) || false;
            /**
             * @protected
             * @type {{transform_: string,
             *         visible: boolean}}
             */
            this.rendered = {
                transform_: '',
                visible: true,
            };
            /**
             * @protected
             * @type {?import("./events.js").EventsKey}
             */
            this.mapPostrenderListenerKey = null;
            this.addEventListener(Object_js_8.getChangeEventType(Property.ELEMENT), this.handleElementChanged);
            this.addEventListener(Object_js_8.getChangeEventType(Property.MAP), this.handleMapChanged);
            this.addEventListener(Object_js_8.getChangeEventType(Property.OFFSET), this.handleOffsetChanged);
            this.addEventListener(Object_js_8.getChangeEventType(Property.POSITION), this.handlePositionChanged);
            this.addEventListener(Object_js_8.getChangeEventType(Property.POSITIONING), this.handlePositioningChanged);
            if (options.element !== undefined) {
                this.setElement(options.element);
            }
            this.setOffset(options.offset !== undefined ? options.offset : [0, 0]);
            this.setPositioning(options.positioning !== undefined
                ? /** @type {import("./OverlayPositioning.js").default} */ (options.positioning)
                : OverlayPositioning_js_1.default.TOP_LEFT);
            if (options.position !== undefined) {
                this.setPosition(options.position);
            }
        }
        /**
         * Get the DOM element of this overlay.
         * @return {HTMLElement|undefined} The Element containing the overlay.
         * @observable
         * @api
         */
        getElement() {
            return /** @type {HTMLElement|undefined} */ (this.get(Property.ELEMENT));
        }
        /**
         * Get the overlay identifier which is set on constructor.
         * @return {number|string|undefined} Id.
         * @api
         */
        getId() {
            return this.id;
        }
        /**
         * Get the map associated with this overlay.
         * @return {import("./PluggableMap.js").default|undefined} The map that the
         * overlay is part of.
         * @observable
         * @api
         */
        getMap() {
            return /** @type {import("./PluggableMap.js").default|undefined} */ (this.get(Property.MAP));
        }
        /**
         * Get the offset of this overlay.
         * @return {Array<number>} The offset.
         * @observable
         * @api
         */
        getOffset() {
            return /** @type {Array<number>} */ (this.get(Property.OFFSET));
        }
        /**
         * Get the current position of this overlay.
         * @return {import("./coordinate.js").Coordinate|undefined} The spatial point that the overlay is
         *     anchored at.
         * @observable
         * @api
         */
        getPosition() {
            return /** @type {import("./coordinate.js").Coordinate|undefined} */ (this.get(Property.POSITION));
        }
        /**
         * Get the current positioning of this overlay.
         * @return {import("./OverlayPositioning.js").default} How the overlay is positioned
         *     relative to its point on the map.
         * @observable
         * @api
         */
        getPositioning() {
            return /** @type {import("./OverlayPositioning.js").default} */ (this.get(Property.POSITIONING));
        }
        /**
         * @protected
         */
        handleElementChanged() {
            dom_js_3.removeChildren(this.element);
            const element = this.getElement();
            if (element) {
                this.element.appendChild(element);
            }
        }
        /**
         * @protected
         */
        handleMapChanged() {
            if (this.mapPostrenderListenerKey) {
                dom_js_3.removeNode(this.element);
                events_js_7.unlistenByKey(this.mapPostrenderListenerKey);
                this.mapPostrenderListenerKey = null;
            }
            const map = this.getMap();
            if (map) {
                this.mapPostrenderListenerKey = events_js_7.listen(map, MapEventType_js_2.default.POSTRENDER, this.render, this);
                this.updatePixelPosition();
                const container = this.stopEvent
                    ? map.getOverlayContainerStopEvent()
                    : map.getOverlayContainer();
                if (this.insertFirst) {
                    container.insertBefore(this.element, container.childNodes[0] || null);
                }
                else {
                    container.appendChild(this.element);
                }
                this.performAutoPan();
            }
        }
        /**
         * @protected
         */
        render() {
            this.updatePixelPosition();
        }
        /**
         * @protected
         */
        handleOffsetChanged() {
            this.updatePixelPosition();
        }
        /**
         * @protected
         */
        handlePositionChanged() {
            this.updatePixelPosition();
            this.performAutoPan();
        }
        /**
         * @protected
         */
        handlePositioningChanged() {
            this.updatePixelPosition();
        }
        /**
         * Set the DOM element to be associated with this overlay.
         * @param {HTMLElement|undefined} element The Element containing the overlay.
         * @observable
         * @api
         */
        setElement(element) {
            this.set(Property.ELEMENT, element);
        }
        /**
         * Set the map to be associated with this overlay.
         * @param {import("./PluggableMap.js").default|undefined} map The map that the
         * overlay is part of.
         * @observable
         * @api
         */
        setMap(map) {
            this.set(Property.MAP, map);
        }
        /**
         * Set the offset for this overlay.
         * @param {Array<number>} offset Offset.
         * @observable
         * @api
         */
        setOffset(offset) {
            this.set(Property.OFFSET, offset);
        }
        /**
         * Set the position for this overlay. If the position is `undefined` the
         * overlay is hidden.
         * @param {import("./coordinate.js").Coordinate|undefined} position The spatial point that the overlay
         *     is anchored at.
         * @observable
         * @api
         */
        setPosition(position) {
            this.set(Property.POSITION, position);
        }
        /**
         * Pan the map so that the overlay is entirely visisble in the current viewport
         * (if necessary) using the configured autoPan parameters
         * @protected
         */
        performAutoPan() {
            if (this.autoPan) {
                this.panIntoView(this.autoPan);
            }
        }
        /**
         * Pan the map so that the overlay is entirely visible in the current viewport
         * (if necessary).
         * @param {PanIntoViewOptions=} opt_panIntoViewOptions Options for the pan action
         * @api
         */
        panIntoView(opt_panIntoViewOptions) {
            const map = this.getMap();
            if (!map || !map.getTargetElement() || !this.get(Property.POSITION)) {
                return;
            }
            const mapRect = this.getRect(map.getTargetElement(), map.getSize());
            const element = this.getElement();
            const overlayRect = this.getRect(element, [
                dom_js_3.outerWidth(element),
                dom_js_3.outerHeight(element),
            ]);
            const panIntoViewOptions = opt_panIntoViewOptions || {};
            const myMargin = panIntoViewOptions.margin === undefined ? 20 : panIntoViewOptions.margin;
            if (!extent_js_17.containsExtent(mapRect, overlayRect)) {
                // the overlay is not completely inside the viewport, so pan the map
                const offsetLeft = overlayRect[0] - mapRect[0];
                const offsetRight = mapRect[2] - overlayRect[2];
                const offsetTop = overlayRect[1] - mapRect[1];
                const offsetBottom = mapRect[3] - overlayRect[3];
                const delta = [0, 0];
                if (offsetLeft < 0) {
                    // move map to the left
                    delta[0] = offsetLeft - myMargin;
                }
                else if (offsetRight < 0) {
                    // move map to the right
                    delta[0] = Math.abs(offsetRight) + myMargin;
                }
                if (offsetTop < 0) {
                    // move map up
                    delta[1] = offsetTop - myMargin;
                }
                else if (offsetBottom < 0) {
                    // move map down
                    delta[1] = Math.abs(offsetBottom) + myMargin;
                }
                if (delta[0] !== 0 || delta[1] !== 0) {
                    const center = /** @type {import("./coordinate.js").Coordinate} */ (map
                        .getView()
                        .getCenterInternal());
                    const centerPx = map.getPixelFromCoordinateInternal(center);
                    const newCenterPx = [centerPx[0] + delta[0], centerPx[1] + delta[1]];
                    const panOptions = panIntoViewOptions.animation || {};
                    map.getView().animateInternal({
                        center: map.getCoordinateFromPixelInternal(newCenterPx),
                        duration: panOptions.duration,
                        easing: panOptions.easing,
                    });
                }
            }
        }
        /**
         * Get the extent of an element relative to the document
         * @param {HTMLElement} element The element.
         * @param {import("./size.js").Size} size The size of the element.
         * @return {import("./extent.js").Extent} The extent.
         * @protected
         */
        getRect(element, size) {
            const box = element.getBoundingClientRect();
            const offsetX = box.left + window.pageXOffset;
            const offsetY = box.top + window.pageYOffset;
            return [offsetX, offsetY, offsetX + size[0], offsetY + size[1]];
        }
        /**
         * Set the positioning for this overlay.
         * @param {import("./OverlayPositioning.js").default} positioning how the overlay is
         *     positioned relative to its point on the map.
         * @observable
         * @api
         */
        setPositioning(positioning) {
            this.set(Property.POSITIONING, positioning);
        }
        /**
         * Modify the visibility of the element.
         * @param {boolean} visible Element visibility.
         * @protected
         */
        setVisible(visible) {
            if (this.rendered.visible !== visible) {
                this.element.style.display = visible ? '' : 'none';
                this.rendered.visible = visible;
            }
        }
        /**
         * Update pixel position.
         * @protected
         */
        updatePixelPosition() {
            const map = this.getMap();
            const position = this.getPosition();
            if (!map || !map.isRendered() || !position) {
                this.setVisible(false);
                return;
            }
            const pixel = map.getPixelFromCoordinate(position);
            const mapSize = map.getSize();
            this.updateRenderedPosition(pixel, mapSize);
        }
        /**
         * @param {import("./pixel.js").Pixel} pixel The pixel location.
         * @param {import("./size.js").Size|undefined} mapSize The map size.
         * @protected
         */
        updateRenderedPosition(pixel, mapSize) {
            const style = this.element.style;
            const offset = this.getOffset();
            const positioning = this.getPositioning();
            this.setVisible(true);
            const x = Math.round(pixel[0] + offset[0]) + 'px';
            const y = Math.round(pixel[1] + offset[1]) + 'px';
            let posX = '0%';
            let posY = '0%';
            if (positioning == OverlayPositioning_js_1.default.BOTTOM_RIGHT ||
                positioning == OverlayPositioning_js_1.default.CENTER_RIGHT ||
                positioning == OverlayPositioning_js_1.default.TOP_RIGHT) {
                posX = '-100%';
            }
            else if (positioning == OverlayPositioning_js_1.default.BOTTOM_CENTER ||
                positioning == OverlayPositioning_js_1.default.CENTER_CENTER ||
                positioning == OverlayPositioning_js_1.default.TOP_CENTER) {
                posX = '-50%';
            }
            if (positioning == OverlayPositioning_js_1.default.BOTTOM_LEFT ||
                positioning == OverlayPositioning_js_1.default.BOTTOM_CENTER ||
                positioning == OverlayPositioning_js_1.default.BOTTOM_RIGHT) {
                posY = '-100%';
            }
            else if (positioning == OverlayPositioning_js_1.default.CENTER_LEFT ||
                positioning == OverlayPositioning_js_1.default.CENTER_CENTER ||
                positioning == OverlayPositioning_js_1.default.CENTER_RIGHT) {
                posY = '-50%';
            }
            const transform = `translate(${posX}, ${posY}) translate(${x}, ${y})`;
            if (this.rendered.transform_ != transform) {
                this.rendered.transform_ = transform;
                style.transform = transform;
                // @ts-ignore IE9
                style.msTransform = transform;
            }
        }
        /**
         * returns the options this Overlay has been created with
         * @return {Options} overlay options
         */
        getOptions() {
            return this.options;
        }
    }
    exports.default = Overlay;
});
define("node_modules/ol/src/geom/flat/interpolate", ["require", "exports", "node_modules/ol/src/array", "node_modules/ol/src/math"], function (require, exports, array_js_7, math_js_16) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.lineStringsCoordinateAtM = exports.lineStringCoordinateAtM = exports.interpolatePoint = void 0;
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @param {number} fraction Fraction.
     * @param {Array<number>=} opt_dest Destination.
     * @param {number=} opt_dimension Destination dimension (default is `2`)
     * @return {Array<number>} Destination.
     */
    function interpolatePoint(flatCoordinates, offset, end, stride, fraction, opt_dest, opt_dimension) {
        let o, t;
        const n = (end - offset) / stride;
        if (n === 1) {
            o = offset;
        }
        else if (n === 2) {
            o = offset;
            t = fraction;
        }
        else if (n !== 0) {
            let x1 = flatCoordinates[offset];
            let y1 = flatCoordinates[offset + 1];
            let length = 0;
            const cumulativeLengths = [0];
            for (let i = offset + stride; i < end; i += stride) {
                const x2 = flatCoordinates[i];
                const y2 = flatCoordinates[i + 1];
                length += Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
                cumulativeLengths.push(length);
                x1 = x2;
                y1 = y2;
            }
            const target = fraction * length;
            const index = array_js_7.binarySearch(cumulativeLengths, target);
            if (index < 0) {
                t =
                    (target - cumulativeLengths[-index - 2]) /
                        (cumulativeLengths[-index - 1] - cumulativeLengths[-index - 2]);
                o = offset + (-index - 2) * stride;
            }
            else {
                o = offset + index * stride;
            }
        }
        const dimension = opt_dimension > 1 ? opt_dimension : 2;
        const dest = opt_dest ? opt_dest : new Array(dimension);
        for (let i = 0; i < dimension; ++i) {
            dest[i] =
                o === undefined
                    ? NaN
                    : t === undefined
                        ? flatCoordinates[o + i]
                        : math_js_16.lerp(flatCoordinates[o + i], flatCoordinates[o + stride + i], t);
        }
        return dest;
    }
    exports.interpolatePoint = interpolatePoint;
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @param {number} m M.
     * @param {boolean} extrapolate Extrapolate.
     * @return {import("../../coordinate.js").Coordinate} Coordinate.
     */
    function lineStringCoordinateAtM(flatCoordinates, offset, end, stride, m, extrapolate) {
        if (end == offset) {
            return null;
        }
        let coordinate;
        if (m < flatCoordinates[offset + stride - 1]) {
            if (extrapolate) {
                coordinate = flatCoordinates.slice(offset, offset + stride);
                coordinate[stride - 1] = m;
                return coordinate;
            }
            else {
                return null;
            }
        }
        else if (flatCoordinates[end - 1] < m) {
            if (extrapolate) {
                coordinate = flatCoordinates.slice(end - stride, end);
                coordinate[stride - 1] = m;
                return coordinate;
            }
            else {
                return null;
            }
        }
        // FIXME use O(1) search
        if (m == flatCoordinates[offset + stride - 1]) {
            return flatCoordinates.slice(offset, offset + stride);
        }
        let lo = offset / stride;
        let hi = end / stride;
        while (lo < hi) {
            const mid = (lo + hi) >> 1;
            if (m < flatCoordinates[(mid + 1) * stride - 1]) {
                hi = mid;
            }
            else {
                lo = mid + 1;
            }
        }
        const m0 = flatCoordinates[lo * stride - 1];
        if (m == m0) {
            return flatCoordinates.slice((lo - 1) * stride, (lo - 1) * stride + stride);
        }
        const m1 = flatCoordinates[(lo + 1) * stride - 1];
        const t = (m - m0) / (m1 - m0);
        coordinate = [];
        for (let i = 0; i < stride - 1; ++i) {
            coordinate.push(math_js_16.lerp(flatCoordinates[(lo - 1) * stride + i], flatCoordinates[lo * stride + i], t));
        }
        coordinate.push(m);
        return coordinate;
    }
    exports.lineStringCoordinateAtM = lineStringCoordinateAtM;
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<number>} ends Ends.
     * @param {number} stride Stride.
     * @param {number} m M.
     * @param {boolean} extrapolate Extrapolate.
     * @param {boolean} interpolate Interpolate.
     * @return {import("../../coordinate.js").Coordinate} Coordinate.
     */
    function lineStringsCoordinateAtM(flatCoordinates, offset, ends, stride, m, extrapolate, interpolate) {
        if (interpolate) {
            return lineStringCoordinateAtM(flatCoordinates, offset, ends[ends.length - 1], stride, m, extrapolate);
        }
        let coordinate;
        if (m < flatCoordinates[stride - 1]) {
            if (extrapolate) {
                coordinate = flatCoordinates.slice(0, stride);
                coordinate[stride - 1] = m;
                return coordinate;
            }
            else {
                return null;
            }
        }
        if (flatCoordinates[flatCoordinates.length - 1] < m) {
            if (extrapolate) {
                coordinate = flatCoordinates.slice(flatCoordinates.length - stride);
                coordinate[stride - 1] = m;
                return coordinate;
            }
            else {
                return null;
            }
        }
        for (let i = 0, ii = ends.length; i < ii; ++i) {
            const end = ends[i];
            if (offset == end) {
                continue;
            }
            if (m < flatCoordinates[offset + stride - 1]) {
                return null;
            }
            else if (m <= flatCoordinates[end - 1]) {
                return lineStringCoordinateAtM(flatCoordinates, offset, end, stride, m, false);
            }
            offset = end;
        }
        return null;
    }
    exports.lineStringsCoordinateAtM = lineStringsCoordinateAtM;
});
define("node_modules/ol/src/geom/flat/center", ["require", "exports", "node_modules/ol/src/extent"], function (require, exports, extent_js_18) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.linearRingss = void 0;
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {Array<Array<number>>} endss Endss.
     * @param {number} stride Stride.
     * @return {Array<number>} Flat centers.
     */
    function linearRingss(flatCoordinates, offset, endss, stride) {
        const flatCenters = [];
        let extent = extent_js_18.createEmpty();
        for (let i = 0, ii = endss.length; i < ii; ++i) {
            const ends = endss[i];
            extent = extent_js_18.createOrUpdateFromFlatCoordinates(flatCoordinates, offset, ends[0], stride);
            flatCenters.push((extent[0] + extent[2]) / 2, (extent[1] + extent[3]) / 2);
            offset = ends[ends.length - 1];
        }
        return flatCenters;
    }
    exports.linearRingss = linearRingss;
});
define("node_modules/ol/src/render/Feature", ["require", "exports", "node_modules/ol/src/geom/GeometryType", "node_modules/ol/src/transform", "node_modules/ol/src/extent", "node_modules/ol/src/array", "node_modules/ol/src/geom/flat/interiorpoint", "node_modules/ol/src/proj", "node_modules/ol/src/geom/flat/interpolate", "node_modules/ol/src/geom/flat/center", "node_modules/ol/src/geom/flat/transform"], function (require, exports, GeometryType_js_8, transform_js_5, extent_js_19, array_js_8, interiorpoint_js_2, proj_js_3, interpolate_js_1, center_js_1, transform_js_6) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @type {import("../transform.js").Transform}
     */
    const tmpTransform = transform_js_5.create();
    /**
     * Lightweight, read-only, {@link module:ol/Feature~Feature} and {@link module:ol/geom/Geometry~Geometry} like
     * structure, optimized for vector tile rendering and styling. Geometry access
     * through the API is limited to getting the type and extent of the geometry.
     */
    class RenderFeature {
        /**
         * @param {import("../geom/GeometryType.js").default} type Geometry type.
         * @param {Array<number>} flatCoordinates Flat coordinates. These always need
         *     to be right-handed for polygons.
         * @param {Array<number>|Array<Array<number>>} ends Ends or Endss.
         * @param {Object<string, *>} properties Properties.
         * @param {number|string|undefined} id Feature id.
         */
        constructor(type, flatCoordinates, ends, properties, id) {
            /**
             * @private
             * @type {import("../extent.js").Extent|undefined}
             */
            this.extent_;
            /**
             * @private
             * @type {number|string|undefined}
             */
            this.id_ = id;
            /**
             * @private
             * @type {import("../geom/GeometryType.js").default}
             */
            this.type_ = type;
            /**
             * @private
             * @type {Array<number>}
             */
            this.flatCoordinates_ = flatCoordinates;
            /**
             * @private
             * @type {Array<number>}
             */
            this.flatInteriorPoints_ = null;
            /**
             * @private
             * @type {Array<number>}
             */
            this.flatMidpoints_ = null;
            /**
             * @private
             * @type {Array<number>|Array<Array<number>>}
             */
            this.ends_ = ends;
            /**
             * @private
             * @type {Object<string, *>}
             */
            this.properties_ = properties;
        }
        /**
         * Get a feature property by its key.
         * @param {string} key Key
         * @return {*} Value for the requested key.
         * @api
         */
        get(key) {
            return this.properties_[key];
        }
        /**
         * Get the extent of this feature's geometry.
         * @return {import("../extent.js").Extent} Extent.
         * @api
         */
        getExtent() {
            if (!this.extent_) {
                this.extent_ =
                    this.type_ === GeometryType_js_8.default.POINT
                        ? extent_js_19.createOrUpdateFromCoordinate(this.flatCoordinates_)
                        : extent_js_19.createOrUpdateFromFlatCoordinates(this.flatCoordinates_, 0, this.flatCoordinates_.length, 2);
            }
            return this.extent_;
        }
        /**
         * @return {Array<number>} Flat interior points.
         */
        getFlatInteriorPoint() {
            if (!this.flatInteriorPoints_) {
                const flatCenter = extent_js_19.getCenter(this.getExtent());
                this.flatInteriorPoints_ = interiorpoint_js_2.getInteriorPointOfArray(this.flatCoordinates_, 0, 
                /** @type {Array<number>} */ (this.ends_), 2, flatCenter, 0);
            }
            return this.flatInteriorPoints_;
        }
        /**
         * @return {Array<number>} Flat interior points.
         */
        getFlatInteriorPoints() {
            if (!this.flatInteriorPoints_) {
                const flatCenters = center_js_1.linearRingss(this.flatCoordinates_, 0, 
                /** @type {Array<Array<number>>} */ (this.ends_), 2);
                this.flatInteriorPoints_ = interiorpoint_js_2.getInteriorPointsOfMultiArray(this.flatCoordinates_, 0, 
                /** @type {Array<Array<number>>} */ (this.ends_), 2, flatCenters);
            }
            return this.flatInteriorPoints_;
        }
        /**
         * @return {Array<number>} Flat midpoint.
         */
        getFlatMidpoint() {
            if (!this.flatMidpoints_) {
                this.flatMidpoints_ = interpolate_js_1.interpolatePoint(this.flatCoordinates_, 0, this.flatCoordinates_.length, 2, 0.5);
            }
            return this.flatMidpoints_;
        }
        /**
         * @return {Array<number>} Flat midpoints.
         */
        getFlatMidpoints() {
            if (!this.flatMidpoints_) {
                this.flatMidpoints_ = [];
                const flatCoordinates = this.flatCoordinates_;
                let offset = 0;
                const ends = /** @type {Array<number>} */ (this.ends_);
                for (let i = 0, ii = ends.length; i < ii; ++i) {
                    const end = ends[i];
                    const midpoint = interpolate_js_1.interpolatePoint(flatCoordinates, offset, end, 2, 0.5);
                    array_js_8.extend(this.flatMidpoints_, midpoint);
                    offset = end;
                }
            }
            return this.flatMidpoints_;
        }
        /**
         * Get the feature identifier.  This is a stable identifier for the feature and
         * is set when reading data from a remote source.
         * @return {number|string|undefined} Id.
         * @api
         */
        getId() {
            return this.id_;
        }
        /**
         * @return {Array<number>} Flat coordinates.
         */
        getOrientedFlatCoordinates() {
            return this.flatCoordinates_;
        }
        /**
         * For API compatibility with {@link module:ol/Feature~Feature}, this method is useful when
         * determining the geometry type in style function (see {@link #getType}).
         * @return {RenderFeature} Feature.
         * @api
         */
        getGeometry() {
            return this;
        }
        /**
         * @param {number} squaredTolerance Squared tolerance.
         * @return {RenderFeature} Simplified geometry.
         */
        getSimplifiedGeometry(squaredTolerance) {
            return this;
        }
        /**
         * Get a transformed and simplified version of the geometry.
         * @abstract
         * @param {number} squaredTolerance Squared tolerance.
         * @param {import("../proj.js").TransformFunction} [opt_transform] Optional transform function.
         * @return {RenderFeature} Simplified geometry.
         */
        simplifyTransformed(squaredTolerance, opt_transform) {
            return this;
        }
        /**
         * Get the feature properties.
         * @return {Object<string, *>} Feature properties.
         * @api
         */
        getProperties() {
            return this.properties_;
        }
        /**
         * @return {number} Stride.
         */
        getStride() {
            return 2;
        }
        /**
         * @return {undefined}
         */
        getStyleFunction() {
            return undefined;
        }
        /**
         * Get the type of this feature's geometry.
         * @return {import("../geom/GeometryType.js").default} Geometry type.
         * @api
         */
        getType() {
            return this.type_;
        }
        /**
         * Transform geometry coordinates from tile pixel space to projected.
         * The SRS of the source and destination are expected to be the same.
         *
         * @param {import("../proj.js").ProjectionLike} source The current projection
         * @param {import("../proj.js").ProjectionLike} destination The desired projection.
         */
        transform(source, destination) {
            source = proj_js_3.get(source);
            const pixelExtent = source.getExtent();
            const projectedExtent = source.getWorldExtent();
            const scale = extent_js_19.getHeight(projectedExtent) / extent_js_19.getHeight(pixelExtent);
            transform_js_5.compose(tmpTransform, projectedExtent[0], projectedExtent[3], scale, -scale, 0, 0, 0);
            transform_js_6.transform2D(this.flatCoordinates_, 0, this.flatCoordinates_.length, 2, tmpTransform, this.flatCoordinates_);
        }
        /**
         * @return {Array<number>|Array<Array<number>>} Ends or endss.
         */
        getEnds() {
            return this.ends_;
        }
    }
    RenderFeature.prototype.getEndss = RenderFeature.prototype.getEnds;
    /**
     * @return {Array<number>} Flat coordinates.
     */
    RenderFeature.prototype.getFlatCoordinates =
        RenderFeature.prototype.getOrientedFlatCoordinates;
    exports.default = RenderFeature;
});
define("node_modules/ol/src/style/Image", ["require", "exports", "node_modules/ol/src/util", "node_modules/ol/src/size"], function (require, exports, util_js_9, size_js_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @typedef {Object} Options
     * @property {number} opacity
     * @property {boolean} rotateWithView
     * @property {number} rotation
     * @property {number|import("../size.js").Size} scale
     * @property {Array<number>} displacement
     */
    /**
     * @classdesc
     * A base class used for creating subclasses and not instantiated in
     * apps. Base class for {@link module:ol/style/Icon~Icon}, {@link module:ol/style/Circle~CircleStyle} and
     * {@link module:ol/style/RegularShape~RegularShape}.
     * @abstract
     * @api
     */
    class ImageStyle {
        /**
         * @param {Options} options Options.
         */
        constructor(options) {
            /**
             * @private
             * @type {number}
             */
            this.opacity_ = options.opacity;
            /**
             * @private
             * @type {boolean}
             */
            this.rotateWithView_ = options.rotateWithView;
            /**
             * @private
             * @type {number}
             */
            this.rotation_ = options.rotation;
            /**
             * @private
             * @type {number|import("../size.js").Size}
             */
            this.scale_ = options.scale;
            /**
             * @private
             * @type {import("../size.js").Size}
             */
            this.scaleArray_ = size_js_2.toSize(options.scale);
            /**
             * @private
             * @type {Array<number>}
             */
            this.displacement_ = options.displacement;
        }
        /**
         * Clones the style.
         * @return {ImageStyle} The cloned style.
         * @api
         */
        clone() {
            const scale = this.getScale();
            return new ImageStyle({
                opacity: this.getOpacity(),
                scale: Array.isArray(scale) ? scale.slice() : scale,
                rotation: this.getRotation(),
                rotateWithView: this.getRotateWithView(),
                displacement: this.getDisplacement().slice(),
            });
        }
        /**
         * Get the symbolizer opacity.
         * @return {number} Opacity.
         * @api
         */
        getOpacity() {
            return this.opacity_;
        }
        /**
         * Determine whether the symbolizer rotates with the map.
         * @return {boolean} Rotate with map.
         * @api
         */
        getRotateWithView() {
            return this.rotateWithView_;
        }
        /**
         * Get the symoblizer rotation.
         * @return {number} Rotation.
         * @api
         */
        getRotation() {
            return this.rotation_;
        }
        /**
         * Get the symbolizer scale.
         * @return {number|import("../size.js").Size} Scale.
         * @api
         */
        getScale() {
            return this.scale_;
        }
        /**
         * Get the symbolizer scale array.
         * @return {import("../size.js").Size} Scale array.
         */
        getScaleArray() {
            return this.scaleArray_;
        }
        /**
         * Get the displacement of the shape
         * @return {Array<number>} Shape's center displacement
         * @api
         */
        getDisplacement() {
            return this.displacement_;
        }
        /**
         * Get the anchor point in pixels. The anchor determines the center point for the
         * symbolizer.
         * @abstract
         * @return {Array<number>} Anchor.
         */
        getAnchor() {
            return util_js_9.abstract();
        }
        /**
         * Get the image element for the symbolizer.
         * @abstract
         * @param {number} pixelRatio Pixel ratio.
         * @return {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} Image element.
         */
        getImage(pixelRatio) {
            return util_js_9.abstract();
        }
        /**
         * @abstract
         * @return {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} Image element.
         */
        getHitDetectionImage() {
            return util_js_9.abstract();
        }
        /*
         * Get the image pixel ratio.
         * @param {number} pixelRatio Pixel ratio.
         * */
        getPixelRatio(pixelRatio) {
            return 1;
        }
        /**
         * @abstract
         * @return {import("../ImageState.js").default} Image state.
         */
        getImageState() {
            return util_js_9.abstract();
        }
        /**
         * @abstract
         * @return {import("../size.js").Size} Image size.
         */
        getImageSize() {
            return util_js_9.abstract();
        }
        /**
         * @abstract
         * @return {import("../size.js").Size} Size of the hit-detection image.
         */
        getHitDetectionImageSize() {
            return util_js_9.abstract();
        }
        /**
         * Get the origin of the symbolizer.
         * @abstract
         * @return {Array<number>} Origin.
         */
        getOrigin() {
            return util_js_9.abstract();
        }
        /**
         * Get the size of the symbolizer (in pixels).
         * @abstract
         * @return {import("../size.js").Size} Size.
         */
        getSize() {
            return util_js_9.abstract();
        }
        /**
         * Set the opacity.
         *
         * @param {number} opacity Opacity.
         * @api
         */
        setOpacity(opacity) {
            this.opacity_ = opacity;
        }
        /**
         * Set whether to rotate the style with the view.
         *
         * @param {boolean} rotateWithView Rotate with map.
         * @api
         */
        setRotateWithView(rotateWithView) {
            this.rotateWithView_ = rotateWithView;
        }
        /**
         * Set the rotation.
         *
         * @param {number} rotation Rotation.
         * @api
         */
        setRotation(rotation) {
            this.rotation_ = rotation;
        }
        /**
         * Set the scale.
         *
         * @param {number|import("../size.js").Size} scale Scale.
         * @api
         */
        setScale(scale) {
            this.scale_ = scale;
            this.scaleArray_ = size_js_2.toSize(scale);
        }
        /**
         * @abstract
         * @param {function(import("../events/Event.js").default): void} listener Listener function.
         */
        listenImageChange(listener) {
            util_js_9.abstract();
        }
        /**
         * Load not yet loaded URI.
         * @abstract
         */
        load() {
            util_js_9.abstract();
        }
        /**
         * @abstract
         * @param {function(import("../events/Event.js").default): void} listener Listener function.
         */
        unlistenImageChange(listener) {
            util_js_9.abstract();
        }
    }
    exports.default = ImageStyle;
});
define("node_modules/ol/src/colorlike", ["require", "exports", "node_modules/ol/src/color"], function (require, exports, color_js_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.asColorLike = void 0;
    /**
     * A type accepted by CanvasRenderingContext2D.fillStyle
     * or CanvasRenderingContext2D.strokeStyle.
     * Represents a color, pattern, or gradient. The origin for patterns and
     * gradients as fill style is an increment of 512 css pixels from map coordinate
     * `[0, 0]`. For seamless repeat patterns, width and height of the pattern image
     * must be a factor of two (2, 4, 8, ..., 512).
     *
     * @typedef {string|CanvasPattern|CanvasGradient} ColorLike
     * @api
     */
    /**
     * @param {import("./color.js").Color|ColorLike} color Color.
     * @return {ColorLike} The color as an {@link ol/colorlike~ColorLike}.
     * @api
     */
    function asColorLike(color) {
        if (Array.isArray(color)) {
            return color_js_2.toString(color);
        }
        else {
            return color;
        }
    }
    exports.asColorLike = asColorLike;
});
/**
 * @module ol/style/Fill
 */
define("node_modules/ol/src/style/Fill", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @typedef {Object} Options
     * @property {import("../color.js").Color|import("../colorlike.js").ColorLike} [color=null] A color, gradient or pattern.
     * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats.
     * Default null; if null, the Canvas/renderer default black will be used.
     */
    /**
     * @classdesc
     * Set fill style for vector features.
     * @api
     */
    class Fill {
        /**
         * @param {Options=} opt_options Options.
         */
        constructor(opt_options) {
            const options = opt_options || {};
            /**
             * @private
             * @type {import("../color.js").Color|import("../colorlike.js").ColorLike}
             */
            this.color_ = options.color !== undefined ? options.color : null;
        }
        /**
         * Clones the style. The color is not cloned if it is an {@link module:ol/colorlike~ColorLike}.
         * @return {Fill} The cloned style.
         * @api
         */
        clone() {
            const color = this.getColor();
            return new Fill({
                color: Array.isArray(color) ? color.slice() : color || undefined,
            });
        }
        /**
         * Get the fill color.
         * @return {import("../color.js").Color|import("../colorlike.js").ColorLike} Color.
         * @api
         */
        getColor() {
            return this.color_;
        }
        /**
         * Set the color.
         *
         * @param {import("../color.js").Color|import("../colorlike.js").ColorLike} color Color.
         * @api
         */
        setColor(color) {
            this.color_ = color;
        }
    }
    exports.default = Fill;
});
/**
 * @module ol/style/Stroke
 */
define("node_modules/ol/src/style/Stroke", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @typedef {Object} Options
     * @property {import("../color.js").Color|import("../colorlike.js").ColorLike} [color] A color, gradient or pattern.
     * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats.
     * Default null; if null, the Canvas/renderer default black will be used.
     * @property {CanvasLineCap} [lineCap='round'] Line cap style: `butt`, `round`, or `square`.
     * @property {CanvasLineJoin} [lineJoin='round'] Line join style: `bevel`, `round`, or `miter`.
     * @property {Array<number>} [lineDash] Line dash pattern. Default is `null` (no dash).
     * Please note that Internet Explorer 10 and lower do not support the `setLineDash` method on
     * the `CanvasRenderingContext2D` and therefore this option will have no visual effect in these browsers.
     * @property {number} [lineDashOffset=0] Line dash offset.
     * @property {number} [miterLimit=10] Miter limit.
     * @property {number} [width] Width.
     */
    /**
     * @classdesc
     * Set stroke style for vector features.
     * Note that the defaults given are the Canvas defaults, which will be used if
     * option is not defined. The `get` functions return whatever was entered in
     * the options; they will not return the default.
     * @api
     */
    class Stroke {
        /**
         * @param {Options=} opt_options Options.
         */
        constructor(opt_options) {
            const options = opt_options || {};
            /**
             * @private
             * @type {import("../color.js").Color|import("../colorlike.js").ColorLike}
             */
            this.color_ = options.color !== undefined ? options.color : null;
            /**
             * @private
             * @type {CanvasLineCap|undefined}
             */
            this.lineCap_ = options.lineCap;
            /**
             * @private
             * @type {Array<number>}
             */
            this.lineDash_ = options.lineDash !== undefined ? options.lineDash : null;
            /**
             * @private
             * @type {number|undefined}
             */
            this.lineDashOffset_ = options.lineDashOffset;
            /**
             * @private
             * @type {CanvasLineJoin|undefined}
             */
            this.lineJoin_ = options.lineJoin;
            /**
             * @private
             * @type {number|undefined}
             */
            this.miterLimit_ = options.miterLimit;
            /**
             * @private
             * @type {number|undefined}
             */
            this.width_ = options.width;
        }
        /**
         * Clones the style.
         * @return {Stroke} The cloned style.
         * @api
         */
        clone() {
            const color = this.getColor();
            return new Stroke({
                color: Array.isArray(color) ? color.slice() : color || undefined,
                lineCap: this.getLineCap(),
                lineDash: this.getLineDash() ? this.getLineDash().slice() : undefined,
                lineDashOffset: this.getLineDashOffset(),
                lineJoin: this.getLineJoin(),
                miterLimit: this.getMiterLimit(),
                width: this.getWidth(),
            });
        }
        /**
         * Get the stroke color.
         * @return {import("../color.js").Color|import("../colorlike.js").ColorLike} Color.
         * @api
         */
        getColor() {
            return this.color_;
        }
        /**
         * Get the line cap type for the stroke.
         * @return {CanvasLineCap|undefined} Line cap.
         * @api
         */
        getLineCap() {
            return this.lineCap_;
        }
        /**
         * Get the line dash style for the stroke.
         * @return {Array<number>} Line dash.
         * @api
         */
        getLineDash() {
            return this.lineDash_;
        }
        /**
         * Get the line dash offset for the stroke.
         * @return {number|undefined} Line dash offset.
         * @api
         */
        getLineDashOffset() {
            return this.lineDashOffset_;
        }
        /**
         * Get the line join type for the stroke.
         * @return {CanvasLineJoin|undefined} Line join.
         * @api
         */
        getLineJoin() {
            return this.lineJoin_;
        }
        /**
         * Get the miter limit for the stroke.
         * @return {number|undefined} Miter limit.
         * @api
         */
        getMiterLimit() {
            return this.miterLimit_;
        }
        /**
         * Get the stroke width.
         * @return {number|undefined} Width.
         * @api
         */
        getWidth() {
            return this.width_;
        }
        /**
         * Set the color.
         *
         * @param {import("../color.js").Color|import("../colorlike.js").ColorLike} color Color.
         * @api
         */
        setColor(color) {
            this.color_ = color;
        }
        /**
         * Set the line cap.
         *
         * @param {CanvasLineCap|undefined} lineCap Line cap.
         * @api
         */
        setLineCap(lineCap) {
            this.lineCap_ = lineCap;
        }
        /**
         * Set the line dash.
         *
         * Please note that Internet Explorer 10 and lower [do not support][mdn] the
         * `setLineDash` method on the `CanvasRenderingContext2D` and therefore this
         * property will have no visual effect in these browsers.
         *
         * [mdn]: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash#Browser_compatibility
         *
         * @param {Array<number>} lineDash Line dash.
         * @api
         */
        setLineDash(lineDash) {
            this.lineDash_ = lineDash;
        }
        /**
         * Set the line dash offset.
         *
         * @param {number|undefined} lineDashOffset Line dash offset.
         * @api
         */
        setLineDashOffset(lineDashOffset) {
            this.lineDashOffset_ = lineDashOffset;
        }
        /**
         * Set the line join.
         *
         * @param {CanvasLineJoin|undefined} lineJoin Line join.
         * @api
         */
        setLineJoin(lineJoin) {
            this.lineJoin_ = lineJoin;
        }
        /**
         * Set the miter limit.
         *
         * @param {number|undefined} miterLimit Miter limit.
         * @api
         */
        setMiterLimit(miterLimit) {
            this.miterLimit_ = miterLimit;
        }
        /**
         * Set the width.
         *
         * @param {number|undefined} width Width.
         * @api
         */
        setWidth(width) {
            this.width_ = width;
        }
    }
    exports.default = Stroke;
});
define("node_modules/ol/src/render/canvas", ["require", "exports", "node_modules/ol/src/Object", "node_modules/ol/src/events/Target", "node_modules/ol/src/has", "node_modules/ol/src/obj", "node_modules/ol/src/dom", "node_modules/ol/src/css", "node_modules/ol/src/transform"], function (require, exports, Object_js_9, Target_js_6, has_js_4, obj_js_9, dom_js_4, css_js_2, transform_js_7) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createTransformString = exports.drawImageOrLabel = exports.rotateAtOffset = exports.measureTextWidths = exports.measureAndCacheTextWidth = exports.measureTextWidth = exports.measureTextHeight = exports.registerFont = exports.textHeights = exports.labelCache = exports.checkedFonts = exports.defaultLineWidth = exports.defaultPadding = exports.defaultTextBaseline = exports.defaultTextAlign = exports.defaultStrokeStyle = exports.defaultMiterLimit = exports.defaultLineJoin = exports.defaultLineDashOffset = exports.defaultLineDash = exports.defaultLineCap = exports.defaultFillStyle = exports.defaultFont = void 0;
    /**
     * @typedef {Object} FillState
     * @property {import("../colorlike.js").ColorLike} fillStyle
     */
    /**
     * @typedef Label
     * @property {number} width
     * @property {number} height
     * @property {Array<string|number>} contextInstructions
     */
    /**
     * @typedef {Object} FillStrokeState
     * @property {import("../colorlike.js").ColorLike} [currentFillStyle]
     * @property {import("../colorlike.js").ColorLike} [currentStrokeStyle]
     * @property {CanvasLineCap} [currentLineCap]
     * @property {Array<number>} currentLineDash
     * @property {number} [currentLineDashOffset]
     * @property {CanvasLineJoin} [currentLineJoin]
     * @property {number} [currentLineWidth]
     * @property {number} [currentMiterLimit]
     * @property {number} [lastStroke]
     * @property {import("../colorlike.js").ColorLike} [fillStyle]
     * @property {import("../colorlike.js").ColorLike} [strokeStyle]
     * @property {CanvasLineCap} [lineCap]
     * @property {Array<number>} lineDash
     * @property {number} [lineDashOffset]
     * @property {CanvasLineJoin} [lineJoin]
     * @property {number} [lineWidth]
     * @property {number} [miterLimit]
     */
    /**
     * @typedef {Object} StrokeState
     * @property {CanvasLineCap} lineCap
     * @property {Array<number>} lineDash
     * @property {number} lineDashOffset
     * @property {CanvasLineJoin} lineJoin
     * @property {number} lineWidth
     * @property {number} miterLimit
     * @property {import("../colorlike.js").ColorLike} strokeStyle
     */
    /**
     * @typedef {Object} TextState
     * @property {string} font
     * @property {string} [textAlign]
     * @property {string} textBaseline
     * @property {string} [placement]
     * @property {number} [maxAngle]
     * @property {boolean} [overflow]
     * @property {import("../style/Fill.js").default} [backgroundFill]
     * @property {import("../style/Stroke.js").default} [backgroundStroke]
     * @property {import("../size.js").Size} [scale]
     * @property {Array<number>} [padding]
     */
    /**
     * Container for decluttered replay instructions that need to be rendered or
     * omitted together, i.e. when styles render both an image and text, or for the
     * characters that form text along lines. The basic elements of this array are
     * `[minX, minY, maxX, maxY, count]`, where the first four entries are the
     * rendered extent of the group in pixel space. `count` is the number of styles
     * in the group, i.e. 2 when an image and a text are grouped, or 1 otherwise.
     * In addition to these four elements, declutter instruction arrays (i.e. the
     * arguments to {@link module:ol/render/canvas~drawImage} are appended to the array.
     * @typedef {Array<*>} DeclutterGroup
     */
    /**
     * Declutter groups for support of multi geometries.
     * @typedef {Array<DeclutterGroup>} DeclutterGroups
     */
    /**
     * @const
     * @type {string}
     */
    exports.defaultFont = '10px sans-serif';
    /**
     * @const
     * @type {import("../colorlike.js").ColorLike}
     */
    exports.defaultFillStyle = '#000';
    /**
     * @const
     * @type {CanvasLineCap}
     */
    exports.defaultLineCap = 'round';
    /**
     * @const
     * @type {Array<number>}
     */
    exports.defaultLineDash = [];
    /**
     * @const
     * @type {number}
     */
    exports.defaultLineDashOffset = 0;
    /**
     * @const
     * @type {CanvasLineJoin}
     */
    exports.defaultLineJoin = 'round';
    /**
     * @const
     * @type {number}
     */
    exports.defaultMiterLimit = 10;
    /**
     * @const
     * @type {import("../colorlike.js").ColorLike}
     */
    exports.defaultStrokeStyle = '#000';
    /**
     * @const
     * @type {string}
     */
    exports.defaultTextAlign = 'center';
    /**
     * @const
     * @type {string}
     */
    exports.defaultTextBaseline = 'middle';
    /**
     * @const
     * @type {Array<number>}
     */
    exports.defaultPadding = [0, 0, 0, 0];
    /**
     * @const
     * @type {number}
     */
    exports.defaultLineWidth = 1;
    /**
     * @type {BaseObject}
     */
    exports.checkedFonts = new Object_js_9.default();
    /**
     * The label cache for text rendering. To change the default cache size of 2048
     * entries, use {@link module:ol/structs/LRUCache#setSize}.
     * Deprecated - there is no label cache any more.
     * @type {?}
     * @api
     * @deprecated
     */
    exports.labelCache = new Target_js_6.default();
    exports.labelCache.setSize = function () {
        console.warn('labelCache is deprecated.'); //eslint-disable-line
    };
    /**
     * @type {CanvasRenderingContext2D}
     */
    let measureContext = null;
    /**
     * @type {string}
     */
    let measureFont;
    /**
     * @type {!Object<string, number>}
     */
    exports.textHeights = {};
    /**
     * Clears the label cache when a font becomes available.
     * @param {string} fontSpec CSS font spec.
     */
    exports.registerFont = (function () {
        const retries = 100;
        const size = '32px ';
        const referenceFonts = ['monospace', 'serif'];
        const len = referenceFonts.length;
        const text = 'wmytzilWMYTZIL@#/&?$%10\uF013';
        let interval, referenceWidth;
        /**
         * @param {string} fontStyle Css font-style
         * @param {string} fontWeight Css font-weight
         * @param {*} fontFamily Css font-family
         * @return {boolean} Font with style and weight is available
         */
        function isAvailable(fontStyle, fontWeight, fontFamily) {
            let available = true;
            for (let i = 0; i < len; ++i) {
                const referenceFont = referenceFonts[i];
                referenceWidth = measureTextWidth(fontStyle + ' ' + fontWeight + ' ' + size + referenceFont, text);
                if (fontFamily != referenceFont) {
                    const width = measureTextWidth(fontStyle +
                        ' ' +
                        fontWeight +
                        ' ' +
                        size +
                        fontFamily +
                        ',' +
                        referenceFont, text);
                    // If width and referenceWidth are the same, then the fallback was used
                    // instead of the font we wanted, so the font is not available.
                    available = available && width != referenceWidth;
                }
            }
            if (available) {
                return true;
            }
            return false;
        }
        function check() {
            let done = true;
            const fonts = exports.checkedFonts.getKeys();
            for (let i = 0, ii = fonts.length; i < ii; ++i) {
                const font = fonts[i];
                if (exports.checkedFonts.get(font) < retries) {
                    if (isAvailable.apply(this, font.split('\n'))) {
                        obj_js_9.clear(exports.textHeights);
                        // Make sure that loaded fonts are picked up by Safari
                        measureContext = null;
                        measureFont = undefined;
                        exports.checkedFonts.set(font, retries);
                    }
                    else {
                        exports.checkedFonts.set(font, exports.checkedFonts.get(font) + 1, true);
                        done = false;
                    }
                }
            }
            if (done) {
                clearInterval(interval);
                interval = undefined;
            }
        }
        return function (fontSpec) {
            const font = css_js_2.getFontParameters(fontSpec);
            if (!font) {
                return;
            }
            const families = font.families;
            for (let i = 0, ii = families.length; i < ii; ++i) {
                const family = families[i];
                const key = font.style + '\n' + font.weight + '\n' + family;
                if (exports.checkedFonts.get(key) === undefined) {
                    exports.checkedFonts.set(key, retries, true);
                    if (!isAvailable(font.style, font.weight, family)) {
                        exports.checkedFonts.set(key, 0, true);
                        if (interval === undefined) {
                            interval = setInterval(check, 32);
                        }
                    }
                }
            }
        };
    })();
    /**
     * @param {string} font Font to use for measuring.
     * @return {import("../size.js").Size} Measurement.
     */
    exports.measureTextHeight = (function () {
        /**
         * @type {HTMLDivElement}
         */
        let div;
        const heights = exports.textHeights;
        return function (fontSpec) {
            let height = heights[fontSpec];
            if (height == undefined) {
                if (has_js_4.WORKER_OFFSCREEN_CANVAS) {
                    const font = css_js_2.getFontParameters(fontSpec);
                    const metrics = measureText(fontSpec, 'Žg');
                    const lineHeight = isNaN(Number(font.lineHeight))
                        ? 1.2
                        : Number(font.lineHeight);
                    exports.textHeights[fontSpec] =
                        lineHeight *
                            (metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent);
                }
                else {
                    if (!div) {
                        div = document.createElement('div');
                        div.innerHTML = 'M';
                        div.style.margin = '0 !important';
                        div.style.padding = '0 !important';
                        div.style.position = 'absolute !important';
                        div.style.left = '-99999px !important';
                    }
                    div.style.font = fontSpec;
                    document.body.appendChild(div);
                    height = div.offsetHeight;
                    heights[fontSpec] = height;
                    document.body.removeChild(div);
                }
            }
            return height;
        };
    })();
    /**
     * @param {string} font Font.
     * @param {string} text Text.
     * @return {TextMetrics} Text metrics.
     */
    function measureText(font, text) {
        if (!measureContext) {
            measureContext = dom_js_4.createCanvasContext2D(1, 1);
        }
        if (font != measureFont) {
            measureContext.font = font;
            measureFont = measureContext.font;
        }
        return measureContext.measureText(text);
    }
    /**
     * @param {string} font Font.
     * @param {string} text Text.
     * @return {number} Width.
     */
    function measureTextWidth(font, text) {
        return measureText(font, text).width;
    }
    exports.measureTextWidth = measureTextWidth;
    /**
     * Measure text width using a cache.
     * @param {string} font The font.
     * @param {string} text The text to measure.
     * @param {Object<string, number>} cache A lookup of cached widths by text.
     * @returns {number} The text width.
     */
    function measureAndCacheTextWidth(font, text, cache) {
        if (text in cache) {
            return cache[text];
        }
        const width = measureTextWidth(font, text);
        cache[text] = width;
        return width;
    }
    exports.measureAndCacheTextWidth = measureAndCacheTextWidth;
    /**
     * @param {string} font Font to use for measuring.
     * @param {Array<string>} lines Lines to measure.
     * @param {Array<number>} widths Array will be populated with the widths of
     * each line.
     * @return {number} Width of the whole text.
     */
    function measureTextWidths(font, lines, widths) {
        const numLines = lines.length;
        let width = 0;
        for (let i = 0; i < numLines; ++i) {
            const currentWidth = measureTextWidth(font, lines[i]);
            width = Math.max(width, currentWidth);
            widths.push(currentWidth);
        }
        return width;
    }
    exports.measureTextWidths = measureTextWidths;
    /**
     * @param {CanvasRenderingContext2D} context Context.
     * @param {number} rotation Rotation.
     * @param {number} offsetX X offset.
     * @param {number} offsetY Y offset.
     */
    function rotateAtOffset(context, rotation, offsetX, offsetY) {
        if (rotation !== 0) {
            context.translate(offsetX, offsetY);
            context.rotate(rotation);
            context.translate(-offsetX, -offsetY);
        }
    }
    exports.rotateAtOffset = rotateAtOffset;
    /**
     * @param {CanvasRenderingContext2D} context Context.
     * @param {import("../transform.js").Transform|null} transform Transform.
     * @param {number} opacity Opacity.
     * @param {Label|HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} labelOrImage Label.
     * @param {number} originX Origin X.
     * @param {number} originY Origin Y.
     * @param {number} w Width.
     * @param {number} h Height.
     * @param {number} x X.
     * @param {number} y Y.
     * @param {import("../size.js").Size} scale Scale.
     */
    function drawImageOrLabel(context, transform, opacity, labelOrImage, originX, originY, w, h, x, y, scale) {
        context.save();
        if (opacity !== 1) {
            context.globalAlpha *= opacity;
        }
        if (transform) {
            context.setTransform.apply(context, transform);
        }
        if ( /** @type {*} */(labelOrImage).contextInstructions) {
            // label
            context.translate(x, y);
            context.scale(scale[0], scale[1]);
            executeLabelInstructions(/** @type {Label} */ (labelOrImage), context);
        }
        else if (scale[0] < 0 || scale[1] < 0) {
            // flipped image
            context.translate(x, y);
            context.scale(scale[0], scale[1]);
            context.drawImage(
            /** @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} */ (labelOrImage), originX, originY, w, h, 0, 0, w, h);
        }
        else {
            // if image not flipped translate and scale can be avoided
            context.drawImage(
            /** @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} */ (labelOrImage), originX, originY, w, h, x, y, w * scale[0], h * scale[1]);
        }
        context.restore();
    }
    exports.drawImageOrLabel = drawImageOrLabel;
    /**
     * @param {Label} label Label.
     * @param {CanvasRenderingContext2D} context Context.
     */
    function executeLabelInstructions(label, context) {
        const contextInstructions = label.contextInstructions;
        for (let i = 0, ii = contextInstructions.length; i < ii; i += 2) {
            if (Array.isArray(contextInstructions[i + 1])) {
                context[contextInstructions[i]].apply(context, contextInstructions[i + 1]);
            }
            else {
                context[contextInstructions[i]] = contextInstructions[i + 1];
            }
        }
    }
    /**
     * @type {HTMLCanvasElement}
     * @private
     */
    let createTransformStringCanvas = null;
    /**
     * @param {import("../transform.js").Transform} transform Transform.
     * @return {string} CSS transform.
     */
    function createTransformString(transform) {
        if (has_js_4.WORKER_OFFSCREEN_CANVAS) {
            return transform_js_7.toString(transform);
        }
        else {
            if (!createTransformStringCanvas) {
                createTransformStringCanvas = dom_js_4.createCanvasContext2D(1, 1).canvas;
            }
            createTransformStringCanvas.style.transform = transform_js_7.toString(transform);
            return createTransformStringCanvas.style.transform;
        }
    }
    exports.createTransformString = createTransformString;
});
/**
 * @module ol/style/RegularShape
 */
define("node_modules/ol/src/style/RegularShape", ["require", "exports", "node_modules/ol/src/ImageState", "node_modules/ol/src/style/Image", "node_modules/ol/src/color", "node_modules/ol/src/colorlike", "node_modules/ol/src/dom", "node_modules/ol/src/render/canvas"], function (require, exports, ImageState_js_3, Image_js_2, color_js_3, colorlike_js_1, dom_js_5, canvas_js_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Specify radius for regular polygons, or radius1 and radius2 for stars.
     * @typedef {Object} Options
     * @property {import("./Fill.js").default} [fill] Fill style.
     * @property {number} points Number of points for stars and regular polygons. In case of a polygon, the number of points
     * is the number of sides.
     * @property {number} [radius] Radius of a regular polygon.
     * @property {number} [radius1] Outer radius of a star.
     * @property {number} [radius2] Inner radius of a star.
     * @property {number} [angle=0] Shape's angle in radians. A value of 0 will have one of the shape's point facing up.
     * @property {Array<number>} [displacement=[0,0]] Displacement of the shape
     * @property {import("./Stroke.js").default} [stroke] Stroke style.
     * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).
     * @property {boolean} [rotateWithView=false] Whether to rotate the shape with the view.
     */
    /**
     * @typedef {Object} RenderOptions
     * @property {import("../colorlike.js").ColorLike} [strokeStyle]
     * @property {number} strokeWidth
     * @property {number} size
     * @property {CanvasLineCap} lineCap
     * @property {Array<number>} lineDash
     * @property {number} lineDashOffset
     * @property {CanvasLineJoin} lineJoin
     * @property {number} miterLimit
     */
    /**
     * @classdesc
     * Set regular shape style for vector features. The resulting shape will be
     * a regular polygon when `radius` is provided, or a star when `radius1` and
     * `radius2` are provided.
     * @api
     */
    class RegularShape extends Image_js_2.default {
        /**
         * @param {Options} options Options.
         */
        constructor(options) {
            /**
             * @type {boolean}
             */
            const rotateWithView = options.rotateWithView !== undefined ? options.rotateWithView : false;
            super({
                opacity: 1,
                rotateWithView: rotateWithView,
                rotation: options.rotation !== undefined ? options.rotation : 0,
                scale: 1,
                displacement: options.displacement !== undefined ? options.displacement : [0, 0],
            });
            /**
             * @private
             * @type {Object<number, HTMLCanvasElement>}
             */
            this.canvas_ = {};
            /**
             * @private
             * @type {HTMLCanvasElement}
             */
            this.hitDetectionCanvas_ = null;
            /**
             * @private
             * @type {import("./Fill.js").default}
             */
            this.fill_ = options.fill !== undefined ? options.fill : null;
            /**
             * @private
             * @type {Array<number>}
             */
            this.origin_ = [0, 0];
            /**
             * @private
             * @type {number}
             */
            this.points_ = options.points;
            /**
             * @protected
             * @type {number}
             */
            this.radius_ =
                options.radius !== undefined ? options.radius : options.radius1;
            /**
             * @private
             * @type {number|undefined}
             */
            this.radius2_ = options.radius2;
            /**
             * @private
             * @type {number}
             */
            this.angle_ = options.angle !== undefined ? options.angle : 0;
            /**
             * @private
             * @type {import("./Stroke.js").default}
             */
            this.stroke_ = options.stroke !== undefined ? options.stroke : null;
            /**
             * @private
             * @type {Array<number>}
             */
            this.anchor_ = null;
            /**
             * @private
             * @type {import("../size.js").Size}
             */
            this.size_ = null;
            /**
             * @private
             * @type {import("../size.js").Size}
             */
            this.imageSize_ = null;
            /**
             * @private
             * @type {import("../size.js").Size}
             */
            this.hitDetectionImageSize_ = null;
            this.render();
        }
        /**
         * Clones the style.
         * @return {RegularShape} The cloned style.
         * @api
         */
        clone() {
            const style = new RegularShape({
                fill: this.getFill() ? this.getFill().clone() : undefined,
                points: this.getPoints(),
                radius: this.getRadius(),
                radius2: this.getRadius2(),
                angle: this.getAngle(),
                stroke: this.getStroke() ? this.getStroke().clone() : undefined,
                rotation: this.getRotation(),
                rotateWithView: this.getRotateWithView(),
                displacement: this.getDisplacement().slice(),
            });
            style.setOpacity(this.getOpacity());
            style.setScale(this.getScale());
            return style;
        }
        /**
         * Get the anchor point in pixels. The anchor determines the center point for the
         * symbolizer.
         * @return {Array<number>} Anchor.
         * @api
         */
        getAnchor() {
            return this.anchor_;
        }
        /**
         * Get the angle used in generating the shape.
         * @return {number} Shape's rotation in radians.
         * @api
         */
        getAngle() {
            return this.angle_;
        }
        /**
         * Get the fill style for the shape.
         * @return {import("./Fill.js").default} Fill style.
         * @api
         */
        getFill() {
            return this.fill_;
        }
        /**
         * @return {HTMLCanvasElement} Image element.
         */
        getHitDetectionImage() {
            if (!this.hitDetectionCanvas_) {
                const renderOptions = this.createRenderOptions();
                this.createHitDetectionCanvas_(renderOptions);
            }
            return this.hitDetectionCanvas_;
        }
        /**
         * Get the image icon.
         * @param {number} pixelRatio Pixel ratio.
         * @return {HTMLCanvasElement} Image or Canvas element.
         * @api
         */
        getImage(pixelRatio) {
            if (!this.canvas_[pixelRatio || 1]) {
                const renderOptions = this.createRenderOptions();
                const context = dom_js_5.createCanvasContext2D(renderOptions.size * pixelRatio || 1, renderOptions.size * pixelRatio || 1);
                this.draw_(renderOptions, context, 0, 0, pixelRatio || 1);
                this.canvas_[pixelRatio || 1] = context.canvas;
            }
            return this.canvas_[pixelRatio || 1];
        }
        /*
         * Get the image pixel ratio.
         * @param {number} pixelRatio Pixel ratio.
         * */
        getPixelRatio(pixelRatio) {
            return pixelRatio;
        }
        /**
         * @return {import("../size.js").Size} Image size.
         */
        getImageSize() {
            return this.imageSize_;
        }
        /**
         * @return {import("../size.js").Size} Size of the hit-detection image.
         */
        getHitDetectionImageSize() {
            return this.hitDetectionImageSize_;
        }
        /**
         * @return {import("../ImageState.js").default} Image state.
         */
        getImageState() {
            return ImageState_js_3.default.LOADED;
        }
        /**
         * Get the origin of the symbolizer.
         * @return {Array<number>} Origin.
         * @api
         */
        getOrigin() {
            return this.origin_;
        }
        /**
         * Get the number of points for generating the shape.
         * @return {number} Number of points for stars and regular polygons.
         * @api
         */
        getPoints() {
            return this.points_;
        }
        /**
         * Get the (primary) radius for the shape.
         * @return {number} Radius.
         * @api
         */
        getRadius() {
            return this.radius_;
        }
        /**
         * Get the secondary radius for the shape.
         * @return {number|undefined} Radius2.
         * @api
         */
        getRadius2() {
            return this.radius2_;
        }
        /**
         * Get the size of the symbolizer (in pixels).
         * @return {import("../size.js").Size} Size.
         * @api
         */
        getSize() {
            return this.size_;
        }
        /**
         * Get the stroke style for the shape.
         * @return {import("./Stroke.js").default} Stroke style.
         * @api
         */
        getStroke() {
            return this.stroke_;
        }
        /**
         * @param {function(import("../events/Event.js").default): void} listener Listener function.
         */
        listenImageChange(listener) { }
        /**
         * Load not yet loaded URI.
         */
        load() { }
        /**
         * @param {function(import("../events/Event.js").default): void} listener Listener function.
         */
        unlistenImageChange(listener) { }
        /**
         * @returns {RenderOptions}  The render options
         * @protected
         */
        createRenderOptions() {
            let lineCap = canvas_js_1.defaultLineCap;
            let lineJoin = canvas_js_1.defaultLineJoin;
            let miterLimit = 0;
            let lineDash = null;
            let lineDashOffset = 0;
            let strokeStyle;
            let strokeWidth = 0;
            if (this.stroke_) {
                strokeStyle = this.stroke_.getColor();
                if (strokeStyle === null) {
                    strokeStyle = canvas_js_1.defaultStrokeStyle;
                }
                strokeStyle = colorlike_js_1.asColorLike(strokeStyle);
                strokeWidth = this.stroke_.getWidth();
                if (strokeWidth === undefined) {
                    strokeWidth = canvas_js_1.defaultLineWidth;
                }
                lineDash = this.stroke_.getLineDash();
                lineDashOffset = this.stroke_.getLineDashOffset();
                lineJoin = this.stroke_.getLineJoin();
                if (lineJoin === undefined) {
                    lineJoin = canvas_js_1.defaultLineJoin;
                }
                lineCap = this.stroke_.getLineCap();
                if (lineCap === undefined) {
                    lineCap = canvas_js_1.defaultLineCap;
                }
                miterLimit = this.stroke_.getMiterLimit();
                if (miterLimit === undefined) {
                    miterLimit = canvas_js_1.defaultMiterLimit;
                }
            }
            const size = 2 * (this.radius_ + strokeWidth) + 1;
            return {
                strokeStyle: strokeStyle,
                strokeWidth: strokeWidth,
                size: size,
                lineCap: lineCap,
                lineDash: lineDash,
                lineDashOffset: lineDashOffset,
                lineJoin: lineJoin,
                miterLimit: miterLimit,
            };
        }
        /**
         * @protected
         */
        render() {
            const renderOptions = this.createRenderOptions();
            const context = dom_js_5.createCanvasContext2D(renderOptions.size, renderOptions.size);
            this.draw_(renderOptions, context, 0, 0, 1);
            this.canvas_[1] = context.canvas;
            // canvas.width and height are rounded to the closest integer
            const size = context.canvas.width;
            const imageSize = size;
            const displacement = this.getDisplacement();
            this.hitDetectionImageSize_ = [renderOptions.size, renderOptions.size];
            this.createHitDetectionCanvas_(renderOptions);
            this.anchor_ = [size / 2 - displacement[0], size / 2 + displacement[1]];
            this.size_ = [size, size];
            this.imageSize_ = [imageSize, imageSize];
        }
        /**
         * @private
         * @param {RenderOptions} renderOptions Render options.
         * @param {CanvasRenderingContext2D} context The rendering context.
         * @param {number} x The origin for the symbol (x).
         * @param {number} y The origin for the symbol (y).
         * @param {number} pixelRatio The pixel ratio.
         */
        draw_(renderOptions, context, x, y, pixelRatio) {
            let i, angle0, radiusC;
            // reset transform
            context.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);
            // then move to (x, y)
            context.translate(x, y);
            context.beginPath();
            let points = this.points_;
            if (points === Infinity) {
                context.arc(renderOptions.size / 2, renderOptions.size / 2, this.radius_, 0, 2 * Math.PI, true);
            }
            else {
                const radius2 = this.radius2_ !== undefined ? this.radius2_ : this.radius_;
                if (radius2 !== this.radius_) {
                    points = 2 * points;
                }
                for (i = 0; i <= points; i++) {
                    angle0 = (i * 2 * Math.PI) / points - Math.PI / 2 + this.angle_;
                    radiusC = i % 2 === 0 ? this.radius_ : radius2;
                    context.lineTo(renderOptions.size / 2 + radiusC * Math.cos(angle0), renderOptions.size / 2 + radiusC * Math.sin(angle0));
                }
            }
            if (this.fill_) {
                let color = this.fill_.getColor();
                if (color === null) {
                    color = canvas_js_1.defaultFillStyle;
                }
                context.fillStyle = colorlike_js_1.asColorLike(color);
                context.fill();
            }
            if (this.stroke_) {
                context.strokeStyle = renderOptions.strokeStyle;
                context.lineWidth = renderOptions.strokeWidth;
                if (context.setLineDash && renderOptions.lineDash) {
                    context.setLineDash(renderOptions.lineDash);
                    context.lineDashOffset = renderOptions.lineDashOffset;
                }
                context.lineCap = renderOptions.lineCap;
                context.lineJoin = renderOptions.lineJoin;
                context.miterLimit = renderOptions.miterLimit;
                context.stroke();
            }
            context.closePath();
        }
        /**
         * @private
         * @param {RenderOptions} renderOptions Render options.
         */
        createHitDetectionCanvas_(renderOptions) {
            this.hitDetectionCanvas_ = this.getImage(1);
            if (this.fill_) {
                let color = this.fill_.getColor();
                // determine if fill is transparent (or pattern or gradient)
                let opacity = 0;
                if (typeof color === 'string') {
                    color = color_js_3.asArray(color);
                }
                if (color === null) {
                    opacity = 1;
                }
                else if (Array.isArray(color)) {
                    opacity = color.length === 4 ? color[3] : 1;
                }
                if (opacity === 0) {
                    // if a transparent fill style is set, create an extra hit-detection image
                    // with a default fill style
                    const context = dom_js_5.createCanvasContext2D(renderOptions.size, renderOptions.size);
                    this.hitDetectionCanvas_ = context.canvas;
                    this.drawHitDetectionCanvas_(renderOptions, context, 0, 0);
                }
            }
        }
        /**
         * @private
         * @param {RenderOptions} renderOptions Render options.
         * @param {CanvasRenderingContext2D} context The context.
         * @param {number} x The origin for the symbol (x).
         * @param {number} y The origin for the symbol (y).
         */
        drawHitDetectionCanvas_(renderOptions, context, x, y) {
            // move to (x, y)
            context.translate(x, y);
            context.beginPath();
            let points = this.points_;
            if (points === Infinity) {
                context.arc(renderOptions.size / 2, renderOptions.size / 2, this.radius_, 0, 2 * Math.PI, true);
            }
            else {
                const radius2 = this.radius2_ !== undefined ? this.radius2_ : this.radius_;
                if (radius2 !== this.radius_) {
                    points = 2 * points;
                }
                let i, radiusC, angle0;
                for (i = 0; i <= points; i++) {
                    angle0 = (i * 2 * Math.PI) / points - Math.PI / 2 + this.angle_;
                    radiusC = i % 2 === 0 ? this.radius_ : radius2;
                    context.lineTo(renderOptions.size / 2 + radiusC * Math.cos(angle0), renderOptions.size / 2 + radiusC * Math.sin(angle0));
                }
            }
            context.fillStyle = canvas_js_1.defaultFillStyle;
            context.fill();
            if (this.stroke_) {
                context.strokeStyle = renderOptions.strokeStyle;
                context.lineWidth = renderOptions.strokeWidth;
                if (renderOptions.lineDash) {
                    context.setLineDash(renderOptions.lineDash);
                    context.lineDashOffset = renderOptions.lineDashOffset;
                }
                context.stroke();
            }
            context.closePath();
        }
    }
    exports.default = RegularShape;
});
/**
 * @module ol/style/Circle
 */
define("node_modules/ol/src/style/Circle", ["require", "exports", "node_modules/ol/src/style/RegularShape"], function (require, exports, RegularShape_js_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @typedef {Object} Options
     * @property {import("./Fill.js").default} [fill] Fill style.
     * @property {number} radius Circle radius.
     * @property {import("./Stroke.js").default} [stroke] Stroke style.
     * @property {Array<number>} [displacement=[0,0]] displacement
     */
    /**
     * @classdesc
     * Set circle style for vector features.
     * @api
     */
    class CircleStyle extends RegularShape_js_1.default {
        /**
         * @param {Options=} opt_options Options.
         */
        constructor(opt_options) {
            const options = opt_options ? opt_options : {};
            super({
                points: Infinity,
                fill: options.fill,
                radius: options.radius,
                stroke: options.stroke,
                displacement: options.displacement !== undefined ? options.displacement : [0, 0],
            });
        }
        /**
         * Clones the style.
         * @return {CircleStyle} The cloned style.
         * @api
         */
        clone() {
            const style = new CircleStyle({
                fill: this.getFill() ? this.getFill().clone() : undefined,
                stroke: this.getStroke() ? this.getStroke().clone() : undefined,
                radius: this.getRadius(),
                displacement: this.getDisplacement().slice(),
            });
            style.setOpacity(this.getOpacity());
            style.setScale(this.getScale());
            return style;
        }
        /**
         * Set the circle radius.
         *
         * @param {number} radius Circle radius.
         * @api
         */
        setRadius(radius) {
            this.radius_ = radius;
            this.render();
        }
    }
    exports.default = CircleStyle;
});
/**
 * @module ol/geom/flat/length
 */
define("node_modules/ol/src/geom/flat/length", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.linearRingLength = exports.lineStringLength = void 0;
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @return {number} Length.
     */
    function lineStringLength(flatCoordinates, offset, end, stride) {
        let x1 = flatCoordinates[offset];
        let y1 = flatCoordinates[offset + 1];
        let length = 0;
        for (let i = offset + stride; i < end; i += stride) {
            const x2 = flatCoordinates[i];
            const y2 = flatCoordinates[i + 1];
            length += Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
            x1 = x2;
            y1 = y2;
        }
        return length;
    }
    exports.lineStringLength = lineStringLength;
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @return {number} Perimeter.
     */
    function linearRingLength(flatCoordinates, offset, end, stride) {
        let perimeter = lineStringLength(flatCoordinates, offset, end, stride);
        const dx = flatCoordinates[end - stride] - flatCoordinates[offset];
        const dy = flatCoordinates[end - stride + 1] - flatCoordinates[offset + 1];
        perimeter += Math.sqrt(dx * dx + dy * dy);
        return perimeter;
    }
    exports.linearRingLength = linearRingLength;
});
define("node_modules/ol/src/geom/LineString", ["require", "exports", "node_modules/ol/src/geom/GeometryLayout", "node_modules/ol/src/geom/GeometryType", "node_modules/ol/src/geom/SimpleGeometry", "node_modules/ol/src/geom/flat/closest", "node_modules/ol/src/extent", "node_modules/ol/src/geom/flat/deflate", "node_modules/ol/src/geom/flat/simplify", "node_modules/ol/src/array", "node_modules/ol/src/geom/flat/segments", "node_modules/ol/src/geom/flat/inflate", "node_modules/ol/src/geom/flat/interpolate", "node_modules/ol/src/geom/flat/intersectsextent", "node_modules/ol/src/geom/flat/length"], function (require, exports, GeometryLayout_js_4, GeometryType_js_9, SimpleGeometry_js_5, closest_js_3, extent_js_20, deflate_js_5, simplify_js_3, array_js_9, segments_js_2, inflate_js_3, interpolate_js_2, intersectsextent_js_2, length_js_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @classdesc
     * Linestring geometry.
     *
     * @api
     */
    class LineString extends SimpleGeometry_js_5.default {
        /**
         * @param {Array<import("../coordinate.js").Coordinate>|Array<number>} coordinates Coordinates.
         *     For internal use, flat coordinates in combination with `opt_layout` are also accepted.
         * @param {import("./GeometryLayout.js").default=} opt_layout Layout.
         */
        constructor(coordinates, opt_layout) {
            super();
            /**
             * @private
             * @type {import("../coordinate.js").Coordinate}
             */
            this.flatMidpoint_ = null;
            /**
             * @private
             * @type {number}
             */
            this.flatMidpointRevision_ = -1;
            /**
             * @private
             * @type {number}
             */
            this.maxDelta_ = -1;
            /**
             * @private
             * @type {number}
             */
            this.maxDeltaRevision_ = -1;
            if (opt_layout !== undefined && !Array.isArray(coordinates[0])) {
                this.setFlatCoordinates(opt_layout, 
                /** @type {Array<number>} */ (coordinates));
            }
            else {
                this.setCoordinates(
                /** @type {Array<import("../coordinate.js").Coordinate>} */ (coordinates), opt_layout);
            }
        }
        /**
         * Append the passed coordinate to the coordinates of the linestring.
         * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
         * @api
         */
        appendCoordinate(coordinate) {
            if (!this.flatCoordinates) {
                this.flatCoordinates = coordinate.slice();
            }
            else {
                array_js_9.extend(this.flatCoordinates, coordinate);
            }
            this.changed();
        }
        /**
         * Make a complete copy of the geometry.
         * @return {!LineString} Clone.
         * @api
         */
        clone() {
            return new LineString(this.flatCoordinates.slice(), this.layout);
        }
        /**
         * @param {number} x X.
         * @param {number} y Y.
         * @param {import("../coordinate.js").Coordinate} closestPoint Closest point.
         * @param {number} minSquaredDistance Minimum squared distance.
         * @return {number} Minimum squared distance.
         */
        closestPointXY(x, y, closestPoint, minSquaredDistance) {
            if (minSquaredDistance < extent_js_20.closestSquaredDistanceXY(this.getExtent(), x, y)) {
                return minSquaredDistance;
            }
            if (this.maxDeltaRevision_ != this.getRevision()) {
                this.maxDelta_ = Math.sqrt(closest_js_3.maxSquaredDelta(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, 0));
                this.maxDeltaRevision_ = this.getRevision();
            }
            return closest_js_3.assignClosestPoint(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, this.maxDelta_, false, x, y, closestPoint, minSquaredDistance);
        }
        /**
         * Iterate over each segment, calling the provided callback.
         * If the callback returns a truthy value the function returns that
         * value immediately. Otherwise the function returns `false`.
         *
         * @param {function(this: S, import("../coordinate.js").Coordinate, import("../coordinate.js").Coordinate): T} callback Function
         *     called for each segment. The function will receive two arguments, the start and end coordinates of the segment.
         * @return {T|boolean} Value.
         * @template T,S
         * @api
         */
        forEachSegment(callback) {
            return segments_js_2.forEach(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, callback);
        }
        /**
         * Returns the coordinate at `m` using linear interpolation, or `null` if no
         * such coordinate exists.
         *
         * `opt_extrapolate` controls extrapolation beyond the range of Ms in the
         * MultiLineString. If `opt_extrapolate` is `true` then Ms less than the first
         * M will return the first coordinate and Ms greater than the last M will
         * return the last coordinate.
         *
         * @param {number} m M.
         * @param {boolean=} opt_extrapolate Extrapolate. Default is `false`.
         * @return {import("../coordinate.js").Coordinate} Coordinate.
         * @api
         */
        getCoordinateAtM(m, opt_extrapolate) {
            if (this.layout != GeometryLayout_js_4.default.XYM &&
                this.layout != GeometryLayout_js_4.default.XYZM) {
                return null;
            }
            const extrapolate = opt_extrapolate !== undefined ? opt_extrapolate : false;
            return interpolate_js_2.lineStringCoordinateAtM(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, m, extrapolate);
        }
        /**
         * Return the coordinates of the linestring.
         * @return {Array<import("../coordinate.js").Coordinate>} Coordinates.
         * @api
         */
        getCoordinates() {
            return inflate_js_3.inflateCoordinates(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);
        }
        /**
         * Return the coordinate at the provided fraction along the linestring.
         * The `fraction` is a number between 0 and 1, where 0 is the start of the
         * linestring and 1 is the end.
         * @param {number} fraction Fraction.
         * @param {import("../coordinate.js").Coordinate=} opt_dest Optional coordinate whose values will
         *     be modified. If not provided, a new coordinate will be returned.
         * @return {import("../coordinate.js").Coordinate} Coordinate of the interpolated point.
         * @api
         */
        getCoordinateAt(fraction, opt_dest) {
            return interpolate_js_2.interpolatePoint(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, fraction, opt_dest, this.stride);
        }
        /**
         * Return the length of the linestring on projected plane.
         * @return {number} Length (on projected plane).
         * @api
         */
        getLength() {
            return length_js_1.lineStringLength(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);
        }
        /**
         * @return {Array<number>} Flat midpoint.
         */
        getFlatMidpoint() {
            if (this.flatMidpointRevision_ != this.getRevision()) {
                this.flatMidpoint_ = this.getCoordinateAt(0.5, this.flatMidpoint_);
                this.flatMidpointRevision_ = this.getRevision();
            }
            return this.flatMidpoint_;
        }
        /**
         * @param {number} squaredTolerance Squared tolerance.
         * @return {LineString} Simplified LineString.
         * @protected
         */
        getSimplifiedGeometryInternal(squaredTolerance) {
            const simplifiedFlatCoordinates = [];
            simplifiedFlatCoordinates.length = simplify_js_3.douglasPeucker(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, squaredTolerance, simplifiedFlatCoordinates, 0);
            return new LineString(simplifiedFlatCoordinates, GeometryLayout_js_4.default.XY);
        }
        /**
         * Get the type of this geometry.
         * @return {import("./GeometryType.js").default} Geometry type.
         * @api
         */
        getType() {
            return GeometryType_js_9.default.LINE_STRING;
        }
        /**
         * Test if the geometry and the passed extent intersect.
         * @param {import("../extent.js").Extent} extent Extent.
         * @return {boolean} `true` if the geometry and the extent intersect.
         * @api
         */
        intersectsExtent(extent) {
            return intersectsextent_js_2.intersectsLineString(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, extent);
        }
        /**
         * Set the coordinates of the linestring.
         * @param {!Array<import("../coordinate.js").Coordinate>} coordinates Coordinates.
         * @param {import("./GeometryLayout.js").default=} opt_layout Layout.
         * @api
         */
        setCoordinates(coordinates, opt_layout) {
            this.setLayout(opt_layout, coordinates, 1);
            if (!this.flatCoordinates) {
                this.flatCoordinates = [];
            }
            this.flatCoordinates.length = deflate_js_5.deflateCoordinates(this.flatCoordinates, 0, coordinates, this.stride);
            this.changed();
        }
    }
    exports.default = LineString;
});
define("node_modules/ol/src/geom/MultiLineString", ["require", "exports", "node_modules/ol/src/geom/GeometryLayout", "node_modules/ol/src/geom/GeometryType", "node_modules/ol/src/geom/LineString", "node_modules/ol/src/geom/SimpleGeometry", "node_modules/ol/src/geom/flat/closest", "node_modules/ol/src/extent", "node_modules/ol/src/geom/flat/deflate", "node_modules/ol/src/geom/flat/simplify", "node_modules/ol/src/array", "node_modules/ol/src/geom/flat/inflate", "node_modules/ol/src/geom/flat/interpolate", "node_modules/ol/src/geom/flat/intersectsextent"], function (require, exports, GeometryLayout_js_5, GeometryType_js_10, LineString_js_1, SimpleGeometry_js_6, closest_js_4, extent_js_21, deflate_js_6, simplify_js_4, array_js_10, inflate_js_4, interpolate_js_3, intersectsextent_js_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @classdesc
     * Multi-linestring geometry.
     *
     * @api
     */
    class MultiLineString extends SimpleGeometry_js_6.default {
        /**
         * @param {Array<Array<import("../coordinate.js").Coordinate>|LineString>|Array<number>} coordinates
         *     Coordinates or LineString geometries. (For internal use, flat coordinates in
         *     combination with `opt_layout` and `opt_ends` are also accepted.)
         * @param {import("./GeometryLayout.js").default=} opt_layout Layout.
         * @param {Array<number>=} opt_ends Flat coordinate ends for internal use.
         */
        constructor(coordinates, opt_layout, opt_ends) {
            super();
            /**
             * @type {Array<number>}
             * @private
             */
            this.ends_ = [];
            /**
             * @private
             * @type {number}
             */
            this.maxDelta_ = -1;
            /**
             * @private
             * @type {number}
             */
            this.maxDeltaRevision_ = -1;
            if (Array.isArray(coordinates[0])) {
                this.setCoordinates(
                /** @type {Array<Array<import("../coordinate.js").Coordinate>>} */ (coordinates), opt_layout);
            }
            else if (opt_layout !== undefined && opt_ends) {
                this.setFlatCoordinates(opt_layout, 
                /** @type {Array<number>} */ (coordinates));
                this.ends_ = opt_ends;
            }
            else {
                let layout = this.getLayout();
                const lineStrings = /** @type {Array<LineString>} */ (coordinates);
                const flatCoordinates = [];
                const ends = [];
                for (let i = 0, ii = lineStrings.length; i < ii; ++i) {
                    const lineString = lineStrings[i];
                    if (i === 0) {
                        layout = lineString.getLayout();
                    }
                    array_js_10.extend(flatCoordinates, lineString.getFlatCoordinates());
                    ends.push(flatCoordinates.length);
                }
                this.setFlatCoordinates(layout, flatCoordinates);
                this.ends_ = ends;
            }
        }
        /**
         * Append the passed linestring to the multilinestring.
         * @param {LineString} lineString LineString.
         * @api
         */
        appendLineString(lineString) {
            if (!this.flatCoordinates) {
                this.flatCoordinates = lineString.getFlatCoordinates().slice();
            }
            else {
                array_js_10.extend(this.flatCoordinates, lineString.getFlatCoordinates().slice());
            }
            this.ends_.push(this.flatCoordinates.length);
            this.changed();
        }
        /**
         * Make a complete copy of the geometry.
         * @return {!MultiLineString} Clone.
         * @api
         */
        clone() {
            return new MultiLineString(this.flatCoordinates.slice(), this.layout, this.ends_.slice());
        }
        /**
         * @param {number} x X.
         * @param {number} y Y.
         * @param {import("../coordinate.js").Coordinate} closestPoint Closest point.
         * @param {number} minSquaredDistance Minimum squared distance.
         * @return {number} Minimum squared distance.
         */
        closestPointXY(x, y, closestPoint, minSquaredDistance) {
            if (minSquaredDistance < extent_js_21.closestSquaredDistanceXY(this.getExtent(), x, y)) {
                return minSquaredDistance;
            }
            if (this.maxDeltaRevision_ != this.getRevision()) {
                this.maxDelta_ = Math.sqrt(closest_js_4.arrayMaxSquaredDelta(this.flatCoordinates, 0, this.ends_, this.stride, 0));
                this.maxDeltaRevision_ = this.getRevision();
            }
            return closest_js_4.assignClosestArrayPoint(this.flatCoordinates, 0, this.ends_, this.stride, this.maxDelta_, false, x, y, closestPoint, minSquaredDistance);
        }
        /**
         * Returns the coordinate at `m` using linear interpolation, or `null` if no
         * such coordinate exists.
         *
         * `opt_extrapolate` controls extrapolation beyond the range of Ms in the
         * MultiLineString. If `opt_extrapolate` is `true` then Ms less than the first
         * M will return the first coordinate and Ms greater than the last M will
         * return the last coordinate.
         *
         * `opt_interpolate` controls interpolation between consecutive LineStrings
         * within the MultiLineString. If `opt_interpolate` is `true` the coordinates
         * will be linearly interpolated between the last coordinate of one LineString
         * and the first coordinate of the next LineString.  If `opt_interpolate` is
         * `false` then the function will return `null` for Ms falling between
         * LineStrings.
         *
         * @param {number} m M.
         * @param {boolean=} opt_extrapolate Extrapolate. Default is `false`.
         * @param {boolean=} opt_interpolate Interpolate. Default is `false`.
         * @return {import("../coordinate.js").Coordinate} Coordinate.
         * @api
         */
        getCoordinateAtM(m, opt_extrapolate, opt_interpolate) {
            if ((this.layout != GeometryLayout_js_5.default.XYM &&
                this.layout != GeometryLayout_js_5.default.XYZM) ||
                this.flatCoordinates.length === 0) {
                return null;
            }
            const extrapolate = opt_extrapolate !== undefined ? opt_extrapolate : false;
            const interpolate = opt_interpolate !== undefined ? opt_interpolate : false;
            return interpolate_js_3.lineStringsCoordinateAtM(this.flatCoordinates, 0, this.ends_, this.stride, m, extrapolate, interpolate);
        }
        /**
         * Return the coordinates of the multilinestring.
         * @return {Array<Array<import("../coordinate.js").Coordinate>>} Coordinates.
         * @api
         */
        getCoordinates() {
            return inflate_js_4.inflateCoordinatesArray(this.flatCoordinates, 0, this.ends_, this.stride);
        }
        /**
         * @return {Array<number>} Ends.
         */
        getEnds() {
            return this.ends_;
        }
        /**
         * Return the linestring at the specified index.
         * @param {number} index Index.
         * @return {LineString} LineString.
         * @api
         */
        getLineString(index) {
            if (index < 0 || this.ends_.length <= index) {
                return null;
            }
            return new LineString_js_1.default(this.flatCoordinates.slice(index === 0 ? 0 : this.ends_[index - 1], this.ends_[index]), this.layout);
        }
        /**
         * Return the linestrings of this multilinestring.
         * @return {Array<LineString>} LineStrings.
         * @api
         */
        getLineStrings() {
            const flatCoordinates = this.flatCoordinates;
            const ends = this.ends_;
            const layout = this.layout;
            /** @type {Array<LineString>} */
            const lineStrings = [];
            let offset = 0;
            for (let i = 0, ii = ends.length; i < ii; ++i) {
                const end = ends[i];
                const lineString = new LineString_js_1.default(flatCoordinates.slice(offset, end), layout);
                lineStrings.push(lineString);
                offset = end;
            }
            return lineStrings;
        }
        /**
         * @return {Array<number>} Flat midpoints.
         */
        getFlatMidpoints() {
            const midpoints = [];
            const flatCoordinates = this.flatCoordinates;
            let offset = 0;
            const ends = this.ends_;
            const stride = this.stride;
            for (let i = 0, ii = ends.length; i < ii; ++i) {
                const end = ends[i];
                const midpoint = interpolate_js_3.interpolatePoint(flatCoordinates, offset, end, stride, 0.5);
                array_js_10.extend(midpoints, midpoint);
                offset = end;
            }
            return midpoints;
        }
        /**
         * @param {number} squaredTolerance Squared tolerance.
         * @return {MultiLineString} Simplified MultiLineString.
         * @protected
         */
        getSimplifiedGeometryInternal(squaredTolerance) {
            const simplifiedFlatCoordinates = [];
            const simplifiedEnds = [];
            simplifiedFlatCoordinates.length = simplify_js_4.douglasPeuckerArray(this.flatCoordinates, 0, this.ends_, this.stride, squaredTolerance, simplifiedFlatCoordinates, 0, simplifiedEnds);
            return new MultiLineString(simplifiedFlatCoordinates, GeometryLayout_js_5.default.XY, simplifiedEnds);
        }
        /**
         * Get the type of this geometry.
         * @return {import("./GeometryType.js").default} Geometry type.
         * @api
         */
        getType() {
            return GeometryType_js_10.default.MULTI_LINE_STRING;
        }
        /**
         * Test if the geometry and the passed extent intersect.
         * @param {import("../extent.js").Extent} extent Extent.
         * @return {boolean} `true` if the geometry and the extent intersect.
         * @api
         */
        intersectsExtent(extent) {
            return intersectsextent_js_3.intersectsLineStringArray(this.flatCoordinates, 0, this.ends_, this.stride, extent);
        }
        /**
         * Set the coordinates of the multilinestring.
         * @param {!Array<Array<import("../coordinate.js").Coordinate>>} coordinates Coordinates.
         * @param {GeometryLayout=} opt_layout Layout.
         * @api
         */
        setCoordinates(coordinates, opt_layout) {
            this.setLayout(opt_layout, coordinates, 2);
            if (!this.flatCoordinates) {
                this.flatCoordinates = [];
            }
            const ends = deflate_js_6.deflateCoordinatesArray(this.flatCoordinates, 0, coordinates, this.stride, this.ends_);
            this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];
            this.changed();
        }
    }
    exports.default = MultiLineString;
});
define("node_modules/ol/src/geom/MultiPoint", ["require", "exports", "node_modules/ol/src/geom/GeometryType", "node_modules/ol/src/geom/Point", "node_modules/ol/src/geom/SimpleGeometry", "node_modules/ol/src/extent", "node_modules/ol/src/geom/flat/deflate", "node_modules/ol/src/array", "node_modules/ol/src/geom/flat/inflate", "node_modules/ol/src/math"], function (require, exports, GeometryType_js_11, Point_js_2, SimpleGeometry_js_7, extent_js_22, deflate_js_7, array_js_11, inflate_js_5, math_js_17) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @classdesc
     * Multi-point geometry.
     *
     * @api
     */
    class MultiPoint extends SimpleGeometry_js_7.default {
        /**
         * @param {Array<import("../coordinate.js").Coordinate>|Array<number>} coordinates Coordinates.
         *     For internal use, flat coordinates in combination with `opt_layout` are also accepted.
         * @param {import("./GeometryLayout.js").default=} opt_layout Layout.
         */
        constructor(coordinates, opt_layout) {
            super();
            if (opt_layout && !Array.isArray(coordinates[0])) {
                this.setFlatCoordinates(opt_layout, 
                /** @type {Array<number>} */ (coordinates));
            }
            else {
                this.setCoordinates(
                /** @type {Array<import("../coordinate.js").Coordinate>} */ (coordinates), opt_layout);
            }
        }
        /**
         * Append the passed point to this multipoint.
         * @param {Point} point Point.
         * @api
         */
        appendPoint(point) {
            if (!this.flatCoordinates) {
                this.flatCoordinates = point.getFlatCoordinates().slice();
            }
            else {
                array_js_11.extend(this.flatCoordinates, point.getFlatCoordinates());
            }
            this.changed();
        }
        /**
         * Make a complete copy of the geometry.
         * @return {!MultiPoint} Clone.
         * @api
         */
        clone() {
            const multiPoint = new MultiPoint(this.flatCoordinates.slice(), this.layout);
            return multiPoint;
        }
        /**
         * @param {number} x X.
         * @param {number} y Y.
         * @param {import("../coordinate.js").Coordinate} closestPoint Closest point.
         * @param {number} minSquaredDistance Minimum squared distance.
         * @return {number} Minimum squared distance.
         */
        closestPointXY(x, y, closestPoint, minSquaredDistance) {
            if (minSquaredDistance < extent_js_22.closestSquaredDistanceXY(this.getExtent(), x, y)) {
                return minSquaredDistance;
            }
            const flatCoordinates = this.flatCoordinates;
            const stride = this.stride;
            for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {
                const squaredDistance = math_js_17.squaredDistance(x, y, flatCoordinates[i], flatCoordinates[i + 1]);
                if (squaredDistance < minSquaredDistance) {
                    minSquaredDistance = squaredDistance;
                    for (let j = 0; j < stride; ++j) {
                        closestPoint[j] = flatCoordinates[i + j];
                    }
                    closestPoint.length = stride;
                }
            }
            return minSquaredDistance;
        }
        /**
         * Return the coordinates of the multipoint.
         * @return {Array<import("../coordinate.js").Coordinate>} Coordinates.
         * @api
         */
        getCoordinates() {
            return inflate_js_5.inflateCoordinates(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);
        }
        /**
         * Return the point at the specified index.
         * @param {number} index Index.
         * @return {Point} Point.
         * @api
         */
        getPoint(index) {
            const n = !this.flatCoordinates
                ? 0
                : this.flatCoordinates.length / this.stride;
            if (index < 0 || n <= index) {
                return null;
            }
            return new Point_js_2.default(this.flatCoordinates.slice(index * this.stride, (index + 1) * this.stride), this.layout);
        }
        /**
         * Return the points of this multipoint.
         * @return {Array<Point>} Points.
         * @api
         */
        getPoints() {
            const flatCoordinates = this.flatCoordinates;
            const layout = this.layout;
            const stride = this.stride;
            /** @type {Array<Point>} */
            const points = [];
            for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {
                const point = new Point_js_2.default(flatCoordinates.slice(i, i + stride), layout);
                points.push(point);
            }
            return points;
        }
        /**
         * Get the type of this geometry.
         * @return {import("./GeometryType.js").default} Geometry type.
         * @api
         */
        getType() {
            return GeometryType_js_11.default.MULTI_POINT;
        }
        /**
         * Test if the geometry and the passed extent intersect.
         * @param {import("../extent.js").Extent} extent Extent.
         * @return {boolean} `true` if the geometry and the extent intersect.
         * @api
         */
        intersectsExtent(extent) {
            const flatCoordinates = this.flatCoordinates;
            const stride = this.stride;
            for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {
                const x = flatCoordinates[i];
                const y = flatCoordinates[i + 1];
                if (extent_js_22.containsXY(extent, x, y)) {
                    return true;
                }
            }
            return false;
        }
        /**
         * Set the coordinates of the multipoint.
         * @param {!Array<import("../coordinate.js").Coordinate>} coordinates Coordinates.
         * @param {import("./GeometryLayout.js").default=} opt_layout Layout.
         * @api
         */
        setCoordinates(coordinates, opt_layout) {
            this.setLayout(opt_layout, coordinates, 1);
            if (!this.flatCoordinates) {
                this.flatCoordinates = [];
            }
            this.flatCoordinates.length = deflate_js_7.deflateCoordinates(this.flatCoordinates, 0, coordinates, this.stride);
            this.changed();
        }
    }
    exports.default = MultiPoint;
});
define("node_modules/ol/src/geom/MultiPolygon", ["require", "exports", "node_modules/ol/src/geom/GeometryLayout", "node_modules/ol/src/geom/GeometryType", "node_modules/ol/src/geom/MultiPoint", "node_modules/ol/src/geom/Polygon", "node_modules/ol/src/geom/SimpleGeometry", "node_modules/ol/src/geom/flat/closest", "node_modules/ol/src/extent", "node_modules/ol/src/geom/flat/deflate", "node_modules/ol/src/array", "node_modules/ol/src/geom/flat/interiorpoint", "node_modules/ol/src/geom/flat/inflate", "node_modules/ol/src/geom/flat/intersectsextent", "node_modules/ol/src/geom/flat/orient", "node_modules/ol/src/geom/flat/area", "node_modules/ol/src/geom/flat/center", "node_modules/ol/src/geom/flat/contains", "node_modules/ol/src/geom/flat/simplify"], function (require, exports, GeometryLayout_js_6, GeometryType_js_12, MultiPoint_js_1, Polygon_js_2, SimpleGeometry_js_8, closest_js_5, extent_js_23, deflate_js_8, array_js_12, interiorpoint_js_3, inflate_js_6, intersectsextent_js_4, orient_js_2, area_js_3, center_js_2, contains_js_4, simplify_js_5) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @classdesc
     * Multi-polygon geometry.
     *
     * @api
     */
    class MultiPolygon extends SimpleGeometry_js_8.default {
        /**
         * @param {Array<Array<Array<import("../coordinate.js").Coordinate>>|Polygon>|Array<number>} coordinates Coordinates.
         *     For internal use, flat coordinates in combination with `opt_layout` and `opt_endss` are also accepted.
         * @param {import("./GeometryLayout.js").default=} opt_layout Layout.
         * @param {Array<Array<number>>=} opt_endss Array of ends for internal use with flat coordinates.
         */
        constructor(coordinates, opt_layout, opt_endss) {
            super();
            /**
             * @type {Array<Array<number>>}
             * @private
             */
            this.endss_ = [];
            /**
             * @private
             * @type {number}
             */
            this.flatInteriorPointsRevision_ = -1;
            /**
             * @private
             * @type {Array<number>}
             */
            this.flatInteriorPoints_ = null;
            /**
             * @private
             * @type {number}
             */
            this.maxDelta_ = -1;
            /**
             * @private
             * @type {number}
             */
            this.maxDeltaRevision_ = -1;
            /**
             * @private
             * @type {number}
             */
            this.orientedRevision_ = -1;
            /**
             * @private
             * @type {Array<number>}
             */
            this.orientedFlatCoordinates_ = null;
            if (!opt_endss && !Array.isArray(coordinates[0])) {
                let layout = this.getLayout();
                const polygons = /** @type {Array<Polygon>} */ (coordinates);
                const flatCoordinates = [];
                const endss = [];
                for (let i = 0, ii = polygons.length; i < ii; ++i) {
                    const polygon = polygons[i];
                    if (i === 0) {
                        layout = polygon.getLayout();
                    }
                    const offset = flatCoordinates.length;
                    const ends = polygon.getEnds();
                    for (let j = 0, jj = ends.length; j < jj; ++j) {
                        ends[j] += offset;
                    }
                    array_js_12.extend(flatCoordinates, polygon.getFlatCoordinates());
                    endss.push(ends);
                }
                opt_layout = layout;
                coordinates = flatCoordinates;
                opt_endss = endss;
            }
            if (opt_layout !== undefined && opt_endss) {
                this.setFlatCoordinates(opt_layout, 
                /** @type {Array<number>} */ (coordinates));
                this.endss_ = opt_endss;
            }
            else {
                this.setCoordinates(
                /** @type {Array<Array<Array<import("../coordinate.js").Coordinate>>>} */ (coordinates), opt_layout);
            }
        }
        /**
         * Append the passed polygon to this multipolygon.
         * @param {Polygon} polygon Polygon.
         * @api
         */
        appendPolygon(polygon) {
            /** @type {Array<number>} */
            let ends;
            if (!this.flatCoordinates) {
                this.flatCoordinates = polygon.getFlatCoordinates().slice();
                ends = polygon.getEnds().slice();
                this.endss_.push();
            }
            else {
                const offset = this.flatCoordinates.length;
                array_js_12.extend(this.flatCoordinates, polygon.getFlatCoordinates());
                ends = polygon.getEnds().slice();
                for (let i = 0, ii = ends.length; i < ii; ++i) {
                    ends[i] += offset;
                }
            }
            this.endss_.push(ends);
            this.changed();
        }
        /**
         * Make a complete copy of the geometry.
         * @return {!MultiPolygon} Clone.
         * @api
         */
        clone() {
            const len = this.endss_.length;
            const newEndss = new Array(len);
            for (let i = 0; i < len; ++i) {
                newEndss[i] = this.endss_[i].slice();
            }
            return new MultiPolygon(this.flatCoordinates.slice(), this.layout, newEndss);
        }
        /**
         * @param {number} x X.
         * @param {number} y Y.
         * @param {import("../coordinate.js").Coordinate} closestPoint Closest point.
         * @param {number} minSquaredDistance Minimum squared distance.
         * @return {number} Minimum squared distance.
         */
        closestPointXY(x, y, closestPoint, minSquaredDistance) {
            if (minSquaredDistance < extent_js_23.closestSquaredDistanceXY(this.getExtent(), x, y)) {
                return minSquaredDistance;
            }
            if (this.maxDeltaRevision_ != this.getRevision()) {
                this.maxDelta_ = Math.sqrt(closest_js_5.multiArrayMaxSquaredDelta(this.flatCoordinates, 0, this.endss_, this.stride, 0));
                this.maxDeltaRevision_ = this.getRevision();
            }
            return closest_js_5.assignClosestMultiArrayPoint(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride, this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);
        }
        /**
         * @param {number} x X.
         * @param {number} y Y.
         * @return {boolean} Contains (x, y).
         */
        containsXY(x, y) {
            return contains_js_4.linearRingssContainsXY(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride, x, y);
        }
        /**
         * Return the area of the multipolygon on projected plane.
         * @return {number} Area (on projected plane).
         * @api
         */
        getArea() {
            return area_js_3.linearRingss(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride);
        }
        /**
         * Get the coordinate array for this geometry.  This array has the structure
         * of a GeoJSON coordinate array for multi-polygons.
         *
         * @param {boolean=} opt_right Orient coordinates according to the right-hand
         *     rule (counter-clockwise for exterior and clockwise for interior rings).
         *     If `false`, coordinates will be oriented according to the left-hand rule
         *     (clockwise for exterior and counter-clockwise for interior rings).
         *     By default, coordinate orientation will depend on how the geometry was
         *     constructed.
         * @return {Array<Array<Array<import("../coordinate.js").Coordinate>>>} Coordinates.
         * @api
         */
        getCoordinates(opt_right) {
            let flatCoordinates;
            if (opt_right !== undefined) {
                flatCoordinates = this.getOrientedFlatCoordinates().slice();
                orient_js_2.orientLinearRingsArray(flatCoordinates, 0, this.endss_, this.stride, opt_right);
            }
            else {
                flatCoordinates = this.flatCoordinates;
            }
            return inflate_js_6.inflateMultiCoordinatesArray(flatCoordinates, 0, this.endss_, this.stride);
        }
        /**
         * @return {Array<Array<number>>} Endss.
         */
        getEndss() {
            return this.endss_;
        }
        /**
         * @return {Array<number>} Flat interior points.
         */
        getFlatInteriorPoints() {
            if (this.flatInteriorPointsRevision_ != this.getRevision()) {
                const flatCenters = center_js_2.linearRingss(this.flatCoordinates, 0, this.endss_, this.stride);
                this.flatInteriorPoints_ = interiorpoint_js_3.getInteriorPointsOfMultiArray(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride, flatCenters);
                this.flatInteriorPointsRevision_ = this.getRevision();
            }
            return this.flatInteriorPoints_;
        }
        /**
         * Return the interior points as {@link module:ol/geom/MultiPoint multipoint}.
         * @return {MultiPoint} Interior points as XYM coordinates, where M is
         * the length of the horizontal intersection that the point belongs to.
         * @api
         */
        getInteriorPoints() {
            return new MultiPoint_js_1.default(this.getFlatInteriorPoints().slice(), GeometryLayout_js_6.default.XYM);
        }
        /**
         * @return {Array<number>} Oriented flat coordinates.
         */
        getOrientedFlatCoordinates() {
            if (this.orientedRevision_ != this.getRevision()) {
                const flatCoordinates = this.flatCoordinates;
                if (orient_js_2.linearRingssAreOriented(flatCoordinates, 0, this.endss_, this.stride)) {
                    this.orientedFlatCoordinates_ = flatCoordinates;
                }
                else {
                    this.orientedFlatCoordinates_ = flatCoordinates.slice();
                    this.orientedFlatCoordinates_.length = orient_js_2.orientLinearRingsArray(this.orientedFlatCoordinates_, 0, this.endss_, this.stride);
                }
                this.orientedRevision_ = this.getRevision();
            }
            return this.orientedFlatCoordinates_;
        }
        /**
         * @param {number} squaredTolerance Squared tolerance.
         * @return {MultiPolygon} Simplified MultiPolygon.
         * @protected
         */
        getSimplifiedGeometryInternal(squaredTolerance) {
            const simplifiedFlatCoordinates = [];
            const simplifiedEndss = [];
            simplifiedFlatCoordinates.length = simplify_js_5.quantizeMultiArray(this.flatCoordinates, 0, this.endss_, this.stride, Math.sqrt(squaredTolerance), simplifiedFlatCoordinates, 0, simplifiedEndss);
            return new MultiPolygon(simplifiedFlatCoordinates, GeometryLayout_js_6.default.XY, simplifiedEndss);
        }
        /**
         * Return the polygon at the specified index.
         * @param {number} index Index.
         * @return {Polygon} Polygon.
         * @api
         */
        getPolygon(index) {
            if (index < 0 || this.endss_.length <= index) {
                return null;
            }
            let offset;
            if (index === 0) {
                offset = 0;
            }
            else {
                const prevEnds = this.endss_[index - 1];
                offset = prevEnds[prevEnds.length - 1];
            }
            const ends = this.endss_[index].slice();
            const end = ends[ends.length - 1];
            if (offset !== 0) {
                for (let i = 0, ii = ends.length; i < ii; ++i) {
                    ends[i] -= offset;
                }
            }
            return new Polygon_js_2.default(this.flatCoordinates.slice(offset, end), this.layout, ends);
        }
        /**
         * Return the polygons of this multipolygon.
         * @return {Array<Polygon>} Polygons.
         * @api
         */
        getPolygons() {
            const layout = this.layout;
            const flatCoordinates = this.flatCoordinates;
            const endss = this.endss_;
            const polygons = [];
            let offset = 0;
            for (let i = 0, ii = endss.length; i < ii; ++i) {
                const ends = endss[i].slice();
                const end = ends[ends.length - 1];
                if (offset !== 0) {
                    for (let j = 0, jj = ends.length; j < jj; ++j) {
                        ends[j] -= offset;
                    }
                }
                const polygon = new Polygon_js_2.default(flatCoordinates.slice(offset, end), layout, ends);
                polygons.push(polygon);
                offset = end;
            }
            return polygons;
        }
        /**
         * Get the type of this geometry.
         * @return {import("./GeometryType.js").default} Geometry type.
         * @api
         */
        getType() {
            return GeometryType_js_12.default.MULTI_POLYGON;
        }
        /**
         * Test if the geometry and the passed extent intersect.
         * @param {import("../extent.js").Extent} extent Extent.
         * @return {boolean} `true` if the geometry and the extent intersect.
         * @api
         */
        intersectsExtent(extent) {
            return intersectsextent_js_4.intersectsLinearRingMultiArray(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride, extent);
        }
        /**
         * Set the coordinates of the multipolygon.
         * @param {!Array<Array<Array<import("../coordinate.js").Coordinate>>>} coordinates Coordinates.
         * @param {import("./GeometryLayout.js").default=} opt_layout Layout.
         * @api
         */
        setCoordinates(coordinates, opt_layout) {
            this.setLayout(opt_layout, coordinates, 3);
            if (!this.flatCoordinates) {
                this.flatCoordinates = [];
            }
            const endss = deflate_js_8.deflateMultiCoordinatesArray(this.flatCoordinates, 0, coordinates, this.stride, this.endss_);
            if (endss.length === 0) {
                this.flatCoordinates.length = 0;
            }
            else {
                const lastEnds = endss[endss.length - 1];
                this.flatCoordinates.length =
                    lastEnds.length === 0 ? 0 : lastEnds[lastEnds.length - 1];
            }
            this.changed();
        }
    }
    exports.default = MultiPolygon;
});
/**
 * @module ol/style/TextPlacement
 */
define("node_modules/ol/src/style/TextPlacement", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Text placement. One of `'point'`, `'line'`. Default is `'point'`. Note that
     * `'line'` requires the underlying geometry to be a {@link module:ol/geom/LineString~LineString},
     * {@link module:ol/geom/Polygon~Polygon}, {@link module:ol/geom/MultiLineString~MultiLineString} or
     * {@link module:ol/geom/MultiPolygon~MultiPolygon}.
     * @enum {string}
     */
    exports.default = {
        POINT: 'point',
        LINE: 'line',
    };
});
define("node_modules/ol/src/style/Text", ["require", "exports", "node_modules/ol/src/style/Fill", "node_modules/ol/src/style/TextPlacement", "node_modules/ol/src/size"], function (require, exports, Fill_js_1, TextPlacement_js_1, size_js_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * The default fill color to use if no fill was set at construction time; a
     * blackish `#333`.
     *
     * @const {string}
     */
    const DEFAULT_FILL_COLOR = '#333';
    /**
     * @typedef {Object} Options
     * @property {string} [font] Font style as CSS 'font' value, see:
     * https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font. Default is '10px sans-serif'
     * @property {number} [maxAngle=Math.PI/4] When `placement` is set to `'line'`, allow a maximum angle between adjacent characters.
     * The expected value is in radians, and the default is 45° (`Math.PI / 4`).
     * @property {number} [offsetX=0] Horizontal text offset in pixels. A positive will shift the text right.
     * @property {number} [offsetY=0] Vertical text offset in pixels. A positive will shift the text down.
     * @property {boolean} [overflow=false] For polygon labels or when `placement` is set to `'line'`, allow text to exceed
     * the width of the polygon at the label position or the length of the path that it follows.
     * @property {import("./TextPlacement.js").default|string} [placement='point'] Text placement.
     * @property {number|import("../size.js").Size} [scale] Scale.
     * @property {boolean} [rotateWithView=false] Whether to rotate the text with the view.
     * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).
     * @property {string} [text] Text content.
     * @property {string} [textAlign] Text alignment. Possible values: 'left', 'right', 'center', 'end' or 'start'.
     * Default is 'center' for `placement: 'point'`. For `placement: 'line'`, the default is to let the renderer choose a
     * placement where `maxAngle` is not exceeded.
     * @property {string} [textBaseline='middle'] Text base line. Possible values: 'bottom', 'top', 'middle', 'alphabetic',
     * 'hanging', 'ideographic'.
     * @property {import("./Fill.js").default} [fill] Fill style. If none is provided, we'll use a dark fill-style (#333).
     * @property {import("./Stroke.js").default} [stroke] Stroke style.
     * @property {import("./Fill.js").default} [backgroundFill] Fill style for the text background when `placement` is
     * `'point'`. Default is no fill.
     * @property {import("./Stroke.js").default} [backgroundStroke] Stroke style for the text background  when `placement`
     * is `'point'`. Default is no stroke.
     * @property {Array<number>} [padding=[0, 0, 0, 0]] Padding in pixels around the text for decluttering and background. The order of
     * values in the array is `[top, right, bottom, left]`.
     */
    /**
     * @classdesc
     * Set text style for vector features.
     * @api
     */
    class Text {
        /**
         * @param {Options=} opt_options Options.
         */
        constructor(opt_options) {
            const options = opt_options || {};
            /**
             * @private
             * @type {string|undefined}
             */
            this.font_ = options.font;
            /**
             * @private
             * @type {number|undefined}
             */
            this.rotation_ = options.rotation;
            /**
             * @private
             * @type {boolean|undefined}
             */
            this.rotateWithView_ = options.rotateWithView;
            /**
             * @private
             * @type {number|import("../size.js").Size|undefined}
             */
            this.scale_ = options.scale;
            /**
             * @private
             * @type {import("../size.js").Size}
             */
            this.scaleArray_ = size_js_3.toSize(options.scale !== undefined ? options.scale : 1);
            /**
             * @private
             * @type {string|undefined}
             */
            this.text_ = options.text;
            /**
             * @private
             * @type {string|undefined}
             */
            this.textAlign_ = options.textAlign;
            /**
             * @private
             * @type {string|undefined}
             */
            this.textBaseline_ = options.textBaseline;
            /**
             * @private
             * @type {import("./Fill.js").default}
             */
            this.fill_ =
                options.fill !== undefined
                    ? options.fill
                    : new Fill_js_1.default({ color: DEFAULT_FILL_COLOR });
            /**
             * @private
             * @type {number}
             */
            this.maxAngle_ =
                options.maxAngle !== undefined ? options.maxAngle : Math.PI / 4;
            /**
             * @private
             * @type {import("./TextPlacement.js").default|string}
             */
            this.placement_ =
                options.placement !== undefined ? options.placement : TextPlacement_js_1.default.POINT;
            /**
             * @private
             * @type {boolean}
             */
            this.overflow_ = !!options.overflow;
            /**
             * @private
             * @type {import("./Stroke.js").default}
             */
            this.stroke_ = options.stroke !== undefined ? options.stroke : null;
            /**
             * @private
             * @type {number}
             */
            this.offsetX_ = options.offsetX !== undefined ? options.offsetX : 0;
            /**
             * @private
             * @type {number}
             */
            this.offsetY_ = options.offsetY !== undefined ? options.offsetY : 0;
            /**
             * @private
             * @type {import("./Fill.js").default}
             */
            this.backgroundFill_ = options.backgroundFill
                ? options.backgroundFill
                : null;
            /**
             * @private
             * @type {import("./Stroke.js").default}
             */
            this.backgroundStroke_ = options.backgroundStroke
                ? options.backgroundStroke
                : null;
            /**
             * @private
             * @type {Array<number>}
             */
            this.padding_ = options.padding === undefined ? null : options.padding;
        }
        /**
         * Clones the style.
         * @return {Text} The cloned style.
         * @api
         */
        clone() {
            const scale = this.getScale();
            return new Text({
                font: this.getFont(),
                placement: this.getPlacement(),
                maxAngle: this.getMaxAngle(),
                overflow: this.getOverflow(),
                rotation: this.getRotation(),
                rotateWithView: this.getRotateWithView(),
                scale: Array.isArray(scale) ? scale.slice() : scale,
                text: this.getText(),
                textAlign: this.getTextAlign(),
                textBaseline: this.getTextBaseline(),
                fill: this.getFill() ? this.getFill().clone() : undefined,
                stroke: this.getStroke() ? this.getStroke().clone() : undefined,
                offsetX: this.getOffsetX(),
                offsetY: this.getOffsetY(),
                backgroundFill: this.getBackgroundFill()
                    ? this.getBackgroundFill().clone()
                    : undefined,
                backgroundStroke: this.getBackgroundStroke()
                    ? this.getBackgroundStroke().clone()
                    : undefined,
                padding: this.getPadding(),
            });
        }
        /**
         * Get the `overflow` configuration.
         * @return {boolean} Let text overflow the length of the path they follow.
         * @api
         */
        getOverflow() {
            return this.overflow_;
        }
        /**
         * Get the font name.
         * @return {string|undefined} Font.
         * @api
         */
        getFont() {
            return this.font_;
        }
        /**
         * Get the maximum angle between adjacent characters.
         * @return {number} Angle in radians.
         * @api
         */
        getMaxAngle() {
            return this.maxAngle_;
        }
        /**
         * Get the label placement.
         * @return {import("./TextPlacement.js").default|string} Text placement.
         * @api
         */
        getPlacement() {
            return this.placement_;
        }
        /**
         * Get the x-offset for the text.
         * @return {number} Horizontal text offset.
         * @api
         */
        getOffsetX() {
            return this.offsetX_;
        }
        /**
         * Get the y-offset for the text.
         * @return {number} Vertical text offset.
         * @api
         */
        getOffsetY() {
            return this.offsetY_;
        }
        /**
         * Get the fill style for the text.
         * @return {import("./Fill.js").default} Fill style.
         * @api
         */
        getFill() {
            return this.fill_;
        }
        /**
         * Determine whether the text rotates with the map.
         * @return {boolean|undefined} Rotate with map.
         * @api
         */
        getRotateWithView() {
            return this.rotateWithView_;
        }
        /**
         * Get the text rotation.
         * @return {number|undefined} Rotation.
         * @api
         */
        getRotation() {
            return this.rotation_;
        }
        /**
         * Get the text scale.
         * @return {number|import("../size.js").Size|undefined} Scale.
         * @api
         */
        getScale() {
            return this.scale_;
        }
        /**
         * Get the symbolizer scale array.
         * @return {import("../size.js").Size} Scale array.
         */
        getScaleArray() {
            return this.scaleArray_;
        }
        /**
         * Get the stroke style for the text.
         * @return {import("./Stroke.js").default} Stroke style.
         * @api
         */
        getStroke() {
            return this.stroke_;
        }
        /**
         * Get the text to be rendered.
         * @return {string|undefined} Text.
         * @api
         */
        getText() {
            return this.text_;
        }
        /**
         * Get the text alignment.
         * @return {string|undefined} Text align.
         * @api
         */
        getTextAlign() {
            return this.textAlign_;
        }
        /**
         * Get the text baseline.
         * @return {string|undefined} Text baseline.
         * @api
         */
        getTextBaseline() {
            return this.textBaseline_;
        }
        /**
         * Get the background fill style for the text.
         * @return {import("./Fill.js").default} Fill style.
         * @api
         */
        getBackgroundFill() {
            return this.backgroundFill_;
        }
        /**
         * Get the background stroke style for the text.
         * @return {import("./Stroke.js").default} Stroke style.
         * @api
         */
        getBackgroundStroke() {
            return this.backgroundStroke_;
        }
        /**
         * Get the padding for the text.
         * @return {Array<number>} Padding.
         * @api
         */
        getPadding() {
            return this.padding_;
        }
        /**
         * Set the `overflow` property.
         *
         * @param {boolean} overflow Let text overflow the path that it follows.
         * @api
         */
        setOverflow(overflow) {
            this.overflow_ = overflow;
        }
        /**
         * Set the font.
         *
         * @param {string|undefined} font Font.
         * @api
         */
        setFont(font) {
            this.font_ = font;
        }
        /**
         * Set the maximum angle between adjacent characters.
         *
         * @param {number} maxAngle Angle in radians.
         * @api
         */
        setMaxAngle(maxAngle) {
            this.maxAngle_ = maxAngle;
        }
        /**
         * Set the x offset.
         *
         * @param {number} offsetX Horizontal text offset.
         * @api
         */
        setOffsetX(offsetX) {
            this.offsetX_ = offsetX;
        }
        /**
         * Set the y offset.
         *
         * @param {number} offsetY Vertical text offset.
         * @api
         */
        setOffsetY(offsetY) {
            this.offsetY_ = offsetY;
        }
        /**
         * Set the text placement.
         *
         * @param {import("./TextPlacement.js").default|string} placement Placement.
         * @api
         */
        setPlacement(placement) {
            this.placement_ = placement;
        }
        /**
         * Set whether to rotate the text with the view.
         *
         * @param {boolean} rotateWithView Rotate with map.
         * @api
         */
        setRotateWithView(rotateWithView) {
            this.rotateWithView_ = rotateWithView;
        }
        /**
         * Set the fill.
         *
         * @param {import("./Fill.js").default} fill Fill style.
         * @api
         */
        setFill(fill) {
            this.fill_ = fill;
        }
        /**
         * Set the rotation.
         *
         * @param {number|undefined} rotation Rotation.
         * @api
         */
        setRotation(rotation) {
            this.rotation_ = rotation;
        }
        /**
         * Set the scale.
         *
         * @param {number|import("../size.js").Size|undefined} scale Scale.
         * @api
         */
        setScale(scale) {
            this.scale_ = scale;
            this.scaleArray_ = size_js_3.toSize(scale !== undefined ? scale : 1);
        }
        /**
         * Set the stroke.
         *
         * @param {import("./Stroke.js").default} stroke Stroke style.
         * @api
         */
        setStroke(stroke) {
            this.stroke_ = stroke;
        }
        /**
         * Set the text.
         *
         * @param {string|undefined} text Text.
         * @api
         */
        setText(text) {
            this.text_ = text;
        }
        /**
         * Set the text alignment.
         *
         * @param {string|undefined} textAlign Text align.
         * @api
         */
        setTextAlign(textAlign) {
            this.textAlign_ = textAlign;
        }
        /**
         * Set the text baseline.
         *
         * @param {string|undefined} textBaseline Text baseline.
         * @api
         */
        setTextBaseline(textBaseline) {
            this.textBaseline_ = textBaseline;
        }
        /**
         * Set the background fill.
         *
         * @param {import("./Fill.js").default} fill Fill style.
         * @api
         */
        setBackgroundFill(fill) {
            this.backgroundFill_ = fill;
        }
        /**
         * Set the background stroke.
         *
         * @param {import("./Stroke.js").default} stroke Stroke style.
         * @api
         */
        setBackgroundStroke(stroke) {
            this.backgroundStroke_ = stroke;
        }
        /**
         * Set the padding (`[top, right, bottom, left]`).
         *
         * @param {!Array<number>} padding Padding.
         * @api
         */
        setPadding(padding) {
            this.padding_ = padding;
        }
    }
    exports.default = Text;
});
/**
 * @module ol/render/VectorContext
 */
define("node_modules/ol/src/render/VectorContext", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @classdesc
     * Context for drawing geometries.  A vector context is available on render
     * events and does not need to be constructed directly.
     * @api
     */
    class VectorContext {
        /**
         * Render a geometry with a custom renderer.
         *
         * @param {import("../geom/SimpleGeometry.js").default} geometry Geometry.
         * @param {import("../Feature.js").FeatureLike} feature Feature.
         * @param {Function} renderer Renderer.
         */
        drawCustom(geometry, feature, renderer) { }
        /**
         * Render a geometry.
         *
         * @param {import("../geom/Geometry.js").default} geometry The geometry to render.
         */
        drawGeometry(geometry) { }
        /**
         * Set the rendering style.
         *
         * @param {import("../style/Style.js").default} style The rendering style.
         */
        setStyle(style) { }
        /**
         * @param {import("../geom/Circle.js").default} circleGeometry Circle geometry.
         * @param {import("../Feature.js").default} feature Feature.
         */
        drawCircle(circleGeometry, feature) { }
        /**
         * @param {import("../Feature.js").default} feature Feature.
         * @param {import("../style/Style.js").default} style Style.
         */
        drawFeature(feature, style) { }
        /**
         * @param {import("../geom/GeometryCollection.js").default} geometryCollectionGeometry Geometry collection.
         * @param {import("../Feature.js").default} feature Feature.
         */
        drawGeometryCollection(geometryCollectionGeometry, feature) { }
        /**
         * @param {import("../geom/LineString.js").default|import("./Feature.js").default} lineStringGeometry Line string geometry.
         * @param {import("../Feature.js").FeatureLike} feature Feature.
         */
        drawLineString(lineStringGeometry, feature) { }
        /**
         * @param {import("../geom/MultiLineString.js").default|import("./Feature.js").default} multiLineStringGeometry MultiLineString geometry.
         * @param {import("../Feature.js").FeatureLike} feature Feature.
         */
        drawMultiLineString(multiLineStringGeometry, feature) { }
        /**
         * @param {import("../geom/MultiPoint.js").default|import("./Feature.js").default} multiPointGeometry MultiPoint geometry.
         * @param {import("../Feature.js").FeatureLike} feature Feature.
         */
        drawMultiPoint(multiPointGeometry, feature) { }
        /**
         * @param {import("../geom/MultiPolygon.js").default} multiPolygonGeometry MultiPolygon geometry.
         * @param {import("../Feature.js").FeatureLike} feature Feature.
         */
        drawMultiPolygon(multiPolygonGeometry, feature) { }
        /**
         * @param {import("../geom/Point.js").default|import("./Feature.js").default} pointGeometry Point geometry.
         * @param {import("../Feature.js").FeatureLike} feature Feature.
         */
        drawPoint(pointGeometry, feature) { }
        /**
         * @param {import("../geom/Polygon.js").default|import("./Feature.js").default} polygonGeometry Polygon geometry.
         * @param {import("../Feature.js").FeatureLike} feature Feature.
         */
        drawPolygon(polygonGeometry, feature) { }
        /**
         * @param {import("../geom/SimpleGeometry.js").default|import("./Feature.js").default} geometry Geometry.
         * @param {import("../Feature.js").FeatureLike} feature Feature.
         */
        drawText(geometry, feature) { }
        /**
         * @param {import("../style/Fill.js").default} fillStyle Fill style.
         * @param {import("../style/Stroke.js").default} strokeStyle Stroke style.
         */
        setFillStrokeStyle(fillStyle, strokeStyle) { }
        /**
         * @param {import("../style/Image.js").default} imageStyle Image style.
         * @param {import("./canvas.js").DeclutterGroup=} opt_declutterGroup Declutter.
         */
        setImageStyle(imageStyle, opt_declutterGroup) { }
        /**
         * @param {import("../style/Text.js").default} textStyle Text style.
         * @param {import("./canvas.js").DeclutterGroups=} opt_declutterGroups Declutter.
         */
        setTextStyle(textStyle, opt_declutterGroups) { }
    }
    exports.default = VectorContext;
});
/**
 * @module ol/render/canvas/Immediate
 */
// FIXME test, especially polygons with holes and multipolygons
// FIXME need to handle large thick features (where pixel size matters)
// FIXME add offset and end to ol/geom/flat/transform~transform2D?
define("node_modules/ol/src/render/canvas/Immediate", ["require", "exports", "node_modules/ol/src/geom/GeometryType", "node_modules/ol/src/render/VectorContext", "node_modules/ol/src/colorlike", "node_modules/ol/src/transform", "node_modules/ol/src/render/canvas", "node_modules/ol/src/array", "node_modules/ol/src/extent", "node_modules/ol/src/geom/flat/transform", "node_modules/ol/src/geom/SimpleGeometry"], function (require, exports, GeometryType_js_13, VectorContext_js_1, colorlike_js_2, transform_js_8, canvas_js_2, array_js_13, extent_js_24, transform_js_9, SimpleGeometry_js_9) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @classdesc
     * A concrete subclass of {@link module:ol/render/VectorContext} that implements
     * direct rendering of features and geometries to an HTML5 Canvas context.
     * Instances of this class are created internally by the library and
     * provided to application code as vectorContext member of the
     * {@link module:ol/render/Event~RenderEvent} object associated with postcompose, precompose and
     * render events emitted by layers and maps.
     */
    class CanvasImmediateRenderer extends VectorContext_js_1.default {
        /**
         * @param {CanvasRenderingContext2D} context Context.
         * @param {number} pixelRatio Pixel ratio.
         * @param {import("../../extent.js").Extent} extent Extent.
         * @param {import("../../transform.js").Transform} transform Transform.
         * @param {number} viewRotation View rotation.
         * @param {number=} opt_squaredTolerance Optional squared tolerance for simplification.
         * @param {import("../../proj.js").TransformFunction=} opt_userTransform Transform from user to view projection.
         */
        constructor(context, pixelRatio, extent, transform, viewRotation, opt_squaredTolerance, opt_userTransform) {
            super();
            /**
             * @private
             * @type {CanvasRenderingContext2D}
             */
            this.context_ = context;
            /**
             * @private
             * @type {number}
             */
            this.pixelRatio_ = pixelRatio;
            /**
             * @private
             * @type {import("../../extent.js").Extent}
             */
            this.extent_ = extent;
            /**
             * @private
             * @type {import("../../transform.js").Transform}
             */
            this.transform_ = transform;
            /**
             * @private
             * @type {number}
             */
            this.viewRotation_ = viewRotation;
            /**
             * @private
             * @type {number}
             */
            this.squaredTolerance_ = opt_squaredTolerance;
            /**
             * @private
             * @type {import("../../proj.js").TransformFunction}
             */
            this.userTransform_ = opt_userTransform;
            /**
             * @private
             * @type {?import("../canvas.js").FillState}
             */
            this.contextFillState_ = null;
            /**
             * @private
             * @type {?import("../canvas.js").StrokeState}
             */
            this.contextStrokeState_ = null;
            /**
             * @private
             * @type {?import("../canvas.js").TextState}
             */
            this.contextTextState_ = null;
            /**
             * @private
             * @type {?import("../canvas.js").FillState}
             */
            this.fillState_ = null;
            /**
             * @private
             * @type {?import("../canvas.js").StrokeState}
             */
            this.strokeState_ = null;
            /**
             * @private
             * @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement}
             */
            this.image_ = null;
            /**
             * @private
             * @type {number}
             */
            this.imageAnchorX_ = 0;
            /**
             * @private
             * @type {number}
             */
            this.imageAnchorY_ = 0;
            /**
             * @private
             * @type {number}
             */
            this.imageHeight_ = 0;
            /**
             * @private
             * @type {number}
             */
            this.imageOpacity_ = 0;
            /**
             * @private
             * @type {number}
             */
            this.imageOriginX_ = 0;
            /**
             * @private
             * @type {number}
             */
            this.imageOriginY_ = 0;
            /**
             * @private
             * @type {boolean}
             */
            this.imageRotateWithView_ = false;
            /**
             * @private
             * @type {number}
             */
            this.imageRotation_ = 0;
            /**
             * @private
             * @type {import("../../size.js").Size}
             */
            this.imageScale_ = [0, 0];
            /**
             * @private
             * @type {number}
             */
            this.imageWidth_ = 0;
            /**
             * @private
             * @type {string}
             */
            this.text_ = '';
            /**
             * @private
             * @type {number}
             */
            this.textOffsetX_ = 0;
            /**
             * @private
             * @type {number}
             */
            this.textOffsetY_ = 0;
            /**
             * @private
             * @type {boolean}
             */
            this.textRotateWithView_ = false;
            /**
             * @private
             * @type {number}
             */
            this.textRotation_ = 0;
            /**
             * @private
             * @type {import("../../size.js").Size}
             */
            this.textScale_ = [0, 0];
            /**
             * @private
             * @type {?import("../canvas.js").FillState}
             */
            this.textFillState_ = null;
            /**
             * @private
             * @type {?import("../canvas.js").StrokeState}
             */
            this.textStrokeState_ = null;
            /**
             * @private
             * @type {?import("../canvas.js").TextState}
             */
            this.textState_ = null;
            /**
             * @private
             * @type {Array<number>}
             */
            this.pixelCoordinates_ = [];
            /**
             * @private
             * @type {import("../../transform.js").Transform}
             */
            this.tmpLocalTransform_ = transform_js_8.create();
        }
        /**
         * @param {Array<number>} flatCoordinates Flat coordinates.
         * @param {number} offset Offset.
         * @param {number} end End.
         * @param {number} stride Stride.
         * @private
         */
        drawImages_(flatCoordinates, offset, end, stride) {
            if (!this.image_) {
                return;
            }
            const pixelCoordinates = transform_js_9.transform2D(flatCoordinates, offset, end, 2, this.transform_, this.pixelCoordinates_);
            const context = this.context_;
            const localTransform = this.tmpLocalTransform_;
            const alpha = context.globalAlpha;
            if (this.imageOpacity_ != 1) {
                context.globalAlpha = alpha * this.imageOpacity_;
            }
            let rotation = this.imageRotation_;
            if (this.imageRotateWithView_) {
                rotation += this.viewRotation_;
            }
            for (let i = 0, ii = pixelCoordinates.length; i < ii; i += 2) {
                const x = pixelCoordinates[i] - this.imageAnchorX_;
                const y = pixelCoordinates[i + 1] - this.imageAnchorY_;
                if (rotation !== 0 ||
                    this.imageScale_[0] != 1 ||
                    this.imageScale_[1] != 1) {
                    const centerX = x + this.imageAnchorX_;
                    const centerY = y + this.imageAnchorY_;
                    transform_js_8.compose(localTransform, centerX, centerY, 1, 1, rotation, -centerX, -centerY);
                    context.setTransform.apply(context, localTransform);
                    context.translate(centerX, centerY);
                    context.scale(this.imageScale_[0], this.imageScale_[1]);
                    context.drawImage(this.image_, this.imageOriginX_, this.imageOriginY_, this.imageWidth_, this.imageHeight_, -this.imageAnchorX_, -this.imageAnchorY_, this.imageWidth_, this.imageHeight_);
                    context.setTransform(1, 0, 0, 1, 0, 0);
                }
                else {
                    context.drawImage(this.image_, this.imageOriginX_, this.imageOriginY_, this.imageWidth_, this.imageHeight_, x, y, this.imageWidth_, this.imageHeight_);
                }
            }
            if (this.imageOpacity_ != 1) {
                context.globalAlpha = alpha;
            }
        }
        /**
         * @param {Array<number>} flatCoordinates Flat coordinates.
         * @param {number} offset Offset.
         * @param {number} end End.
         * @param {number} stride Stride.
         * @private
         */
        drawText_(flatCoordinates, offset, end, stride) {
            if (!this.textState_ || this.text_ === '') {
                return;
            }
            if (this.textFillState_) {
                this.setContextFillState_(this.textFillState_);
            }
            if (this.textStrokeState_) {
                this.setContextStrokeState_(this.textStrokeState_);
            }
            this.setContextTextState_(this.textState_);
            const pixelCoordinates = transform_js_9.transform2D(flatCoordinates, offset, end, stride, this.transform_, this.pixelCoordinates_);
            const context = this.context_;
            let rotation = this.textRotation_;
            if (this.textRotateWithView_) {
                rotation += this.viewRotation_;
            }
            for (; offset < end; offset += stride) {
                const x = pixelCoordinates[offset] + this.textOffsetX_;
                const y = pixelCoordinates[offset + 1] + this.textOffsetY_;
                if (rotation !== 0 ||
                    this.textScale_[0] != 1 ||
                    this.textScale_[1] != 1) {
                    const localTransform = transform_js_8.compose(this.tmpLocalTransform_, x, y, 1, 1, rotation, -x, -y);
                    context.setTransform.apply(context, localTransform);
                    context.translate(x, y);
                    context.scale(this.textScale_[0], this.textScale_[1]);
                    if (this.textStrokeState_) {
                        context.strokeText(this.text_, 0, 0);
                    }
                    if (this.textFillState_) {
                        context.fillText(this.text_, 0, 0);
                    }
                    context.setTransform(1, 0, 0, 1, 0, 0);
                }
                else {
                    if (this.textStrokeState_) {
                        context.strokeText(this.text_, x, y);
                    }
                    if (this.textFillState_) {
                        context.fillText(this.text_, x, y);
                    }
                }
            }
        }
        /**
         * @param {Array<number>} flatCoordinates Flat coordinates.
         * @param {number} offset Offset.
         * @param {number} end End.
         * @param {number} stride Stride.
         * @param {boolean} close Close.
         * @private
         * @return {number} end End.
         */
        moveToLineTo_(flatCoordinates, offset, end, stride, close) {
            const context = this.context_;
            const pixelCoordinates = transform_js_9.transform2D(flatCoordinates, offset, end, stride, this.transform_, this.pixelCoordinates_);
            context.moveTo(pixelCoordinates[0], pixelCoordinates[1]);
            let length = pixelCoordinates.length;
            if (close) {
                length -= 2;
            }
            for (let i = 2; i < length; i += 2) {
                context.lineTo(pixelCoordinates[i], pixelCoordinates[i + 1]);
            }
            if (close) {
                context.closePath();
            }
            return end;
        }
        /**
         * @param {Array<number>} flatCoordinates Flat coordinates.
         * @param {number} offset Offset.
         * @param {Array<number>} ends Ends.
         * @param {number} stride Stride.
         * @private
         * @return {number} End.
         */
        drawRings_(flatCoordinates, offset, ends, stride) {
            for (let i = 0, ii = ends.length; i < ii; ++i) {
                offset = this.moveToLineTo_(flatCoordinates, offset, ends[i], stride, true);
            }
            return offset;
        }
        /**
         * Render a circle geometry into the canvas.  Rendering is immediate and uses
         * the current fill and stroke styles.
         *
         * @param {import("../../geom/Circle.js").default} geometry Circle geometry.
         * @api
         */
        drawCircle(geometry) {
            if (!extent_js_24.intersects(this.extent_, geometry.getExtent())) {
                return;
            }
            if (this.fillState_ || this.strokeState_) {
                if (this.fillState_) {
                    this.setContextFillState_(this.fillState_);
                }
                if (this.strokeState_) {
                    this.setContextStrokeState_(this.strokeState_);
                }
                const pixelCoordinates = SimpleGeometry_js_9.transformGeom2D(geometry, this.transform_, this.pixelCoordinates_);
                const dx = pixelCoordinates[2] - pixelCoordinates[0];
                const dy = pixelCoordinates[3] - pixelCoordinates[1];
                const radius = Math.sqrt(dx * dx + dy * dy);
                const context = this.context_;
                context.beginPath();
                context.arc(pixelCoordinates[0], pixelCoordinates[1], radius, 0, 2 * Math.PI);
                if (this.fillState_) {
                    context.fill();
                }
                if (this.strokeState_) {
                    context.stroke();
                }
            }
            if (this.text_ !== '') {
                this.drawText_(geometry.getCenter(), 0, 2, 2);
            }
        }
        /**
         * Set the rendering style.  Note that since this is an immediate rendering API,
         * any `zIndex` on the provided style will be ignored.
         *
         * @param {import("../../style/Style.js").default} style The rendering style.
         * @api
         */
        setStyle(style) {
            this.setFillStrokeStyle(style.getFill(), style.getStroke());
            this.setImageStyle(style.getImage());
            this.setTextStyle(style.getText());
        }
        /**
         * @param {import("../../transform.js").Transform} transform Transform.
         */
        setTransform(transform) {
            this.transform_ = transform;
        }
        /**
         * Render a geometry into the canvas.  Call
         * {@link module:ol/render/canvas/Immediate#setStyle} first to set the rendering style.
         *
         * @param {import("../../geom/Geometry.js").default|import("../Feature.js").default} geometry The geometry to render.
         * @api
         */
        drawGeometry(geometry) {
            const type = geometry.getType();
            switch (type) {
                case GeometryType_js_13.default.POINT:
                    this.drawPoint(
                    /** @type {import("../../geom/Point.js").default} */ (geometry));
                    break;
                case GeometryType_js_13.default.LINE_STRING:
                    this.drawLineString(
                    /** @type {import("../../geom/LineString.js").default} */ (geometry));
                    break;
                case GeometryType_js_13.default.POLYGON:
                    this.drawPolygon(
                    /** @type {import("../../geom/Polygon.js").default} */ (geometry));
                    break;
                case GeometryType_js_13.default.MULTI_POINT:
                    this.drawMultiPoint(
                    /** @type {import("../../geom/MultiPoint.js").default} */ (geometry));
                    break;
                case GeometryType_js_13.default.MULTI_LINE_STRING:
                    this.drawMultiLineString(
                    /** @type {import("../../geom/MultiLineString.js").default} */ (geometry));
                    break;
                case GeometryType_js_13.default.MULTI_POLYGON:
                    this.drawMultiPolygon(
                    /** @type {import("../../geom/MultiPolygon.js").default} */ (geometry));
                    break;
                case GeometryType_js_13.default.GEOMETRY_COLLECTION:
                    this.drawGeometryCollection(
                    /** @type {import("../../geom/GeometryCollection.js").default} */ (geometry));
                    break;
                case GeometryType_js_13.default.CIRCLE:
                    this.drawCircle(
                    /** @type {import("../../geom/Circle.js").default} */ (geometry));
                    break;
                default:
            }
        }
        /**
         * Render a feature into the canvas.  Note that any `zIndex` on the provided
         * style will be ignored - features are rendered immediately in the order that
         * this method is called.  If you need `zIndex` support, you should be using an
         * {@link module:ol/layer/Vector~VectorLayer} instead.
         *
         * @param {import("../../Feature.js").default} feature Feature.
         * @param {import("../../style/Style.js").default} style Style.
         * @api
         */
        drawFeature(feature, style) {
            const geometry = style.getGeometryFunction()(feature);
            if (!geometry || !extent_js_24.intersects(this.extent_, geometry.getExtent())) {
                return;
            }
            this.setStyle(style);
            this.drawGeometry(geometry);
        }
        /**
         * Render a GeometryCollection to the canvas.  Rendering is immediate and
         * uses the current styles appropriate for each geometry in the collection.
         *
         * @param {import("../../geom/GeometryCollection.js").default} geometry Geometry collection.
         */
        drawGeometryCollection(geometry) {
            const geometries = geometry.getGeometriesArray();
            for (let i = 0, ii = geometries.length; i < ii; ++i) {
                this.drawGeometry(geometries[i]);
            }
        }
        /**
         * Render a Point geometry into the canvas.  Rendering is immediate and uses
         * the current style.
         *
         * @param {import("../../geom/Point.js").default|import("../Feature.js").default} geometry Point geometry.
         */
        drawPoint(geometry) {
            if (this.squaredTolerance_) {
                geometry = /** @type {import("../../geom/Point.js").default} */ (geometry.simplifyTransformed(this.squaredTolerance_, this.userTransform_));
            }
            const flatCoordinates = geometry.getFlatCoordinates();
            const stride = geometry.getStride();
            if (this.image_) {
                this.drawImages_(flatCoordinates, 0, flatCoordinates.length, stride);
            }
            if (this.text_ !== '') {
                this.drawText_(flatCoordinates, 0, flatCoordinates.length, stride);
            }
        }
        /**
         * Render a MultiPoint geometry  into the canvas.  Rendering is immediate and
         * uses the current style.
         *
         * @param {import("../../geom/MultiPoint.js").default|import("../Feature.js").default} geometry MultiPoint geometry.
         */
        drawMultiPoint(geometry) {
            if (this.squaredTolerance_) {
                geometry = /** @type {import("../../geom/MultiPoint.js").default} */ (geometry.simplifyTransformed(this.squaredTolerance_, this.userTransform_));
            }
            const flatCoordinates = geometry.getFlatCoordinates();
            const stride = geometry.getStride();
            if (this.image_) {
                this.drawImages_(flatCoordinates, 0, flatCoordinates.length, stride);
            }
            if (this.text_ !== '') {
                this.drawText_(flatCoordinates, 0, flatCoordinates.length, stride);
            }
        }
        /**
         * Render a LineString into the canvas.  Rendering is immediate and uses
         * the current style.
         *
         * @param {import("../../geom/LineString.js").default|import("../Feature.js").default} geometry LineString geometry.
         */
        drawLineString(geometry) {
            if (this.squaredTolerance_) {
                geometry = /** @type {import("../../geom/LineString.js").default} */ (geometry.simplifyTransformed(this.squaredTolerance_, this.userTransform_));
            }
            if (!extent_js_24.intersects(this.extent_, geometry.getExtent())) {
                return;
            }
            if (this.strokeState_) {
                this.setContextStrokeState_(this.strokeState_);
                const context = this.context_;
                const flatCoordinates = geometry.getFlatCoordinates();
                context.beginPath();
                this.moveToLineTo_(flatCoordinates, 0, flatCoordinates.length, geometry.getStride(), false);
                context.stroke();
            }
            if (this.text_ !== '') {
                const flatMidpoint = geometry.getFlatMidpoint();
                this.drawText_(flatMidpoint, 0, 2, 2);
            }
        }
        /**
         * Render a MultiLineString geometry into the canvas.  Rendering is immediate
         * and uses the current style.
         *
         * @param {import("../../geom/MultiLineString.js").default|import("../Feature.js").default} geometry MultiLineString geometry.
         */
        drawMultiLineString(geometry) {
            if (this.squaredTolerance_) {
                geometry = /** @type {import("../../geom/MultiLineString.js").default} */ (geometry.simplifyTransformed(this.squaredTolerance_, this.userTransform_));
            }
            const geometryExtent = geometry.getExtent();
            if (!extent_js_24.intersects(this.extent_, geometryExtent)) {
                return;
            }
            if (this.strokeState_) {
                this.setContextStrokeState_(this.strokeState_);
                const context = this.context_;
                const flatCoordinates = geometry.getFlatCoordinates();
                let offset = 0;
                const ends = /** @type {Array<number>} */ (geometry.getEnds());
                const stride = geometry.getStride();
                context.beginPath();
                for (let i = 0, ii = ends.length; i < ii; ++i) {
                    offset = this.moveToLineTo_(flatCoordinates, offset, ends[i], stride, false);
                }
                context.stroke();
            }
            if (this.text_ !== '') {
                const flatMidpoints = geometry.getFlatMidpoints();
                this.drawText_(flatMidpoints, 0, flatMidpoints.length, 2);
            }
        }
        /**
         * Render a Polygon geometry into the canvas.  Rendering is immediate and uses
         * the current style.
         *
         * @param {import("../../geom/Polygon.js").default|import("../Feature.js").default} geometry Polygon geometry.
         */
        drawPolygon(geometry) {
            if (this.squaredTolerance_) {
                geometry = /** @type {import("../../geom/Polygon.js").default} */ (geometry.simplifyTransformed(this.squaredTolerance_, this.userTransform_));
            }
            if (!extent_js_24.intersects(this.extent_, geometry.getExtent())) {
                return;
            }
            if (this.strokeState_ || this.fillState_) {
                if (this.fillState_) {
                    this.setContextFillState_(this.fillState_);
                }
                if (this.strokeState_) {
                    this.setContextStrokeState_(this.strokeState_);
                }
                const context = this.context_;
                context.beginPath();
                this.drawRings_(geometry.getOrientedFlatCoordinates(), 0, 
                /** @type {Array<number>} */ (geometry.getEnds()), geometry.getStride());
                if (this.fillState_) {
                    context.fill();
                }
                if (this.strokeState_) {
                    context.stroke();
                }
            }
            if (this.text_ !== '') {
                const flatInteriorPoint = geometry.getFlatInteriorPoint();
                this.drawText_(flatInteriorPoint, 0, 2, 2);
            }
        }
        /**
         * Render MultiPolygon geometry into the canvas.  Rendering is immediate and
         * uses the current style.
         * @param {import("../../geom/MultiPolygon.js").default} geometry MultiPolygon geometry.
         */
        drawMultiPolygon(geometry) {
            if (this.squaredTolerance_) {
                geometry = /** @type {import("../../geom/MultiPolygon.js").default} */ (geometry.simplifyTransformed(this.squaredTolerance_, this.userTransform_));
            }
            if (!extent_js_24.intersects(this.extent_, geometry.getExtent())) {
                return;
            }
            if (this.strokeState_ || this.fillState_) {
                if (this.fillState_) {
                    this.setContextFillState_(this.fillState_);
                }
                if (this.strokeState_) {
                    this.setContextStrokeState_(this.strokeState_);
                }
                const context = this.context_;
                const flatCoordinates = geometry.getOrientedFlatCoordinates();
                let offset = 0;
                const endss = geometry.getEndss();
                const stride = geometry.getStride();
                context.beginPath();
                for (let i = 0, ii = endss.length; i < ii; ++i) {
                    const ends = endss[i];
                    offset = this.drawRings_(flatCoordinates, offset, ends, stride);
                }
                if (this.fillState_) {
                    context.fill();
                }
                if (this.strokeState_) {
                    context.stroke();
                }
            }
            if (this.text_ !== '') {
                const flatInteriorPoints = geometry.getFlatInteriorPoints();
                this.drawText_(flatInteriorPoints, 0, flatInteriorPoints.length, 2);
            }
        }
        /**
         * @param {import("../canvas.js").FillState} fillState Fill state.
         * @private
         */
        setContextFillState_(fillState) {
            const context = this.context_;
            const contextFillState = this.contextFillState_;
            if (!contextFillState) {
                context.fillStyle = fillState.fillStyle;
                this.contextFillState_ = {
                    fillStyle: fillState.fillStyle,
                };
            }
            else {
                if (contextFillState.fillStyle != fillState.fillStyle) {
                    contextFillState.fillStyle = fillState.fillStyle;
                    context.fillStyle = fillState.fillStyle;
                }
            }
        }
        /**
         * @param {import("../canvas.js").StrokeState} strokeState Stroke state.
         * @private
         */
        setContextStrokeState_(strokeState) {
            const context = this.context_;
            const contextStrokeState = this.contextStrokeState_;
            if (!contextStrokeState) {
                context.lineCap = strokeState.lineCap;
                if (context.setLineDash) {
                    context.setLineDash(strokeState.lineDash);
                    context.lineDashOffset = strokeState.lineDashOffset;
                }
                context.lineJoin = strokeState.lineJoin;
                context.lineWidth = strokeState.lineWidth;
                context.miterLimit = strokeState.miterLimit;
                context.strokeStyle = strokeState.strokeStyle;
                this.contextStrokeState_ = {
                    lineCap: strokeState.lineCap,
                    lineDash: strokeState.lineDash,
                    lineDashOffset: strokeState.lineDashOffset,
                    lineJoin: strokeState.lineJoin,
                    lineWidth: strokeState.lineWidth,
                    miterLimit: strokeState.miterLimit,
                    strokeStyle: strokeState.strokeStyle,
                };
            }
            else {
                if (contextStrokeState.lineCap != strokeState.lineCap) {
                    contextStrokeState.lineCap = strokeState.lineCap;
                    context.lineCap = strokeState.lineCap;
                }
                if (context.setLineDash) {
                    if (!array_js_13.equals(contextStrokeState.lineDash, strokeState.lineDash)) {
                        context.setLineDash((contextStrokeState.lineDash = strokeState.lineDash));
                    }
                    if (contextStrokeState.lineDashOffset != strokeState.lineDashOffset) {
                        contextStrokeState.lineDashOffset = strokeState.lineDashOffset;
                        context.lineDashOffset = strokeState.lineDashOffset;
                    }
                }
                if (contextStrokeState.lineJoin != strokeState.lineJoin) {
                    contextStrokeState.lineJoin = strokeState.lineJoin;
                    context.lineJoin = strokeState.lineJoin;
                }
                if (contextStrokeState.lineWidth != strokeState.lineWidth) {
                    contextStrokeState.lineWidth = strokeState.lineWidth;
                    context.lineWidth = strokeState.lineWidth;
                }
                if (contextStrokeState.miterLimit != strokeState.miterLimit) {
                    contextStrokeState.miterLimit = strokeState.miterLimit;
                    context.miterLimit = strokeState.miterLimit;
                }
                if (contextStrokeState.strokeStyle != strokeState.strokeStyle) {
                    contextStrokeState.strokeStyle = strokeState.strokeStyle;
                    context.strokeStyle = strokeState.strokeStyle;
                }
            }
        }
        /**
         * @param {import("../canvas.js").TextState} textState Text state.
         * @private
         */
        setContextTextState_(textState) {
            const context = this.context_;
            const contextTextState = this.contextTextState_;
            const textAlign = textState.textAlign
                ? textState.textAlign
                : canvas_js_2.defaultTextAlign;
            if (!contextTextState) {
                context.font = textState.font;
                context.textAlign = /** @type {CanvasTextAlign} */ (textAlign);
                context.textBaseline = /** @type {CanvasTextBaseline} */ (textState.textBaseline);
                this.contextTextState_ = {
                    font: textState.font,
                    textAlign: textAlign,
                    textBaseline: textState.textBaseline,
                };
            }
            else {
                if (contextTextState.font != textState.font) {
                    contextTextState.font = textState.font;
                    context.font = textState.font;
                }
                if (contextTextState.textAlign != textAlign) {
                    contextTextState.textAlign = /** @type {CanvasTextAlign} */ (textAlign);
                    context.textAlign = /** @type {CanvasTextAlign} */ (textAlign);
                }
                if (contextTextState.textBaseline != textState.textBaseline) {
                    contextTextState.textBaseline = /** @type {CanvasTextBaseline} */ (textState.textBaseline);
                    context.textBaseline = /** @type {CanvasTextBaseline} */ (textState.textBaseline);
                }
            }
        }
        /**
         * Set the fill and stroke style for subsequent draw operations.  To clear
         * either fill or stroke styles, pass null for the appropriate parameter.
         *
         * @param {import("../../style/Fill.js").default} fillStyle Fill style.
         * @param {import("../../style/Stroke.js").default} strokeStyle Stroke style.
         */
        setFillStrokeStyle(fillStyle, strokeStyle) {
            if (!fillStyle) {
                this.fillState_ = null;
            }
            else {
                const fillStyleColor = fillStyle.getColor();
                this.fillState_ = {
                    fillStyle: colorlike_js_2.asColorLike(fillStyleColor ? fillStyleColor : canvas_js_2.defaultFillStyle),
                };
            }
            if (!strokeStyle) {
                this.strokeState_ = null;
            }
            else {
                const strokeStyleColor = strokeStyle.getColor();
                const strokeStyleLineCap = strokeStyle.getLineCap();
                const strokeStyleLineDash = strokeStyle.getLineDash();
                const strokeStyleLineDashOffset = strokeStyle.getLineDashOffset();
                const strokeStyleLineJoin = strokeStyle.getLineJoin();
                const strokeStyleWidth = strokeStyle.getWidth();
                const strokeStyleMiterLimit = strokeStyle.getMiterLimit();
                this.strokeState_ = {
                    lineCap: strokeStyleLineCap !== undefined
                        ? strokeStyleLineCap
                        : canvas_js_2.defaultLineCap,
                    lineDash: strokeStyleLineDash ? strokeStyleLineDash : canvas_js_2.defaultLineDash,
                    lineDashOffset: strokeStyleLineDashOffset
                        ? strokeStyleLineDashOffset
                        : canvas_js_2.defaultLineDashOffset,
                    lineJoin: strokeStyleLineJoin !== undefined
                        ? strokeStyleLineJoin
                        : canvas_js_2.defaultLineJoin,
                    lineWidth: this.pixelRatio_ *
                        (strokeStyleWidth !== undefined
                            ? strokeStyleWidth
                            : canvas_js_2.defaultLineWidth),
                    miterLimit: strokeStyleMiterLimit !== undefined
                        ? strokeStyleMiterLimit
                        : canvas_js_2.defaultMiterLimit,
                    strokeStyle: colorlike_js_2.asColorLike(strokeStyleColor ? strokeStyleColor : canvas_js_2.defaultStrokeStyle),
                };
            }
        }
        /**
         * Set the image style for subsequent draw operations.  Pass null to remove
         * the image style.
         *
         * @param {import("../../style/Image.js").default} imageStyle Image style.
         */
        setImageStyle(imageStyle) {
            if (!imageStyle) {
                this.image_ = null;
            }
            else {
                const imageSize = imageStyle.getSize();
                if (!imageSize) {
                    this.image_ = null;
                }
                else {
                    const imageAnchor = imageStyle.getAnchor();
                    // FIXME pixel ratio
                    const imageImage = imageStyle.getImage(1);
                    const imageOrigin = imageStyle.getOrigin();
                    const imageScale = imageStyle.getScaleArray();
                    this.imageAnchorX_ = imageAnchor[0];
                    this.imageAnchorY_ = imageAnchor[1];
                    this.imageHeight_ = imageSize[1];
                    this.image_ = imageImage;
                    this.imageOpacity_ = imageStyle.getOpacity();
                    this.imageOriginX_ = imageOrigin[0];
                    this.imageOriginY_ = imageOrigin[1];
                    this.imageRotateWithView_ = imageStyle.getRotateWithView();
                    this.imageRotation_ = imageStyle.getRotation();
                    this.imageScale_ = [
                        this.pixelRatio_ * imageScale[0],
                        this.pixelRatio_ * imageScale[1],
                    ];
                    this.imageWidth_ = imageSize[0];
                }
            }
        }
        /**
         * Set the text style for subsequent draw operations.  Pass null to
         * remove the text style.
         *
         * @param {import("../../style/Text.js").default} textStyle Text style.
         */
        setTextStyle(textStyle) {
            if (!textStyle) {
                this.text_ = '';
            }
            else {
                const textFillStyle = textStyle.getFill();
                if (!textFillStyle) {
                    this.textFillState_ = null;
                }
                else {
                    const textFillStyleColor = textFillStyle.getColor();
                    this.textFillState_ = {
                        fillStyle: colorlike_js_2.asColorLike(textFillStyleColor ? textFillStyleColor : canvas_js_2.defaultFillStyle),
                    };
                }
                const textStrokeStyle = textStyle.getStroke();
                if (!textStrokeStyle) {
                    this.textStrokeState_ = null;
                }
                else {
                    const textStrokeStyleColor = textStrokeStyle.getColor();
                    const textStrokeStyleLineCap = textStrokeStyle.getLineCap();
                    const textStrokeStyleLineDash = textStrokeStyle.getLineDash();
                    const textStrokeStyleLineDashOffset = textStrokeStyle.getLineDashOffset();
                    const textStrokeStyleLineJoin = textStrokeStyle.getLineJoin();
                    const textStrokeStyleWidth = textStrokeStyle.getWidth();
                    const textStrokeStyleMiterLimit = textStrokeStyle.getMiterLimit();
                    this.textStrokeState_ = {
                        lineCap: textStrokeStyleLineCap !== undefined
                            ? textStrokeStyleLineCap
                            : canvas_js_2.defaultLineCap,
                        lineDash: textStrokeStyleLineDash
                            ? textStrokeStyleLineDash
                            : canvas_js_2.defaultLineDash,
                        lineDashOffset: textStrokeStyleLineDashOffset
                            ? textStrokeStyleLineDashOffset
                            : canvas_js_2.defaultLineDashOffset,
                        lineJoin: textStrokeStyleLineJoin !== undefined
                            ? textStrokeStyleLineJoin
                            : canvas_js_2.defaultLineJoin,
                        lineWidth: textStrokeStyleWidth !== undefined
                            ? textStrokeStyleWidth
                            : canvas_js_2.defaultLineWidth,
                        miterLimit: textStrokeStyleMiterLimit !== undefined
                            ? textStrokeStyleMiterLimit
                            : canvas_js_2.defaultMiterLimit,
                        strokeStyle: colorlike_js_2.asColorLike(textStrokeStyleColor ? textStrokeStyleColor : canvas_js_2.defaultStrokeStyle),
                    };
                }
                const textFont = textStyle.getFont();
                const textOffsetX = textStyle.getOffsetX();
                const textOffsetY = textStyle.getOffsetY();
                const textRotateWithView = textStyle.getRotateWithView();
                const textRotation = textStyle.getRotation();
                const textScale = textStyle.getScaleArray();
                const textText = textStyle.getText();
                const textTextAlign = textStyle.getTextAlign();
                const textTextBaseline = textStyle.getTextBaseline();
                this.textState_ = {
                    font: textFont !== undefined ? textFont : canvas_js_2.defaultFont,
                    textAlign: textTextAlign !== undefined ? textTextAlign : canvas_js_2.defaultTextAlign,
                    textBaseline: textTextBaseline !== undefined
                        ? textTextBaseline
                        : canvas_js_2.defaultTextBaseline,
                };
                this.text_ = textText !== undefined ? textText : '';
                this.textOffsetX_ =
                    textOffsetX !== undefined ? this.pixelRatio_ * textOffsetX : 0;
                this.textOffsetY_ =
                    textOffsetY !== undefined ? this.pixelRatio_ * textOffsetY : 0;
                this.textRotateWithView_ =
                    textRotateWithView !== undefined ? textRotateWithView : false;
                this.textRotation_ = textRotation !== undefined ? textRotation : 0;
                this.textScale_ = [
                    this.pixelRatio_ * textScale[0],
                    this.pixelRatio_ * textScale[1],
                ];
            }
        }
    }
    exports.default = CanvasImmediateRenderer;
});
/**
 * @module ol/render/canvas/BuilderType
 */
define("node_modules/ol/src/render/canvas/BuilderType", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @enum {string}
     */
    exports.default = {
        CIRCLE: 'Circle',
        DEFAULT: 'Default',
        IMAGE: 'Image',
        LINE_STRING: 'LineString',
        POLYGON: 'Polygon',
        TEXT: 'Text',
    };
});
/**
 * @module ol/render/canvas/Instruction
 */
define("node_modules/ol/src/render/canvas/Instruction", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.closePathInstruction = exports.beginPathInstruction = exports.strokeInstruction = exports.fillInstruction = void 0;
    /**
     * @enum {number}
     */
    const Instruction = {
        BEGIN_GEOMETRY: 0,
        BEGIN_PATH: 1,
        CIRCLE: 2,
        CLOSE_PATH: 3,
        CUSTOM: 4,
        DRAW_CHARS: 5,
        DRAW_IMAGE: 6,
        END_GEOMETRY: 7,
        FILL: 8,
        MOVE_TO_LINE_TO: 9,
        SET_FILL_STYLE: 10,
        SET_STROKE_STYLE: 11,
        STROKE: 12,
    };
    /**
     * @type {Array<Instruction>}
     */
    exports.fillInstruction = [Instruction.FILL];
    /**
     * @type {Array<Instruction>}
     */
    exports.strokeInstruction = [Instruction.STROKE];
    /**
     * @type {Array<Instruction>}
     */
    exports.beginPathInstruction = [Instruction.BEGIN_PATH];
    /**
     * @type {Array<Instruction>}
     */
    exports.closePathInstruction = [Instruction.CLOSE_PATH];
    exports.default = Instruction;
});
define("node_modules/ol/src/render/canvas/Builder", ["require", "exports", "node_modules/ol/src/render/canvas/Instruction", "node_modules/ol/src/geom/GeometryType", "node_modules/ol/src/extent/Relationship", "node_modules/ol/src/render/VectorContext", "node_modules/ol/src/colorlike", "node_modules/ol/src/extent", "node_modules/ol/src/render/canvas", "node_modules/ol/src/array", "node_modules/ol/src/geom/flat/inflate"], function (require, exports, Instruction_js_1, GeometryType_js_14, Relationship_js_2, VectorContext_js_2, colorlike_js_3, extent_js_25, canvas_js_3, array_js_14, inflate_js_7) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @typedef {Object} SerializableInstructions
     * @property {Array<*>} instructions The rendering instructions.
     * @property {Array<*>} hitDetectionInstructions The rendering hit detection instructions.
     * @property {Array<number>} coordinates The array of all coordinates.
     * @property {!Object<string, import("../canvas.js").TextState>} [textStates] The text states (decluttering).
     * @property {!Object<string, import("../canvas.js").FillState>} [fillStates] The fill states (decluttering).
     * @property {!Object<string, import("../canvas.js").StrokeState>} [strokeStates] The stroke states (decluttering).
     */
    class CanvasBuilder extends VectorContext_js_2.default {
        /**
         * @param {number} tolerance Tolerance.
         * @param {import("../../extent.js").Extent} maxExtent Maximum extent.
         * @param {number} resolution Resolution.
         * @param {number} pixelRatio Pixel ratio.
         */
        constructor(tolerance, maxExtent, resolution, pixelRatio) {
            super();
            /**
             * @protected
             * @type {number}
             */
            this.tolerance = tolerance;
            /**
             * @protected
             * @const
             * @type {import("../../extent.js").Extent}
             */
            this.maxExtent = maxExtent;
            /**
             * @protected
             * @type {number}
             */
            this.pixelRatio = pixelRatio;
            /**
             * @protected
             * @type {number}
             */
            this.maxLineWidth = 0;
            /**
             * @protected
             * @const
             * @type {number}
             */
            this.resolution = resolution;
            /**
             * @private
             * @type {Array<*>}
             */
            this.beginGeometryInstruction1_ = null;
            /**
             * @private
             * @type {Array<*>}
             */
            this.beginGeometryInstruction2_ = null;
            /**
             * @private
             * @type {import("../../extent.js").Extent}
             */
            this.bufferedMaxExtent_ = null;
            /**
             * @protected
             * @type {Array<*>}
             */
            this.instructions = [];
            /**
             * @protected
             * @type {Array<number>}
             */
            this.coordinates = [];
            /**
             * @private
             * @type {import("../../coordinate.js").Coordinate}
             */
            this.tmpCoordinate_ = [];
            /**
             * @protected
             * @type {Array<*>}
             */
            this.hitDetectionInstructions = [];
            /**
             * @protected
             * @type {import("../canvas.js").FillStrokeState}
             */
            this.state = /** @type {import("../canvas.js").FillStrokeState} */ ({});
        }
        /**
         * @protected
         * @param {Array<number>} dashArray Dash array.
         * @return {Array<number>} Dash array with pixel ratio applied
         */
        applyPixelRatio(dashArray) {
            const pixelRatio = this.pixelRatio;
            return pixelRatio == 1
                ? dashArray
                : dashArray.map(function (dash) {
                    return dash * pixelRatio;
                });
        }
        /**
         * @param {Array<number>} flatCoordinates Flat coordinates.
         * @param {number} offset Offset.
         * @param {number} end End.
         * @param {number} stride Stride.
         * @param {boolean} closed Last input coordinate equals first.
         * @param {boolean} skipFirst Skip first coordinate.
         * @protected
         * @return {number} My end.
         */
        appendFlatCoordinates(flatCoordinates, offset, end, stride, closed, skipFirst) {
            let myEnd = this.coordinates.length;
            const extent = this.getBufferedMaxExtent();
            if (skipFirst) {
                offset += stride;
            }
            let lastXCoord = flatCoordinates[offset];
            let lastYCoord = flatCoordinates[offset + 1];
            const nextCoord = this.tmpCoordinate_;
            let skipped = true;
            let i, lastRel, nextRel;
            for (i = offset + stride; i < end; i += stride) {
                nextCoord[0] = flatCoordinates[i];
                nextCoord[1] = flatCoordinates[i + 1];
                nextRel = extent_js_25.coordinateRelationship(extent, nextCoord);
                if (nextRel !== lastRel) {
                    if (skipped) {
                        this.coordinates[myEnd++] = lastXCoord;
                        this.coordinates[myEnd++] = lastYCoord;
                    }
                    this.coordinates[myEnd++] = nextCoord[0];
                    this.coordinates[myEnd++] = nextCoord[1];
                    skipped = false;
                }
                else if (nextRel === Relationship_js_2.default.INTERSECTING) {
                    this.coordinates[myEnd++] = nextCoord[0];
                    this.coordinates[myEnd++] = nextCoord[1];
                    skipped = false;
                }
                else {
                    skipped = true;
                }
                lastXCoord = nextCoord[0];
                lastYCoord = nextCoord[1];
                lastRel = nextRel;
            }
            // Last coordinate equals first or only one point to append:
            if ((closed && skipped) || i === offset + stride) {
                this.coordinates[myEnd++] = lastXCoord;
                this.coordinates[myEnd++] = lastYCoord;
            }
            return myEnd;
        }
        /**
         * @param {Array<number>} flatCoordinates Flat coordinates.
         * @param {number} offset Offset.
         * @param {Array<number>} ends Ends.
         * @param {number} stride Stride.
         * @param {Array<number>} builderEnds Builder ends.
         * @return {number} Offset.
         */
        drawCustomCoordinates_(flatCoordinates, offset, ends, stride, builderEnds) {
            for (let i = 0, ii = ends.length; i < ii; ++i) {
                const end = ends[i];
                const builderEnd = this.appendFlatCoordinates(flatCoordinates, offset, end, stride, false, false);
                builderEnds.push(builderEnd);
                offset = end;
            }
            return offset;
        }
        /**
         * @param {import("../../geom/SimpleGeometry.js").default} geometry Geometry.
         * @param {import("../../Feature.js").FeatureLike} feature Feature.
         * @param {Function} renderer Renderer.
         */
        drawCustom(geometry, feature, renderer) {
            this.beginGeometry(geometry, feature);
            const type = geometry.getType();
            const stride = geometry.getStride();
            const builderBegin = this.coordinates.length;
            let flatCoordinates, builderEnd, builderEnds, builderEndss;
            let offset;
            if (type == GeometryType_js_14.default.MULTI_POLYGON) {
                flatCoordinates = /** @type {import("../../geom/MultiPolygon.js").default} */ (geometry).getOrientedFlatCoordinates();
                builderEndss = [];
                const endss = /** @type {import("../../geom/MultiPolygon.js").default} */ (geometry).getEndss();
                offset = 0;
                for (let i = 0, ii = endss.length; i < ii; ++i) {
                    const myEnds = [];
                    offset = this.drawCustomCoordinates_(flatCoordinates, offset, endss[i], stride, myEnds);
                    builderEndss.push(myEnds);
                }
                this.instructions.push([
                    Instruction_js_1.default.CUSTOM,
                    builderBegin,
                    builderEndss,
                    geometry,
                    renderer,
                    inflate_js_7.inflateMultiCoordinatesArray,
                ]);
            }
            else if (type == GeometryType_js_14.default.POLYGON ||
                type == GeometryType_js_14.default.MULTI_LINE_STRING) {
                builderEnds = [];
                flatCoordinates =
                    type == GeometryType_js_14.default.POLYGON
                        ? /** @type {import("../../geom/Polygon.js").default} */ (geometry).getOrientedFlatCoordinates()
                        : geometry.getFlatCoordinates();
                offset = this.drawCustomCoordinates_(flatCoordinates, 0, 
                /** @type {import("../../geom/Polygon.js").default|import("../../geom/MultiLineString.js").default} */ (geometry).getEnds(), stride, builderEnds);
                this.instructions.push([
                    Instruction_js_1.default.CUSTOM,
                    builderBegin,
                    builderEnds,
                    geometry,
                    renderer,
                    inflate_js_7.inflateCoordinatesArray,
                ]);
            }
            else if (type == GeometryType_js_14.default.LINE_STRING ||
                type == GeometryType_js_14.default.MULTI_POINT) {
                flatCoordinates = geometry.getFlatCoordinates();
                builderEnd = this.appendFlatCoordinates(flatCoordinates, 0, flatCoordinates.length, stride, false, false);
                this.instructions.push([
                    Instruction_js_1.default.CUSTOM,
                    builderBegin,
                    builderEnd,
                    geometry,
                    renderer,
                    inflate_js_7.inflateCoordinates,
                ]);
            }
            else if (type == GeometryType_js_14.default.POINT) {
                flatCoordinates = geometry.getFlatCoordinates();
                this.coordinates.push(flatCoordinates[0], flatCoordinates[1]);
                builderEnd = this.coordinates.length;
                this.instructions.push([
                    Instruction_js_1.default.CUSTOM,
                    builderBegin,
                    builderEnd,
                    geometry,
                    renderer,
                ]);
            }
            this.endGeometry(feature);
        }
        /**
         * @protected
         * @param {import("../../geom/Geometry").default|import("../Feature.js").default} geometry The geometry.
         * @param {import("../../Feature.js").FeatureLike} feature Feature.
         */
        beginGeometry(geometry, feature) {
            const extent = geometry.getExtent();
            this.beginGeometryInstruction1_ = [
                Instruction_js_1.default.BEGIN_GEOMETRY,
                feature,
                0,
                extent,
            ];
            this.instructions.push(this.beginGeometryInstruction1_);
            this.beginGeometryInstruction2_ = [
                Instruction_js_1.default.BEGIN_GEOMETRY,
                feature,
                0,
                extent,
            ];
            this.hitDetectionInstructions.push(this.beginGeometryInstruction2_);
        }
        /**
         * @return {SerializableInstructions} the serializable instructions.
         */
        finish() {
            return {
                instructions: this.instructions,
                hitDetectionInstructions: this.hitDetectionInstructions,
                coordinates: this.coordinates,
            };
        }
        /**
         * Reverse the hit detection instructions.
         */
        reverseHitDetectionInstructions() {
            const hitDetectionInstructions = this.hitDetectionInstructions;
            // step 1 - reverse array
            hitDetectionInstructions.reverse();
            // step 2 - reverse instructions within geometry blocks
            let i;
            const n = hitDetectionInstructions.length;
            let instruction;
            let type;
            let begin = -1;
            for (i = 0; i < n; ++i) {
                instruction = hitDetectionInstructions[i];
                type = /** @type {import("./Instruction.js").default} */ (instruction[0]);
                if (type == Instruction_js_1.default.END_GEOMETRY) {
                    begin = i;
                }
                else if (type == Instruction_js_1.default.BEGIN_GEOMETRY) {
                    instruction[2] = i;
                    array_js_14.reverseSubArray(this.hitDetectionInstructions, begin, i);
                    begin = -1;
                }
            }
        }
        /**
         * @param {import("../../style/Fill.js").default} fillStyle Fill style.
         * @param {import("../../style/Stroke.js").default} strokeStyle Stroke style.
         */
        setFillStrokeStyle(fillStyle, strokeStyle) {
            const state = this.state;
            if (fillStyle) {
                const fillStyleColor = fillStyle.getColor();
                state.fillStyle = colorlike_js_3.asColorLike(fillStyleColor ? fillStyleColor : canvas_js_3.defaultFillStyle);
            }
            else {
                state.fillStyle = undefined;
            }
            if (strokeStyle) {
                const strokeStyleColor = strokeStyle.getColor();
                state.strokeStyle = colorlike_js_3.asColorLike(strokeStyleColor ? strokeStyleColor : canvas_js_3.defaultStrokeStyle);
                const strokeStyleLineCap = strokeStyle.getLineCap();
                state.lineCap =
                    strokeStyleLineCap !== undefined ? strokeStyleLineCap : canvas_js_3.defaultLineCap;
                const strokeStyleLineDash = strokeStyle.getLineDash();
                state.lineDash = strokeStyleLineDash
                    ? strokeStyleLineDash.slice()
                    : canvas_js_3.defaultLineDash;
                const strokeStyleLineDashOffset = strokeStyle.getLineDashOffset();
                state.lineDashOffset = strokeStyleLineDashOffset
                    ? strokeStyleLineDashOffset
                    : canvas_js_3.defaultLineDashOffset;
                const strokeStyleLineJoin = strokeStyle.getLineJoin();
                state.lineJoin =
                    strokeStyleLineJoin !== undefined
                        ? strokeStyleLineJoin
                        : canvas_js_3.defaultLineJoin;
                const strokeStyleWidth = strokeStyle.getWidth();
                state.lineWidth =
                    strokeStyleWidth !== undefined ? strokeStyleWidth : canvas_js_3.defaultLineWidth;
                const strokeStyleMiterLimit = strokeStyle.getMiterLimit();
                state.miterLimit =
                    strokeStyleMiterLimit !== undefined
                        ? strokeStyleMiterLimit
                        : canvas_js_3.defaultMiterLimit;
                if (state.lineWidth > this.maxLineWidth) {
                    this.maxLineWidth = state.lineWidth;
                    // invalidate the buffered max extent cache
                    this.bufferedMaxExtent_ = null;
                }
            }
            else {
                state.strokeStyle = undefined;
                state.lineCap = undefined;
                state.lineDash = null;
                state.lineDashOffset = undefined;
                state.lineJoin = undefined;
                state.lineWidth = undefined;
                state.miterLimit = undefined;
            }
        }
        /**
         * @param {import("../canvas.js").FillStrokeState} state State.
         * @return {Array<*>} Fill instruction.
         */
        createFill(state) {
            const fillStyle = state.fillStyle;
            /** @type {Array<*>} */
            const fillInstruction = [Instruction_js_1.default.SET_FILL_STYLE, fillStyle];
            if (typeof fillStyle !== 'string') {
                // Fill is a pattern or gradient - align it!
                fillInstruction.push(true);
            }
            return fillInstruction;
        }
        /**
         * @param {import("../canvas.js").FillStrokeState} state State.
         */
        applyStroke(state) {
            this.instructions.push(this.createStroke(state));
        }
        /**
         * @param {import("../canvas.js").FillStrokeState} state State.
         * @return {Array<*>} Stroke instruction.
         */
        createStroke(state) {
            return [
                Instruction_js_1.default.SET_STROKE_STYLE,
                state.strokeStyle,
                state.lineWidth * this.pixelRatio,
                state.lineCap,
                state.lineJoin,
                state.miterLimit,
                this.applyPixelRatio(state.lineDash),
                state.lineDashOffset * this.pixelRatio,
            ];
        }
        /**
         * @param {import("../canvas.js").FillStrokeState} state State.
         * @param {function(this:CanvasBuilder, import("../canvas.js").FillStrokeState):Array<*>} createFill Create fill.
         */
        updateFillStyle(state, createFill) {
            const fillStyle = state.fillStyle;
            if (typeof fillStyle !== 'string' || state.currentFillStyle != fillStyle) {
                if (fillStyle !== undefined) {
                    this.instructions.push(createFill.call(this, state));
                }
                state.currentFillStyle = fillStyle;
            }
        }
        /**
         * @param {import("../canvas.js").FillStrokeState} state State.
         * @param {function(this:CanvasBuilder, import("../canvas.js").FillStrokeState): void} applyStroke Apply stroke.
         */
        updateStrokeStyle(state, applyStroke) {
            const strokeStyle = state.strokeStyle;
            const lineCap = state.lineCap;
            const lineDash = state.lineDash;
            const lineDashOffset = state.lineDashOffset;
            const lineJoin = state.lineJoin;
            const lineWidth = state.lineWidth;
            const miterLimit = state.miterLimit;
            if (state.currentStrokeStyle != strokeStyle ||
                state.currentLineCap != lineCap ||
                (lineDash != state.currentLineDash &&
                    !array_js_14.equals(state.currentLineDash, lineDash)) ||
                state.currentLineDashOffset != lineDashOffset ||
                state.currentLineJoin != lineJoin ||
                state.currentLineWidth != lineWidth ||
                state.currentMiterLimit != miterLimit) {
                if (strokeStyle !== undefined) {
                    applyStroke.call(this, state);
                }
                state.currentStrokeStyle = strokeStyle;
                state.currentLineCap = lineCap;
                state.currentLineDash = lineDash;
                state.currentLineDashOffset = lineDashOffset;
                state.currentLineJoin = lineJoin;
                state.currentLineWidth = lineWidth;
                state.currentMiterLimit = miterLimit;
            }
        }
        /**
         * @param {import("../../Feature.js").FeatureLike} feature Feature.
         */
        endGeometry(feature) {
            this.beginGeometryInstruction1_[2] = this.instructions.length;
            this.beginGeometryInstruction1_ = null;
            this.beginGeometryInstruction2_[2] = this.hitDetectionInstructions.length;
            this.beginGeometryInstruction2_ = null;
            const endGeometryInstruction = [Instruction_js_1.default.END_GEOMETRY, feature];
            this.instructions.push(endGeometryInstruction);
            this.hitDetectionInstructions.push(endGeometryInstruction);
        }
        /**
         * Get the buffered rendering extent.  Rendering will be clipped to the extent
         * provided to the constructor.  To account for symbolizers that may intersect
         * this extent, we calculate a buffered extent (e.g. based on stroke width).
         * @return {import("../../extent.js").Extent} The buffered rendering extent.
         * @protected
         */
        getBufferedMaxExtent() {
            if (!this.bufferedMaxExtent_) {
                this.bufferedMaxExtent_ = extent_js_25.clone(this.maxExtent);
                if (this.maxLineWidth > 0) {
                    const width = (this.resolution * (this.maxLineWidth + 1)) / 2;
                    extent_js_25.buffer(this.bufferedMaxExtent_, width, this.bufferedMaxExtent_);
                }
            }
            return this.bufferedMaxExtent_;
        }
    }
    exports.default = CanvasBuilder;
});
define("node_modules/ol/src/render/canvas/ImageBuilder", ["require", "exports", "node_modules/ol/src/render/canvas/Builder", "node_modules/ol/src/render/canvas/Instruction"], function (require, exports, Builder_js_1, Instruction_js_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    class CanvasImageBuilder extends Builder_js_1.default {
        /**
         * @param {number} tolerance Tolerance.
         * @param {import("../../extent.js").Extent} maxExtent Maximum extent.
         * @param {number} resolution Resolution.
         * @param {number} pixelRatio Pixel ratio.
         */
        constructor(tolerance, maxExtent, resolution, pixelRatio) {
            super(tolerance, maxExtent, resolution, pixelRatio);
            /**
             * @private
             * @type {import("../canvas.js").DeclutterGroups}
             */
            this.declutterGroups_ = null;
            /**
             * @private
             * @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement}
             */
            this.hitDetectionImage_ = null;
            /**
             * @private
             * @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement}
             */
            this.image_ = null;
            /**
             * @private
             * @type {number|undefined}
             */
            this.imagePixelRatio_ = undefined;
            /**
             * @private
             * @type {number|undefined}
             */
            this.anchorX_ = undefined;
            /**
             * @private
             * @type {number|undefined}
             */
            this.anchorY_ = undefined;
            /**
             * @private
             * @type {number|undefined}
             */
            this.height_ = undefined;
            /**
             * @private
             * @type {number|undefined}
             */
            this.opacity_ = undefined;
            /**
             * @private
             * @type {number|undefined}
             */
            this.originX_ = undefined;
            /**
             * @private
             * @type {number|undefined}
             */
            this.originY_ = undefined;
            /**
             * @private
             * @type {boolean|undefined}
             */
            this.rotateWithView_ = undefined;
            /**
             * @private
             * @type {number|undefined}
             */
            this.rotation_ = undefined;
            /**
             * @private
             * @type {import("../../size.js").Size|undefined}
             */
            this.scale_ = undefined;
            /**
             * @private
             * @type {number|undefined}
             */
            this.width_ = undefined;
        }
        /**
         * @param {Array<number>} flatCoordinates Flat coordinates.
         * @param {number} offset Offset.
         * @param {number} end End.
         * @param {number} stride Stride.
         * @private
         * @return {number} My end.
         */
        drawCoordinates_(flatCoordinates, offset, end, stride) {
            return this.appendFlatCoordinates(flatCoordinates, offset, end, stride, false, false);
        }
        /**
         * @param {import("../../geom/Point.js").default|import("../Feature.js").default} pointGeometry Point geometry.
         * @param {import("../../Feature.js").FeatureLike} feature Feature.
         */
        drawPoint(pointGeometry, feature) {
            if (!this.image_) {
                return;
            }
            this.beginGeometry(pointGeometry, feature);
            const flatCoordinates = pointGeometry.getFlatCoordinates();
            const stride = pointGeometry.getStride();
            const myBegin = this.coordinates.length;
            const myEnd = this.drawCoordinates_(flatCoordinates, 0, flatCoordinates.length, stride);
            this.instructions.push([
                Instruction_js_2.default.DRAW_IMAGE,
                myBegin,
                myEnd,
                this.image_,
                // Remaining arguments to DRAW_IMAGE are in alphabetical order
                this.anchorX_ * this.imagePixelRatio_,
                this.anchorY_ * this.imagePixelRatio_,
                this.declutterGroups_,
                Math.ceil(this.height_ * this.imagePixelRatio_),
                this.opacity_,
                this.originX_,
                this.originY_,
                this.rotateWithView_,
                this.rotation_,
                [
                    (this.scale_[0] * this.pixelRatio) / this.imagePixelRatio_,
                    (this.scale_[1] * this.pixelRatio) / this.imagePixelRatio_,
                ],
                Math.ceil(this.width_ * this.imagePixelRatio_),
            ]);
            this.hitDetectionInstructions.push([
                Instruction_js_2.default.DRAW_IMAGE,
                myBegin,
                myEnd,
                this.hitDetectionImage_,
                // Remaining arguments to DRAW_IMAGE are in alphabetical order
                this.anchorX_,
                this.anchorY_,
                this.declutterGroups_,
                this.height_,
                this.opacity_,
                this.originX_,
                this.originY_,
                this.rotateWithView_,
                this.rotation_,
                this.scale_,
                this.width_,
            ]);
            this.endGeometry(feature);
        }
        /**
         * @param {import("../../geom/MultiPoint.js").default|import("../Feature.js").default} multiPointGeometry MultiPoint geometry.
         * @param {import("../../Feature.js").FeatureLike} feature Feature.
         */
        drawMultiPoint(multiPointGeometry, feature) {
            if (!this.image_) {
                return;
            }
            this.beginGeometry(multiPointGeometry, feature);
            const flatCoordinates = multiPointGeometry.getFlatCoordinates();
            const stride = multiPointGeometry.getStride();
            const myBegin = this.coordinates.length;
            const myEnd = this.drawCoordinates_(flatCoordinates, 0, flatCoordinates.length, stride);
            this.instructions.push([
                Instruction_js_2.default.DRAW_IMAGE,
                myBegin,
                myEnd,
                this.image_,
                // Remaining arguments to DRAW_IMAGE are in alphabetical order
                this.anchorX_ * this.imagePixelRatio_,
                this.anchorY_ * this.imagePixelRatio_,
                this.declutterGroups_,
                Math.ceil(this.height_ * this.imagePixelRatio_),
                this.opacity_,
                this.originX_,
                this.originY_,
                this.rotateWithView_,
                this.rotation_,
                [
                    (this.scale_[0] * this.pixelRatio) / this.imagePixelRatio_,
                    (this.scale_[1] * this.pixelRatio) / this.imagePixelRatio_,
                ],
                Math.ceil(this.width_ * this.imagePixelRatio_),
            ]);
            this.hitDetectionInstructions.push([
                Instruction_js_2.default.DRAW_IMAGE,
                myBegin,
                myEnd,
                this.hitDetectionImage_,
                // Remaining arguments to DRAW_IMAGE are in alphabetical order
                this.anchorX_,
                this.anchorY_,
                this.declutterGroups_,
                this.height_,
                this.opacity_,
                this.originX_,
                this.originY_,
                this.rotateWithView_,
                this.rotation_,
                this.scale_,
                this.width_,
            ]);
            this.endGeometry(feature);
        }
        /**
         * @return {import("./Builder.js").SerializableInstructions} the serializable instructions.
         */
        finish() {
            this.reverseHitDetectionInstructions();
            // FIXME this doesn't really protect us against further calls to draw*Geometry
            this.anchorX_ = undefined;
            this.anchorY_ = undefined;
            this.hitDetectionImage_ = null;
            this.image_ = null;
            this.imagePixelRatio_ = undefined;
            this.height_ = undefined;
            this.scale_ = undefined;
            this.opacity_ = undefined;
            this.originX_ = undefined;
            this.originY_ = undefined;
            this.rotateWithView_ = undefined;
            this.rotation_ = undefined;
            this.width_ = undefined;
            return super.finish();
        }
        /**
         * @param {import("../../style/Image.js").default} imageStyle Image style.
         * @param {import("../canvas.js").DeclutterGroup} declutterGroups Declutter.
         */
        setImageStyle(imageStyle, declutterGroups) {
            const anchor = imageStyle.getAnchor();
            const size = imageStyle.getSize();
            const hitDetectionImage = imageStyle.getHitDetectionImage();
            const image = imageStyle.getImage(this.pixelRatio);
            const origin = imageStyle.getOrigin();
            this.imagePixelRatio_ = imageStyle.getPixelRatio(this.pixelRatio);
            this.anchorX_ = anchor[0];
            this.anchorY_ = anchor[1];
            this.declutterGroups_ = declutterGroups;
            this.hitDetectionImage_ = hitDetectionImage;
            this.image_ = image;
            this.height_ = size[1];
            this.opacity_ = imageStyle.getOpacity();
            this.originX_ = origin[0];
            this.originY_ = origin[1];
            this.rotateWithView_ = imageStyle.getRotateWithView();
            this.rotation_ = imageStyle.getRotation();
            this.scale_ = imageStyle.getScaleArray();
            this.width_ = size[0];
        }
    }
    exports.default = CanvasImageBuilder;
});
define("node_modules/ol/src/render/canvas/LineStringBuilder", ["require", "exports", "node_modules/ol/src/render/canvas/Builder", "node_modules/ol/src/render/canvas/Instruction"], function (require, exports, Builder_js_2, Instruction_js_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    class CanvasLineStringBuilder extends Builder_js_2.default {
        /**
         * @param {number} tolerance Tolerance.
         * @param {import("../../extent.js").Extent} maxExtent Maximum extent.
         * @param {number} resolution Resolution.
         * @param {number} pixelRatio Pixel ratio.
         */
        constructor(tolerance, maxExtent, resolution, pixelRatio) {
            super(tolerance, maxExtent, resolution, pixelRatio);
        }
        /**
         * @param {Array<number>} flatCoordinates Flat coordinates.
         * @param {number} offset Offset.
         * @param {number} end End.
         * @param {number} stride Stride.
         * @private
         * @return {number} end.
         */
        drawFlatCoordinates_(flatCoordinates, offset, end, stride) {
            const myBegin = this.coordinates.length;
            const myEnd = this.appendFlatCoordinates(flatCoordinates, offset, end, stride, false, false);
            const moveToLineToInstruction = [
                Instruction_js_3.default.MOVE_TO_LINE_TO,
                myBegin,
                myEnd,
            ];
            this.instructions.push(moveToLineToInstruction);
            this.hitDetectionInstructions.push(moveToLineToInstruction);
            return end;
        }
        /**
         * @param {import("../../geom/LineString.js").default|import("../Feature.js").default} lineStringGeometry Line string geometry.
         * @param {import("../../Feature.js").FeatureLike} feature Feature.
         */
        drawLineString(lineStringGeometry, feature) {
            const state = this.state;
            const strokeStyle = state.strokeStyle;
            const lineWidth = state.lineWidth;
            if (strokeStyle === undefined || lineWidth === undefined) {
                return;
            }
            this.updateStrokeStyle(state, this.applyStroke);
            this.beginGeometry(lineStringGeometry, feature);
            this.hitDetectionInstructions.push([
                Instruction_js_3.default.SET_STROKE_STYLE,
                state.strokeStyle,
                state.lineWidth,
                state.lineCap,
                state.lineJoin,
                state.miterLimit,
                state.lineDash,
                state.lineDashOffset,
            ], Instruction_js_3.beginPathInstruction);
            const flatCoordinates = lineStringGeometry.getFlatCoordinates();
            const stride = lineStringGeometry.getStride();
            this.drawFlatCoordinates_(flatCoordinates, 0, flatCoordinates.length, stride);
            this.hitDetectionInstructions.push(Instruction_js_3.strokeInstruction);
            this.endGeometry(feature);
        }
        /**
         * @param {import("../../geom/MultiLineString.js").default|import("../Feature.js").default} multiLineStringGeometry MultiLineString geometry.
         * @param {import("../../Feature.js").FeatureLike} feature Feature.
         */
        drawMultiLineString(multiLineStringGeometry, feature) {
            const state = this.state;
            const strokeStyle = state.strokeStyle;
            const lineWidth = state.lineWidth;
            if (strokeStyle === undefined || lineWidth === undefined) {
                return;
            }
            this.updateStrokeStyle(state, this.applyStroke);
            this.beginGeometry(multiLineStringGeometry, feature);
            this.hitDetectionInstructions.push([
                Instruction_js_3.default.SET_STROKE_STYLE,
                state.strokeStyle,
                state.lineWidth,
                state.lineCap,
                state.lineJoin,
                state.miterLimit,
                state.lineDash,
                state.lineDashOffset,
            ], Instruction_js_3.beginPathInstruction);
            const ends = multiLineStringGeometry.getEnds();
            const flatCoordinates = multiLineStringGeometry.getFlatCoordinates();
            const stride = multiLineStringGeometry.getStride();
            let offset = 0;
            for (let i = 0, ii = ends.length; i < ii; ++i) {
                offset = this.drawFlatCoordinates_(flatCoordinates, offset, 
                /** @type {number} */ (ends[i]), stride);
            }
            this.hitDetectionInstructions.push(Instruction_js_3.strokeInstruction);
            this.endGeometry(feature);
        }
        /**
         * @return {import("./Builder.js").SerializableInstructions} the serializable instructions.
         */
        finish() {
            const state = this.state;
            if (state.lastStroke != undefined &&
                state.lastStroke != this.coordinates.length) {
                this.instructions.push(Instruction_js_3.strokeInstruction);
            }
            this.reverseHitDetectionInstructions();
            this.state = null;
            return super.finish();
        }
        /**
         * @param {import("../canvas.js").FillStrokeState} state State.
         */
        applyStroke(state) {
            if (state.lastStroke != undefined &&
                state.lastStroke != this.coordinates.length) {
                this.instructions.push(Instruction_js_3.strokeInstruction);
                state.lastStroke = this.coordinates.length;
            }
            state.lastStroke = 0;
            super.applyStroke(state);
            this.instructions.push(Instruction_js_3.beginPathInstruction);
        }
    }
    exports.default = CanvasLineStringBuilder;
});
define("node_modules/ol/src/render/canvas/PolygonBuilder", ["require", "exports", "node_modules/ol/src/render/canvas/Builder", "node_modules/ol/src/render/canvas/Instruction", "node_modules/ol/src/render/canvas", "node_modules/ol/src/geom/flat/simplify"], function (require, exports, Builder_js_3, Instruction_js_4, canvas_js_4, simplify_js_6) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    class CanvasPolygonBuilder extends Builder_js_3.default {
        /**
         * @param {number} tolerance Tolerance.
         * @param {import("../../extent.js").Extent} maxExtent Maximum extent.
         * @param {number} resolution Resolution.
         * @param {number} pixelRatio Pixel ratio.
         */
        constructor(tolerance, maxExtent, resolution, pixelRatio) {
            super(tolerance, maxExtent, resolution, pixelRatio);
        }
        /**
         * @param {Array<number>} flatCoordinates Flat coordinates.
         * @param {number} offset Offset.
         * @param {Array<number>} ends Ends.
         * @param {number} stride Stride.
         * @private
         * @return {number} End.
         */
        drawFlatCoordinatess_(flatCoordinates, offset, ends, stride) {
            const state = this.state;
            const fill = state.fillStyle !== undefined;
            const stroke = state.strokeStyle !== undefined;
            const numEnds = ends.length;
            this.instructions.push(Instruction_js_4.beginPathInstruction);
            this.hitDetectionInstructions.push(Instruction_js_4.beginPathInstruction);
            for (let i = 0; i < numEnds; ++i) {
                const end = ends[i];
                const myBegin = this.coordinates.length;
                const myEnd = this.appendFlatCoordinates(flatCoordinates, offset, end, stride, true, !stroke);
                const moveToLineToInstruction = [
                    Instruction_js_4.default.MOVE_TO_LINE_TO,
                    myBegin,
                    myEnd,
                ];
                this.instructions.push(moveToLineToInstruction);
                this.hitDetectionInstructions.push(moveToLineToInstruction);
                if (stroke) {
                    // Performance optimization: only call closePath() when we have a stroke.
                    // Otherwise the ring is closed already (see appendFlatCoordinates above).
                    this.instructions.push(Instruction_js_4.closePathInstruction);
                    this.hitDetectionInstructions.push(Instruction_js_4.closePathInstruction);
                }
                offset = end;
            }
            if (fill) {
                this.instructions.push(Instruction_js_4.fillInstruction);
                this.hitDetectionInstructions.push(Instruction_js_4.fillInstruction);
            }
            if (stroke) {
                this.instructions.push(Instruction_js_4.strokeInstruction);
                this.hitDetectionInstructions.push(Instruction_js_4.strokeInstruction);
            }
            return offset;
        }
        /**
         * @param {import("../../geom/Circle.js").default} circleGeometry Circle geometry.
         * @param {import("../../Feature.js").default} feature Feature.
         */
        drawCircle(circleGeometry, feature) {
            const state = this.state;
            const fillStyle = state.fillStyle;
            const strokeStyle = state.strokeStyle;
            if (fillStyle === undefined && strokeStyle === undefined) {
                return;
            }
            this.setFillStrokeStyles_();
            this.beginGeometry(circleGeometry, feature);
            if (state.fillStyle !== undefined) {
                this.hitDetectionInstructions.push([
                    Instruction_js_4.default.SET_FILL_STYLE,
                    canvas_js_4.defaultFillStyle,
                ]);
            }
            if (state.strokeStyle !== undefined) {
                this.hitDetectionInstructions.push([
                    Instruction_js_4.default.SET_STROKE_STYLE,
                    state.strokeStyle,
                    state.lineWidth,
                    state.lineCap,
                    state.lineJoin,
                    state.miterLimit,
                    state.lineDash,
                    state.lineDashOffset,
                ]);
            }
            const flatCoordinates = circleGeometry.getFlatCoordinates();
            const stride = circleGeometry.getStride();
            const myBegin = this.coordinates.length;
            this.appendFlatCoordinates(flatCoordinates, 0, flatCoordinates.length, stride, false, false);
            const circleInstruction = [Instruction_js_4.default.CIRCLE, myBegin];
            this.instructions.push(Instruction_js_4.beginPathInstruction, circleInstruction);
            this.hitDetectionInstructions.push(Instruction_js_4.beginPathInstruction, circleInstruction);
            if (state.fillStyle !== undefined) {
                this.instructions.push(Instruction_js_4.fillInstruction);
                this.hitDetectionInstructions.push(Instruction_js_4.fillInstruction);
            }
            if (state.strokeStyle !== undefined) {
                this.instructions.push(Instruction_js_4.strokeInstruction);
                this.hitDetectionInstructions.push(Instruction_js_4.strokeInstruction);
            }
            this.endGeometry(feature);
        }
        /**
         * @param {import("../../geom/Polygon.js").default|import("../Feature.js").default} polygonGeometry Polygon geometry.
         * @param {import("../../Feature.js").FeatureLike} feature Feature.
         */
        drawPolygon(polygonGeometry, feature) {
            const state = this.state;
            const fillStyle = state.fillStyle;
            const strokeStyle = state.strokeStyle;
            if (fillStyle === undefined && strokeStyle === undefined) {
                return;
            }
            this.setFillStrokeStyles_();
            this.beginGeometry(polygonGeometry, feature);
            if (state.fillStyle !== undefined) {
                this.hitDetectionInstructions.push([
                    Instruction_js_4.default.SET_FILL_STYLE,
                    canvas_js_4.defaultFillStyle,
                ]);
            }
            if (state.strokeStyle !== undefined) {
                this.hitDetectionInstructions.push([
                    Instruction_js_4.default.SET_STROKE_STYLE,
                    state.strokeStyle,
                    state.lineWidth,
                    state.lineCap,
                    state.lineJoin,
                    state.miterLimit,
                    state.lineDash,
                    state.lineDashOffset,
                ]);
            }
            const ends = polygonGeometry.getEnds();
            const flatCoordinates = polygonGeometry.getOrientedFlatCoordinates();
            const stride = polygonGeometry.getStride();
            this.drawFlatCoordinatess_(flatCoordinates, 0, 
            /** @type {Array<number>} */ (ends), stride);
            this.endGeometry(feature);
        }
        /**
         * @param {import("../../geom/MultiPolygon.js").default} multiPolygonGeometry MultiPolygon geometry.
         * @param {import("../../Feature.js").FeatureLike} feature Feature.
         */
        drawMultiPolygon(multiPolygonGeometry, feature) {
            const state = this.state;
            const fillStyle = state.fillStyle;
            const strokeStyle = state.strokeStyle;
            if (fillStyle === undefined && strokeStyle === undefined) {
                return;
            }
            this.setFillStrokeStyles_();
            this.beginGeometry(multiPolygonGeometry, feature);
            if (state.fillStyle !== undefined) {
                this.hitDetectionInstructions.push([
                    Instruction_js_4.default.SET_FILL_STYLE,
                    canvas_js_4.defaultFillStyle,
                ]);
            }
            if (state.strokeStyle !== undefined) {
                this.hitDetectionInstructions.push([
                    Instruction_js_4.default.SET_STROKE_STYLE,
                    state.strokeStyle,
                    state.lineWidth,
                    state.lineCap,
                    state.lineJoin,
                    state.miterLimit,
                    state.lineDash,
                    state.lineDashOffset,
                ]);
            }
            const endss = multiPolygonGeometry.getEndss();
            const flatCoordinates = multiPolygonGeometry.getOrientedFlatCoordinates();
            const stride = multiPolygonGeometry.getStride();
            let offset = 0;
            for (let i = 0, ii = endss.length; i < ii; ++i) {
                offset = this.drawFlatCoordinatess_(flatCoordinates, offset, endss[i], stride);
            }
            this.endGeometry(feature);
        }
        /**
         * @return {import("./Builder.js").SerializableInstructions} the serializable instructions.
         */
        finish() {
            this.reverseHitDetectionInstructions();
            this.state = null;
            // We want to preserve topology when drawing polygons.  Polygons are
            // simplified using quantization and point elimination. However, we might
            // have received a mix of quantized and non-quantized geometries, so ensure
            // that all are quantized by quantizing all coordinates in the batch.
            const tolerance = this.tolerance;
            if (tolerance !== 0) {
                const coordinates = this.coordinates;
                for (let i = 0, ii = coordinates.length; i < ii; ++i) {
                    coordinates[i] = simplify_js_6.snap(coordinates[i], tolerance);
                }
            }
            return super.finish();
        }
        /**
         * @private
         */
        setFillStrokeStyles_() {
            const state = this.state;
            const fillStyle = state.fillStyle;
            if (fillStyle !== undefined) {
                this.updateFillStyle(state, this.createFill);
            }
            if (state.strokeStyle !== undefined) {
                this.updateStrokeStyle(state, this.applyStroke);
            }
        }
    }
    exports.default = CanvasPolygonBuilder;
});
/**
 * @module ol/geom/flat/straightchunk
 */
define("node_modules/ol/src/geom/flat/straightchunk", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.matchingChunk = void 0;
    /**
     * @param {number} maxAngle Maximum acceptable angle delta between segments.
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @return {Array<number>} Start and end of the first suitable chunk of the
     * given `flatCoordinates`.
     */
    function matchingChunk(maxAngle, flatCoordinates, offset, end, stride) {
        let chunkStart = offset;
        let chunkEnd = offset;
        let chunkM = 0;
        let m = 0;
        let start = offset;
        let acos, i, m12, m23, x1, y1, x12, y12, x23, y23;
        for (i = offset; i < end; i += stride) {
            const x2 = flatCoordinates[i];
            const y2 = flatCoordinates[i + 1];
            if (x1 !== undefined) {
                x23 = x2 - x1;
                y23 = y2 - y1;
                m23 = Math.sqrt(x23 * x23 + y23 * y23);
                if (x12 !== undefined) {
                    m += m12;
                    acos = Math.acos((x12 * x23 + y12 * y23) / (m12 * m23));
                    if (acos > maxAngle) {
                        if (m > chunkM) {
                            chunkM = m;
                            chunkStart = start;
                            chunkEnd = i;
                        }
                        m = 0;
                        start = i - stride;
                    }
                }
                m12 = m23;
                x12 = x23;
                y12 = y23;
            }
            x1 = x2;
            y1 = y2;
        }
        m += m23;
        return m > chunkM ? [start, i] : [chunkStart, chunkEnd];
    }
    exports.matchingChunk = matchingChunk;
});
define("node_modules/ol/src/render/canvas/TextBuilder", ["require", "exports", "node_modules/ol/src/render/canvas/Builder", "node_modules/ol/src/render/canvas/Instruction", "node_modules/ol/src/geom/GeometryType", "node_modules/ol/src/style/TextPlacement", "node_modules/ol/src/colorlike", "node_modules/ol/src/render/canvas", "node_modules/ol/src/util", "node_modules/ol/src/extent", "node_modules/ol/src/geom/flat/straightchunk"], function (require, exports, Builder_js_4, Instruction_js_5, GeometryType_js_15, TextPlacement_js_2, colorlike_js_4, canvas_js_5, util_js_10, extent_js_26, straightchunk_js_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TEXT_ALIGN = void 0;
    /**
     * @const
     * @enum {number}
     */
    exports.TEXT_ALIGN = {
        'left': 0,
        'end': 0,
        'center': 0.5,
        'right': 1,
        'start': 1,
        'top': 0,
        'middle': 0.5,
        'hanging': 0.2,
        'alphabetic': 0.8,
        'ideographic': 0.8,
        'bottom': 1,
    };
    class CanvasTextBuilder extends Builder_js_4.default {
        /**
         * @param {number} tolerance Tolerance.
         * @param {import("../../extent.js").Extent} maxExtent Maximum extent.
         * @param {number} resolution Resolution.
         * @param {number} pixelRatio Pixel ratio.
         */
        constructor(tolerance, maxExtent, resolution, pixelRatio) {
            super(tolerance, maxExtent, resolution, pixelRatio);
            /**
             * @private
             * @type {import("../canvas.js").DeclutterGroups}
             */
            this.declutterGroups_;
            /**
             * @private
             * @type {Array<HTMLCanvasElement>}
             */
            this.labels_ = null;
            /**
             * @private
             * @type {string}
             */
            this.text_ = '';
            /**
             * @private
             * @type {number}
             */
            this.textOffsetX_ = 0;
            /**
             * @private
             * @type {number}
             */
            this.textOffsetY_ = 0;
            /**
             * @private
             * @type {boolean|undefined}
             */
            this.textRotateWithView_ = undefined;
            /**
             * @private
             * @type {number}
             */
            this.textRotation_ = 0;
            /**
             * @private
             * @type {?import("../canvas.js").FillState}
             */
            this.textFillState_ = null;
            /**
             * @type {!Object<string, import("../canvas.js").FillState>}
             */
            this.fillStates = {};
            /**
             * @private
             * @type {?import("../canvas.js").StrokeState}
             */
            this.textStrokeState_ = null;
            /**
             * @type {!Object<string, import("../canvas.js").StrokeState>}
             */
            this.strokeStates = {};
            /**
             * @private
             * @type {import("../canvas.js").TextState}
             */
            this.textState_ = /** @type {import("../canvas.js").TextState} */ ({});
            /**
             * @type {!Object<string, import("../canvas.js").TextState>}
             */
            this.textStates = {};
            /**
             * @private
             * @type {string}
             */
            this.textKey_ = '';
            /**
             * @private
             * @type {string}
             */
            this.fillKey_ = '';
            /**
             * @private
             * @type {string}
             */
            this.strokeKey_ = '';
        }
        /**
         * @return {import("./Builder.js").SerializableInstructions} the serializable instructions.
         */
        finish() {
            const instructions = super.finish();
            instructions.textStates = this.textStates;
            instructions.fillStates = this.fillStates;
            instructions.strokeStates = this.strokeStates;
            return instructions;
        }
        /**
         * @param {import("../../geom/SimpleGeometry.js").default|import("../Feature.js").default} geometry Geometry.
         * @param {import("../../Feature.js").FeatureLike} feature Feature.
         */
        drawText(geometry, feature) {
            const fillState = this.textFillState_;
            const strokeState = this.textStrokeState_;
            const textState = this.textState_;
            if (this.text_ === '' || !textState || (!fillState && !strokeState)) {
                return;
            }
            let begin = this.coordinates.length;
            const geometryType = geometry.getType();
            let flatCoordinates = null;
            let end = 2;
            let stride = geometry.getStride();
            let i, ii;
            if (textState.placement === TextPlacement_js_2.default.LINE) {
                if (!extent_js_26.intersects(this.getBufferedMaxExtent(), geometry.getExtent())) {
                    return;
                }
                let ends;
                flatCoordinates = geometry.getFlatCoordinates();
                if (geometryType == GeometryType_js_15.default.LINE_STRING) {
                    ends = [flatCoordinates.length];
                }
                else if (geometryType == GeometryType_js_15.default.MULTI_LINE_STRING) {
                    ends = /** @type {import("../../geom/MultiLineString.js").default} */ (geometry).getEnds();
                }
                else if (geometryType == GeometryType_js_15.default.POLYGON) {
                    ends = /** @type {import("../../geom/Polygon.js").default} */ (geometry)
                        .getEnds()
                        .slice(0, 1);
                }
                else if (geometryType == GeometryType_js_15.default.MULTI_POLYGON) {
                    const endss = /** @type {import("../../geom/MultiPolygon.js").default} */ (geometry).getEndss();
                    ends = [];
                    for (i = 0, ii = endss.length; i < ii; ++i) {
                        ends.push(endss[i][0]);
                    }
                }
                this.beginGeometry(geometry, feature);
                const textAlign = textState.textAlign;
                let flatOffset = 0;
                let flatEnd;
                for (let o = 0, oo = ends.length; o < oo; ++o) {
                    if (textAlign == undefined) {
                        const range = straightchunk_js_1.matchingChunk(textState.maxAngle, flatCoordinates, flatOffset, ends[o], stride);
                        flatOffset = range[0];
                        flatEnd = range[1];
                    }
                    else {
                        flatEnd = ends[o];
                    }
                    for (i = flatOffset; i < flatEnd; i += stride) {
                        this.coordinates.push(flatCoordinates[i], flatCoordinates[i + 1]);
                    }
                    end = this.coordinates.length;
                    flatOffset = ends[o];
                    const declutterGroup = this.declutterGroups_
                        ? o === 0
                            ? this.declutterGroups_[0]
                            : [].concat(this.declutterGroups_[0])
                        : null;
                    this.drawChars_(begin, end, declutterGroup);
                    begin = end;
                }
                this.endGeometry(feature);
            }
            else {
                let geometryWidths = null;
                if (!textState.overflow) {
                    geometryWidths = [];
                }
                switch (geometryType) {
                    case GeometryType_js_15.default.POINT:
                    case GeometryType_js_15.default.MULTI_POINT:
                        flatCoordinates = /** @type {import("../../geom/MultiPoint.js").default} */ (geometry).getFlatCoordinates();
                        end = flatCoordinates.length;
                        break;
                    case GeometryType_js_15.default.LINE_STRING:
                        flatCoordinates = /** @type {import("../../geom/LineString.js").default} */ (geometry).getFlatMidpoint();
                        break;
                    case GeometryType_js_15.default.CIRCLE:
                        flatCoordinates = /** @type {import("../../geom/Circle.js").default} */ (geometry).getCenter();
                        break;
                    case GeometryType_js_15.default.MULTI_LINE_STRING:
                        flatCoordinates = /** @type {import("../../geom/MultiLineString.js").default} */ (geometry).getFlatMidpoints();
                        stride = 2;
                        end = flatCoordinates.length;
                        break;
                    case GeometryType_js_15.default.POLYGON:
                        flatCoordinates = /** @type {import("../../geom/Polygon.js").default} */ (geometry).getFlatInteriorPoint();
                        if (!textState.overflow) {
                            geometryWidths.push(flatCoordinates[2] / this.resolution);
                        }
                        stride = 3;
                        break;
                    case GeometryType_js_15.default.MULTI_POLYGON:
                        const interiorPoints = /** @type {import("../../geom/MultiPolygon.js").default} */ (geometry).getFlatInteriorPoints();
                        flatCoordinates = [];
                        for (i = 0, ii = interiorPoints.length; i < ii; i += 3) {
                            if (!textState.overflow) {
                                geometryWidths.push(interiorPoints[i + 2] / this.resolution);
                            }
                            flatCoordinates.push(interiorPoints[i], interiorPoints[i + 1]);
                        }
                        stride = 2;
                        end = flatCoordinates.length;
                        if (end == 0) {
                            return;
                        }
                        break;
                    default:
                }
                end = this.appendFlatCoordinates(flatCoordinates, 0, end, stride, false, false);
                this.saveTextStates_();
                if (textState.backgroundFill || textState.backgroundStroke) {
                    this.setFillStrokeStyle(textState.backgroundFill, textState.backgroundStroke);
                    if (textState.backgroundFill) {
                        this.updateFillStyle(this.state, this.createFill);
                        this.hitDetectionInstructions.push(this.createFill(this.state));
                    }
                    if (textState.backgroundStroke) {
                        this.updateStrokeStyle(this.state, this.applyStroke);
                        this.hitDetectionInstructions.push(this.createStroke(this.state));
                    }
                }
                this.beginGeometry(geometry, feature);
                // adjust padding for negative scale
                let padding = textState.padding;
                if (padding != canvas_js_5.defaultPadding &&
                    (textState.scale[0] < 0 || textState.scale[1] < 0)) {
                    let p0 = textState.padding[0];
                    let p1 = textState.padding[1];
                    let p2 = textState.padding[2];
                    let p3 = textState.padding[3];
                    if (textState.scale[0] < 0) {
                        p1 = -p1;
                        p3 = -p3;
                    }
                    if (textState.scale[1] < 0) {
                        p0 = -p0;
                        p2 = -p2;
                    }
                    padding = [p0, p1, p2, p3];
                }
                // The image is unknown at this stage so we pass null; it will be computed at render time.
                // For clarity, we pass NaN for offsetX, offsetY, width and height, which will be computed at
                // render time.
                const pixelRatio = this.pixelRatio;
                this.instructions.push([
                    Instruction_js_5.default.DRAW_IMAGE,
                    begin,
                    end,
                    null,
                    NaN,
                    NaN,
                    this.declutterGroups_,
                    NaN,
                    1,
                    0,
                    0,
                    this.textRotateWithView_,
                    this.textRotation_,
                    [1, 1],
                    NaN,
                    padding == canvas_js_5.defaultPadding
                        ? canvas_js_5.defaultPadding
                        : padding.map(function (p) {
                            return p * pixelRatio;
                        }),
                    !!textState.backgroundFill,
                    !!textState.backgroundStroke,
                    this.text_,
                    this.textKey_,
                    this.strokeKey_,
                    this.fillKey_,
                    this.textOffsetX_,
                    this.textOffsetY_,
                    geometryWidths,
                ]);
                const scale = 1 / pixelRatio;
                this.hitDetectionInstructions.push([
                    Instruction_js_5.default.DRAW_IMAGE,
                    begin,
                    end,
                    null,
                    NaN,
                    NaN,
                    this.declutterGroups_,
                    NaN,
                    1,
                    0,
                    0,
                    this.textRotateWithView_,
                    this.textRotation_,
                    [scale, scale],
                    NaN,
                    padding,
                    !!textState.backgroundFill,
                    !!textState.backgroundStroke,
                    this.text_,
                    this.textKey_,
                    this.strokeKey_,
                    this.fillKey_,
                    this.textOffsetX_,
                    this.textOffsetY_,
                    geometryWidths,
                ]);
                this.endGeometry(feature);
            }
        }
        /**
         * @private
         */
        saveTextStates_() {
            const strokeState = this.textStrokeState_;
            const textState = this.textState_;
            const fillState = this.textFillState_;
            const strokeKey = this.strokeKey_;
            if (strokeState) {
                if (!(strokeKey in this.strokeStates)) {
                    this.strokeStates[strokeKey] = {
                        strokeStyle: strokeState.strokeStyle,
                        lineCap: strokeState.lineCap,
                        lineDashOffset: strokeState.lineDashOffset,
                        lineWidth: strokeState.lineWidth,
                        lineJoin: strokeState.lineJoin,
                        miterLimit: strokeState.miterLimit,
                        lineDash: strokeState.lineDash,
                    };
                }
            }
            const textKey = this.textKey_;
            if (!(textKey in this.textStates)) {
                this.textStates[textKey] = {
                    font: textState.font,
                    textAlign: textState.textAlign || canvas_js_5.defaultTextAlign,
                    textBaseline: textState.textBaseline || canvas_js_5.defaultTextBaseline,
                    scale: textState.scale,
                };
            }
            const fillKey = this.fillKey_;
            if (fillState) {
                if (!(fillKey in this.fillStates)) {
                    this.fillStates[fillKey] = {
                        fillStyle: fillState.fillStyle,
                    };
                }
            }
        }
        /**
         * @private
         * @param {number} begin Begin.
         * @param {number} end End.
         * @param {import("../canvas.js").DeclutterGroup} declutterGroup Declutter group.
         */
        drawChars_(begin, end, declutterGroup) {
            const strokeState = this.textStrokeState_;
            const textState = this.textState_;
            const strokeKey = this.strokeKey_;
            const textKey = this.textKey_;
            const fillKey = this.fillKey_;
            this.saveTextStates_();
            const pixelRatio = this.pixelRatio;
            const baseline = exports.TEXT_ALIGN[textState.textBaseline];
            const offsetY = this.textOffsetY_ * pixelRatio;
            const text = this.text_;
            const strokeWidth = strokeState
                ? (strokeState.lineWidth * Math.abs(textState.scale[0])) / 2
                : 0;
            this.instructions.push([
                Instruction_js_5.default.DRAW_CHARS,
                begin,
                end,
                baseline,
                declutterGroup,
                textState.overflow,
                fillKey,
                textState.maxAngle,
                pixelRatio,
                offsetY,
                strokeKey,
                strokeWidth * pixelRatio,
                text,
                textKey,
                1,
            ]);
            this.hitDetectionInstructions.push([
                Instruction_js_5.default.DRAW_CHARS,
                begin,
                end,
                baseline,
                declutterGroup,
                textState.overflow,
                fillKey,
                textState.maxAngle,
                1,
                offsetY,
                strokeKey,
                strokeWidth,
                text,
                textKey,
                1 / pixelRatio,
            ]);
        }
        /**
         * @param {import("../../style/Text.js").default} textStyle Text style.
         * @param {import("../canvas.js").DeclutterGroups} declutterGroups Declutter.
         */
        setTextStyle(textStyle, declutterGroups) {
            let textState, fillState, strokeState;
            if (!textStyle) {
                this.text_ = '';
            }
            else {
                this.declutterGroups_ = declutterGroups;
                const textFillStyle = textStyle.getFill();
                if (!textFillStyle) {
                    fillState = null;
                    this.textFillState_ = fillState;
                }
                else {
                    fillState = this.textFillState_;
                    if (!fillState) {
                        fillState = /** @type {import("../canvas.js").FillState} */ ({});
                        this.textFillState_ = fillState;
                    }
                    fillState.fillStyle = colorlike_js_4.asColorLike(textFillStyle.getColor() || canvas_js_5.defaultFillStyle);
                }
                const textStrokeStyle = textStyle.getStroke();
                if (!textStrokeStyle) {
                    strokeState = null;
                    this.textStrokeState_ = strokeState;
                }
                else {
                    strokeState = this.textStrokeState_;
                    if (!strokeState) {
                        strokeState = /** @type {import("../canvas.js").StrokeState} */ ({});
                        this.textStrokeState_ = strokeState;
                    }
                    const lineDash = textStrokeStyle.getLineDash();
                    const lineDashOffset = textStrokeStyle.getLineDashOffset();
                    const lineWidth = textStrokeStyle.getWidth();
                    const miterLimit = textStrokeStyle.getMiterLimit();
                    strokeState.lineCap = textStrokeStyle.getLineCap() || canvas_js_5.defaultLineCap;
                    strokeState.lineDash = lineDash ? lineDash.slice() : canvas_js_5.defaultLineDash;
                    strokeState.lineDashOffset =
                        lineDashOffset === undefined ? canvas_js_5.defaultLineDashOffset : lineDashOffset;
                    strokeState.lineJoin = textStrokeStyle.getLineJoin() || canvas_js_5.defaultLineJoin;
                    strokeState.lineWidth =
                        lineWidth === undefined ? canvas_js_5.defaultLineWidth : lineWidth;
                    strokeState.miterLimit =
                        miterLimit === undefined ? canvas_js_5.defaultMiterLimit : miterLimit;
                    strokeState.strokeStyle = colorlike_js_4.asColorLike(textStrokeStyle.getColor() || canvas_js_5.defaultStrokeStyle);
                }
                textState = this.textState_;
                const font = textStyle.getFont() || canvas_js_5.defaultFont;
                canvas_js_5.registerFont(font);
                const textScale = textStyle.getScaleArray();
                textState.overflow = textStyle.getOverflow();
                textState.font = font;
                textState.maxAngle = textStyle.getMaxAngle();
                textState.placement = textStyle.getPlacement();
                textState.textAlign = textStyle.getTextAlign();
                textState.textBaseline =
                    textStyle.getTextBaseline() || canvas_js_5.defaultTextBaseline;
                textState.backgroundFill = textStyle.getBackgroundFill();
                textState.backgroundStroke = textStyle.getBackgroundStroke();
                textState.padding = textStyle.getPadding() || canvas_js_5.defaultPadding;
                textState.scale = textScale === undefined ? [1, 1] : textScale;
                const textOffsetX = textStyle.getOffsetX();
                const textOffsetY = textStyle.getOffsetY();
                const textRotateWithView = textStyle.getRotateWithView();
                const textRotation = textStyle.getRotation();
                this.text_ = textStyle.getText() || '';
                this.textOffsetX_ = textOffsetX === undefined ? 0 : textOffsetX;
                this.textOffsetY_ = textOffsetY === undefined ? 0 : textOffsetY;
                this.textRotateWithView_ =
                    textRotateWithView === undefined ? false : textRotateWithView;
                this.textRotation_ = textRotation === undefined ? 0 : textRotation;
                this.strokeKey_ = strokeState
                    ? (typeof strokeState.strokeStyle == 'string'
                        ? strokeState.strokeStyle
                        : util_js_10.getUid(strokeState.strokeStyle)) +
                        strokeState.lineCap +
                        strokeState.lineDashOffset +
                        '|' +
                        strokeState.lineWidth +
                        strokeState.lineJoin +
                        strokeState.miterLimit +
                        '[' +
                        strokeState.lineDash.join() +
                        ']'
                    : '';
                this.textKey_ =
                    textState.font +
                        textState.scale +
                        (textState.textAlign || '?') +
                        (textState.textBaseline || '?');
                this.fillKey_ = fillState
                    ? typeof fillState.fillStyle == 'string'
                        ? fillState.fillStyle
                        : '|' + util_js_10.getUid(fillState.fillStyle)
                    : '';
            }
        }
    }
    exports.default = CanvasTextBuilder;
});
/**
 * @module ol/render/canvas/BuilderGroup
 */
define("node_modules/ol/src/render/canvas/BuilderGroup", ["require", "exports", "node_modules/ol/src/render/canvas/Builder", "node_modules/ol/src/render/canvas/ImageBuilder", "node_modules/ol/src/render/canvas/LineStringBuilder", "node_modules/ol/src/render/canvas/PolygonBuilder", "node_modules/ol/src/render/canvas/TextBuilder"], function (require, exports, Builder_js_5, ImageBuilder_js_1, LineStringBuilder_js_1, PolygonBuilder_js_1, TextBuilder_js_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @type {Object<import("./BuilderType").default, typeof Builder>}
     */
    const BATCH_CONSTRUCTORS = {
        'Circle': PolygonBuilder_js_1.default,
        'Default': Builder_js_5.default,
        'Image': ImageBuilder_js_1.default,
        'LineString': LineStringBuilder_js_1.default,
        'Polygon': PolygonBuilder_js_1.default,
        'Text': TextBuilder_js_1.default,
    };
    class BuilderGroup {
        /**
         * @param {number} tolerance Tolerance.
         * @param {import("../../extent.js").Extent} maxExtent Max extent.
         * @param {number} resolution Resolution.
         * @param {number} pixelRatio Pixel ratio.
         * @param {boolean} declutter Decluttering enabled.
         */
        constructor(tolerance, maxExtent, resolution, pixelRatio, declutter) {
            /**
             * @type {boolean}
             * @private
             */
            this.declutter_ = declutter;
            /**
             * @type {import("../canvas.js").DeclutterGroups}
             * @private
             */
            this.declutterGroups_ = null;
            /**
             * @private
             * @type {number}
             */
            this.tolerance_ = tolerance;
            /**
             * @private
             * @type {import("../../extent.js").Extent}
             */
            this.maxExtent_ = maxExtent;
            /**
             * @private
             * @type {number}
             */
            this.pixelRatio_ = pixelRatio;
            /**
             * @private
             * @type {number}
             */
            this.resolution_ = resolution;
            /**
             * @private
             * @type {!Object<string, !Object<import("./BuilderType").default, Builder>>}
             */
            this.buildersByZIndex_ = {};
        }
        /**
         * @param {boolean} group Group with previous builder.
         * @return {import("../canvas").DeclutterGroups} The resulting instruction groups.
         */
        addDeclutter(group) {
            /** @type {Array<*>} */
            let declutter = null;
            if (this.declutter_) {
                if (group) {
                    declutter = this.declutterGroups_;
                    /** @type {number} */ (declutter[0][0])++;
                }
                else {
                    declutter = [[1]];
                    this.declutterGroups_ = declutter;
                }
            }
            return declutter;
        }
        /**
         * @return {!Object<string, !Object<import("./BuilderType").default, import("./Builder.js").SerializableInstructions>>} The serializable instructions
         */
        finish() {
            const builderInstructions = {};
            for (const zKey in this.buildersByZIndex_) {
                builderInstructions[zKey] = builderInstructions[zKey] || {};
                const builders = this.buildersByZIndex_[zKey];
                for (const builderKey in builders) {
                    const builderInstruction = builders[builderKey].finish();
                    builderInstructions[zKey][builderKey] = builderInstruction;
                }
            }
            return builderInstructions;
        }
        /**
         * @param {number|undefined} zIndex Z index.
         * @param {import("./BuilderType.js").default} builderType Replay type.
         * @return {import("../VectorContext.js").default} Replay.
         */
        getBuilder(zIndex, builderType) {
            const zIndexKey = zIndex !== undefined ? zIndex.toString() : '0';
            let replays = this.buildersByZIndex_[zIndexKey];
            if (replays === undefined) {
                replays = {};
                this.buildersByZIndex_[zIndexKey] = replays;
            }
            let replay = replays[builderType];
            if (replay === undefined) {
                const Constructor = BATCH_CONSTRUCTORS[builderType];
                replay = new Constructor(this.tolerance_, this.maxExtent_, this.resolution_, this.pixelRatio_);
                replays[builderType] = replay;
            }
            return replay;
        }
    }
    exports.default = BuilderGroup;
});
define("node_modules/ol/src/renderer/vector", ["require", "exports", "node_modules/ol/src/render/canvas/BuilderType", "node_modules/ol/src/geom/GeometryType", "node_modules/ol/src/ImageState", "node_modules/ol/src/util"], function (require, exports, BuilderType_js_1, GeometryType_js_16, ImageState_js_4, util_js_11) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.renderFeature = exports.getTolerance = exports.getSquaredTolerance = exports.defaultOrder = void 0;
    /**
     * Tolerance for geometry simplification in device pixels.
     * @type {number}
     */
    const SIMPLIFY_TOLERANCE = 0.5;
    /**
     * @const
     * @type {Object<import("../geom/GeometryType.js").default,
     *                function(import("../render/canvas/BuilderGroup.js").default, import("../geom/Geometry.js").default,
     *                         import("../style/Style.js").default, Object): void>}
     */
    const GEOMETRY_RENDERERS = {
        'Point': renderPointGeometry,
        'LineString': renderLineStringGeometry,
        'Polygon': renderPolygonGeometry,
        'MultiPoint': renderMultiPointGeometry,
        'MultiLineString': renderMultiLineStringGeometry,
        'MultiPolygon': renderMultiPolygonGeometry,
        'GeometryCollection': renderGeometryCollectionGeometry,
        'Circle': renderCircleGeometry,
    };
    /**
     * @param {import("../Feature.js").FeatureLike} feature1 Feature 1.
     * @param {import("../Feature.js").FeatureLike} feature2 Feature 2.
     * @return {number} Order.
     */
    function defaultOrder(feature1, feature2) {
        return parseInt(util_js_11.getUid(feature1), 10) - parseInt(util_js_11.getUid(feature2), 10);
    }
    exports.defaultOrder = defaultOrder;
    /**
     * @param {number} resolution Resolution.
     * @param {number} pixelRatio Pixel ratio.
     * @return {number} Squared pixel tolerance.
     */
    function getSquaredTolerance(resolution, pixelRatio) {
        const tolerance = getTolerance(resolution, pixelRatio);
        return tolerance * tolerance;
    }
    exports.getSquaredTolerance = getSquaredTolerance;
    /**
     * @param {number} resolution Resolution.
     * @param {number} pixelRatio Pixel ratio.
     * @return {number} Pixel tolerance.
     */
    function getTolerance(resolution, pixelRatio) {
        return (SIMPLIFY_TOLERANCE * resolution) / pixelRatio;
    }
    exports.getTolerance = getTolerance;
    /**
     * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Builder group.
     * @param {import("../geom/Circle.js").default} geometry Geometry.
     * @param {import("../style/Style.js").default} style Style.
     * @param {import("../Feature.js").default} feature Feature.
     */
    function renderCircleGeometry(builderGroup, geometry, style, feature) {
        const fillStyle = style.getFill();
        const strokeStyle = style.getStroke();
        if (fillStyle || strokeStyle) {
            const circleReplay = builderGroup.getBuilder(style.getZIndex(), BuilderType_js_1.default.CIRCLE);
            circleReplay.setFillStrokeStyle(fillStyle, strokeStyle);
            circleReplay.drawCircle(geometry, feature);
        }
        const textStyle = style.getText();
        if (textStyle) {
            const textReplay = builderGroup.getBuilder(style.getZIndex(), BuilderType_js_1.default.TEXT);
            textReplay.setTextStyle(textStyle, builderGroup.addDeclutter(false));
            textReplay.drawText(geometry, feature);
        }
    }
    /**
     * @param {import("../render/canvas/BuilderGroup.js").default} replayGroup Replay group.
     * @param {import("../Feature.js").FeatureLike} feature Feature.
     * @param {import("../style/Style.js").default} style Style.
     * @param {number} squaredTolerance Squared tolerance.
     * @param {function(import("../events/Event.js").default): void} listener Listener function.
     * @param {import("../proj.js").TransformFunction} [opt_transform] Transform from user to view projection.
     * @return {boolean} `true` if style is loading.
     * @template T
     */
    function renderFeature(replayGroup, feature, style, squaredTolerance, listener, opt_transform) {
        let loading = false;
        const imageStyle = style.getImage();
        if (imageStyle) {
            let imageState = imageStyle.getImageState();
            if (imageState == ImageState_js_4.default.LOADED || imageState == ImageState_js_4.default.ERROR) {
                imageStyle.unlistenImageChange(listener);
            }
            else {
                if (imageState == ImageState_js_4.default.IDLE) {
                    imageStyle.load();
                }
                imageState = imageStyle.getImageState();
                imageStyle.listenImageChange(listener);
                loading = true;
            }
        }
        renderFeatureInternal(replayGroup, feature, style, squaredTolerance, opt_transform);
        return loading;
    }
    exports.renderFeature = renderFeature;
    /**
     * @param {import("../render/canvas/BuilderGroup.js").default} replayGroup Replay group.
     * @param {import("../Feature.js").FeatureLike} feature Feature.
     * @param {import("../style/Style.js").default} style Style.
     * @param {number} squaredTolerance Squared tolerance.
     * @param {import("../proj.js").TransformFunction} [opt_transform] Optional transform function.
     */
    function renderFeatureInternal(replayGroup, feature, style, squaredTolerance, opt_transform) {
        const geometry = style.getGeometryFunction()(feature);
        if (!geometry) {
            return;
        }
        const simplifiedGeometry = geometry.simplifyTransformed(squaredTolerance, opt_transform);
        const renderer = style.getRenderer();
        if (renderer) {
            renderGeometry(replayGroup, simplifiedGeometry, style, feature);
        }
        else {
            const geometryRenderer = GEOMETRY_RENDERERS[simplifiedGeometry.getType()];
            geometryRenderer(replayGroup, simplifiedGeometry, style, feature);
        }
    }
    /**
     * @param {import("../render/canvas/BuilderGroup.js").default} replayGroup Replay group.
     * @param {import("../geom/Geometry.js").default|import("../render/Feature.js").default} geometry Geometry.
     * @param {import("../style/Style.js").default} style Style.
     * @param {import("../Feature.js").FeatureLike} feature Feature.
     */
    function renderGeometry(replayGroup, geometry, style, feature) {
        if (geometry.getType() == GeometryType_js_16.default.GEOMETRY_COLLECTION) {
            const geometries = /** @type {import("../geom/GeometryCollection.js").default} */ (geometry).getGeometries();
            for (let i = 0, ii = geometries.length; i < ii; ++i) {
                renderGeometry(replayGroup, geometries[i], style, feature);
            }
            return;
        }
        const replay = replayGroup.getBuilder(style.getZIndex(), BuilderType_js_1.default.DEFAULT);
        replay.drawCustom(
        /** @type {import("../geom/SimpleGeometry.js").default} */ (geometry), feature, style.getRenderer());
    }
    /**
     * @param {import("../render/canvas/BuilderGroup.js").default} replayGroup Replay group.
     * @param {import("../geom/GeometryCollection.js").default} geometry Geometry.
     * @param {import("../style/Style.js").default} style Style.
     * @param {import("../Feature.js").default} feature Feature.
     */
    function renderGeometryCollectionGeometry(replayGroup, geometry, style, feature) {
        const geometries = geometry.getGeometriesArray();
        let i, ii;
        for (i = 0, ii = geometries.length; i < ii; ++i) {
            const geometryRenderer = GEOMETRY_RENDERERS[geometries[i].getType()];
            geometryRenderer(replayGroup, geometries[i], style, feature);
        }
    }
    /**
     * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Replay group.
     * @param {import("../geom/LineString.js").default|import("../render/Feature.js").default} geometry Geometry.
     * @param {import("../style/Style.js").default} style Style.
     * @param {import("../Feature.js").FeatureLike} feature Feature.
     */
    function renderLineStringGeometry(builderGroup, geometry, style, feature) {
        const strokeStyle = style.getStroke();
        if (strokeStyle) {
            const lineStringReplay = builderGroup.getBuilder(style.getZIndex(), BuilderType_js_1.default.LINE_STRING);
            lineStringReplay.setFillStrokeStyle(null, strokeStyle);
            lineStringReplay.drawLineString(geometry, feature);
        }
        const textStyle = style.getText();
        if (textStyle) {
            const textReplay = builderGroup.getBuilder(style.getZIndex(), BuilderType_js_1.default.TEXT);
            textReplay.setTextStyle(textStyle, builderGroup.addDeclutter(false));
            textReplay.drawText(geometry, feature);
        }
    }
    /**
     * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Replay group.
     * @param {import("../geom/MultiLineString.js").default|import("../render/Feature.js").default} geometry Geometry.
     * @param {import("../style/Style.js").default} style Style.
     * @param {import("../Feature.js").FeatureLike} feature Feature.
     */
    function renderMultiLineStringGeometry(builderGroup, geometry, style, feature) {
        const strokeStyle = style.getStroke();
        if (strokeStyle) {
            const lineStringReplay = builderGroup.getBuilder(style.getZIndex(), BuilderType_js_1.default.LINE_STRING);
            lineStringReplay.setFillStrokeStyle(null, strokeStyle);
            lineStringReplay.drawMultiLineString(geometry, feature);
        }
        const textStyle = style.getText();
        if (textStyle) {
            const textReplay = builderGroup.getBuilder(style.getZIndex(), BuilderType_js_1.default.TEXT);
            textReplay.setTextStyle(textStyle, builderGroup.addDeclutter(false));
            textReplay.drawText(geometry, feature);
        }
    }
    /**
     * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Replay group.
     * @param {import("../geom/MultiPolygon.js").default} geometry Geometry.
     * @param {import("../style/Style.js").default} style Style.
     * @param {import("../Feature.js").default} feature Feature.
     */
    function renderMultiPolygonGeometry(builderGroup, geometry, style, feature) {
        const fillStyle = style.getFill();
        const strokeStyle = style.getStroke();
        if (strokeStyle || fillStyle) {
            const polygonReplay = builderGroup.getBuilder(style.getZIndex(), BuilderType_js_1.default.POLYGON);
            polygonReplay.setFillStrokeStyle(fillStyle, strokeStyle);
            polygonReplay.drawMultiPolygon(geometry, feature);
        }
        const textStyle = style.getText();
        if (textStyle) {
            const textReplay = builderGroup.getBuilder(style.getZIndex(), BuilderType_js_1.default.TEXT);
            textReplay.setTextStyle(textStyle, builderGroup.addDeclutter(false));
            textReplay.drawText(geometry, feature);
        }
    }
    /**
     * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Replay group.
     * @param {import("../geom/Point.js").default|import("../render/Feature.js").default} geometry Geometry.
     * @param {import("../style/Style.js").default} style Style.
     * @param {import("../Feature.js").FeatureLike} feature Feature.
     */
    function renderPointGeometry(builderGroup, geometry, style, feature) {
        const imageStyle = style.getImage();
        if (imageStyle) {
            if (imageStyle.getImageState() != ImageState_js_4.default.LOADED) {
                return;
            }
            const imageReplay = builderGroup.getBuilder(style.getZIndex(), BuilderType_js_1.default.IMAGE);
            imageReplay.setImageStyle(imageStyle, builderGroup.addDeclutter(false));
            imageReplay.drawPoint(geometry, feature);
        }
        const textStyle = style.getText();
        if (textStyle) {
            const textReplay = builderGroup.getBuilder(style.getZIndex(), BuilderType_js_1.default.TEXT);
            textReplay.setTextStyle(textStyle, builderGroup.addDeclutter(!!imageStyle));
            textReplay.drawText(geometry, feature);
        }
    }
    /**
     * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Replay group.
     * @param {import("../geom/MultiPoint.js").default|import("../render/Feature.js").default} geometry Geometry.
     * @param {import("../style/Style.js").default} style Style.
     * @param {import("../Feature.js").FeatureLike} feature Feature.
     */
    function renderMultiPointGeometry(builderGroup, geometry, style, feature) {
        const imageStyle = style.getImage();
        if (imageStyle) {
            if (imageStyle.getImageState() != ImageState_js_4.default.LOADED) {
                return;
            }
            const imageReplay = builderGroup.getBuilder(style.getZIndex(), BuilderType_js_1.default.IMAGE);
            imageReplay.setImageStyle(imageStyle, builderGroup.addDeclutter(false));
            imageReplay.drawMultiPoint(geometry, feature);
        }
        const textStyle = style.getText();
        if (textStyle) {
            const textReplay = builderGroup.getBuilder(style.getZIndex(), BuilderType_js_1.default.TEXT);
            textReplay.setTextStyle(textStyle, builderGroup.addDeclutter(!!imageStyle));
            textReplay.drawText(geometry, feature);
        }
    }
    /**
     * @param {import("../render/canvas/BuilderGroup.js").default} builderGroup Replay group.
     * @param {import("../geom/Polygon.js").default|import("../render/Feature.js").default} geometry Geometry.
     * @param {import("../style/Style.js").default} style Style.
     * @param {import("../Feature.js").FeatureLike} feature Feature.
     */
    function renderPolygonGeometry(builderGroup, geometry, style, feature) {
        const fillStyle = style.getFill();
        const strokeStyle = style.getStroke();
        if (fillStyle || strokeStyle) {
            const polygonReplay = builderGroup.getBuilder(style.getZIndex(), BuilderType_js_1.default.POLYGON);
            polygonReplay.setFillStrokeStyle(fillStyle, strokeStyle);
            polygonReplay.drawPolygon(geometry, feature);
        }
        const textStyle = style.getText();
        if (textStyle) {
            const textReplay = builderGroup.getBuilder(style.getZIndex(), BuilderType_js_1.default.TEXT);
            textReplay.setTextStyle(textStyle, builderGroup.addDeclutter(false));
            textReplay.drawText(geometry, feature);
        }
    }
});
/**
 * @module ol/render/Event
 */
define("node_modules/ol/src/render/Event", ["require", "exports", "node_modules/ol/src/events/Event"], function (require, exports, Event_js_5) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    class RenderEvent extends Event_js_5.default {
        /**
         * @param {import("./EventType.js").default} type Type.
         * @param {import("../transform.js").Transform=} opt_inversePixelTransform Transform for
         *     CSS pixels to rendered pixels.
         * @param {import("../PluggableMap.js").FrameState=} opt_frameState Frame state.
         * @param {?CanvasRenderingContext2D=} opt_context Context.
         */
        constructor(type, opt_inversePixelTransform, opt_frameState, opt_context) {
            super(type);
            /**
             * Transform from CSS pixels (relative to the top-left corner of the map viewport)
             * to rendered pixels on this event's `context`.
             * @type {import("../transform.js").Transform|undefined}
             * @api
             */
            this.inversePixelTransform = opt_inversePixelTransform;
            /**
             * An object representing the current render frame state.
             * @type {import("../PluggableMap.js").FrameState|undefined}
             * @api
             */
            this.frameState = opt_frameState;
            /**
             * Canvas context. Not available when the event is dispatched by the map. Only available
             * when a Canvas renderer is used, null otherwise.
             * @type {CanvasRenderingContext2D|null|undefined}
             * @api
             */
            this.context = opt_context;
        }
    }
    exports.default = RenderEvent;
});
define("node_modules/ol/src/render", ["require", "exports", "node_modules/ol/src/render/canvas/Immediate", "node_modules/ol/src/has", "node_modules/ol/src/transform", "node_modules/ol/src/renderer/vector", "node_modules/ol/src/proj"], function (require, exports, Immediate_js_1, has_js_5, transform_js_10, vector_js_1, proj_js_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.renderDeclutterItems = exports.getRenderPixel = exports.getVectorContext = exports.toContext = void 0;
    /**
     * @typedef {Object} State
     * @property {CanvasRenderingContext2D} context Canvas context that the layer is being rendered to.
     * @property {import("./Feature.js").FeatureLike} feature
     * @property {import("./geom/SimpleGeometry.js").default} geometry
     * @property {number} pixelRatio Pixel ratio used by the layer renderer.
     * @property {number} resolution Resolution that the render batch was created and optimized for.
     * This is not the view's resolution that is being rendered.
     * @property {number} rotation Rotation of the rendered layer in radians.
     */
    /**
     * A function to be used when sorting features before rendering.
     * It takes two instances of {@link module:ol/Feature} or
     * {@link module:ol/render/Feature} and returns a `{number}`.
     *
     * @typedef {function(import("./Feature.js").FeatureLike, import("./Feature.js").FeatureLike):number} OrderFunction
     */
    /**
     * @typedef {Object} ToContextOptions
     * @property {import("./size.js").Size} [size] Desired size of the canvas in css
     * pixels. When provided, both canvas and css size will be set according to the
     * `pixelRatio`. If not provided, the current canvas and css sizes will not be
     * altered.
     * @property {number} [pixelRatio=window.devicePixelRatio] Pixel ratio (canvas
     * pixel to css pixel ratio) for the canvas.
     */
    /**
     * Binds a Canvas Immediate API to a canvas context, to allow drawing geometries
     * to the context's canvas.
     *
     * The units for geometry coordinates are css pixels relative to the top left
     * corner of the canvas element.
     * ```js
     * import {toContext} from 'ol/render';
     * import Fill from 'ol/style/Fill';
     * import Polygon from 'ol/geom/Polygon';
     *
     * var canvas = document.createElement('canvas');
     * var render = toContext(canvas.getContext('2d'),
     *     { size: [100, 100] });
     * render.setFillStrokeStyle(new Fill({ color: blue }));
     * render.drawPolygon(
     *     new Polygon([[[0, 0], [100, 100], [100, 0], [0, 0]]]));
     * ```
     *
     * @param {CanvasRenderingContext2D} context Canvas context.
     * @param {ToContextOptions=} opt_options Options.
     * @return {CanvasImmediateRenderer} Canvas Immediate.
     * @api
     */
    function toContext(context, opt_options) {
        const canvas = context.canvas;
        const options = opt_options ? opt_options : {};
        const pixelRatio = options.pixelRatio || has_js_5.DEVICE_PIXEL_RATIO;
        const size = options.size;
        if (size) {
            canvas.width = size[0] * pixelRatio;
            canvas.height = size[1] * pixelRatio;
            canvas.style.width = size[0] + 'px';
            canvas.style.height = size[1] + 'px';
        }
        const extent = [0, 0, canvas.width, canvas.height];
        const transform = transform_js_10.scale(transform_js_10.create(), pixelRatio, pixelRatio);
        return new Immediate_js_1.default(context, pixelRatio, extent, transform, 0);
    }
    exports.toContext = toContext;
    /**
     * Gets a vector context for drawing to the event's canvas.
     * @param {import("./render/Event.js").default} event Render event.
     * @returns {CanvasImmediateRenderer} Vector context.
     * @api
     */
    function getVectorContext(event) {
        const frameState = event.frameState;
        const transform = transform_js_10.multiply(event.inversePixelTransform.slice(), frameState.coordinateToPixelTransform);
        const squaredTolerance = vector_js_1.getSquaredTolerance(frameState.viewState.resolution, frameState.pixelRatio);
        let userTransform;
        const userProjection = proj_js_4.getUserProjection();
        if (userProjection) {
            userTransform = proj_js_4.getTransformFromProjections(userProjection, frameState.viewState.projection);
        }
        return new Immediate_js_1.default(event.context, frameState.pixelRatio, frameState.extent, transform, frameState.viewState.rotation, squaredTolerance, userTransform);
    }
    exports.getVectorContext = getVectorContext;
    /**
     * Gets the pixel of the event's canvas context from the map viewport's CSS pixel.
     * @param {import("./render/Event.js").default} event Render event.
     * @param {import("./pixel.js").Pixel} pixel CSS pixel relative to the top-left
     * corner of the map viewport.
     * @returns {import("./pixel.js").Pixel} Pixel on the event's canvas context.
     * @api
     */
    function getRenderPixel(event, pixel) {
        const result = pixel.slice(0);
        transform_js_10.apply(event.inversePixelTransform.slice(), result);
        return result;
    }
    exports.getRenderPixel = getRenderPixel;
    /**
     * @param {import("./PluggableMap.js").FrameState} frameState Frame state.
     * @param {?} declutterTree Declutter tree.
     * @returns {?} Declutter tree.
     */
    function renderDeclutterItems(frameState, declutterTree) {
        if (declutterTree) {
            declutterTree.clear();
        }
        const items = frameState.declutterItems;
        for (let z = items.length - 1; z >= 0; --z) {
            const item = items[z];
            const zIndexItems = item.items;
            for (let i = 0, ii = zIndexItems.length; i < ii; i += 3) {
                declutterTree = zIndexItems[i].renderDeclutter(zIndexItems[i + 1], zIndexItems[i + 2], item.opacity, declutterTree);
            }
        }
        items.length = 0;
        return declutterTree;
    }
    exports.renderDeclutterItems = renderDeclutterItems;
});
/**
 * @module ol/style/Style
 */
define("node_modules/ol/src/style/Style", ["require", "exports", "node_modules/ol/src/style/Circle", "node_modules/ol/src/style/Fill", "node_modules/ol/src/geom/GeometryType", "node_modules/ol/src/style/Stroke", "node_modules/ol/src/asserts"], function (require, exports, Circle_js_1, Fill_js_2, GeometryType_js_17, Stroke_js_1, asserts_js_9) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createEditingStyle = exports.createDefaultStyle = exports.toFunction = void 0;
    /**
     * A function that takes an {@link module:ol/Feature} and a `{number}`
     * representing the view's resolution. The function should return a
     * {@link module:ol/style/Style} or an array of them. This way e.g. a
     * vector layer can be styled. If the function returns `undefined`, the
     * feature will not be rendered.
     *
     * @typedef {function(import("../Feature.js").FeatureLike, number):(Style|Array<Style>|void)} StyleFunction
     */
    /**
     * A {@link Style}, an array of {@link Style}, or a {@link StyleFunction}.
     * @typedef {Style|Array<Style>|StyleFunction} StyleLike
     */
    /**
     * A function that takes an {@link module:ol/Feature} as argument and returns an
     * {@link module:ol/geom/Geometry} that will be rendered and styled for the feature.
     *
     * @typedef {function(import("../Feature.js").FeatureLike):
     *     (import("../geom/Geometry.js").default|import("../render/Feature.js").default|undefined)} GeometryFunction
     */
    /**
     * Custom renderer function. Takes two arguments:
     *
     * 1. The pixel coordinates of the geometry in GeoJSON notation.
     * 2. The {@link module:ol/render~State} of the layer renderer.
     *
     * @typedef {function((import("../coordinate.js").Coordinate|Array<import("../coordinate.js").Coordinate>|Array<Array<import("../coordinate.js").Coordinate>>),import("../render.js").State): void}
     * RenderFunction
     */
    /**
     * @typedef {Object} Options
     * @property {string|import("../geom/Geometry.js").default|GeometryFunction} [geometry] Feature property or geometry
     * or function returning a geometry to render for this style.
     * @property {import("./Fill.js").default} [fill] Fill style.
     * @property {import("./Image.js").default} [image] Image style.
     * @property {RenderFunction} [renderer] Custom renderer. When configured, `fill`, `stroke` and `image` will be
     * ignored, and the provided function will be called with each render frame for each geometry.
     * @property {import("./Stroke.js").default} [stroke] Stroke style.
     * @property {import("./Text.js").default} [text] Text style.
     * @property {number} [zIndex] Z index.
     */
    /**
     * @classdesc
     * Container for vector feature rendering styles. Any changes made to the style
     * or its children through `set*()` methods will not take effect until the
     * feature or layer that uses the style is re-rendered.
     *
     * ## Feature styles
     *
     * If no style is defined, the following default style is used:
     * ```js
     *  import {Fill, Stroke, Circle, Style} from 'ol/style';
     *
     *  var fill = new Fill({
     *    color: 'rgba(255,255,255,0.4)'
     *  });
     *  var stroke = new Stroke({
     *    color: '#3399CC',
     *    width: 1.25
     *  });
     *  var styles = [
     *    new Style({
     *      image: new Circle({
     *        fill: fill,
     *        stroke: stroke,
     *        radius: 5
     *      }),
     *      fill: fill,
     *      stroke: stroke
     *    })
     *  ];
     * ```
     *
     * A separate editing style has the following defaults:
     * ```js
     *  import {Fill, Stroke, Circle, Style} from 'ol/style';
     *  import GeometryType from 'ol/geom/GeometryType';
     *
     *  var white = [255, 255, 255, 1];
     *  var blue = [0, 153, 255, 1];
     *  var width = 3;
     *  styles[GeometryType.POLYGON] = [
     *    new Style({
     *      fill: new Fill({
     *        color: [255, 255, 255, 0.5]
     *      })
     *    })
     *  ];
     *  styles[GeometryType.MULTI_POLYGON] =
     *      styles[GeometryType.POLYGON];
     *  styles[GeometryType.LINE_STRING] = [
     *    new Style({
     *      stroke: new Stroke({
     *        color: white,
     *        width: width + 2
     *      })
     *    }),
     *    new Style({
     *      stroke: new Stroke({
     *        color: blue,
     *        width: width
     *      })
     *    })
     *  ];
     *  styles[GeometryType.MULTI_LINE_STRING] =
     *      styles[GeometryType.LINE_STRING];
     *  styles[GeometryType.POINT] = [
     *    new Style({
     *      image: new Circle({
     *        radius: width * 2,
     *        fill: new Fill({
     *          color: blue
     *        }),
     *        stroke: new Stroke({
     *          color: white,
     *          width: width / 2
     *        })
     *      }),
     *      zIndex: Infinity
     *    })
     *  ];
     *  styles[GeometryType.MULTI_POINT] =
     *      styles[GeometryType.POINT];
     *  styles[GeometryType.GEOMETRY_COLLECTION] =
     *      styles[GeometryType.POLYGON].concat(
     *          styles[GeometryType.LINE_STRING],
     *          styles[GeometryType.POINT]
     *      );
     * ```
     *
     * @api
     */
    class Style {
        /**
         * @param {Options=} opt_options Style options.
         */
        constructor(opt_options) {
            const options = opt_options || {};
            /**
             * @private
             * @type {string|import("../geom/Geometry.js").default|GeometryFunction}
             */
            this.geometry_ = null;
            /**
             * @private
             * @type {!GeometryFunction}
             */
            this.geometryFunction_ = defaultGeometryFunction;
            if (options.geometry !== undefined) {
                this.setGeometry(options.geometry);
            }
            /**
             * @private
             * @type {import("./Fill.js").default}
             */
            this.fill_ = options.fill !== undefined ? options.fill : null;
            /**
             * @private
             * @type {import("./Image.js").default}
             */
            this.image_ = options.image !== undefined ? options.image : null;
            /**
             * @private
             * @type {RenderFunction|null}
             */
            this.renderer_ = options.renderer !== undefined ? options.renderer : null;
            /**
             * @private
             * @type {import("./Stroke.js").default}
             */
            this.stroke_ = options.stroke !== undefined ? options.stroke : null;
            /**
             * @private
             * @type {import("./Text.js").default}
             */
            this.text_ = options.text !== undefined ? options.text : null;
            /**
             * @private
             * @type {number|undefined}
             */
            this.zIndex_ = options.zIndex;
        }
        /**
         * Clones the style.
         * @return {Style} The cloned style.
         * @api
         */
        clone() {
            let geometry = this.getGeometry();
            if (geometry && typeof geometry === 'object') {
                geometry = /** @type {import("../geom/Geometry.js").default} */ (geometry).clone();
            }
            return new Style({
                geometry: geometry,
                fill: this.getFill() ? this.getFill().clone() : undefined,
                image: this.getImage() ? this.getImage().clone() : undefined,
                stroke: this.getStroke() ? this.getStroke().clone() : undefined,
                text: this.getText() ? this.getText().clone() : undefined,
                zIndex: this.getZIndex(),
            });
        }
        /**
         * Get the custom renderer function that was configured with
         * {@link #setRenderer} or the `renderer` constructor option.
         * @return {RenderFunction|null} Custom renderer function.
         * @api
         */
        getRenderer() {
            return this.renderer_;
        }
        /**
         * Sets a custom renderer function for this style. When set, `fill`, `stroke`
         * and `image` options of the style will be ignored.
         * @param {RenderFunction|null} renderer Custom renderer function.
         * @api
         */
        setRenderer(renderer) {
            this.renderer_ = renderer;
        }
        /**
         * Get the geometry to be rendered.
         * @return {string|import("../geom/Geometry.js").default|GeometryFunction}
         * Feature property or geometry or function that returns the geometry that will
         * be rendered with this style.
         * @api
         */
        getGeometry() {
            return this.geometry_;
        }
        /**
         * Get the function used to generate a geometry for rendering.
         * @return {!GeometryFunction} Function that is called with a feature
         * and returns the geometry to render instead of the feature's geometry.
         * @api
         */
        getGeometryFunction() {
            return this.geometryFunction_;
        }
        /**
         * Get the fill style.
         * @return {import("./Fill.js").default} Fill style.
         * @api
         */
        getFill() {
            return this.fill_;
        }
        /**
         * Set the fill style.
         * @param {import("./Fill.js").default} fill Fill style.
         * @api
         */
        setFill(fill) {
            this.fill_ = fill;
        }
        /**
         * Get the image style.
         * @return {import("./Image.js").default} Image style.
         * @api
         */
        getImage() {
            return this.image_;
        }
        /**
         * Set the image style.
         * @param {import("./Image.js").default} image Image style.
         * @api
         */
        setImage(image) {
            this.image_ = image;
        }
        /**
         * Get the stroke style.
         * @return {import("./Stroke.js").default} Stroke style.
         * @api
         */
        getStroke() {
            return this.stroke_;
        }
        /**
         * Set the stroke style.
         * @param {import("./Stroke.js").default} stroke Stroke style.
         * @api
         */
        setStroke(stroke) {
            this.stroke_ = stroke;
        }
        /**
         * Get the text style.
         * @return {import("./Text.js").default} Text style.
         * @api
         */
        getText() {
            return this.text_;
        }
        /**
         * Set the text style.
         * @param {import("./Text.js").default} text Text style.
         * @api
         */
        setText(text) {
            this.text_ = text;
        }
        /**
         * Get the z-index for the style.
         * @return {number|undefined} ZIndex.
         * @api
         */
        getZIndex() {
            return this.zIndex_;
        }
        /**
         * Set a geometry that is rendered instead of the feature's geometry.
         *
         * @param {string|import("../geom/Geometry.js").default|GeometryFunction} geometry
         *     Feature property or geometry or function returning a geometry to render
         *     for this style.
         * @api
         */
        setGeometry(geometry) {
            if (typeof geometry === 'function') {
                this.geometryFunction_ = geometry;
            }
            else if (typeof geometry === 'string') {
                this.geometryFunction_ = function (feature) {
                    return /** @type {import("../geom/Geometry.js").default} */ (feature.get(geometry));
                };
            }
            else if (!geometry) {
                this.geometryFunction_ = defaultGeometryFunction;
            }
            else if (geometry !== undefined) {
                this.geometryFunction_ = function () {
                    return /** @type {import("../geom/Geometry.js").default} */ (geometry);
                };
            }
            this.geometry_ = geometry;
        }
        /**
         * Set the z-index.
         *
         * @param {number|undefined} zIndex ZIndex.
         * @api
         */
        setZIndex(zIndex) {
            this.zIndex_ = zIndex;
        }
    }
    /**
     * Convert the provided object into a style function.  Functions passed through
     * unchanged.  Arrays of Style or single style objects wrapped in a
     * new style function.
     * @param {StyleFunction|Array<Style>|Style} obj
     *     A style function, a single style, or an array of styles.
     * @return {StyleFunction} A style function.
     */
    function toFunction(obj) {
        let styleFunction;
        if (typeof obj === 'function') {
            styleFunction = obj;
        }
        else {
            /**
             * @type {Array<Style>}
             */
            let styles;
            if (Array.isArray(obj)) {
                styles = obj;
            }
            else {
                asserts_js_9.assert(typeof ( /** @type {?} */(obj).getZIndex) === 'function', 41); // Expected an `Style` or an array of `Style`
                const style = /** @type {Style} */ (obj);
                styles = [style];
            }
            styleFunction = function () {
                return styles;
            };
        }
        return styleFunction;
    }
    exports.toFunction = toFunction;
    /**
     * @type {Array<Style>}
     */
    let defaultStyles = null;
    /**
     * @param {import("../Feature.js").FeatureLike} feature Feature.
     * @param {number} resolution Resolution.
     * @return {Array<Style>} Style.
     */
    function createDefaultStyle(feature, resolution) {
        // We don't use an immediately-invoked function
        // and a closure so we don't get an error at script evaluation time in
        // browsers that do not support Canvas. (import("./Circle.js").CircleStyle does
        // canvas.getContext('2d') at construction time, which will cause an.error
        // in such browsers.)
        if (!defaultStyles) {
            const fill = new Fill_js_2.default({
                color: 'rgba(255,255,255,0.4)',
            });
            const stroke = new Stroke_js_1.default({
                color: '#3399CC',
                width: 1.25,
            });
            defaultStyles = [
                new Style({
                    image: new Circle_js_1.default({
                        fill: fill,
                        stroke: stroke,
                        radius: 5,
                    }),
                    fill: fill,
                    stroke: stroke,
                }),
            ];
        }
        return defaultStyles;
    }
    exports.createDefaultStyle = createDefaultStyle;
    /**
     * Default styles for editing features.
     * @return {Object<import("../geom/GeometryType.js").default, Array<Style>>} Styles
     */
    function createEditingStyle() {
        /** @type {Object<import("../geom/GeometryType.js").default, Array<Style>>} */
        const styles = {};
        const white = [255, 255, 255, 1];
        const blue = [0, 153, 255, 1];
        const width = 3;
        styles[GeometryType_js_17.default.POLYGON] = [
            new Style({
                fill: new Fill_js_2.default({
                    color: [255, 255, 255, 0.5],
                }),
            }),
        ];
        styles[GeometryType_js_17.default.MULTI_POLYGON] = styles[GeometryType_js_17.default.POLYGON];
        styles[GeometryType_js_17.default.LINE_STRING] = [
            new Style({
                stroke: new Stroke_js_1.default({
                    color: white,
                    width: width + 2,
                }),
            }),
            new Style({
                stroke: new Stroke_js_1.default({
                    color: blue,
                    width: width,
                }),
            }),
        ];
        styles[GeometryType_js_17.default.MULTI_LINE_STRING] = styles[GeometryType_js_17.default.LINE_STRING];
        styles[GeometryType_js_17.default.CIRCLE] = styles[GeometryType_js_17.default.POLYGON].concat(styles[GeometryType_js_17.default.LINE_STRING]);
        styles[GeometryType_js_17.default.POINT] = [
            new Style({
                image: new Circle_js_1.default({
                    radius: width * 2,
                    fill: new Fill_js_2.default({
                        color: blue,
                    }),
                    stroke: new Stroke_js_1.default({
                        color: white,
                        width: width / 2,
                    }),
                }),
                zIndex: Infinity,
            }),
        ];
        styles[GeometryType_js_17.default.MULTI_POINT] = styles[GeometryType_js_17.default.POINT];
        styles[GeometryType_js_17.default.GEOMETRY_COLLECTION] = styles[GeometryType_js_17.default.POLYGON].concat(styles[GeometryType_js_17.default.LINE_STRING], styles[GeometryType_js_17.default.POINT]);
        return styles;
    }
    exports.createEditingStyle = createEditingStyle;
    /**
     * Function that is called with a feature and returns its default geometry.
     * @param {import("../Feature.js").FeatureLike} feature Feature to get the geometry for.
     * @return {import("../geom/Geometry.js").default|import("../render/Feature.js").default|undefined} Geometry to render.
     */
    function defaultGeometryFunction(feature) {
        return feature.getGeometry();
    }
    exports.default = Style;
});
define("node_modules/ol/src/Feature", ["require", "exports", "node_modules/ol/src/Object", "node_modules/ol/src/events/EventType", "node_modules/ol/src/asserts", "node_modules/ol/src/events"], function (require, exports, Object_js_10, EventType_js_12, asserts_js_10, events_js_8) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createStyleFunction = void 0;
    /**
     * @typedef {typeof Feature|typeof import("./render/Feature.js").default} FeatureClass
     */
    /**
     * @typedef {Feature|import("./render/Feature.js").default} FeatureLike
     */
    /**
     * @classdesc
     * A vector object for geographic features with a geometry and other
     * attribute properties, similar to the features in vector file formats like
     * GeoJSON.
     *
     * Features can be styled individually with `setStyle`; otherwise they use the
     * style of their vector layer.
     *
     * Note that attribute properties are set as {@link module:ol/Object} properties on
     * the feature object, so they are observable, and have get/set accessors.
     *
     * Typically, a feature has a single geometry property. You can set the
     * geometry using the `setGeometry` method and get it with `getGeometry`.
     * It is possible to store more than one geometry on a feature using attribute
     * properties. By default, the geometry used for rendering is identified by
     * the property name `geometry`. If you want to use another geometry property
     * for rendering, use the `setGeometryName` method to change the attribute
     * property associated with the geometry for the feature.  For example:
     *
     * ```js
     *
     * import Feature from 'ol/Feature';
     * import Polygon from 'ol/geom/Polygon';
     * import Point from 'ol/geom/Point';
     *
     * var feature = new Feature({
     *   geometry: new Polygon(polyCoords),
     *   labelPoint: new Point(labelCoords),
     *   name: 'My Polygon'
     * });
     *
     * // get the polygon geometry
     * var poly = feature.getGeometry();
     *
     * // Render the feature as a point using the coordinates from labelPoint
     * feature.setGeometryName('labelPoint');
     *
     * // get the point geometry
     * var point = feature.getGeometry();
     * ```
     *
     * @api
     * @template {import("./geom/Geometry.js").default} Geometry
     */
    class Feature extends Object_js_10.default {
        /**
         * @param {Geometry|Object<string, *>=} opt_geometryOrProperties
         *     You may pass a Geometry object directly, or an object literal containing
         *     properties. If you pass an object literal, you may include a Geometry
         *     associated with a `geometry` key.
         */
        constructor(opt_geometryOrProperties) {
            super();
            /**
             * @private
             * @type {number|string|undefined}
             */
            this.id_ = undefined;
            /**
             * @type {string}
             * @private
             */
            this.geometryName_ = 'geometry';
            /**
             * User provided style.
             * @private
             * @type {import("./style/Style.js").StyleLike}
             */
            this.style_ = null;
            /**
             * @private
             * @type {import("./style/Style.js").StyleFunction|undefined}
             */
            this.styleFunction_ = undefined;
            /**
             * @private
             * @type {?import("./events.js").EventsKey}
             */
            this.geometryChangeKey_ = null;
            this.addEventListener(Object_js_10.getChangeEventType(this.geometryName_), this.handleGeometryChanged_);
            if (opt_geometryOrProperties) {
                if (typeof (
                /** @type {?} */ (opt_geometryOrProperties).getSimplifiedGeometry) === 'function') {
                    const geometry = /** @type {Geometry} */ (opt_geometryOrProperties);
                    this.setGeometry(geometry);
                }
                else {
                    /** @type {Object<string, *>} */
                    const properties = opt_geometryOrProperties;
                    this.setProperties(properties);
                }
            }
        }
        /**
         * Clone this feature. If the original feature has a geometry it
         * is also cloned. The feature id is not set in the clone.
         * @return {Feature} The clone.
         * @api
         */
        clone() {
            const clone = new Feature(this.hasProperties() ? this.getProperties() : null);
            clone.setGeometryName(this.getGeometryName());
            const geometry = this.getGeometry();
            if (geometry) {
                clone.setGeometry(geometry.clone());
            }
            const style = this.getStyle();
            if (style) {
                clone.setStyle(style);
            }
            return clone;
        }
        /**
         * Get the feature's default geometry.  A feature may have any number of named
         * geometries.  The "default" geometry (the one that is rendered by default) is
         * set when calling {@link module:ol/Feature~Feature#setGeometry}.
         * @return {Geometry|undefined} The default geometry for the feature.
         * @api
         * @observable
         */
        getGeometry() {
            return /** @type {Geometry|undefined} */ (this.get(this.geometryName_));
        }
        /**
         * Get the feature identifier.  This is a stable identifier for the feature and
         * is either set when reading data from a remote source or set explicitly by
         * calling {@link module:ol/Feature~Feature#setId}.
         * @return {number|string|undefined} Id.
         * @api
         */
        getId() {
            return this.id_;
        }
        /**
         * Get the name of the feature's default geometry.  By default, the default
         * geometry is named `geometry`.
         * @return {string} Get the property name associated with the default geometry
         *     for this feature.
         * @api
         */
        getGeometryName() {
            return this.geometryName_;
        }
        /**
         * Get the feature's style. Will return what was provided to the
         * {@link module:ol/Feature~Feature#setStyle} method.
         * @return {import("./style/Style.js").StyleLike|undefined} The feature style.
         * @api
         */
        getStyle() {
            return this.style_;
        }
        /**
         * Get the feature's style function.
         * @return {import("./style/Style.js").StyleFunction|undefined} Return a function
         * representing the current style of this feature.
         * @api
         */
        getStyleFunction() {
            return this.styleFunction_;
        }
        /**
         * @private
         */
        handleGeometryChange_() {
            this.changed();
        }
        /**
         * @private
         */
        handleGeometryChanged_() {
            if (this.geometryChangeKey_) {
                events_js_8.unlistenByKey(this.geometryChangeKey_);
                this.geometryChangeKey_ = null;
            }
            const geometry = this.getGeometry();
            if (geometry) {
                this.geometryChangeKey_ = events_js_8.listen(geometry, EventType_js_12.default.CHANGE, this.handleGeometryChange_, this);
            }
            this.changed();
        }
        /**
         * Set the default geometry for the feature.  This will update the property
         * with the name returned by {@link module:ol/Feature~Feature#getGeometryName}.
         * @param {Geometry|undefined} geometry The new geometry.
         * @api
         * @observable
         */
        setGeometry(geometry) {
            this.set(this.geometryName_, geometry);
        }
        /**
         * Set the style for the feature to override the layer style.  This can be a
         * single style object, an array of styles, or a function that takes a
         * resolution and returns an array of styles. To unset the feature style, call
         * `setStyle()` without arguments or a falsey value.
         * @param {import("./style/Style.js").StyleLike=} opt_style Style for this feature.
         * @api
         * @fires module:ol/events/Event~BaseEvent#event:change
         */
        setStyle(opt_style) {
            this.style_ = opt_style;
            this.styleFunction_ = !opt_style
                ? undefined
                : createStyleFunction(opt_style);
            this.changed();
        }
        /**
         * Set the feature id.  The feature id is considered stable and may be used when
         * requesting features or comparing identifiers returned from a remote source.
         * The feature id can be used with the
         * {@link module:ol/source/Vector~VectorSource#getFeatureById} method.
         * @param {number|string|undefined} id The feature id.
         * @api
         * @fires module:ol/events/Event~BaseEvent#event:change
         */
        setId(id) {
            this.id_ = id;
            this.changed();
        }
        /**
         * Set the property name to be used when getting the feature's default geometry.
         * When calling {@link module:ol/Feature~Feature#getGeometry}, the value of the property with
         * this name will be returned.
         * @param {string} name The property name of the default geometry.
         * @api
         */
        setGeometryName(name) {
            this.removeEventListener(Object_js_10.getChangeEventType(this.geometryName_), this.handleGeometryChanged_);
            this.geometryName_ = name;
            this.addEventListener(Object_js_10.getChangeEventType(this.geometryName_), this.handleGeometryChanged_);
            this.handleGeometryChanged_();
        }
    }
    /**
     * Convert the provided object into a feature style function.  Functions passed
     * through unchanged.  Arrays of Style or single style objects wrapped
     * in a new feature style function.
     * @param {!import("./style/Style.js").StyleFunction|!Array<import("./style/Style.js").default>|!import("./style/Style.js").default} obj
     *     A feature style function, a single style, or an array of styles.
     * @return {import("./style/Style.js").StyleFunction} A style function.
     */
    function createStyleFunction(obj) {
        if (typeof obj === 'function') {
            return obj;
        }
        else {
            /**
             * @type {Array<import("./style/Style.js").default>}
             */
            let styles;
            if (Array.isArray(obj)) {
                styles = obj;
            }
            else {
                asserts_js_10.assert(typeof ( /** @type {?} */(obj).getZIndex) === 'function', 41); // Expected an `import("./style/Style.js").Style` or an array of `import("./style/Style.js").Style`
                const style = /** @type {import("./style/Style.js").default} */ (obj);
                styles = [style];
            }
            return function () {
                return styles;
            };
        }
    }
    exports.createStyleFunction = createStyleFunction;
    exports.default = Feature;
});
define("node_modules/ol/src/PluggableMap", ["require", "exports", "node_modules/ol/src/Object", "node_modules/ol/src/Collection", "node_modules/ol/src/CollectionEventType", "node_modules/ol/src/events/EventType", "node_modules/ol/src/layer/Group", "node_modules/ol/src/MapBrowserEvent", "node_modules/ol/src/MapBrowserEventHandler", "node_modules/ol/src/MapBrowserEventType", "node_modules/ol/src/MapEvent", "node_modules/ol/src/MapEventType", "node_modules/ol/src/MapProperty", "node_modules/ol/src/ObjectEventType", "node_modules/ol/src/pointer/EventType", "node_modules/ol/src/render/EventType", "node_modules/ol/src/TileQueue", "node_modules/ol/src/View", "node_modules/ol/src/ViewHint", "node_modules/ol/src/has", "node_modules/ol/src/functions", "node_modules/ol/src/transform", "node_modules/ol/src/asserts", "node_modules/ol/src/extent", "node_modules/ol/src/proj", "node_modules/ol/src/size", "node_modules/ol/src/events", "node_modules/ol/src/dom"], function (require, exports, Object_js_11, Collection_js_2, CollectionEventType_js_3, EventType_js_13, Group_js_1, MapBrowserEvent_js_2, MapBrowserEventHandler_js_1, MapBrowserEventType_js_2, MapEvent_js_2, MapEventType_js_3, MapProperty_js_1, ObjectEventType_js_3, EventType_js_14, EventType_js_15, TileQueue_js_1, View_js_1, ViewHint_js_2, has_js_6, functions_js_5, transform_js_11, asserts_js_11, extent_js_27, proj_js_5, size_js_4, events_js_9, dom_js_6) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * State of the current frame. Only `pixelRatio`, `time` and `viewState` should
     * be used in applications.
     * @typedef {Object} FrameState
     * @property {number} pixelRatio The pixel ratio of the frame.
     * @property {number} time The time when rendering of the frame was requested.
     * @property {import("./View.js").State} viewState The state of the current view.
     * @property {boolean} animate
     * @property {import("./transform.js").Transform} coordinateToPixelTransform
     * @property {null|import("./extent.js").Extent} extent
     * @property {Array<DeclutterItems>} declutterItems
     * @property {number} index
     * @property {Array<import("./layer/Layer.js").State>} layerStatesArray
     * @property {number} layerIndex
     * @property {import("./transform.js").Transform} pixelToCoordinateTransform
     * @property {Array<PostRenderFunction>} postRenderFunctions
     * @property {import("./size.js").Size} size
     * @property {TileQueue} tileQueue
     * @property {!Object<string, Object<string, boolean>>} usedTiles
     * @property {Array<number>} viewHints
     * @property {!Object<string, Object<string, boolean>>} wantedTiles
     */
    /**
     * @typedef {Object} DeclutterItems
     * @property {Array<*>} items Declutter items of an executor.
     * @property {number} opacity Layer opacity.
     */
    /**
     * @typedef {function(PluggableMap, ?FrameState): any} PostRenderFunction
     */
    /**
     * @typedef {Object} AtPixelOptions
     * @property {undefined|function(import("./layer/Layer.js").default): boolean} [layerFilter] Layer filter
     * function. The filter function will receive one argument, the
     * {@link module:ol/layer/Layer layer-candidate} and it should return a boolean value.
     * Only layers which are visible and for which this function returns `true`
     * will be tested for features. By default, all visible layers will be tested.
     * @property {number} [hitTolerance=0] Hit-detection tolerance in pixels. Pixels
     * inside the radius around the given position will be checked for features.
     * @property {boolean} [checkWrapped=true] Check-Wrapped Will check for for wrapped geometries inside the range of
     *   +/- 1 world width. Works only if a projection is used that can be wrapped.
     */
    /**
     * @typedef {Object} MapOptionsInternal
     * @property {Collection<import("./control/Control.js").default>} [controls]
     * @property {Collection<import("./interaction/Interaction.js").default>} [interactions]
     * @property {HTMLElement|Document} keyboardEventTarget
     * @property {Collection<import("./Overlay.js").default>} overlays
     * @property {Object<string, *>} values
     */
    /**
     * Object literal with config options for the map.
     * @typedef {Object} MapOptions
     * @property {Collection<import("./control/Control.js").default>|Array<import("./control/Control.js").default>} [controls]
     * Controls initially added to the map. If not specified,
     * {@link module:ol/control~defaults} is used.
     * @property {number} [pixelRatio=window.devicePixelRatio] The ratio between
     * physical pixels and device-independent pixels (dips) on the device.
     * @property {Collection<import("./interaction/Interaction.js").default>|Array<import("./interaction/Interaction.js").default>} [interactions]
     * Interactions that are initially added to the map. If not specified,
     * {@link module:ol/interaction~defaults} is used.
     * @property {HTMLElement|Document|string} [keyboardEventTarget] The element to
     * listen to keyboard events on. This determines when the `KeyboardPan` and
     * `KeyboardZoom` interactions trigger. For example, if this option is set to
     * `document` the keyboard interactions will always trigger. If this option is
     * not specified, the element the library listens to keyboard events on is the
     * map target (i.e. the user-provided div for the map). If this is not
     * `document`, the target element needs to be focused for key events to be
     * emitted, requiring that the target element has a `tabindex` attribute.
     * @property {Array<import("./layer/Base.js").default>|Collection<import("./layer/Base.js").default>|LayerGroup} [layers]
     * Layers. If this is not defined, a map with no layers will be rendered. Note
     * that layers are rendered in the order supplied, so if you want, for example,
     * a vector layer to appear on top of a tile layer, it must come after the tile
     * layer.
     * @property {number} [maxTilesLoading=16] Maximum number tiles to load
     * simultaneously.
     * @property {number} [moveTolerance=1] The minimum distance in pixels the
     * cursor must move to be detected as a map move event instead of a click.
     * Increasing this value can make it easier to click on the map.
     * @property {Collection<import("./Overlay.js").default>|Array<import("./Overlay.js").default>} [overlays]
     * Overlays initially added to the map. By default, no overlays are added.
     * @property {HTMLElement|string} [target] The container for the map, either the
     * element itself or the `id` of the element. If not specified at construction
     * time, {@link module:ol/Map~Map#setTarget} must be called for the map to be
     * rendered.
     * @property {View} [view] The map's view.  No layer sources will be
     * fetched unless this is specified at construction time or through
     * {@link module:ol/Map~Map#setView}.
     */
    /**
     * @fires import("./MapBrowserEvent.js").MapBrowserEvent
     * @fires import("./MapEvent.js").MapEvent
     * @fires import("./render/Event.js").default#precompose
     * @fires import("./render/Event.js").default#postcompose
     * @fires import("./render/Event.js").default#rendercomplete
     * @api
     */
    class PluggableMap extends Object_js_11.default {
        /**
         * @param {MapOptions} options Map options.
         */
        constructor(options) {
            super();
            const optionsInternal = createOptionsInternal(options);
            /** @private */
            this.boundHandleBrowserEvent_ = this.handleBrowserEvent.bind(this);
            /**
             * @type {number}
             * @private
             */
            this.maxTilesLoading_ =
                options.maxTilesLoading !== undefined ? options.maxTilesLoading : 16;
            /**
             * @private
             * @type {number}
             */
            this.pixelRatio_ =
                options.pixelRatio !== undefined
                    ? options.pixelRatio
                    : has_js_6.DEVICE_PIXEL_RATIO;
            /**
             * @private
             * @type {*}
             */
            this.postRenderTimeoutHandle_;
            /**
             * @private
             * @type {number|undefined}
             */
            this.animationDelayKey_;
            /**
             * @private
             */
            this.animationDelay_ = function () {
                this.animationDelayKey_ = undefined;
                this.renderFrame_(Date.now());
            }.bind(this);
            /**
             * @private
             * @type {import("./transform.js").Transform}
             */
            this.coordinateToPixelTransform_ = transform_js_11.create();
            /**
             * @private
             * @type {import("./transform.js").Transform}
             */
            this.pixelToCoordinateTransform_ = transform_js_11.create();
            /**
             * @private
             * @type {number}
             */
            this.frameIndex_ = 0;
            /**
             * @private
             * @type {?FrameState}
             */
            this.frameState_ = null;
            /**
             * The extent at the previous 'moveend' event.
             * @private
             * @type {import("./extent.js").Extent}
             */
            this.previousExtent_ = null;
            /**
             * @private
             * @type {?import("./events.js").EventsKey}
             */
            this.viewPropertyListenerKey_ = null;
            /**
             * @private
             * @type {?import("./events.js").EventsKey}
             */
            this.viewChangeListenerKey_ = null;
            /**
             * @private
             * @type {?Array<import("./events.js").EventsKey>}
             */
            this.layerGroupPropertyListenerKeys_ = null;
            /**
             * @private
             * @type {!HTMLElement}
             */
            this.viewport_ = document.createElement('div');
            this.viewport_.className =
                'ol-viewport' + ('ontouchstart' in window ? ' ol-touch' : '');
            this.viewport_.style.position = 'relative';
            this.viewport_.style.overflow = 'hidden';
            this.viewport_.style.width = '100%';
            this.viewport_.style.height = '100%';
            /**
             * @private
             * @type {!HTMLElement}
             */
            this.overlayContainer_ = document.createElement('div');
            this.overlayContainer_.style.position = 'absolute';
            this.overlayContainer_.style.zIndex = '0';
            this.overlayContainer_.style.width = '100%';
            this.overlayContainer_.style.height = '100%';
            this.overlayContainer_.style.pointerEvents = 'none';
            this.overlayContainer_.className = 'ol-overlaycontainer';
            this.viewport_.appendChild(this.overlayContainer_);
            /**
             * @private
             * @type {!HTMLElement}
             */
            this.overlayContainerStopEvent_ = document.createElement('div');
            this.overlayContainerStopEvent_.style.position = 'absolute';
            this.overlayContainerStopEvent_.style.zIndex = '0';
            this.overlayContainerStopEvent_.style.width = '100%';
            this.overlayContainerStopEvent_.style.height = '100%';
            this.overlayContainerStopEvent_.style.pointerEvents = 'none';
            this.overlayContainerStopEvent_.className = 'ol-overlaycontainer-stopevent';
            this.viewport_.appendChild(this.overlayContainerStopEvent_);
            /**
             * @private
             * @type {MapBrowserEventHandler}
             */
            this.mapBrowserEventHandler_ = null;
            /**
             * @private
             * @type {number}
             */
            this.moveTolerance_ = options.moveTolerance;
            /**
             * @private
             * @type {HTMLElement|Document}
             */
            this.keyboardEventTarget_ = optionsInternal.keyboardEventTarget;
            /**
             * @private
             * @type {?Array<import("./events.js").EventsKey>}
             */
            this.keyHandlerKeys_ = null;
            /**
             * @type {Collection<import("./control/Control.js").default>}
             * @protected
             */
            this.controls = optionsInternal.controls || new Collection_js_2.default();
            /**
             * @type {Collection<import("./interaction/Interaction.js").default>}
             * @protected
             */
            this.interactions = optionsInternal.interactions || new Collection_js_2.default();
            /**
             * @type {Collection<import("./Overlay.js").default>}
             * @private
             */
            this.overlays_ = optionsInternal.overlays;
            /**
             * A lookup of overlays by id.
             * @private
             * @type {Object<string, import("./Overlay.js").default>}
             */
            this.overlayIdIndex_ = {};
            /**
             * @type {import("./renderer/Map.js").default}
             * @private
             */
            this.renderer_ = null;
            /**
             * @type {undefined|function(Event): void}
             * @private
             */
            this.handleResize_;
            /**
             * @private
             * @type {!Array<PostRenderFunction>}
             */
            this.postRenderFunctions_ = [];
            /**
             * @private
             * @type {TileQueue}
             */
            this.tileQueue_ = new TileQueue_js_1.default(this.getTilePriority.bind(this), this.handleTileChange_.bind(this));
            this.addEventListener(Object_js_11.getChangeEventType(MapProperty_js_1.default.LAYERGROUP), this.handleLayerGroupChanged_);
            this.addEventListener(Object_js_11.getChangeEventType(MapProperty_js_1.default.VIEW), this.handleViewChanged_);
            this.addEventListener(Object_js_11.getChangeEventType(MapProperty_js_1.default.SIZE), this.handleSizeChanged_);
            this.addEventListener(Object_js_11.getChangeEventType(MapProperty_js_1.default.TARGET), this.handleTargetChanged_);
            // setProperties will trigger the rendering of the map if the map
            // is "defined" already.
            this.setProperties(optionsInternal.values);
            this.controls.forEach(
            /**
             * @param {import("./control/Control.js").default} control Control.
             * @this {PluggableMap}
             */
            function (control) {
                control.setMap(this);
            }.bind(this));
            this.controls.addEventListener(CollectionEventType_js_3.default.ADD, 
            /**
             * @param {import("./Collection.js").CollectionEvent} event CollectionEvent.
             */
            function (event) {
                event.element.setMap(this);
            }.bind(this));
            this.controls.addEventListener(CollectionEventType_js_3.default.REMOVE, 
            /**
             * @param {import("./Collection.js").CollectionEvent} event CollectionEvent.
             */
            function (event) {
                event.element.setMap(null);
            }.bind(this));
            this.interactions.forEach(
            /**
             * @param {import("./interaction/Interaction.js").default} interaction Interaction.
             * @this {PluggableMap}
             */
            function (interaction) {
                interaction.setMap(this);
            }.bind(this));
            this.interactions.addEventListener(CollectionEventType_js_3.default.ADD, 
            /**
             * @param {import("./Collection.js").CollectionEvent} event CollectionEvent.
             */
            function (event) {
                event.element.setMap(this);
            }.bind(this));
            this.interactions.addEventListener(CollectionEventType_js_3.default.REMOVE, 
            /**
             * @param {import("./Collection.js").CollectionEvent} event CollectionEvent.
             */
            function (event) {
                event.element.setMap(null);
            }.bind(this));
            this.overlays_.forEach(this.addOverlayInternal_.bind(this));
            this.overlays_.addEventListener(CollectionEventType_js_3.default.ADD, 
            /**
             * @param {import("./Collection.js").CollectionEvent} event CollectionEvent.
             */
            function (event) {
                this.addOverlayInternal_(
                /** @type {import("./Overlay.js").default} */ (event.element));
            }.bind(this));
            this.overlays_.addEventListener(CollectionEventType_js_3.default.REMOVE, 
            /**
             * @param {import("./Collection.js").CollectionEvent} event CollectionEvent.
             */
            function (event) {
                const overlay = /** @type {import("./Overlay.js").default} */ (event.element);
                const id = overlay.getId();
                if (id !== undefined) {
                    delete this.overlayIdIndex_[id.toString()];
                }
                event.element.setMap(null);
            }.bind(this));
        }
        /**
         * @abstract
         * @return {import("./renderer/Map.js").default} The map renderer
         */
        createRenderer() {
            throw new Error('Use a map type that has a createRenderer method');
        }
        /**
         * Add the given control to the map.
         * @param {import("./control/Control.js").default} control Control.
         * @api
         */
        addControl(control) {
            this.getControls().push(control);
        }
        /**
         * Add the given interaction to the map. If you want to add an interaction
         * at another point of the collection use `getInteraction()` and the methods
         * available on {@link module:ol/Collection~Collection}. This can be used to
         * stop the event propagation from the handleEvent function. The interactions
         * get to handle the events in the reverse order of this collection.
         * @param {import("./interaction/Interaction.js").default} interaction Interaction to add.
         * @api
         */
        addInteraction(interaction) {
            this.getInteractions().push(interaction);
        }
        /**
         * Adds the given layer to the top of this map. If you want to add a layer
         * elsewhere in the stack, use `getLayers()` and the methods available on
         * {@link module:ol/Collection~Collection}.
         * @param {import("./layer/Base.js").default} layer Layer.
         * @api
         */
        addLayer(layer) {
            const layers = this.getLayerGroup().getLayers();
            layers.push(layer);
        }
        /**
         * Add the given overlay to the map.
         * @param {import("./Overlay.js").default} overlay Overlay.
         * @api
         */
        addOverlay(overlay) {
            this.getOverlays().push(overlay);
        }
        /**
         * This deals with map's overlay collection changes.
         * @param {import("./Overlay.js").default} overlay Overlay.
         * @private
         */
        addOverlayInternal_(overlay) {
            const id = overlay.getId();
            if (id !== undefined) {
                this.overlayIdIndex_[id.toString()] = overlay;
            }
            overlay.setMap(this);
        }
        /**
         *
         * Clean up.
         */
        disposeInternal() {
            this.setTarget(null);
            super.disposeInternal();
        }
        /**
         * Detect features that intersect a pixel on the viewport, and execute a
         * callback with each intersecting feature. Layers included in the detection can
         * be configured through the `layerFilter` option in `opt_options`.
         * @param {import("./pixel.js").Pixel} pixel Pixel.
         * @param {function(this: S, import("./Feature.js").FeatureLike,
         *     import("./layer/Layer.js").default): T} callback Feature callback. The callback will be
         *     called with two arguments. The first argument is one
         *     {@link module:ol/Feature feature} or
         *     {@link module:ol/render/Feature render feature} at the pixel, the second is
         *     the {@link module:ol/layer/Layer layer} of the feature and will be null for
         *     unmanaged layers. To stop detection, callback functions can return a
         *     truthy value.
         * @param {AtPixelOptions=} opt_options Optional options.
         * @return {T|undefined} Callback result, i.e. the return value of last
         * callback execution, or the first truthy callback return value.
         * @template S,T
         * @api
         */
        forEachFeatureAtPixel(pixel, callback, opt_options) {
            if (!this.frameState_) {
                return;
            }
            const coordinate = this.getCoordinateFromPixelInternal(pixel);
            opt_options = opt_options !== undefined ? opt_options : {};
            const hitTolerance = opt_options.hitTolerance !== undefined
                ? opt_options.hitTolerance * this.frameState_.pixelRatio
                : 0;
            const layerFilter = opt_options.layerFilter !== undefined ? opt_options.layerFilter : functions_js_5.TRUE;
            const checkWrapped = opt_options.checkWrapped !== false;
            return this.renderer_.forEachFeatureAtCoordinate(coordinate, this.frameState_, hitTolerance, checkWrapped, callback, null, layerFilter, null);
        }
        /**
         * Get all features that intersect a pixel on the viewport.
         * @param {import("./pixel.js").Pixel} pixel Pixel.
         * @param {AtPixelOptions=} opt_options Optional options.
         * @return {Array<import("./Feature.js").FeatureLike>} The detected features or
         * an empty array if none were found.
         * @api
         */
        getFeaturesAtPixel(pixel, opt_options) {
            const features = [];
            this.forEachFeatureAtPixel(pixel, function (feature) {
                features.push(feature);
            }, opt_options);
            return features;
        }
        /**
         * Detect layers that have a color value at a pixel on the viewport, and
         * execute a callback with each matching layer. Layers included in the
         * detection can be configured through `opt_layerFilter`.
         *
         * Note: this may give false positives unless the map layers have had different `className`
         * properties assigned to them.
         *
         * @param {import("./pixel.js").Pixel} pixel Pixel.
         * @param {function(this: S, import("./layer/Layer.js").default, (Uint8ClampedArray|Uint8Array)): T} callback
         *     Layer callback. This callback will receive two arguments: first is the
         *     {@link module:ol/layer/Layer layer}, second argument is an array representing
         *     [R, G, B, A] pixel values (0 - 255) and will be `null` for layer types
         *     that do not currently support this argument. To stop detection, callback
         *     functions can return a truthy value.
         * @param {AtPixelOptions=} opt_options Configuration options.
         * @return {T|undefined} Callback result, i.e. the return value of last
         * callback execution, or the first truthy callback return value.
         * @template S,T
         * @api
         */
        forEachLayerAtPixel(pixel, callback, opt_options) {
            if (!this.frameState_) {
                return;
            }
            const options = opt_options || {};
            const hitTolerance = options.hitTolerance !== undefined
                ? options.hitTolerance * this.frameState_.pixelRatio
                : 0;
            const layerFilter = options.layerFilter || functions_js_5.TRUE;
            return this.renderer_.forEachLayerAtPixel(pixel, this.frameState_, hitTolerance, callback, layerFilter);
        }
        /**
         * Detect if features intersect a pixel on the viewport. Layers included in the
         * detection can be configured through `opt_layerFilter`.
         * @param {import("./pixel.js").Pixel} pixel Pixel.
         * @param {AtPixelOptions=} opt_options Optional options.
         * @return {boolean} Is there a feature at the given pixel?
         * @api
         */
        hasFeatureAtPixel(pixel, opt_options) {
            if (!this.frameState_) {
                return false;
            }
            const coordinate = this.getCoordinateFromPixelInternal(pixel);
            opt_options = opt_options !== undefined ? opt_options : {};
            const layerFilter = opt_options.layerFilter !== undefined ? opt_options.layerFilter : functions_js_5.TRUE;
            const hitTolerance = opt_options.hitTolerance !== undefined
                ? opt_options.hitTolerance * this.frameState_.pixelRatio
                : 0;
            const checkWrapped = opt_options.checkWrapped !== false;
            return this.renderer_.hasFeatureAtCoordinate(coordinate, this.frameState_, hitTolerance, checkWrapped, layerFilter, null);
        }
        /**
         * Returns the coordinate in user projection for a browser event.
         * @param {MouseEvent} event Event.
         * @return {import("./coordinate.js").Coordinate} Coordinate.
         * @api
         */
        getEventCoordinate(event) {
            return this.getCoordinateFromPixel(this.getEventPixel(event));
        }
        /**
         * Returns the coordinate in view projection for a browser event.
         * @param {MouseEvent} event Event.
         * @return {import("./coordinate.js").Coordinate} Coordinate.
         */
        getEventCoordinateInternal(event) {
            return this.getCoordinateFromPixelInternal(this.getEventPixel(event));
        }
        /**
         * Returns the map pixel position for a browser event relative to the viewport.
         * @param {UIEvent} event Event.
         * @return {import("./pixel.js").Pixel} Pixel.
         * @api
         */
        getEventPixel(event) {
            const viewportPosition = this.viewport_.getBoundingClientRect();
            const eventPosition = 
            //FIXME Are we really calling this with a TouchEvent anywhere?
            'changedTouches' in event
                ? /** @type {TouchEvent} */ (event).changedTouches[0]
                : /** @type {MouseEvent} */ (event);
            return [
                eventPosition.clientX - viewportPosition.left,
                eventPosition.clientY - viewportPosition.top,
            ];
        }
        /**
         * Get the target in which this map is rendered.
         * Note that this returns what is entered as an option or in setTarget:
         * if that was an element, it returns an element; if a string, it returns that.
         * @return {HTMLElement|string|undefined} The Element or id of the Element that the
         *     map is rendered in.
         * @observable
         * @api
         */
        getTarget() {
            return /** @type {HTMLElement|string|undefined} */ (this.get(MapProperty_js_1.default.TARGET));
        }
        /**
         * Get the DOM element into which this map is rendered. In contrast to
         * `getTarget` this method always return an `Element`, or `null` if the
         * map has no target.
         * @return {HTMLElement} The element that the map is rendered in.
         * @api
         */
        getTargetElement() {
            const target = this.getTarget();
            if (target !== undefined) {
                return typeof target === 'string'
                    ? document.getElementById(target)
                    : target;
            }
            else {
                return null;
            }
        }
        /**
         * Get the coordinate for a given pixel.  This returns a coordinate in the
         * user projection.
         * @param {import("./pixel.js").Pixel} pixel Pixel position in the map viewport.
         * @return {import("./coordinate.js").Coordinate} The coordinate for the pixel position.
         * @api
         */
        getCoordinateFromPixel(pixel) {
            return proj_js_5.toUserCoordinate(this.getCoordinateFromPixelInternal(pixel), this.getView().getProjection());
        }
        /**
         * Get the coordinate for a given pixel.  This returns a coordinate in the
         * map view projection.
         * @param {import("./pixel.js").Pixel} pixel Pixel position in the map viewport.
         * @return {import("./coordinate.js").Coordinate} The coordinate for the pixel position.
         */
        getCoordinateFromPixelInternal(pixel) {
            const frameState = this.frameState_;
            if (!frameState) {
                return null;
            }
            else {
                return transform_js_11.apply(frameState.pixelToCoordinateTransform, pixel.slice());
            }
        }
        /**
         * Get the map controls. Modifying this collection changes the controls
         * associated with the map.
         * @return {Collection<import("./control/Control.js").default>} Controls.
         * @api
         */
        getControls() {
            return this.controls;
        }
        /**
         * Get the map overlays. Modifying this collection changes the overlays
         * associated with the map.
         * @return {Collection<import("./Overlay.js").default>} Overlays.
         * @api
         */
        getOverlays() {
            return this.overlays_;
        }
        /**
         * Get an overlay by its identifier (the value returned by overlay.getId()).
         * Note that the index treats string and numeric identifiers as the same. So
         * `map.getOverlayById(2)` will return an overlay with id `'2'` or `2`.
         * @param {string|number} id Overlay identifier.
         * @return {import("./Overlay.js").default} Overlay.
         * @api
         */
        getOverlayById(id) {
            const overlay = this.overlayIdIndex_[id.toString()];
            return overlay !== undefined ? overlay : null;
        }
        /**
         * Get the map interactions. Modifying this collection changes the interactions
         * associated with the map.
         *
         * Interactions are used for e.g. pan, zoom and rotate.
         * @return {Collection<import("./interaction/Interaction.js").default>} Interactions.
         * @api
         */
        getInteractions() {
            return this.interactions;
        }
        /**
         * Get the layergroup associated with this map.
         * @return {LayerGroup} A layer group containing the layers in this map.
         * @observable
         * @api
         */
        getLayerGroup() {
            return /** @type {LayerGroup} */ (this.get(MapProperty_js_1.default.LAYERGROUP));
        }
        /**
         * Get the collection of layers associated with this map.
         * @return {!Collection<import("./layer/Base.js").default>} Layers.
         * @api
         */
        getLayers() {
            const layers = this.getLayerGroup().getLayers();
            return layers;
        }
        /**
         * @return {boolean} Layers have sources that are still loading.
         */
        getLoading() {
            const layerStatesArray = this.getLayerGroup().getLayerStatesArray();
            for (let i = 0, ii = layerStatesArray.length; i < ii; ++i) {
                const layer = layerStatesArray[i].layer;
                const source = /** @type {import("./layer/Layer.js").default} */ (layer).getSource();
                if (source && source.loading) {
                    return true;
                }
            }
            return false;
        }
        /**
         * Get the pixel for a coordinate.  This takes a coordinate in the user
         * projection and returns the corresponding pixel.
         * @param {import("./coordinate.js").Coordinate} coordinate A map coordinate.
         * @return {import("./pixel.js").Pixel} A pixel position in the map viewport.
         * @api
         */
        getPixelFromCoordinate(coordinate) {
            const viewCoordinate = proj_js_5.fromUserCoordinate(coordinate, this.getView().getProjection());
            return this.getPixelFromCoordinateInternal(viewCoordinate);
        }
        /**
         * Get the pixel for a coordinate.  This takes a coordinate in the map view
         * projection and returns the corresponding pixel.
         * @param {import("./coordinate.js").Coordinate} coordinate A map coordinate.
         * @return {import("./pixel.js").Pixel} A pixel position in the map viewport.
         */
        getPixelFromCoordinateInternal(coordinate) {
            const frameState = this.frameState_;
            if (!frameState) {
                return null;
            }
            else {
                return transform_js_11.apply(frameState.coordinateToPixelTransform, coordinate.slice(0, 2));
            }
        }
        /**
         * Get the map renderer.
         * @return {import("./renderer/Map.js").default} Renderer
         */
        getRenderer() {
            return this.renderer_;
        }
        /**
         * Get the size of this map.
         * @return {import("./size.js").Size|undefined} The size in pixels of the map in the DOM.
         * @observable
         * @api
         */
        getSize() {
            return /** @type {import("./size.js").Size|undefined} */ (this.get(MapProperty_js_1.default.SIZE));
        }
        /**
         * Get the view associated with this map. A view manages properties such as
         * center and resolution.
         * @return {View} The view that controls this map.
         * @observable
         * @api
         */
        getView() {
            return /** @type {View} */ (this.get(MapProperty_js_1.default.VIEW));
        }
        /**
         * Get the element that serves as the map viewport.
         * @return {HTMLElement} Viewport.
         * @api
         */
        getViewport() {
            return this.viewport_;
        }
        /**
         * Get the element that serves as the container for overlays.  Elements added to
         * this container will let mousedown and touchstart events through to the map,
         * so clicks and gestures on an overlay will trigger {@link module:ol/MapBrowserEvent~MapBrowserEvent}
         * events.
         * @return {!HTMLElement} The map's overlay container.
         */
        getOverlayContainer() {
            return this.overlayContainer_;
        }
        /**
         * Get the element that serves as a container for overlays that don't allow
         * event propagation. Elements added to this container won't let mousedown and
         * touchstart events through to the map, so clicks and gestures on an overlay
         * don't trigger any {@link module:ol/MapBrowserEvent~MapBrowserEvent}.
         * @return {!HTMLElement} The map's overlay container that stops events.
         */
        getOverlayContainerStopEvent() {
            return this.overlayContainerStopEvent_;
        }
        /**
         * @param {import("./Tile.js").default} tile Tile.
         * @param {string} tileSourceKey Tile source key.
         * @param {import("./coordinate.js").Coordinate} tileCenter Tile center.
         * @param {number} tileResolution Tile resolution.
         * @return {number} Tile priority.
         */
        getTilePriority(tile, tileSourceKey, tileCenter, tileResolution) {
            return TileQueue_js_1.getTilePriority(this.frameState_, tile, tileSourceKey, tileCenter, tileResolution);
        }
        /**
         * @param {UIEvent} browserEvent Browser event.
         * @param {string=} opt_type Type.
         */
        handleBrowserEvent(browserEvent, opt_type) {
            const type = opt_type || browserEvent.type;
            const mapBrowserEvent = new MapBrowserEvent_js_2.default(type, this, browserEvent);
            this.handleMapBrowserEvent(mapBrowserEvent);
        }
        /**
         * @param {MapBrowserEvent} mapBrowserEvent The event to handle.
         */
        handleMapBrowserEvent(mapBrowserEvent) {
            if (!this.frameState_) {
                // With no view defined, we cannot translate pixels into geographical
                // coordinates so interactions cannot be used.
                return;
            }
            const originalEvent = /** @type {PointerEvent} */ (mapBrowserEvent.originalEvent);
            const eventType = originalEvent.type;
            if (eventType === EventType_js_14.default.POINTERDOWN ||
                eventType === EventType_js_13.default.WHEEL ||
                eventType === EventType_js_13.default.KEYDOWN) {
                const rootNode = this.viewport_.getRootNode
                    ? this.viewport_.getRootNode()
                    : document;
                const target = rootNode === document
                    ? /** @type {Node} */ (originalEvent.target)
                    : /** @type {ShadowRoot} */ (rootNode).elementFromPoint(originalEvent.clientX, originalEvent.clientY);
                if (
                // Abort if the target is a child of the container for elements whose events are not meant
                // to be handled by map interactions.
                this.overlayContainerStopEvent_.contains(target) ||
                    // Abort if the event target is a child of the container that is no longer in the page.
                    // It's possible for the target to no longer be in the page if it has been removed in an
                    // event listener, this might happen in a Control that recreates it's content based on
                    // user interaction either manually or via a render in something like https://reactjs.org/
                    !(rootNode === document ? document.documentElement : rootNode).contains(target)) {
                    return;
                }
            }
            mapBrowserEvent.frameState = this.frameState_;
            const interactionsArray = this.getInteractions().getArray();
            if (this.dispatchEvent(mapBrowserEvent) !== false) {
                for (let i = interactionsArray.length - 1; i >= 0; i--) {
                    const interaction = interactionsArray[i];
                    if (!interaction.getActive()) {
                        continue;
                    }
                    const cont = interaction.handleEvent(mapBrowserEvent);
                    if (!cont) {
                        break;
                    }
                }
            }
        }
        /**
         * @protected
         */
        handlePostRender() {
            const frameState = this.frameState_;
            // Manage the tile queue
            // Image loads are expensive and a limited resource, so try to use them
            // efficiently:
            // * When the view is static we allow a large number of parallel tile loads
            //   to complete the frame as quickly as possible.
            // * When animating or interacting, image loads can cause janks, so we reduce
            //   the maximum number of loads per frame and limit the number of parallel
            //   tile loads to remain reactive to view changes and to reduce the chance of
            //   loading tiles that will quickly disappear from view.
            const tileQueue = this.tileQueue_;
            if (!tileQueue.isEmpty()) {
                let maxTotalLoading = this.maxTilesLoading_;
                let maxNewLoads = maxTotalLoading;
                if (frameState) {
                    const hints = frameState.viewHints;
                    if (hints[ViewHint_js_2.default.ANIMATING] || hints[ViewHint_js_2.default.INTERACTING]) {
                        const lowOnFrameBudget = !has_js_6.IMAGE_DECODE && Date.now() - frameState.time > 8;
                        maxTotalLoading = lowOnFrameBudget ? 0 : 8;
                        maxNewLoads = lowOnFrameBudget ? 0 : 2;
                    }
                }
                if (tileQueue.getTilesLoading() < maxTotalLoading) {
                    tileQueue.reprioritize(); // FIXME only call if view has changed
                    tileQueue.loadMoreTiles(maxTotalLoading, maxNewLoads);
                }
            }
            if (frameState &&
                this.hasListener(EventType_js_15.default.RENDERCOMPLETE) &&
                !frameState.animate &&
                !this.tileQueue_.getTilesLoading() &&
                !this.getLoading()) {
                this.renderer_.dispatchRenderEvent(EventType_js_15.default.RENDERCOMPLETE, frameState);
            }
            const postRenderFunctions = this.postRenderFunctions_;
            for (let i = 0, ii = postRenderFunctions.length; i < ii; ++i) {
                postRenderFunctions[i](this, frameState);
            }
            postRenderFunctions.length = 0;
        }
        /**
         * @private
         */
        handleSizeChanged_() {
            if (this.getView() && !this.getView().getAnimating()) {
                this.getView().resolveConstraints(0);
            }
            this.render();
        }
        /**
         * @private
         */
        handleTargetChanged_() {
            // target may be undefined, null, a string or an Element.
            // If it's a string we convert it to an Element before proceeding.
            // If it's not now an Element we remove the viewport from the DOM.
            // If it's an Element we append the viewport element to it.
            let targetElement;
            if (this.getTarget()) {
                targetElement = this.getTargetElement();
            }
            if (this.mapBrowserEventHandler_) {
                for (let i = 0, ii = this.keyHandlerKeys_.length; i < ii; ++i) {
                    events_js_9.unlistenByKey(this.keyHandlerKeys_[i]);
                }
                this.keyHandlerKeys_ = null;
                this.viewport_.removeEventListener(EventType_js_13.default.CONTEXTMENU, this.boundHandleBrowserEvent_);
                this.viewport_.removeEventListener(EventType_js_13.default.WHEEL, this.boundHandleBrowserEvent_);
                if (this.handleResize_ !== undefined) {
                    removeEventListener(EventType_js_13.default.RESIZE, this.handleResize_, false);
                    this.handleResize_ = undefined;
                }
                this.mapBrowserEventHandler_.dispose();
                this.mapBrowserEventHandler_ = null;
                dom_js_6.removeNode(this.viewport_);
            }
            if (!targetElement) {
                if (this.renderer_) {
                    clearTimeout(this.postRenderTimeoutHandle_);
                    this.postRenderFunctions_.length = 0;
                    this.renderer_.dispose();
                    this.renderer_ = null;
                }
                if (this.animationDelayKey_) {
                    cancelAnimationFrame(this.animationDelayKey_);
                    this.animationDelayKey_ = undefined;
                }
            }
            else {
                targetElement.appendChild(this.viewport_);
                if (!this.renderer_) {
                    this.renderer_ = this.createRenderer();
                }
                this.mapBrowserEventHandler_ = new MapBrowserEventHandler_js_1.default(this, this.moveTolerance_);
                for (const key in MapBrowserEventType_js_2.default) {
                    this.mapBrowserEventHandler_.addEventListener(MapBrowserEventType_js_2.default[key], this.handleMapBrowserEvent.bind(this));
                }
                this.viewport_.addEventListener(EventType_js_13.default.CONTEXTMENU, this.boundHandleBrowserEvent_, false);
                this.viewport_.addEventListener(EventType_js_13.default.WHEEL, this.boundHandleBrowserEvent_, has_js_6.PASSIVE_EVENT_LISTENERS ? { passive: false } : false);
                const keyboardEventTarget = !this.keyboardEventTarget_
                    ? targetElement
                    : this.keyboardEventTarget_;
                this.keyHandlerKeys_ = [
                    events_js_9.listen(keyboardEventTarget, EventType_js_13.default.KEYDOWN, this.handleBrowserEvent, this),
                    events_js_9.listen(keyboardEventTarget, EventType_js_13.default.KEYPRESS, this.handleBrowserEvent, this),
                ];
                if (!this.handleResize_) {
                    this.handleResize_ = this.updateSize.bind(this);
                    window.addEventListener(EventType_js_13.default.RESIZE, this.handleResize_, false);
                }
            }
            this.updateSize();
            // updateSize calls setSize, so no need to call this.render
            // ourselves here.
        }
        /**
         * @private
         */
        handleTileChange_() {
            this.render();
        }
        /**
         * @private
         */
        handleViewPropertyChanged_() {
            this.render();
        }
        /**
         * @private
         */
        handleViewChanged_() {
            if (this.viewPropertyListenerKey_) {
                events_js_9.unlistenByKey(this.viewPropertyListenerKey_);
                this.viewPropertyListenerKey_ = null;
            }
            if (this.viewChangeListenerKey_) {
                events_js_9.unlistenByKey(this.viewChangeListenerKey_);
                this.viewChangeListenerKey_ = null;
            }
            const view = this.getView();
            if (view) {
                this.updateViewportSize_();
                this.viewPropertyListenerKey_ = events_js_9.listen(view, ObjectEventType_js_3.default.PROPERTYCHANGE, this.handleViewPropertyChanged_, this);
                this.viewChangeListenerKey_ = events_js_9.listen(view, EventType_js_13.default.CHANGE, this.handleViewPropertyChanged_, this);
                view.resolveConstraints(0);
            }
            this.render();
        }
        /**
         * @private
         */
        handleLayerGroupChanged_() {
            if (this.layerGroupPropertyListenerKeys_) {
                this.layerGroupPropertyListenerKeys_.forEach(events_js_9.unlistenByKey);
                this.layerGroupPropertyListenerKeys_ = null;
            }
            const layerGroup = this.getLayerGroup();
            if (layerGroup) {
                this.layerGroupPropertyListenerKeys_ = [
                    events_js_9.listen(layerGroup, ObjectEventType_js_3.default.PROPERTYCHANGE, this.render, this),
                    events_js_9.listen(layerGroup, EventType_js_13.default.CHANGE, this.render, this),
                ];
            }
            this.render();
        }
        /**
         * @return {boolean} Is rendered.
         */
        isRendered() {
            return !!this.frameState_;
        }
        /**
         * Requests an immediate render in a synchronous manner.
         * @api
         */
        renderSync() {
            if (this.animationDelayKey_) {
                cancelAnimationFrame(this.animationDelayKey_);
            }
            this.animationDelay_();
        }
        /**
         * Redraws all text after new fonts have loaded
         */
        redrawText() {
            const layerStates = this.getLayerGroup().getLayerStatesArray();
            for (let i = 0, ii = layerStates.length; i < ii; ++i) {
                const layer = layerStates[i].layer;
                if (layer.hasRenderer()) {
                    layer.getRenderer().handleFontsChanged();
                }
            }
        }
        /**
         * Request a map rendering (at the next animation frame).
         * @api
         */
        render() {
            if (this.renderer_ && this.animationDelayKey_ === undefined) {
                this.animationDelayKey_ = requestAnimationFrame(this.animationDelay_);
            }
        }
        /**
         * Remove the given control from the map.
         * @param {import("./control/Control.js").default} control Control.
         * @return {import("./control/Control.js").default|undefined} The removed control (or undefined
         *     if the control was not found).
         * @api
         */
        removeControl(control) {
            return this.getControls().remove(control);
        }
        /**
         * Remove the given interaction from the map.
         * @param {import("./interaction/Interaction.js").default} interaction Interaction to remove.
         * @return {import("./interaction/Interaction.js").default|undefined} The removed interaction (or
         *     undefined if the interaction was not found).
         * @api
         */
        removeInteraction(interaction) {
            return this.getInteractions().remove(interaction);
        }
        /**
         * Removes the given layer from the map.
         * @param {import("./layer/Base.js").default} layer Layer.
         * @return {import("./layer/Base.js").default|undefined} The removed layer (or undefined if the
         *     layer was not found).
         * @api
         */
        removeLayer(layer) {
            const layers = this.getLayerGroup().getLayers();
            return layers.remove(layer);
        }
        /**
         * Remove the given overlay from the map.
         * @param {import("./Overlay.js").default} overlay Overlay.
         * @return {import("./Overlay.js").default|undefined} The removed overlay (or undefined
         *     if the overlay was not found).
         * @api
         */
        removeOverlay(overlay) {
            return this.getOverlays().remove(overlay);
        }
        /**
         * @param {number} time Time.
         * @private
         */
        renderFrame_(time) {
            const size = this.getSize();
            const view = this.getView();
            const previousFrameState = this.frameState_;
            /** @type {?FrameState} */
            let frameState = null;
            if (size !== undefined && size_js_4.hasArea(size) && view && view.isDef()) {
                const viewHints = view.getHints(this.frameState_ ? this.frameState_.viewHints : undefined);
                const viewState = view.getState();
                frameState = {
                    animate: false,
                    coordinateToPixelTransform: this.coordinateToPixelTransform_,
                    declutterItems: previousFrameState
                        ? previousFrameState.declutterItems
                        : [],
                    extent: extent_js_27.getForViewAndSize(viewState.center, viewState.resolution, viewState.rotation, size),
                    index: this.frameIndex_++,
                    layerIndex: 0,
                    layerStatesArray: this.getLayerGroup().getLayerStatesArray(),
                    pixelRatio: this.pixelRatio_,
                    pixelToCoordinateTransform: this.pixelToCoordinateTransform_,
                    postRenderFunctions: [],
                    size: size,
                    tileQueue: this.tileQueue_,
                    time: time,
                    usedTiles: {},
                    viewState: viewState,
                    viewHints: viewHints,
                    wantedTiles: {},
                };
            }
            this.frameState_ = frameState;
            this.renderer_.renderFrame(frameState);
            if (frameState) {
                if (frameState.animate) {
                    this.render();
                }
                Array.prototype.push.apply(this.postRenderFunctions_, frameState.postRenderFunctions);
                if (previousFrameState) {
                    const moveStart = !this.previousExtent_ ||
                        (!extent_js_27.isEmpty(this.previousExtent_) &&
                            !extent_js_27.equals(frameState.extent, this.previousExtent_));
                    if (moveStart) {
                        this.dispatchEvent(new MapEvent_js_2.default(MapEventType_js_3.default.MOVESTART, this, previousFrameState));
                        this.previousExtent_ = extent_js_27.createOrUpdateEmpty(this.previousExtent_);
                    }
                }
                const idle = this.previousExtent_ &&
                    !frameState.viewHints[ViewHint_js_2.default.ANIMATING] &&
                    !frameState.viewHints[ViewHint_js_2.default.INTERACTING] &&
                    !extent_js_27.equals(frameState.extent, this.previousExtent_);
                if (idle) {
                    this.dispatchEvent(new MapEvent_js_2.default(MapEventType_js_3.default.MOVEEND, this, frameState));
                    extent_js_27.clone(frameState.extent, this.previousExtent_);
                }
            }
            this.dispatchEvent(new MapEvent_js_2.default(MapEventType_js_3.default.POSTRENDER, this, frameState));
            this.postRenderTimeoutHandle_ = setTimeout(this.handlePostRender.bind(this), 0);
        }
        /**
         * Sets the layergroup of this map.
         * @param {LayerGroup} layerGroup A layer group containing the layers in this map.
         * @observable
         * @api
         */
        setLayerGroup(layerGroup) {
            this.set(MapProperty_js_1.default.LAYERGROUP, layerGroup);
        }
        /**
         * Set the size of this map.
         * @param {import("./size.js").Size|undefined} size The size in pixels of the map in the DOM.
         * @observable
         * @api
         */
        setSize(size) {
            this.set(MapProperty_js_1.default.SIZE, size);
        }
        /**
         * Set the target element to render this map into.
         * @param {HTMLElement|string|undefined} target The Element or id of the Element
         *     that the map is rendered in.
         * @observable
         * @api
         */
        setTarget(target) {
            this.set(MapProperty_js_1.default.TARGET, target);
        }
        /**
         * Set the view for this map.
         * @param {View} view The view that controls this map.
         * @observable
         * @api
         */
        setView(view) {
            this.set(MapProperty_js_1.default.VIEW, view);
        }
        /**
         * Force a recalculation of the map viewport size.  This should be called when
         * third-party code changes the size of the map viewport.
         * @api
         */
        updateSize() {
            const targetElement = this.getTargetElement();
            if (!targetElement) {
                this.setSize(undefined);
            }
            else {
                const computedStyle = getComputedStyle(targetElement);
                this.setSize([
                    targetElement.offsetWidth -
                        parseFloat(computedStyle['borderLeftWidth']) -
                        parseFloat(computedStyle['paddingLeft']) -
                        parseFloat(computedStyle['paddingRight']) -
                        parseFloat(computedStyle['borderRightWidth']),
                    targetElement.offsetHeight -
                        parseFloat(computedStyle['borderTopWidth']) -
                        parseFloat(computedStyle['paddingTop']) -
                        parseFloat(computedStyle['paddingBottom']) -
                        parseFloat(computedStyle['borderBottomWidth']),
                ]);
            }
            this.updateViewportSize_();
        }
        /**
         * Recomputes the viewport size and save it on the view object (if any)
         * @private
         */
        updateViewportSize_() {
            const view = this.getView();
            if (view) {
                let size = undefined;
                const computedStyle = getComputedStyle(this.viewport_);
                if (computedStyle.width && computedStyle.height) {
                    size = [
                        parseInt(computedStyle.width, 10),
                        parseInt(computedStyle.height, 10),
                    ];
                }
                view.setViewportSize(size);
            }
        }
    }
    /**
     * @param {MapOptions} options Map options.
     * @return {MapOptionsInternal} Internal map options.
     */
    function createOptionsInternal(options) {
        /**
         * @type {HTMLElement|Document}
         */
        let keyboardEventTarget = null;
        if (options.keyboardEventTarget !== undefined) {
            keyboardEventTarget =
                typeof options.keyboardEventTarget === 'string'
                    ? document.getElementById(options.keyboardEventTarget)
                    : options.keyboardEventTarget;
        }
        /**
         * @type {Object<string, *>}
         */
        const values = {};
        const layerGroup = options.layers &&
            typeof ( /** @type {?} */(options.layers).getLayers) === 'function'
            ? /** @type {LayerGroup} */ (options.layers)
            : new Group_js_1.default({ layers: /** @type {Collection} */ (options.layers) });
        values[MapProperty_js_1.default.LAYERGROUP] = layerGroup;
        values[MapProperty_js_1.default.TARGET] = options.target;
        values[MapProperty_js_1.default.VIEW] =
            options.view !== undefined ? options.view : new View_js_1.default();
        let controls;
        if (options.controls !== undefined) {
            if (Array.isArray(options.controls)) {
                controls = new Collection_js_2.default(options.controls.slice());
            }
            else {
                asserts_js_11.assert(typeof ( /** @type {?} */(options.controls).getArray) === 'function', 47); // Expected `controls` to be an array or an `import("./Collection.js").Collection`
                controls = /** @type {Collection} */ (options.controls);
            }
        }
        let interactions;
        if (options.interactions !== undefined) {
            if (Array.isArray(options.interactions)) {
                interactions = new Collection_js_2.default(options.interactions.slice());
            }
            else {
                asserts_js_11.assert(typeof ( /** @type {?} */(options.interactions).getArray) ===
                    'function', 48); // Expected `interactions` to be an array or an `import("./Collection.js").Collection`
                interactions = /** @type {Collection} */ (options.interactions);
            }
        }
        let overlays;
        if (options.overlays !== undefined) {
            if (Array.isArray(options.overlays)) {
                overlays = new Collection_js_2.default(options.overlays.slice());
            }
            else {
                asserts_js_11.assert(typeof ( /** @type {?} */(options.overlays).getArray) === 'function', 49); // Expected `overlays` to be an array or an `import("./Collection.js").Collection`
                overlays = options.overlays;
            }
        }
        else {
            overlays = new Collection_js_2.default();
        }
        return {
            controls: controls,
            interactions: interactions,
            keyboardEventTarget: keyboardEventTarget,
            overlays: overlays,
            values: values,
        };
    }
    exports.default = PluggableMap;
});
define("node_modules/ol/src/source/Source", ["require", "exports", "node_modules/ol/src/Object", "node_modules/ol/src/source/State", "node_modules/ol/src/util", "node_modules/ol/src/proj"], function (require, exports, Object_js_12, State_js_2, util_js_12, proj_js_6) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * A function that returns a string or an array of strings representing source
     * attributions.
     *
     * @typedef {function(import("../PluggableMap.js").FrameState): (string|Array<string>)} Attribution
     */
    /**
     * A type that can be used to provide attribution information for data sources.
     *
     * It represents either
     * * a simple string (e.g. `'© Acme Inc.'`)
     * * an array of simple strings (e.g. `['© Acme Inc.', '© Bacme Inc.']`)
     * * a function that returns a string or array of strings ({@link module:ol/source/Source~Attribution})
     *
     * @typedef {string|Array<string>|Attribution} AttributionLike
     */
    /**
     * @typedef {Object} Options
     * @property {AttributionLike} [attributions]
     * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
     * @property {import("../proj.js").ProjectionLike} [projection] Projection. Default is the view projection.
     * @property {import("./State.js").default} [state='ready']
     * @property {boolean} [wrapX=false]
     */
    /**
     * @classdesc
     * Abstract base class; normally only used for creating subclasses and not
     * instantiated in apps.
     * Base class for {@link module:ol/layer/Layer~Layer} sources.
     *
     * A generic `change` event is triggered when the state of the source changes.
     * @abstract
     * @api
     */
    class Source extends Object_js_12.default {
        /**
         * @param {Options} options Source options.
         */
        constructor(options) {
            super();
            /**
             * @private
             * @type {import("../proj/Projection.js").default}
             */
            this.projection_ = proj_js_6.get(options.projection);
            /**
             * @private
             * @type {?Attribution}
             */
            this.attributions_ = adaptAttributions(options.attributions);
            /**
             * @private
             * @type {boolean}
             */
            this.attributionsCollapsible_ =
                options.attributionsCollapsible !== undefined
                    ? options.attributionsCollapsible
                    : true;
            /**
             * This source is currently loading data. Sources that defer loading to the
             * map's tile queue never set this to `true`.
             * @type {boolean}
             */
            this.loading = false;
            /**
             * @private
             * @type {import("./State.js").default}
             */
            this.state_ =
                options.state !== undefined ? options.state : State_js_2.default.READY;
            /**
             * @private
             * @type {boolean}
             */
            this.wrapX_ = options.wrapX !== undefined ? options.wrapX : false;
        }
        /**
         * Get the attribution function for the source.
         * @return {?Attribution} Attribution function.
         */
        getAttributions() {
            return this.attributions_;
        }
        /**
         * @return {boolean} Attributions are collapsible.
         */
        getAttributionsCollapsible() {
            return this.attributionsCollapsible_;
        }
        /**
         * Get the projection of the source.
         * @return {import("../proj/Projection.js").default} Projection.
         * @api
         */
        getProjection() {
            return this.projection_;
        }
        /**
         * @abstract
         * @return {Array<number>|undefined} Resolutions.
         */
        getResolutions() {
            return util_js_12.abstract();
        }
        /**
         * Get the state of the source, see {@link module:ol/source/State~State} for possible states.
         * @return {import("./State.js").default} State.
         * @api
         */
        getState() {
            return this.state_;
        }
        /**
         * @return {boolean|undefined} Wrap X.
         */
        getWrapX() {
            return this.wrapX_;
        }
        /**
         * @return {Object|undefined} Context options.
         */
        getContextOptions() {
            return undefined;
        }
        /**
         * Refreshes the source. The source will be cleared, and data from the server will be reloaded.
         * @api
         */
        refresh() {
            this.changed();
        }
        /**
         * Set the attributions of the source.
         * @param {AttributionLike|undefined} attributions Attributions.
         *     Can be passed as `string`, `Array<string>`, {@link module:ol/source/Source~Attribution},
         *     or `undefined`.
         * @api
         */
        setAttributions(attributions) {
            this.attributions_ = adaptAttributions(attributions);
            this.changed();
        }
        /**
         * Set the state of the source.
         * @param {import("./State.js").default} state State.
         */
        setState(state) {
            this.state_ = state;
            this.changed();
        }
    }
    /**
     * Turns the attributions option into an attributions function.
     * @param {AttributionLike|undefined} attributionLike The attribution option.
     * @return {?Attribution} An attribution function (or null).
     */
    function adaptAttributions(attributionLike) {
        if (!attributionLike) {
            return null;
        }
        if (Array.isArray(attributionLike)) {
            return function (frameState) {
                return attributionLike;
            };
        }
        if (typeof attributionLike === 'function') {
            return attributionLike;
        }
        return function (frameState) {
            return [attributionLike];
        };
    }
    exports.default = Source;
});
/**
 * @module ol/structs/LRUCache
 */
define("node_modules/ol/src/structs/LRUCache", ["require", "exports", "node_modules/ol/src/asserts"], function (require, exports, asserts_js_12) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @typedef {Object} Entry
     * @property {string} key_
     * @property {Object} newer
     * @property {Object} older
     * @property {*} value_
     */
    /**
     * @classdesc
     * Implements a Least-Recently-Used cache where the keys do not conflict with
     * Object's properties (e.g. 'hasOwnProperty' is not allowed as a key). Expiring
     * items from the cache is the responsibility of the user.
     *
     * @fires import("../events/Event.js").default
     * @template T
     */
    class LRUCache {
        /**
         * @param {number=} opt_highWaterMark High water mark.
         */
        constructor(opt_highWaterMark) {
            /**
             * Desired max cache size after expireCache(). If set to 0, no cache entries
             * will be pruned at all.
             * @type {number}
             */
            this.highWaterMark =
                opt_highWaterMark !== undefined ? opt_highWaterMark : 2048;
            /**
             * @private
             * @type {number}
             */
            this.count_ = 0;
            /**
             * @private
             * @type {!Object<string, Entry>}
             */
            this.entries_ = {};
            /**
             * @private
             * @type {?Entry}
             */
            this.oldest_ = null;
            /**
             * @private
             * @type {?Entry}
             */
            this.newest_ = null;
        }
        /**
         * @return {boolean} Can expire cache.
         */
        canExpireCache() {
            return this.highWaterMark > 0 && this.getCount() > this.highWaterMark;
        }
        /**
         * FIXME empty description for jsdoc
         */
        clear() {
            this.count_ = 0;
            this.entries_ = {};
            this.oldest_ = null;
            this.newest_ = null;
        }
        /**
         * @param {string} key Key.
         * @return {boolean} Contains key.
         */
        containsKey(key) {
            return this.entries_.hasOwnProperty(key);
        }
        /**
         * @param {function(T, string, LRUCache<T>): ?} f The function
         *     to call for every entry from the oldest to the newer. This function takes
         *     3 arguments (the entry value, the entry key and the LRUCache object).
         *     The return value is ignored.
         */
        forEach(f) {
            let entry = this.oldest_;
            while (entry) {
                f(entry.value_, entry.key_, this);
                entry = entry.newer;
            }
        }
        /**
         * @param {string} key Key.
         * @param {*=} opt_options Options (reserverd for subclasses).
         * @return {T} Value.
         */
        get(key, opt_options) {
            const entry = this.entries_[key];
            asserts_js_12.assert(entry !== undefined, 15); // Tried to get a value for a key that does not exist in the cache
            if (entry === this.newest_) {
                return entry.value_;
            }
            else if (entry === this.oldest_) {
                this.oldest_ = /** @type {Entry} */ (this.oldest_.newer);
                this.oldest_.older = null;
            }
            else {
                entry.newer.older = entry.older;
                entry.older.newer = entry.newer;
            }
            entry.newer = null;
            entry.older = this.newest_;
            this.newest_.newer = entry;
            this.newest_ = entry;
            return entry.value_;
        }
        /**
         * Remove an entry from the cache.
         * @param {string} key The entry key.
         * @return {T} The removed entry.
         */
        remove(key) {
            const entry = this.entries_[key];
            asserts_js_12.assert(entry !== undefined, 15); // Tried to get a value for a key that does not exist in the cache
            if (entry === this.newest_) {
                this.newest_ = /** @type {Entry} */ (entry.older);
                if (this.newest_) {
                    this.newest_.newer = null;
                }
            }
            else if (entry === this.oldest_) {
                this.oldest_ = /** @type {Entry} */ (entry.newer);
                if (this.oldest_) {
                    this.oldest_.older = null;
                }
            }
            else {
                entry.newer.older = entry.older;
                entry.older.newer = entry.newer;
            }
            delete this.entries_[key];
            --this.count_;
            return entry.value_;
        }
        /**
         * @return {number} Count.
         */
        getCount() {
            return this.count_;
        }
        /**
         * @return {Array<string>} Keys.
         */
        getKeys() {
            const keys = new Array(this.count_);
            let i = 0;
            let entry;
            for (entry = this.newest_; entry; entry = entry.older) {
                keys[i++] = entry.key_;
            }
            return keys;
        }
        /**
         * @return {Array<T>} Values.
         */
        getValues() {
            const values = new Array(this.count_);
            let i = 0;
            let entry;
            for (entry = this.newest_; entry; entry = entry.older) {
                values[i++] = entry.value_;
            }
            return values;
        }
        /**
         * @return {T} Last value.
         */
        peekLast() {
            return this.oldest_.value_;
        }
        /**
         * @return {string} Last key.
         */
        peekLastKey() {
            return this.oldest_.key_;
        }
        /**
         * Get the key of the newest item in the cache.  Throws if the cache is empty.
         * @return {string} The newest key.
         */
        peekFirstKey() {
            return this.newest_.key_;
        }
        /**
         * @return {T} value Value.
         */
        pop() {
            const entry = this.oldest_;
            delete this.entries_[entry.key_];
            if (entry.newer) {
                entry.newer.older = null;
            }
            this.oldest_ = /** @type {Entry} */ (entry.newer);
            if (!this.oldest_) {
                this.newest_ = null;
            }
            --this.count_;
            return entry.value_;
        }
        /**
         * @param {string} key Key.
         * @param {T} value Value.
         */
        replace(key, value) {
            this.get(key); // update `newest_`
            this.entries_[key].value_ = value;
        }
        /**
         * @param {string} key Key.
         * @param {T} value Value.
         */
        set(key, value) {
            asserts_js_12.assert(!(key in this.entries_), 16); // Tried to set a value for a key that is used already
            const entry = {
                key_: key,
                newer: null,
                older: this.newest_,
                value_: value,
            };
            if (!this.newest_) {
                this.oldest_ = entry;
            }
            else {
                this.newest_.newer = entry;
            }
            this.newest_ = entry;
            this.entries_[key] = entry;
            ++this.count_;
        }
        /**
         * Set a maximum number of entries for the cache.
         * @param {number} size Cache size.
         * @api
         */
        setSize(size) {
            this.highWaterMark = size;
        }
    }
    exports.default = LRUCache;
});
define("node_modules/ol/src/TileCache", ["require", "exports", "node_modules/ol/src/structs/LRUCache", "node_modules/ol/src/tilecoord"], function (require, exports, LRUCache_js_1, tilecoord_js_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    class TileCache extends LRUCache_js_1.default {
        /**
         * @param {!Object<string, boolean>} usedTiles Used tiles.
         */
        expireCache(usedTiles) {
            while (this.canExpireCache()) {
                const tile = this.peekLast();
                if (tile.getKey() in usedTiles) {
                    break;
                }
                else {
                    this.pop().release();
                }
            }
        }
        /**
         * Prune all tiles from the cache that don't have the same z as the newest tile.
         */
        pruneExceptNewestZ() {
            if (this.getCount() === 0) {
                return;
            }
            const key = this.peekFirstKey();
            const tileCoord = tilecoord_js_2.fromKey(key);
            const z = tileCoord[0];
            this.forEach(function (tile) {
                if (tile.tileCoord[0] !== z) {
                    this.remove(tilecoord_js_2.getKey(tile.tileCoord));
                    tile.release();
                }
            }.bind(this));
        }
    }
    exports.default = TileCache;
});
define("node_modules/ol/src/tilegrid", ["require", "exports", "node_modules/ol/src/extent/Corner", "node_modules/ol/src/tilegrid/TileGrid", "node_modules/ol/src/proj/Units", "node_modules/ol/src/tilegrid/common", "node_modules/ol/src/proj", "node_modules/ol/src/extent", "node_modules/ol/src/size"], function (require, exports, Corner_js_2, TileGrid_js_1, Units_js_7, common_js_3, proj_js_7, extent_js_28, size_js_5) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.extentFromProjection = exports.createForProjection = exports.createXYZ = exports.createForExtent = exports.wrapX = exports.getForProjection = void 0;
    /**
     * @param {import("./proj/Projection.js").default} projection Projection.
     * @return {!TileGrid} Default tile grid for the
     * passed projection.
     */
    function getForProjection(projection) {
        let tileGrid = projection.getDefaultTileGrid();
        if (!tileGrid) {
            tileGrid = createForProjection(projection);
            projection.setDefaultTileGrid(tileGrid);
        }
        return tileGrid;
    }
    exports.getForProjection = getForProjection;
    /**
     * @param {TileGrid} tileGrid Tile grid.
     * @param {import("./tilecoord.js").TileCoord} tileCoord Tile coordinate.
     * @param {import("./proj/Projection.js").default} projection Projection.
     * @return {import("./tilecoord.js").TileCoord} Tile coordinate.
     */
    function wrapX(tileGrid, tileCoord, projection) {
        const z = tileCoord[0];
        const center = tileGrid.getTileCoordCenter(tileCoord);
        const projectionExtent = extentFromProjection(projection);
        if (!extent_js_28.containsCoordinate(projectionExtent, center)) {
            const worldWidth = extent_js_28.getWidth(projectionExtent);
            const worldsAway = Math.ceil((projectionExtent[0] - center[0]) / worldWidth);
            center[0] += worldWidth * worldsAway;
            return tileGrid.getTileCoordForCoordAndZ(center, z);
        }
        else {
            return tileCoord;
        }
    }
    exports.wrapX = wrapX;
    /**
     * @param {import("./extent.js").Extent} extent Extent.
     * @param {number=} opt_maxZoom Maximum zoom level (default is
     *     DEFAULT_MAX_ZOOM).
     * @param {number|import("./size.js").Size=} opt_tileSize Tile size (default uses
     *     DEFAULT_TILE_SIZE).
     * @param {import("./extent/Corner.js").default=} opt_corner Extent corner (default is `'top-left'`).
     * @return {!TileGrid} TileGrid instance.
     */
    function createForExtent(extent, opt_maxZoom, opt_tileSize, opt_corner) {
        const corner = opt_corner !== undefined ? opt_corner : Corner_js_2.default.TOP_LEFT;
        const resolutions = resolutionsFromExtent(extent, opt_maxZoom, opt_tileSize);
        return new TileGrid_js_1.default({
            extent: extent,
            origin: extent_js_28.getCorner(extent, corner),
            resolutions: resolutions,
            tileSize: opt_tileSize,
        });
    }
    exports.createForExtent = createForExtent;
    /**
     * @typedef {Object} XYZOptions
     * @property {import("./extent.js").Extent} [extent] Extent for the tile grid. The origin for an XYZ tile grid is the
     * top-left corner of the extent. If `maxResolution` is not provided the zero level of the grid is defined by the resolution
     * at which one tile fits in the provided extent. If not provided, the extent of the EPSG:3857 projection is used.
     * @property {number} [maxResolution] Resolution at level zero.
     * @property {number} [maxZoom] Maximum zoom. The default is `42`. This determines the number of levels
     * in the grid set. For example, a `maxZoom` of 21 means there are 22 levels in the grid set.
     * @property {number} [minZoom=0] Minimum zoom.
     * @property {number|import("./size.js").Size} [tileSize=[256, 256]] Tile size in pixels.
     */
    /**
     * Creates a tile grid with a standard XYZ tiling scheme.
     * @param {XYZOptions=} opt_options Tile grid options.
     * @return {!TileGrid} Tile grid instance.
     * @api
     */
    function createXYZ(opt_options) {
        const xyzOptions = opt_options || {};
        const extent = xyzOptions.extent || proj_js_7.get('EPSG:3857').getExtent();
        const gridOptions = {
            extent: extent,
            minZoom: xyzOptions.minZoom,
            tileSize: xyzOptions.tileSize,
            resolutions: resolutionsFromExtent(extent, xyzOptions.maxZoom, xyzOptions.tileSize, xyzOptions.maxResolution),
        };
        return new TileGrid_js_1.default(gridOptions);
    }
    exports.createXYZ = createXYZ;
    /**
     * Create a resolutions array from an extent.  A zoom factor of 2 is assumed.
     * @param {import("./extent.js").Extent} extent Extent.
     * @param {number=} opt_maxZoom Maximum zoom level (default is
     *     DEFAULT_MAX_ZOOM).
     * @param {number|import("./size.js").Size=} opt_tileSize Tile size (default uses
     *     DEFAULT_TILE_SIZE).
     * @param {number=} opt_maxResolution Resolution at level zero.
     * @return {!Array<number>} Resolutions array.
     */
    function resolutionsFromExtent(extent, opt_maxZoom, opt_tileSize, opt_maxResolution) {
        const maxZoom = opt_maxZoom !== undefined ? opt_maxZoom : common_js_3.DEFAULT_MAX_ZOOM;
        const height = extent_js_28.getHeight(extent);
        const width = extent_js_28.getWidth(extent);
        const tileSize = size_js_5.toSize(opt_tileSize !== undefined ? opt_tileSize : common_js_3.DEFAULT_TILE_SIZE);
        const maxResolution = opt_maxResolution > 0
            ? opt_maxResolution
            : Math.max(width / tileSize[0], height / tileSize[1]);
        const length = maxZoom + 1;
        const resolutions = new Array(length);
        for (let z = 0; z < length; ++z) {
            resolutions[z] = maxResolution / Math.pow(2, z);
        }
        return resolutions;
    }
    /**
     * @param {import("./proj.js").ProjectionLike} projection Projection.
     * @param {number=} opt_maxZoom Maximum zoom level (default is
     *     DEFAULT_MAX_ZOOM).
     * @param {number|import("./size.js").Size=} opt_tileSize Tile size (default uses
     *     DEFAULT_TILE_SIZE).
     * @param {import("./extent/Corner.js").default=} opt_corner Extent corner (default is `'top-left'`).
     * @return {!TileGrid} TileGrid instance.
     */
    function createForProjection(projection, opt_maxZoom, opt_tileSize, opt_corner) {
        const extent = extentFromProjection(projection);
        return createForExtent(extent, opt_maxZoom, opt_tileSize, opt_corner);
    }
    exports.createForProjection = createForProjection;
    /**
     * Generate a tile grid extent from a projection.  If the projection has an
     * extent, it is used.  If not, a global extent is assumed.
     * @param {import("./proj.js").ProjectionLike} projection Projection.
     * @return {import("./extent.js").Extent} Extent.
     */
    function extentFromProjection(projection) {
        projection = proj_js_7.get(projection);
        let extent = projection.getExtent();
        if (!extent) {
            const half = (180 * proj_js_7.METERS_PER_UNIT[Units_js_7.default.DEGREES]) / projection.getMetersPerUnit();
            extent = extent_js_28.createOrUpdate(-half, -half, half, half);
        }
        return extent;
    }
    exports.extentFromProjection = extentFromProjection;
});
define("node_modules/ol/src/source/Tile", ["require", "exports", "node_modules/ol/src/events/Event", "node_modules/ol/src/source/Source", "node_modules/ol/src/TileCache", "node_modules/ol/src/TileState", "node_modules/ol/src/util", "node_modules/ol/src/proj", "node_modules/ol/src/tilecoord", "node_modules/ol/src/tilegrid", "node_modules/ol/src/size"], function (require, exports, Event_js_6, Source_js_1, TileCache_js_1, TileState_js_3, util_js_13, proj_js_8, tilecoord_js_3, tilegrid_js_1, size_js_6) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TileSourceEvent = void 0;
    /**
     * @typedef {Object} Options
     * @property {import("./Source.js").AttributionLike} [attributions]
     * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
     * @property {number} [cacheSize]
     * @property {boolean} [opaque=false] Whether the layer is opaque.
     * @property {number} [tilePixelRatio]
     * @property {import("../proj.js").ProjectionLike} [projection]
     * @property {import("./State.js").default} [state]
     * @property {import("../tilegrid/TileGrid.js").default} [tileGrid]
     * @property {boolean} [wrapX=true]
     * @property {number} [transition]
     * @property {string} [key]
     * @property {number} [zDirection=0]
     */
    /**
     * @classdesc
     * Abstract base class; normally only used for creating subclasses and not
     * instantiated in apps.
     * Base class for sources providing images divided into a tile grid.
     * @abstract
     * @api
     */
    class TileSource extends Source_js_1.default {
        /**
         * @param {Options} options SourceTile source options.
         */
        constructor(options) {
            super({
                attributions: options.attributions,
                attributionsCollapsible: options.attributionsCollapsible,
                projection: options.projection,
                state: options.state,
                wrapX: options.wrapX,
            });
            /**
             * @private
             * @type {boolean}
             */
            this.opaque_ = options.opaque !== undefined ? options.opaque : false;
            /**
             * @private
             * @type {number}
             */
            this.tilePixelRatio_ =
                options.tilePixelRatio !== undefined ? options.tilePixelRatio : 1;
            /**
             * @protected
             * @type {import("../tilegrid/TileGrid.js").default}
             */
            this.tileGrid = options.tileGrid !== undefined ? options.tileGrid : null;
            const tileSize = [256, 256];
            const tileGrid = options.tileGrid;
            if (tileGrid) {
                size_js_6.toSize(tileGrid.getTileSize(tileGrid.getMinZoom()), tileSize);
            }
            /**
             * @protected
             * @type {import("../TileCache.js").default}
             */
            this.tileCache = new TileCache_js_1.default(options.cacheSize || 0);
            /**
             * @protected
             * @type {import("../size.js").Size}
             */
            this.tmpSize = [0, 0];
            /**
             * @private
             * @type {string}
             */
            this.key_ = options.key || '';
            /**
             * @protected
             * @type {import("../Tile.js").Options}
             */
            this.tileOptions = { transition: options.transition };
            /**
             * zDirection hint, read by the renderer. Indicates which resolution should be used
             * by a renderer if the views resolution does not match any resolution of the tile source.
             * If 0, the nearest resolution will be used. If 1, the nearest lower resolution
             * will be used. If -1, the nearest higher resolution will be used.
             * @type {number}
             */
            this.zDirection = options.zDirection ? options.zDirection : 0;
        }
        /**
         * @return {boolean} Can expire cache.
         */
        canExpireCache() {
            return this.tileCache.canExpireCache();
        }
        /**
         * @param {import("../proj/Projection.js").default} projection Projection.
         * @param {!Object<string, boolean>} usedTiles Used tiles.
         */
        expireCache(projection, usedTiles) {
            const tileCache = this.getTileCacheForProjection(projection);
            if (tileCache) {
                tileCache.expireCache(usedTiles);
            }
        }
        /**
         * @param {import("../proj/Projection.js").default} projection Projection.
         * @param {number} z Zoom level.
         * @param {import("../TileRange.js").default} tileRange Tile range.
         * @param {function(import("../Tile.js").default):(boolean|void)} callback Called with each
         *     loaded tile.  If the callback returns `false`, the tile will not be
         *     considered loaded.
         * @return {boolean} The tile range is fully covered with loaded tiles.
         */
        forEachLoadedTile(projection, z, tileRange, callback) {
            const tileCache = this.getTileCacheForProjection(projection);
            if (!tileCache) {
                return false;
            }
            let covered = true;
            let tile, tileCoordKey, loaded;
            for (let x = tileRange.minX; x <= tileRange.maxX; ++x) {
                for (let y = tileRange.minY; y <= tileRange.maxY; ++y) {
                    tileCoordKey = tilecoord_js_3.getKeyZXY(z, x, y);
                    loaded = false;
                    if (tileCache.containsKey(tileCoordKey)) {
                        tile = /** @type {!import("../Tile.js").default} */ (tileCache.get(tileCoordKey));
                        loaded = tile.getState() === TileState_js_3.default.LOADED;
                        if (loaded) {
                            loaded = callback(tile) !== false;
                        }
                    }
                    if (!loaded) {
                        covered = false;
                    }
                }
            }
            return covered;
        }
        /**
         * @param {import("../proj/Projection.js").default} projection Projection.
         * @return {number} Gutter.
         */
        getGutterForProjection(projection) {
            return 0;
        }
        /**
         * Return the key to be used for all tiles in the source.
         * @return {string} The key for all tiles.
         * @protected
         */
        getKey() {
            return this.key_;
        }
        /**
         * Set the value to be used as the key for all tiles in the source.
         * @param {string} key The key for tiles.
         * @protected
         */
        setKey(key) {
            if (this.key_ !== key) {
                this.key_ = key;
                this.changed();
            }
        }
        /**
         * @param {import("../proj/Projection.js").default} projection Projection.
         * @return {boolean} Opaque.
         */
        getOpaque(projection) {
            return this.opaque_;
        }
        /**
         * @return {Array<number>} Resolutions.
         */
        getResolutions() {
            return this.tileGrid.getResolutions();
        }
        /**
         * @abstract
         * @param {number} z Tile coordinate z.
         * @param {number} x Tile coordinate x.
         * @param {number} y Tile coordinate y.
         * @param {number} pixelRatio Pixel ratio.
         * @param {import("../proj/Projection.js").default} projection Projection.
         * @return {!import("../Tile.js").default} Tile.
         */
        getTile(z, x, y, pixelRatio, projection) {
            return util_js_13.abstract();
        }
        /**
         * Return the tile grid of the tile source.
         * @return {import("../tilegrid/TileGrid.js").default} Tile grid.
         * @api
         */
        getTileGrid() {
            return this.tileGrid;
        }
        /**
         * @param {import("../proj/Projection.js").default} projection Projection.
         * @return {!import("../tilegrid/TileGrid.js").default} Tile grid.
         */
        getTileGridForProjection(projection) {
            if (!this.tileGrid) {
                return tilegrid_js_1.getForProjection(projection);
            }
            else {
                return this.tileGrid;
            }
        }
        /**
         * @param {import("../proj/Projection.js").default} projection Projection.
         * @return {import("../TileCache.js").default} Tile cache.
         * @protected
         */
        getTileCacheForProjection(projection) {
            const thisProj = this.getProjection();
            if (thisProj && !proj_js_8.equivalent(thisProj, projection)) {
                return null;
            }
            else {
                return this.tileCache;
            }
        }
        /**
         * Get the tile pixel ratio for this source. Subclasses may override this
         * method, which is meant to return a supported pixel ratio that matches the
         * provided `pixelRatio` as close as possible.
         * @param {number} pixelRatio Pixel ratio.
         * @return {number} Tile pixel ratio.
         */
        getTilePixelRatio(pixelRatio) {
            return this.tilePixelRatio_;
        }
        /**
         * @param {number} z Z.
         * @param {number} pixelRatio Pixel ratio.
         * @param {import("../proj/Projection.js").default} projection Projection.
         * @return {import("../size.js").Size} Tile size.
         */
        getTilePixelSize(z, pixelRatio, projection) {
            const tileGrid = this.getTileGridForProjection(projection);
            const tilePixelRatio = this.getTilePixelRatio(pixelRatio);
            const tileSize = size_js_6.toSize(tileGrid.getTileSize(z), this.tmpSize);
            if (tilePixelRatio == 1) {
                return tileSize;
            }
            else {
                return size_js_6.scale(tileSize, tilePixelRatio, this.tmpSize);
            }
        }
        /**
         * Returns a tile coordinate wrapped around the x-axis. When the tile coordinate
         * is outside the resolution and extent range of the tile grid, `null` will be
         * returned.
         * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
         * @param {import("../proj/Projection.js").default=} opt_projection Projection.
         * @return {import("../tilecoord.js").TileCoord} Tile coordinate to be passed to the tileUrlFunction or
         *     null if no tile URL should be created for the passed `tileCoord`.
         */
        getTileCoordForTileUrlFunction(tileCoord, opt_projection) {
            const projection = opt_projection !== undefined ? opt_projection : this.getProjection();
            const tileGrid = this.getTileGridForProjection(projection);
            if (this.getWrapX() && projection.isGlobal()) {
                tileCoord = tilegrid_js_1.wrapX(tileGrid, tileCoord, projection);
            }
            return tilecoord_js_3.withinExtentAndZ(tileCoord, tileGrid) ? tileCoord : null;
        }
        /**
         * Remove all cached tiles from the source. The next render cycle will fetch new tiles.
         * @api
         */
        clear() {
            this.tileCache.clear();
        }
        refresh() {
            this.clear();
            super.refresh();
        }
        /**
         * Increases the cache size if needed
         * @param {number} tileCount Minimum number of tiles needed.
         * @param {import("../proj/Projection.js").default} projection Projection.
         */
        updateCacheSize(tileCount, projection) {
            const tileCache = this.getTileCacheForProjection(projection);
            if (tileCount > tileCache.highWaterMark) {
                tileCache.highWaterMark = tileCount;
            }
        }
        /**
         * Marks a tile coord as being used, without triggering a load.
         * @abstract
         * @param {number} z Tile coordinate z.
         * @param {number} x Tile coordinate x.
         * @param {number} y Tile coordinate y.
         * @param {import("../proj/Projection.js").default} projection Projection.
         */
        useTile(z, x, y, projection) { }
    }
    /**
     * @classdesc
     * Events emitted by {@link module:ol/source/Tile~TileSource} instances are instances of this
     * type.
     */
    class TileSourceEvent extends Event_js_6.default {
        /**
         * @param {string} type Type.
         * @param {import("../Tile.js").default} tile The tile.
         */
        constructor(type, tile) {
            super(type);
            /**
             * The tile related to the event.
             * @type {import("../Tile.js").default}
             * @api
             */
            this.tile = tile;
        }
    }
    exports.TileSourceEvent = TileSourceEvent;
    exports.default = TileSource;
});
define("node_modules/ol/src/renderer/Layer", ["require", "exports", "node_modules/ol/src/events/EventType", "node_modules/ol/src/ImageState", "node_modules/ol/src/Observable", "node_modules/ol/src/source/State", "node_modules/ol/src/util"], function (require, exports, EventType_js_16, ImageState_js_5, Observable_js_2, State_js_3, util_js_14) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @template {import("../layer/Layer.js").default} LayerType
     */
    class LayerRenderer extends Observable_js_2.default {
        /**
         * @param {LayerType} layer Layer.
         */
        constructor(layer) {
            super();
            /** @private */
            this.boundHandleImageChange_ = this.handleImageChange_.bind(this);
            /**
             * @protected
             * @type {LayerType}
             */
            this.layer_ = layer;
        }
        /**
         * Asynchronous layer level hit detection.
         * @param {import("../pixel.js").Pixel} pixel Pixel.
         * @return {Promise<Array<import("../Feature").default>>} Promise that resolves with
         * an array of features.
         */
        getFeatures(pixel) {
            return util_js_14.abstract();
        }
        /**
         * Determine whether render should be called.
         * @abstract
         * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
         * @return {boolean} Layer is ready to be rendered.
         */
        prepareFrame(frameState) {
            return util_js_14.abstract();
        }
        /**
         * Render the layer.
         * @abstract
         * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
         * @param {HTMLElement} target Target that may be used to render content to.
         * @return {HTMLElement} The rendered element.
         */
        renderFrame(frameState, target) {
            return util_js_14.abstract();
        }
        /**
         * @param {Object<number, Object<string, import("../Tile.js").default>>} tiles Lookup of loaded tiles by zoom level.
         * @param {number} zoom Zoom level.
         * @param {import("../Tile.js").default} tile Tile.
         * @return {boolean|void} If `false`, the tile will not be considered loaded.
         */
        loadedTileCallback(tiles, zoom, tile) {
            if (!tiles[zoom]) {
                tiles[zoom] = {};
            }
            tiles[zoom][tile.tileCoord.toString()] = tile;
            return undefined;
        }
        /**
         * Create a function that adds loaded tiles to the tile lookup.
         * @param {import("../source/Tile.js").default} source Tile source.
         * @param {import("../proj/Projection.js").default} projection Projection of the tiles.
         * @param {Object<number, Object<string, import("../Tile.js").default>>} tiles Lookup of loaded tiles by zoom level.
         * @return {function(number, import("../TileRange.js").default):boolean} A function that can be
         *     called with a zoom level and a tile range to add loaded tiles to the lookup.
         * @protected
         */
        createLoadedTileFinder(source, projection, tiles) {
            return (
            /**
             * @param {number} zoom Zoom level.
             * @param {import("../TileRange.js").default} tileRange Tile range.
             * @return {boolean} The tile range is fully loaded.
             * @this {LayerRenderer}
             */
            function (zoom, tileRange) {
                const callback = this.loadedTileCallback.bind(this, tiles, zoom);
                return source.forEachLoadedTile(projection, zoom, tileRange, callback);
            }.bind(this));
        }
        /**
         * @abstract
         * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
         * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
         * @param {number} hitTolerance Hit tolerance in pixels.
         * @param {function(import("../Feature.js").FeatureLike, import("../layer/Layer.js").default): T} callback Feature callback.
         * @param {Array<import("../Feature.js").FeatureLike>} declutteredFeatures Decluttered features.
         * @return {T|void} Callback result.
         * @template T
         */
        forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, callback, declutteredFeatures) { }
        /**
         * @abstract
         * @param {import("../pixel.js").Pixel} pixel Pixel.
         * @param {import("../PluggableMap.js").FrameState} frameState FrameState.
         * @param {number} hitTolerance Hit tolerance in pixels.
         * @return {Uint8ClampedArray|Uint8Array} The result.  If there is no data at the pixel
         *    location, null will be returned.  If there is data, but pixel values cannot be
         *    returned, and empty array will be returned.
         */
        getDataAtPixel(pixel, frameState, hitTolerance) {
            return util_js_14.abstract();
        }
        /**
         * @return {LayerType} Layer.
         */
        getLayer() {
            return this.layer_;
        }
        /**
         * Perform action necessary to get the layer rendered after new fonts have loaded
         * @abstract
         */
        handleFontsChanged() { }
        /**
         * Handle changes in image state.
         * @param {import("../events/Event.js").default} event Image change event.
         * @private
         */
        handleImageChange_(event) {
            const image = /** @type {import("../Image.js").default} */ (event.target);
            if (image.getState() === ImageState_js_5.default.LOADED) {
                this.renderIfReadyAndVisible();
            }
        }
        /**
         * Load the image if not already loaded, and register the image change
         * listener if needed.
         * @param {import("../ImageBase.js").default} image Image.
         * @return {boolean} `true` if the image is already loaded, `false` otherwise.
         * @protected
         */
        loadImage(image) {
            let imageState = image.getState();
            if (imageState != ImageState_js_5.default.LOADED && imageState != ImageState_js_5.default.ERROR) {
                image.addEventListener(EventType_js_16.default.CHANGE, this.boundHandleImageChange_);
            }
            if (imageState == ImageState_js_5.default.IDLE) {
                image.load();
                imageState = image.getState();
            }
            return imageState == ImageState_js_5.default.LOADED;
        }
        /**
         * @protected
         */
        renderIfReadyAndVisible() {
            const layer = this.getLayer();
            if (layer.getVisible() && layer.getSourceState() == State_js_3.default.READY) {
                layer.changed();
            }
        }
    }
    exports.default = LayerRenderer;
});
define("node_modules/ol/src/layer/Layer", ["require", "exports", "node_modules/ol/src/layer/Base", "node_modules/ol/src/events/EventType", "node_modules/ol/src/layer/Property", "node_modules/ol/src/render/EventType", "node_modules/ol/src/source/State", "node_modules/ol/src/asserts", "node_modules/ol/src/obj", "node_modules/ol/src/Object", "node_modules/ol/src/events"], function (require, exports, Base_js_2, EventType_js_17, Property_js_3, EventType_js_18, State_js_4, asserts_js_13, obj_js_10, Object_js_13, events_js_10) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.inView = void 0;
    /**
     * @typedef {function(import("../PluggableMap.js").FrameState):HTMLElement} RenderFunction
     */
    /**
     * @typedef {Object} Options
     * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.
     * @property {number} [opacity=1] Opacity (0, 1).
     * @property {boolean} [visible=true] Visibility.
     * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
     * rendered outside of this extent.
     * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
     * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
     * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
     * method was used.
     * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
     * visible.
     * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
     * be visible.
     * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be
     * visible.
     * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will
     * be visible.
     * @property {import("../source/Source.js").default} [source] Source for this layer.  If not provided to the constructor,
     * the source can be set by calling {@link module:ol/layer/Layer#setSource layer.setSource(source)} after
     * construction.
     * @property {import("../PluggableMap.js").default} [map] Map.
     * @property {RenderFunction} [render] Render function. Takes the frame state as input and is expected to return an
     * HTML element. Will overwrite the default rendering for the layer.
     */
    /**
     * @typedef {Object} State
     * @property {import("./Layer.js").default} layer
     * @property {number} opacity Opacity, the value is rounded to two digits to appear after the decimal point.
     * @property {import("../source/State.js").default} sourceState
     * @property {boolean} visible
     * @property {boolean} managed
     * @property {import("../extent.js").Extent} [extent]
     * @property {number} zIndex
     * @property {number} maxResolution
     * @property {number} minResolution
     * @property {number} minZoom
     * @property {number} maxZoom
     */
    /**
     * @classdesc
     * Base class from which all layer types are derived. This should only be instantiated
     * in the case where a custom layer is be added to the map with a custom `render` function.
     * Such a function can be specified in the `options` object, and is expected to return an HTML element.
     *
     * A visual representation of raster or vector map data.
     * Layers group together those properties that pertain to how the data is to be
     * displayed, irrespective of the source of that data.
     *
     * Layers are usually added to a map with {@link module:ol/Map#addLayer}. Components
     * like {@link module:ol/interaction/Select~Select} use unmanaged layers
     * internally. These unmanaged layers are associated with the map using
     * {@link module:ol/layer/Layer~Layer#setMap} instead.
     *
     * A generic `change` event is fired when the state of the source changes.
     *
     * Please note that for performance reasons several layers might get rendered to
     * the same HTML element, which will cause {@link module:ol/Map~Map#forEachLayerAtPixel} to
     * give false positives. To avoid this, apply different `className` properties to the
     * layers at creation time.
     *
     * @fires import("../render/Event.js").RenderEvent#prerender
     * @fires import("../render/Event.js").RenderEvent#postrender
     *
     * @template {import("../source/Source.js").default} SourceType
     * @api
     */
    class Layer extends Base_js_2.default {
        /**
         * @param {Options} options Layer options.
         */
        constructor(options) {
            const baseOptions = obj_js_10.assign({}, options);
            delete baseOptions.source;
            super(baseOptions);
            /**
             * @private
             * @type {?import("../events.js").EventsKey}
             */
            this.mapPrecomposeKey_ = null;
            /**
             * @private
             * @type {?import("../events.js").EventsKey}
             */
            this.mapRenderKey_ = null;
            /**
             * @private
             * @type {?import("../events.js").EventsKey}
             */
            this.sourceChangeKey_ = null;
            /**
             * @private
             * @type {import("../renderer/Layer.js").default}
             */
            this.renderer_ = null;
            // Overwrite default render method with a custom one
            if (options.render) {
                this.render = options.render;
            }
            if (options.map) {
                this.setMap(options.map);
            }
            this.addEventListener(Object_js_13.getChangeEventType(Property_js_3.default.SOURCE), this.handleSourcePropertyChange_);
            const source = options.source
                ? /** @type {SourceType} */ (options.source)
                : null;
            this.setSource(source);
        }
        /**
         * @param {Array<import("./Layer.js").default>=} opt_array Array of layers (to be modified in place).
         * @return {Array<import("./Layer.js").default>} Array of layers.
         */
        getLayersArray(opt_array) {
            const array = opt_array ? opt_array : [];
            array.push(this);
            return array;
        }
        /**
         * @param {Array<import("./Layer.js").State>=} opt_states Optional list of layer states (to be modified in place).
         * @return {Array<import("./Layer.js").State>} List of layer states.
         */
        getLayerStatesArray(opt_states) {
            const states = opt_states ? opt_states : [];
            states.push(this.getLayerState());
            return states;
        }
        /**
         * Get the layer source.
         * @return {SourceType} The layer source (or `null` if not yet set).
         * @observable
         * @api
         */
        getSource() {
            return /** @type {SourceType} */ (this.get(Property_js_3.default.SOURCE)) || null;
        }
        /**
         * @return {import("../source/State.js").default} Source state.
         */
        getSourceState() {
            const source = this.getSource();
            return !source ? State_js_4.default.UNDEFINED : source.getState();
        }
        /**
         * @private
         */
        handleSourceChange_() {
            this.changed();
        }
        /**
         * @private
         */
        handleSourcePropertyChange_() {
            if (this.sourceChangeKey_) {
                events_js_10.unlistenByKey(this.sourceChangeKey_);
                this.sourceChangeKey_ = null;
            }
            const source = this.getSource();
            if (source) {
                this.sourceChangeKey_ = events_js_10.listen(source, EventType_js_17.default.CHANGE, this.handleSourceChange_, this);
            }
            this.changed();
        }
        /**
         * @param {import("../pixel").Pixel} pixel Pixel.
         * @return {Promise<Array<import("../Feature").default>>} Promise that resolves with
         * an array of features.
         */
        getFeatures(pixel) {
            return this.renderer_.getFeatures(pixel);
        }
        /**
         * In charge to manage the rendering of the layer. One layer type is
         * bounded with one layer renderer.
         * @param {?import("../PluggableMap.js").FrameState} frameState Frame state.
         * @param {HTMLElement} target Target which the renderer may (but need not) use
         * for rendering its content.
         * @return {HTMLElement} The rendered element.
         */
        render(frameState, target) {
            const layerRenderer = this.getRenderer();
            if (layerRenderer.prepareFrame(frameState)) {
                return layerRenderer.renderFrame(frameState, target);
            }
        }
        /**
         * Sets the layer to be rendered on top of other layers on a map. The map will
         * not manage this layer in its layers collection, and the callback in
         * {@link module:ol/Map#forEachLayerAtPixel} will receive `null` as layer. This
         * is useful for temporary layers. To remove an unmanaged layer from the map,
         * use `#setMap(null)`.
         *
         * To add the layer to a map and have it managed by the map, use
         * {@link module:ol/Map#addLayer} instead.
         * @param {import("../PluggableMap.js").default} map Map.
         * @api
         */
        setMap(map) {
            if (this.mapPrecomposeKey_) {
                events_js_10.unlistenByKey(this.mapPrecomposeKey_);
                this.mapPrecomposeKey_ = null;
            }
            if (!map) {
                this.changed();
            }
            if (this.mapRenderKey_) {
                events_js_10.unlistenByKey(this.mapRenderKey_);
                this.mapRenderKey_ = null;
            }
            if (map) {
                this.mapPrecomposeKey_ = events_js_10.listen(map, EventType_js_18.default.PRECOMPOSE, function (evt) {
                    const renderEvent = /** @type {import("../render/Event.js").default} */ (evt);
                    const layerStatesArray = renderEvent.frameState.layerStatesArray;
                    const layerState = this.getLayerState(false);
                    // A layer can only be added to the map once. Use either `layer.setMap()` or `map.addLayer()`, not both.
                    asserts_js_13.assert(!layerStatesArray.some(function (arrayLayerState) {
                        return arrayLayerState.layer === layerState.layer;
                    }), 67);
                    layerStatesArray.push(layerState);
                }, this);
                this.mapRenderKey_ = events_js_10.listen(this, EventType_js_17.default.CHANGE, map.render, map);
                this.changed();
            }
        }
        /**
         * Set the layer source.
         * @param {SourceType} source The layer source.
         * @observable
         * @api
         */
        setSource(source) {
            this.set(Property_js_3.default.SOURCE, source);
        }
        /**
         * Get the renderer for this layer.
         * @return {import("../renderer/Layer.js").default} The layer renderer.
         */
        getRenderer() {
            if (!this.renderer_) {
                this.renderer_ = this.createRenderer();
            }
            return this.renderer_;
        }
        /**
         * @return {boolean} The layer has a renderer.
         */
        hasRenderer() {
            return !!this.renderer_;
        }
        /**
         * Create a renderer for this layer.
         * @return {import("../renderer/Layer.js").default} A layer renderer.
         * @protected
         */
        createRenderer() {
            return null;
        }
        /**
         * Clean up.
         */
        disposeInternal() {
            this.setSource(null);
            super.disposeInternal();
        }
    }
    /**
     * Return `true` if the layer is visible and if the provided view state
     * has resolution and zoom levels that are in range of the layer's min/max.
     * @param {State} layerState Layer state.
     * @param {import("../View.js").State} viewState View state.
     * @return {boolean} The layer is visible at the given view state.
     */
    function inView(layerState, viewState) {
        if (!layerState.visible) {
            return false;
        }
        const resolution = viewState.resolution;
        if (resolution < layerState.minResolution ||
            resolution >= layerState.maxResolution) {
            return false;
        }
        const zoom = viewState.zoom;
        return zoom > layerState.minZoom && zoom <= layerState.maxZoom;
    }
    exports.inView = inView;
    exports.default = Layer;
});
define("node_modules/ol/src/renderer/Map", ["require", "exports", "node_modules/ol/src/Disposable", "node_modules/ol/src/functions", "node_modules/ol/src/util", "node_modules/ol/src/transform", "node_modules/ol/src/extent", "node_modules/ol/src/style/IconImageCache", "node_modules/ol/src/layer/Layer", "node_modules/ol/src/render", "node_modules/ol/src/coordinate"], function (require, exports, Disposable_js_2, functions_js_6, util_js_15, transform_js_12, extent_js_29, IconImageCache_js_2, Layer_js_1, render_js_1, coordinate_js_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @abstract
     */
    class MapRenderer extends Disposable_js_2.default {
        /**
         * @param {import("../PluggableMap.js").default} map Map.
         */
        constructor(map) {
            super();
            /**
             * @private
             * @type {import("../PluggableMap.js").default}
             */
            this.map_ = map;
            /**
             * @private
             */
            this.declutterTree_ = null;
        }
        /**
         * @abstract
         * @param {import("../render/EventType.js").default} type Event type.
         * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
         */
        dispatchRenderEvent(type, frameState) {
            util_js_15.abstract();
        }
        /**
         * @param {import("../PluggableMap.js").FrameState} frameState FrameState.
         * @protected
         */
        calculateMatrices2D(frameState) {
            const viewState = frameState.viewState;
            const coordinateToPixelTransform = frameState.coordinateToPixelTransform;
            const pixelToCoordinateTransform = frameState.pixelToCoordinateTransform;
            transform_js_12.compose(coordinateToPixelTransform, frameState.size[0] / 2, frameState.size[1] / 2, 1 / viewState.resolution, -1 / viewState.resolution, -viewState.rotation, -viewState.center[0], -viewState.center[1]);
            transform_js_12.makeInverse(pixelToCoordinateTransform, coordinateToPixelTransform);
        }
        /**
         * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
         * @param {import("../PluggableMap.js").FrameState} frameState FrameState.
         * @param {number} hitTolerance Hit tolerance in pixels.
         * @param {boolean} checkWrapped Check for wrapped geometries.
         * @param {function(this: S, import("../Feature.js").FeatureLike,
         *     import("../layer/Layer.js").default): T} callback Feature callback.
         * @param {S} thisArg Value to use as `this` when executing `callback`.
         * @param {function(this: U, import("../layer/Layer.js").default): boolean} layerFilter Layer filter
         *     function, only layers which are visible and for which this function
         *     returns `true` will be tested for features.  By default, all visible
         *     layers will be tested.
         * @param {U} thisArg2 Value to use as `this` when executing `layerFilter`.
         * @return {T|undefined} Callback result.
         * @template S,T,U
         */
        forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, checkWrapped, callback, thisArg, layerFilter, thisArg2) {
            let result;
            const viewState = frameState.viewState;
            /**
             * @param {boolean} managed Managed layer.
             * @param {import("../Feature.js").FeatureLike} feature Feature.
             * @param {import("../layer/Layer.js").default} layer Layer.
             * @return {?} Callback result.
             */
            function forEachFeatureAtCoordinate(managed, feature, layer) {
                return callback.call(thisArg, feature, managed ? layer : null);
            }
            const projection = viewState.projection;
            const translatedCoordinate = coordinate_js_4.wrapX(coordinate.slice(), projection);
            const offsets = [[0, 0]];
            if (projection.canWrapX() && checkWrapped) {
                const projectionExtent = projection.getExtent();
                const worldWidth = extent_js_29.getWidth(projectionExtent);
                offsets.push([-worldWidth, 0], [worldWidth, 0]);
            }
            const layerStates = frameState.layerStatesArray;
            const numLayers = layerStates.length;
            let declutteredFeatures;
            if (this.declutterTree_) {
                declutteredFeatures = this.declutterTree_.all().map(function (entry) {
                    return entry.value;
                });
            }
            const tmpCoord = [];
            for (let i = 0; i < offsets.length; i++) {
                for (let j = numLayers - 1; j >= 0; --j) {
                    const layerState = layerStates[j];
                    const layer = /** @type {import("../layer/Layer.js").default} */ (layerState.layer);
                    if (layer.hasRenderer() &&
                        Layer_js_1.inView(layerState, viewState) &&
                        layerFilter.call(thisArg2, layer)) {
                        const layerRenderer = layer.getRenderer();
                        const source = layer.getSource();
                        if (layerRenderer && source) {
                            const coordinates = source.getWrapX()
                                ? translatedCoordinate
                                : coordinate;
                            const callback = forEachFeatureAtCoordinate.bind(null, layerState.managed);
                            tmpCoord[0] = coordinates[0] + offsets[i][0];
                            tmpCoord[1] = coordinates[1] + offsets[i][1];
                            result = layerRenderer.forEachFeatureAtCoordinate(tmpCoord, frameState, hitTolerance, callback, declutteredFeatures);
                        }
                        if (result) {
                            return result;
                        }
                    }
                }
            }
            return undefined;
        }
        /**
         * @abstract
         * @param {import("../pixel.js").Pixel} pixel Pixel.
         * @param {import("../PluggableMap.js").FrameState} frameState FrameState.
         * @param {number} hitTolerance Hit tolerance in pixels.
         * @param {function(import("../layer/Layer.js").default, (Uint8ClampedArray|Uint8Array)): T} callback Layer
         *     callback.
         * @param {function(import("../layer/Layer.js").default): boolean} layerFilter Layer filter
         *     function, only layers which are visible and for which this function
         *     returns `true` will be tested for features.  By default, all visible
         *     layers will be tested.
         * @return {T|undefined} Callback result.
         * @template T
         */
        forEachLayerAtPixel(pixel, frameState, hitTolerance, callback, layerFilter) {
            return util_js_15.abstract();
        }
        /**
         * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
         * @param {import("../PluggableMap.js").FrameState} frameState FrameState.
         * @param {number} hitTolerance Hit tolerance in pixels.
         * @param {boolean} checkWrapped Check for wrapped geometries.
         * @param {function(this: U, import("../layer/Layer.js").default): boolean} layerFilter Layer filter
         *     function, only layers which are visible and for which this function
         *     returns `true` will be tested for features.  By default, all visible
         *     layers will be tested.
         * @param {U} thisArg Value to use as `this` when executing `layerFilter`.
         * @return {boolean} Is there a feature at the given coordinate?
         * @template U
         */
        hasFeatureAtCoordinate(coordinate, frameState, hitTolerance, checkWrapped, layerFilter, thisArg) {
            const hasFeature = this.forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, checkWrapped, functions_js_6.TRUE, this, layerFilter, thisArg);
            return hasFeature !== undefined;
        }
        /**
         * @return {import("../PluggableMap.js").default} Map.
         */
        getMap() {
            return this.map_;
        }
        /**
         * Render.
         * @param {?import("../PluggableMap.js").FrameState} frameState Frame state.
         */
        renderFrame(frameState) {
            this.declutterTree_ = render_js_1.renderDeclutterItems(frameState, this.declutterTree_);
        }
        /**
         * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
         * @protected
         */
        scheduleExpireIconCache(frameState) {
            if (IconImageCache_js_2.shared.canExpireCache()) {
                frameState.postRenderFunctions.push(expireIconCache);
            }
        }
    }
    /**
     * @param {import("../PluggableMap.js").default} map Map.
     * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
     */
    function expireIconCache(map, frameState) {
        IconImageCache_js_2.shared.expire();
    }
    exports.default = MapRenderer;
});
define("node_modules/ol/src/renderer/Composite", ["require", "exports", "node_modules/ol/src/renderer/Map", "node_modules/ol/src/ObjectEventType", "node_modules/ol/src/render/Event", "node_modules/ol/src/render/EventType", "node_modules/ol/src/source/State", "node_modules/ol/src/css", "node_modules/ol/src/render/canvas", "node_modules/ol/src/layer/Layer", "node_modules/ol/src/events", "node_modules/ol/src/dom"], function (require, exports, Map_js_1, ObjectEventType_js_4, Event_js_7, EventType_js_19, State_js_5, css_js_3, canvas_js_6, Layer_js_2, events_js_11, dom_js_7) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @classdesc
     * Canvas map renderer.
     * @api
     */
    class CompositeMapRenderer extends Map_js_1.default {
        /**
         * @param {import("../PluggableMap.js").default} map Map.
         */
        constructor(map) {
            super(map);
            /**
             * @type {import("../events.js").EventsKey}
             */
            this.fontChangeListenerKey_ = events_js_11.listen(canvas_js_6.checkedFonts, ObjectEventType_js_4.default.PROPERTYCHANGE, map.redrawText.bind(map));
            /**
             * @private
             * @type {HTMLDivElement}
             */
            this.element_ = document.createElement('div');
            const style = this.element_.style;
            style.position = 'absolute';
            style.width = '100%';
            style.height = '100%';
            style.zIndex = '0';
            this.element_.className = css_js_3.CLASS_UNSELECTABLE + ' ol-layers';
            const container = map.getViewport();
            container.insertBefore(this.element_, container.firstChild || null);
            /**
             * @private
             * @type {Array<HTMLElement>}
             */
            this.children_ = [];
            /**
             * @private
             * @type {boolean}
             */
            this.renderedVisible_ = true;
        }
        /**
         * @param {import("../render/EventType.js").default} type Event type.
         * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
         */
        dispatchRenderEvent(type, frameState) {
            const map = this.getMap();
            if (map.hasListener(type)) {
                const event = new Event_js_7.default(type, undefined, frameState);
                map.dispatchEvent(event);
            }
        }
        disposeInternal() {
            events_js_11.unlistenByKey(this.fontChangeListenerKey_);
            this.element_.parentNode.removeChild(this.element_);
            super.disposeInternal();
        }
        /**
         * Render.
         * @param {?import("../PluggableMap.js").FrameState} frameState Frame state.
         */
        renderFrame(frameState) {
            if (!frameState) {
                if (this.renderedVisible_) {
                    this.element_.style.display = 'none';
                    this.renderedVisible_ = false;
                }
                return;
            }
            this.calculateMatrices2D(frameState);
            this.dispatchRenderEvent(EventType_js_19.default.PRECOMPOSE, frameState);
            const layerStatesArray = frameState.layerStatesArray.sort(function (a, b) {
                return a.zIndex - b.zIndex;
            });
            const viewState = frameState.viewState;
            this.children_.length = 0;
            let previousElement = null;
            for (let i = 0, ii = layerStatesArray.length; i < ii; ++i) {
                const layerState = layerStatesArray[i];
                frameState.layerIndex = i;
                if (!Layer_js_2.inView(layerState, viewState) ||
                    (layerState.sourceState != State_js_5.default.READY &&
                        layerState.sourceState != State_js_5.default.UNDEFINED)) {
                    continue;
                }
                const layer = layerState.layer;
                const element = layer.render(frameState, previousElement);
                if (!element) {
                    continue;
                }
                if (element !== previousElement) {
                    this.children_.push(element);
                    previousElement = element;
                }
            }
            super.renderFrame(frameState);
            dom_js_7.replaceChildren(this.element_, this.children_);
            this.dispatchRenderEvent(EventType_js_19.default.POSTCOMPOSE, frameState);
            if (!this.renderedVisible_) {
                this.element_.style.display = '';
                this.renderedVisible_ = true;
            }
            this.scheduleExpireIconCache(frameState);
        }
        /**
         * @param {import("../pixel.js").Pixel} pixel Pixel.
         * @param {import("../PluggableMap.js").FrameState} frameState FrameState.
         * @param {number} hitTolerance Hit tolerance in pixels.
         * @param {function(import("../layer/Layer.js").default, (Uint8ClampedArray|Uint8Array)): T} callback Layer
         *     callback.
         * @param {function(import("../layer/Layer.js").default): boolean} layerFilter Layer filter
         *     function, only layers which are visible and for which this function
         *     returns `true` will be tested for features.  By default, all visible
         *     layers will be tested.
         * @return {T|undefined} Callback result.
         * @template T
         */
        forEachLayerAtPixel(pixel, frameState, hitTolerance, callback, layerFilter) {
            const viewState = frameState.viewState;
            const layerStates = frameState.layerStatesArray;
            const numLayers = layerStates.length;
            for (let i = numLayers - 1; i >= 0; --i) {
                const layerState = layerStates[i];
                const layer = layerState.layer;
                if (layer.hasRenderer() &&
                    Layer_js_2.inView(layerState, viewState) &&
                    layerFilter(layer)) {
                    const layerRenderer = layer.getRenderer();
                    const data = layerRenderer.getDataAtPixel(pixel, frameState, hitTolerance);
                    if (data) {
                        const result = callback(layer, data);
                        if (result) {
                            return result;
                        }
                    }
                }
            }
            return undefined;
        }
    }
    exports.default = CompositeMapRenderer;
});
define("node_modules/ol/src/control/Attribution", ["require", "exports", "node_modules/ol/src/control/Control", "node_modules/ol/src/events/EventType", "node_modules/ol/src/css", "node_modules/ol/src/array", "node_modules/ol/src/layer/Layer", "node_modules/ol/src/dom"], function (require, exports, Control_js_1, EventType_js_20, css_js_4, array_js_15, Layer_js_3, dom_js_8) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @typedef {Object} Options
     * @property {string} [className='ol-attribution'] CSS class name.
     * @property {HTMLElement|string} [target] Specify a target if you
     * want the control to be rendered outside of the map's
     * viewport.
     * @property {boolean} [collapsible] Specify if attributions can
     * be collapsed. If not specified, sources control this behavior with their
     * `attributionsCollapsible` setting.
     * @property {boolean} [collapsed=true] Specify if attributions should
     * be collapsed at startup.
     * @property {string} [tipLabel='Attributions'] Text label to use for the button tip.
     * @property {string} [label='i'] Text label to use for the
     * collapsed attributions button.
     * Instead of text, also an element (e.g. a `span` element) can be used.
     * @property {string|HTMLElement} [collapseLabel='»'] Text label to use
     * for the expanded attributions button.
     * Instead of text, also an element (e.g. a `span` element) can be used.
     * @property {function(import("../MapEvent.js").default):void} [render] Function called when
     * the control should be re-rendered. This is called in a `requestAnimationFrame`
     * callback.
     */
    /**
     * @classdesc
     * Control to show all the attributions associated with the layer sources
     * in the map. This control is one of the default controls included in maps.
     * By default it will show in the bottom right portion of the map, but this can
     * be changed by using a css selector for `.ol-attribution`.
     *
     * @api
     */
    class Attribution extends Control_js_1.default {
        /**
         * @param {Options=} opt_options Attribution options.
         */
        constructor(opt_options) {
            const options = opt_options ? opt_options : {};
            super({
                element: document.createElement('div'),
                render: options.render,
                target: options.target,
            });
            /**
             * @private
             * @type {HTMLElement}
             */
            this.ulElement_ = document.createElement('ul');
            /**
             * @private
             * @type {boolean}
             */
            this.collapsed_ =
                options.collapsed !== undefined ? options.collapsed : true;
            /**
             * @private
             * @type {boolean}
             */
            this.overrideCollapsible_ = options.collapsible !== undefined;
            /**
             * @private
             * @type {boolean}
             */
            this.collapsible_ =
                options.collapsible !== undefined ? options.collapsible : true;
            if (!this.collapsible_) {
                this.collapsed_ = false;
            }
            const className = options.className !== undefined ? options.className : 'ol-attribution';
            const tipLabel = options.tipLabel !== undefined ? options.tipLabel : 'Attributions';
            const collapseLabel = options.collapseLabel !== undefined ? options.collapseLabel : '\u00BB';
            if (typeof collapseLabel === 'string') {
                /**
                 * @private
                 * @type {HTMLElement}
                 */
                this.collapseLabel_ = document.createElement('span');
                this.collapseLabel_.textContent = collapseLabel;
            }
            else {
                this.collapseLabel_ = collapseLabel;
            }
            const label = options.label !== undefined ? options.label : 'i';
            if (typeof label === 'string') {
                /**
                 * @private
                 * @type {HTMLElement}
                 */
                this.label_ = document.createElement('span');
                this.label_.textContent = label;
            }
            else {
                this.label_ = label;
            }
            const activeLabel = this.collapsible_ && !this.collapsed_ ? this.collapseLabel_ : this.label_;
            const button = document.createElement('button');
            button.setAttribute('type', 'button');
            button.title = tipLabel;
            button.appendChild(activeLabel);
            button.addEventListener(EventType_js_20.default.CLICK, this.handleClick_.bind(this), false);
            const cssClasses = className +
                ' ' +
                css_js_4.CLASS_UNSELECTABLE +
                ' ' +
                css_js_4.CLASS_CONTROL +
                (this.collapsed_ && this.collapsible_ ? ' ' + css_js_4.CLASS_COLLAPSED : '') +
                (this.collapsible_ ? '' : ' ol-uncollapsible');
            const element = this.element;
            element.className = cssClasses;
            element.appendChild(this.ulElement_);
            element.appendChild(button);
            /**
             * A list of currently rendered resolutions.
             * @type {Array<string>}
             * @private
             */
            this.renderedAttributions_ = [];
            /**
             * @private
             * @type {boolean}
             */
            this.renderedVisible_ = true;
        }
        /**
         * Collect a list of visible attributions and set the collapsible state.
         * @param {import("../PluggableMap.js").FrameState} frameState Frame state.
         * @return {Array<string>} Attributions.
         * @private
         */
        collectSourceAttributions_(frameState) {
            /**
             * Used to determine if an attribution already exists.
             * @type {!Object<string, boolean>}
             */
            const lookup = {};
            /**
             * A list of visible attributions.
             * @type {Array<string>}
             */
            const visibleAttributions = [];
            const layerStatesArray = frameState.layerStatesArray;
            for (let i = 0, ii = layerStatesArray.length; i < ii; ++i) {
                const layerState = layerStatesArray[i];
                if (!Layer_js_3.inView(layerState, frameState.viewState)) {
                    continue;
                }
                const source = /** @type {import("../layer/Layer.js").default} */ (layerState.layer).getSource();
                if (!source) {
                    continue;
                }
                const attributionGetter = source.getAttributions();
                if (!attributionGetter) {
                    continue;
                }
                const attributions = attributionGetter(frameState);
                if (!attributions) {
                    continue;
                }
                if (!this.overrideCollapsible_ &&
                    source.getAttributionsCollapsible() === false) {
                    this.setCollapsible(false);
                }
                if (Array.isArray(attributions)) {
                    for (let j = 0, jj = attributions.length; j < jj; ++j) {
                        if (!(attributions[j] in lookup)) {
                            visibleAttributions.push(attributions[j]);
                            lookup[attributions[j]] = true;
                        }
                    }
                }
                else {
                    if (!(attributions in lookup)) {
                        visibleAttributions.push(attributions);
                        lookup[attributions] = true;
                    }
                }
            }
            return visibleAttributions;
        }
        /**
         * @private
         * @param {?import("../PluggableMap.js").FrameState} frameState Frame state.
         */
        updateElement_(frameState) {
            if (!frameState) {
                if (this.renderedVisible_) {
                    this.element.style.display = 'none';
                    this.renderedVisible_ = false;
                }
                return;
            }
            const attributions = this.collectSourceAttributions_(frameState);
            const visible = attributions.length > 0;
            if (this.renderedVisible_ != visible) {
                this.element.style.display = visible ? '' : 'none';
                this.renderedVisible_ = visible;
            }
            if (array_js_15.equals(attributions, this.renderedAttributions_)) {
                return;
            }
            dom_js_8.removeChildren(this.ulElement_);
            // append the attributions
            for (let i = 0, ii = attributions.length; i < ii; ++i) {
                const element = document.createElement('li');
                element.innerHTML = attributions[i];
                this.ulElement_.appendChild(element);
            }
            this.renderedAttributions_ = attributions;
        }
        /**
         * @param {MouseEvent} event The event to handle
         * @private
         */
        handleClick_(event) {
            event.preventDefault();
            this.handleToggle_();
        }
        /**
         * @private
         */
        handleToggle_() {
            this.element.classList.toggle(css_js_4.CLASS_COLLAPSED);
            if (this.collapsed_) {
                dom_js_8.replaceNode(this.collapseLabel_, this.label_);
            }
            else {
                dom_js_8.replaceNode(this.label_, this.collapseLabel_);
            }
            this.collapsed_ = !this.collapsed_;
        }
        /**
         * Return `true` if the attribution is collapsible, `false` otherwise.
         * @return {boolean} True if the widget is collapsible.
         * @api
         */
        getCollapsible() {
            return this.collapsible_;
        }
        /**
         * Set whether the attribution should be collapsible.
         * @param {boolean} collapsible True if the widget is collapsible.
         * @api
         */
        setCollapsible(collapsible) {
            if (this.collapsible_ === collapsible) {
                return;
            }
            this.collapsible_ = collapsible;
            this.element.classList.toggle('ol-uncollapsible');
            if (!collapsible && this.collapsed_) {
                this.handleToggle_();
            }
        }
        /**
         * Collapse or expand the attribution according to the passed parameter. Will
         * not do anything if the attribution isn't collapsible or if the current
         * collapsed state is already the one requested.
         * @param {boolean} collapsed True if the widget is collapsed.
         * @api
         */
        setCollapsed(collapsed) {
            if (!this.collapsible_ || this.collapsed_ === collapsed) {
                return;
            }
            this.handleToggle_();
        }
        /**
         * Return `true` when the attribution is currently collapsed or `false`
         * otherwise.
         * @return {boolean} True if the widget is collapsed.
         * @api
         */
        getCollapsed() {
            return this.collapsed_;
        }
        /**
         * Update the attribution element.
         * @param {import("../MapEvent.js").default} mapEvent Map event.
         * @override
         */
        render(mapEvent) {
            this.updateElement_(mapEvent.frameState);
        }
    }
    exports.default = Attribution;
});
define("node_modules/ol/src/control/Rotate", ["require", "exports", "node_modules/ol/src/control/Control", "node_modules/ol/src/events/EventType", "node_modules/ol/src/css", "node_modules/ol/src/easing"], function (require, exports, Control_js_2, EventType_js_21, css_js_5, easing_js_5) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @typedef {Object} Options
     * @property {string} [className='ol-rotate'] CSS class name.
     * @property {string|HTMLElement} [label='⇧'] Text label to use for the rotate button.
     * Instead of text, also an element (e.g. a `span` element) can be used.
     * @property {string} [tipLabel='Reset rotation'] Text label to use for the rotate tip.
     * @property {number} [duration=250] Animation duration in milliseconds.
     * @property {boolean} [autoHide=true] Hide the control when rotation is 0.
     * @property {function(import("../MapEvent.js").default):void} [render] Function called when the control should
     * be re-rendered. This is called in a `requestAnimationFrame` callback.
     * @property {function():void} [resetNorth] Function called when the control is clicked.
     * This will override the default `resetNorth`.
     * @property {HTMLElement|string} [target] Specify a target if you want the control to be
     * rendered outside of the map's viewport.
     */
    /**
     * @classdesc
     * A button control to reset rotation to 0.
     * To style this control use css selector `.ol-rotate`. A `.ol-hidden` css
     * selector is added to the button when the rotation is 0.
     *
     * @api
     */
    class Rotate extends Control_js_2.default {
        /**
         * @param {Options=} opt_options Rotate options.
         */
        constructor(opt_options) {
            const options = opt_options ? opt_options : {};
            super({
                element: document.createElement('div'),
                render: options.render,
                target: options.target,
            });
            const className = options.className !== undefined ? options.className : 'ol-rotate';
            const label = options.label !== undefined ? options.label : '\u21E7';
            /**
             * @type {HTMLElement}
             * @private
             */
            this.label_ = null;
            if (typeof label === 'string') {
                this.label_ = document.createElement('span');
                this.label_.className = 'ol-compass';
                this.label_.textContent = label;
            }
            else {
                this.label_ = label;
                this.label_.classList.add('ol-compass');
            }
            const tipLabel = options.tipLabel ? options.tipLabel : 'Reset rotation';
            const button = document.createElement('button');
            button.className = className + '-reset';
            button.setAttribute('type', 'button');
            button.title = tipLabel;
            button.appendChild(this.label_);
            button.addEventListener(EventType_js_21.default.CLICK, this.handleClick_.bind(this), false);
            const cssClasses = className + ' ' + css_js_5.CLASS_UNSELECTABLE + ' ' + css_js_5.CLASS_CONTROL;
            const element = this.element;
            element.className = cssClasses;
            element.appendChild(button);
            this.callResetNorth_ = options.resetNorth ? options.resetNorth : undefined;
            /**
             * @type {number}
             * @private
             */
            this.duration_ = options.duration !== undefined ? options.duration : 250;
            /**
             * @type {boolean}
             * @private
             */
            this.autoHide_ = options.autoHide !== undefined ? options.autoHide : true;
            /**
             * @private
             * @type {number|undefined}
             */
            this.rotation_ = undefined;
            if (this.autoHide_) {
                this.element.classList.add(css_js_5.CLASS_HIDDEN);
            }
        }
        /**
         * @param {MouseEvent} event The event to handle
         * @private
         */
        handleClick_(event) {
            event.preventDefault();
            if (this.callResetNorth_ !== undefined) {
                this.callResetNorth_();
            }
            else {
                this.resetNorth_();
            }
        }
        /**
         * @private
         */
        resetNorth_() {
            const map = this.getMap();
            const view = map.getView();
            if (!view) {
                // the map does not have a view, so we can't act
                // upon it
                return;
            }
            const rotation = view.getRotation();
            if (rotation !== undefined) {
                if (this.duration_ > 0 && rotation % (2 * Math.PI) !== 0) {
                    view.animate({
                        rotation: 0,
                        duration: this.duration_,
                        easing: easing_js_5.easeOut,
                    });
                }
                else {
                    view.setRotation(0);
                }
            }
        }
        /**
         * Update the rotate control element.
         * @param {import("../MapEvent.js").default} mapEvent Map event.
         * @override
         */
        render(mapEvent) {
            const frameState = mapEvent.frameState;
            if (!frameState) {
                return;
            }
            const rotation = frameState.viewState.rotation;
            if (rotation != this.rotation_) {
                const transform = 'rotate(' + rotation + 'rad)';
                if (this.autoHide_) {
                    const contains = this.element.classList.contains(css_js_5.CLASS_HIDDEN);
                    if (!contains && rotation === 0) {
                        this.element.classList.add(css_js_5.CLASS_HIDDEN);
                    }
                    else if (contains && rotation !== 0) {
                        this.element.classList.remove(css_js_5.CLASS_HIDDEN);
                    }
                }
                this.label_.style.transform = transform;
            }
            this.rotation_ = rotation;
        }
    }
    exports.default = Rotate;
});
define("node_modules/ol/src/control/Zoom", ["require", "exports", "node_modules/ol/src/control/Control", "node_modules/ol/src/events/EventType", "node_modules/ol/src/css", "node_modules/ol/src/easing"], function (require, exports, Control_js_3, EventType_js_22, css_js_6, easing_js_6) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @typedef {Object} Options
     * @property {number} [duration=250] Animation duration in milliseconds.
     * @property {string} [className='ol-zoom'] CSS class name.
     * @property {string|HTMLElement} [zoomInLabel='+'] Text label to use for the zoom-in
     * button. Instead of text, also an element (e.g. a `span` element) can be used.
     * @property {string|HTMLElement} [zoomOutLabel='-'] Text label to use for the zoom-out button.
     * Instead of text, also an element (e.g. a `span` element) can be used.
     * @property {string} [zoomInTipLabel='Zoom in'] Text label to use for the button tip.
     * @property {string} [zoomOutTipLabel='Zoom out'] Text label to use for the button tip.
     * @property {number} [delta=1] The zoom delta applied on each click.
     * @property {HTMLElement|string} [target] Specify a target if you want the control to be
     * rendered outside of the map's viewport.
     */
    /**
     * @classdesc
     * A control with 2 buttons, one for zoom in and one for zoom out.
     * This control is one of the default controls of a map. To style this control
     * use css selectors `.ol-zoom-in` and `.ol-zoom-out`.
     *
     * @api
     */
    class Zoom extends Control_js_3.default {
        /**
         * @param {Options=} opt_options Zoom options.
         */
        constructor(opt_options) {
            const options = opt_options ? opt_options : {};
            super({
                element: document.createElement('div'),
                target: options.target,
            });
            const className = options.className !== undefined ? options.className : 'ol-zoom';
            const delta = options.delta !== undefined ? options.delta : 1;
            const zoomInLabel = options.zoomInLabel !== undefined ? options.zoomInLabel : '+';
            const zoomOutLabel = options.zoomOutLabel !== undefined ? options.zoomOutLabel : '\u2212';
            const zoomInTipLabel = options.zoomInTipLabel !== undefined ? options.zoomInTipLabel : 'Zoom in';
            const zoomOutTipLabel = options.zoomOutTipLabel !== undefined
                ? options.zoomOutTipLabel
                : 'Zoom out';
            const inElement = document.createElement('button');
            inElement.className = className + '-in';
            inElement.setAttribute('type', 'button');
            inElement.title = zoomInTipLabel;
            inElement.appendChild(typeof zoomInLabel === 'string'
                ? document.createTextNode(zoomInLabel)
                : zoomInLabel);
            inElement.addEventListener(EventType_js_22.default.CLICK, this.handleClick_.bind(this, delta), false);
            const outElement = document.createElement('button');
            outElement.className = className + '-out';
            outElement.setAttribute('type', 'button');
            outElement.title = zoomOutTipLabel;
            outElement.appendChild(typeof zoomOutLabel === 'string'
                ? document.createTextNode(zoomOutLabel)
                : zoomOutLabel);
            outElement.addEventListener(EventType_js_22.default.CLICK, this.handleClick_.bind(this, -delta), false);
            const cssClasses = className + ' ' + css_js_6.CLASS_UNSELECTABLE + ' ' + css_js_6.CLASS_CONTROL;
            const element = this.element;
            element.className = cssClasses;
            element.appendChild(inElement);
            element.appendChild(outElement);
            /**
             * @type {number}
             * @private
             */
            this.duration_ = options.duration !== undefined ? options.duration : 250;
        }
        /**
         * @param {number} delta Zoom delta.
         * @param {MouseEvent} event The event to handle
         * @private
         */
        handleClick_(delta, event) {
            event.preventDefault();
            this.zoomByDelta_(delta);
        }
        /**
         * @param {number} delta Zoom delta.
         * @private
         */
        zoomByDelta_(delta) {
            const map = this.getMap();
            const view = map.getView();
            if (!view) {
                // the map does not have a view, so we can't act
                // upon it
                return;
            }
            const currentZoom = view.getZoom();
            if (currentZoom !== undefined) {
                const newZoom = view.getConstrainedZoom(currentZoom + delta);
                if (this.duration_ > 0) {
                    if (view.getAnimating()) {
                        view.cancelAnimations();
                    }
                    view.animate({
                        zoom: newZoom,
                        duration: this.duration_,
                        easing: easing_js_6.easeOut,
                    });
                }
                else {
                    view.setZoom(newZoom);
                }
            }
        }
    }
    exports.default = Zoom;
});
define("node_modules/ol/src/control/FullScreen", ["require", "exports", "node_modules/ol/src/control/Control", "node_modules/ol/src/events/EventType", "node_modules/ol/src/css", "node_modules/ol/src/events", "node_modules/ol/src/dom"], function (require, exports, Control_js_4, EventType_js_23, css_js_7, events_js_12, dom_js_9) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const events = [
        'fullscreenchange',
        'webkitfullscreenchange',
        'MSFullscreenChange',
    ];
    /**
     * @enum {string}
     */
    const FullScreenEventType = {
        /**
         * Triggered after the map entered fullscreen.
         * @event FullScreenEventType#enterfullscreen
         * @api
         */
        ENTERFULLSCREEN: 'enterfullscreen',
        /**
         * Triggered after the map leave fullscreen.
         * @event FullScreenEventType#leavefullscreen
         * @api
         */
        LEAVEFULLSCREEN: 'leavefullscreen',
    };
    /**
     * @typedef {Object} Options
     * @property {string} [className='ol-full-screen'] CSS class name.
     * @property {string|Text} [label='\u2922'] Text label to use for the button.
     * Instead of text, also an element (e.g. a `span` element) can be used.
     * @property {string|Text} [labelActive='\u00d7'] Text label to use for the
     * button when full-screen is active.
     * Instead of text, also an element (e.g. a `span` element) can be used.
     * @property {string} [tipLabel='Toggle full-screen'] Text label to use for the button tip.
     * @property {boolean} [keys=false] Full keyboard access.
     * @property {HTMLElement|string} [target] Specify a target if you want the
     * control to be rendered outside of the map's viewport.
     * @property {HTMLElement|string} [source] The element to be displayed
     * fullscreen. When not provided, the element containing the map viewport will
     * be displayed fullscreen.
     */
    /**
     * @classdesc
     * Provides a button that when clicked fills up the full screen with the map.
     * The full screen source element is by default the element containing the map viewport unless
     * overridden by providing the `source` option. In which case, the dom
     * element introduced using this parameter will be displayed in full screen.
     *
     * When in full screen mode, a close button is shown to exit full screen mode.
     * The [Fullscreen API](http://www.w3.org/TR/fullscreen/) is used to
     * toggle the map in full screen mode.
     *
     * @fires FullScreenEventType#enterfullscreen
     * @fires FullScreenEventType#leavefullscreen
     * @api
     */
    class FullScreen extends Control_js_4.default {
        /**
         * @param {Options=} opt_options Options.
         */
        constructor(opt_options) {
            const options = opt_options ? opt_options : {};
            super({
                element: document.createElement('div'),
                target: options.target,
            });
            /**
             * @private
             * @type {string}
             */
            this.cssClassName_ =
                options.className !== undefined ? options.className : 'ol-full-screen';
            const label = options.label !== undefined ? options.label : '\u2922';
            /**
             * @private
             * @type {Text}
             */
            this.labelNode_ =
                typeof label === 'string' ? document.createTextNode(label) : label;
            const labelActive = options.labelActive !== undefined ? options.labelActive : '\u00d7';
            /**
             * @private
             * @type {Text}
             */
            this.labelActiveNode_ =
                typeof labelActive === 'string'
                    ? document.createTextNode(labelActive)
                    : labelActive;
            /**
             * @private
             * @type {HTMLElement}
             */
            this.button_ = document.createElement('button');
            const tipLabel = options.tipLabel ? options.tipLabel : 'Toggle full-screen';
            this.setClassName_(this.button_, isFullScreen());
            this.button_.setAttribute('type', 'button');
            this.button_.title = tipLabel;
            this.button_.appendChild(this.labelNode_);
            this.button_.addEventListener(EventType_js_23.default.CLICK, this.handleClick_.bind(this), false);
            const cssClasses = this.cssClassName_ +
                ' ' +
                css_js_7.CLASS_UNSELECTABLE +
                ' ' +
                css_js_7.CLASS_CONTROL +
                ' ' +
                (!isFullScreenSupported() ? css_js_7.CLASS_UNSUPPORTED : '');
            const element = this.element;
            element.className = cssClasses;
            element.appendChild(this.button_);
            /**
             * @private
             * @type {boolean}
             */
            this.keys_ = options.keys !== undefined ? options.keys : false;
            /**
             * @private
             * @type {HTMLElement|string|undefined}
             */
            this.source_ = options.source;
        }
        /**
         * @param {MouseEvent} event The event to handle
         * @private
         */
        handleClick_(event) {
            event.preventDefault();
            this.handleFullScreen_();
        }
        /**
         * @private
         */
        handleFullScreen_() {
            if (!isFullScreenSupported()) {
                return;
            }
            const map = this.getMap();
            if (!map) {
                return;
            }
            if (isFullScreen()) {
                exitFullScreen();
            }
            else {
                let element;
                if (this.source_) {
                    element =
                        typeof this.source_ === 'string'
                            ? document.getElementById(this.source_)
                            : this.source_;
                }
                else {
                    element = map.getTargetElement();
                }
                if (this.keys_) {
                    requestFullScreenWithKeys(element);
                }
                else {
                    requestFullScreen(element);
                }
            }
        }
        /**
         * @private
         */
        handleFullScreenChange_() {
            const map = this.getMap();
            if (isFullScreen()) {
                this.setClassName_(this.button_, true);
                dom_js_9.replaceNode(this.labelActiveNode_, this.labelNode_);
                this.dispatchEvent(FullScreenEventType.ENTERFULLSCREEN);
            }
            else {
                this.setClassName_(this.button_, false);
                dom_js_9.replaceNode(this.labelNode_, this.labelActiveNode_);
                this.dispatchEvent(FullScreenEventType.LEAVEFULLSCREEN);
            }
            if (map) {
                map.updateSize();
            }
        }
        /**
         * @param {HTMLElement} element Target element
         * @param {boolean} fullscreen True if fullscreen class name should be active
         * @private
         */
        setClassName_(element, fullscreen) {
            const activeClassName = this.cssClassName_ + '-true';
            const inactiveClassName = this.cssClassName_ + '-false';
            const nextClassName = fullscreen ? activeClassName : inactiveClassName;
            element.classList.remove(activeClassName);
            element.classList.remove(inactiveClassName);
            element.classList.add(nextClassName);
        }
        /**
         * Remove the control from its current map and attach it to the new map.
         * Subclasses may set up event handlers to get notified about changes to
         * the map here.
         * @param {import("../PluggableMap.js").default} map Map.
         * @api
         */
        setMap(map) {
            super.setMap(map);
            if (map) {
                for (let i = 0, ii = events.length; i < ii; ++i) {
                    this.listenerKeys.push(events_js_12.listen(document, events[i], this.handleFullScreenChange_, this));
                }
            }
        }
    }
    /**
     * @return {boolean} Fullscreen is supported by the current platform.
     */
    function isFullScreenSupported() {
        const body = document.body;
        return !!(body['webkitRequestFullscreen'] ||
            (body['msRequestFullscreen'] && document['msFullscreenEnabled']) ||
            (body.requestFullscreen && document.fullscreenEnabled));
    }
    /**
     * @return {boolean} Element is currently in fullscreen.
     */
    function isFullScreen() {
        return !!(document['webkitIsFullScreen'] ||
            document['msFullscreenElement'] ||
            document.fullscreenElement);
    }
    /**
     * Request to fullscreen an element.
     * @param {HTMLElement} element Element to request fullscreen
     */
    function requestFullScreen(element) {
        if (element.requestFullscreen) {
            element.requestFullscreen();
        }
        else if (element['msRequestFullscreen']) {
            element['msRequestFullscreen']();
        }
        else if (element['webkitRequestFullscreen']) {
            element['webkitRequestFullscreen']();
        }
    }
    /**
     * Request to fullscreen an element with keyboard input.
     * @param {HTMLElement} element Element to request fullscreen
     */
    function requestFullScreenWithKeys(element) {
        if (element['webkitRequestFullscreen']) {
            element['webkitRequestFullscreen']();
        }
        else {
            requestFullScreen(element);
        }
    }
    /**
     * Exit fullscreen.
     */
    function exitFullScreen() {
        if (document.exitFullscreen) {
            document.exitFullscreen();
        }
        else if (document['msExitFullscreen']) {
            document['msExitFullscreen']();
        }
        else if (document['webkitExitFullscreen']) {
            document['webkitExitFullscreen']();
        }
    }
    exports.default = FullScreen;
});
/**
 * @module ol/control/MousePosition
 */
define("node_modules/ol/src/control/MousePosition", ["require", "exports", "node_modules/ol/src/control/Control", "node_modules/ol/src/pointer/EventType", "node_modules/ol/src/Object", "node_modules/ol/src/proj", "node_modules/ol/src/events"], function (require, exports, Control_js_5, EventType_js_24, Object_js_14, proj_js_9, events_js_13) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @type {string}
     */
    const PROJECTION = 'projection';
    /**
     * @type {string}
     */
    const COORDINATE_FORMAT = 'coordinateFormat';
    /**
     * @typedef {Object} Options
     * @property {string} [className='ol-mouse-position'] CSS class name.
     * @property {import("../coordinate.js").CoordinateFormat} [coordinateFormat] Coordinate format.
     * @property {import("../proj.js").ProjectionLike} [projection] Projection. Default is the view projection.
     * @property {function(import("../MapEvent.js").default):void} [render] Function called when the
     * control should be re-rendered. This is called in a `requestAnimationFrame`
     * callback.
     * @property {HTMLElement|string} [target] Specify a target if you want the
     * control to be rendered outside of the map's viewport.
     * @property {string} [undefinedHTML='&#160;'] Markup to show when coordinates are not
     * available (e.g. when the pointer leaves the map viewport).  By default, the last position
     * will be replaced with `'&#160;'` (`&nbsp;`) when the pointer leaves the viewport.  To
     * retain the last rendered position, set this option to something falsey (like an empty
     * string `''`).
     */
    /**
     * @classdesc
     * A control to show the 2D coordinates of the mouse cursor. By default, these
     * are in the view projection, but can be in any supported projection.
     * By default the control is shown in the top right corner of the map, but this
     * can be changed by using the css selector `.ol-mouse-position`.
     *
     * On touch devices, which usually do not have a mouse cursor, the coordinates
     * of the currently touched position are shown.
     *
     * @api
     */
    class MousePosition extends Control_js_5.default {
        /**
         * @param {Options=} opt_options Mouse position options.
         */
        constructor(opt_options) {
            const options = opt_options ? opt_options : {};
            const element = document.createElement('div');
            element.className =
                options.className !== undefined ? options.className : 'ol-mouse-position';
            super({
                element: element,
                render: options.render,
                target: options.target,
            });
            this.addEventListener(Object_js_14.getChangeEventType(PROJECTION), this.handleProjectionChanged_);
            if (options.coordinateFormat) {
                this.setCoordinateFormat(options.coordinateFormat);
            }
            if (options.projection) {
                this.setProjection(options.projection);
            }
            /**
             * @private
             * @type {string}
             */
            this.undefinedHTML_ =
                options.undefinedHTML !== undefined ? options.undefinedHTML : '&#160;';
            /**
             * @private
             * @type {boolean}
             */
            this.renderOnMouseOut_ = !!this.undefinedHTML_;
            /**
             * @private
             * @type {string}
             */
            this.renderedHTML_ = element.innerHTML;
            /**
             * @private
             * @type {?import("../proj/Projection.js").default}
             */
            this.mapProjection_ = null;
            /**
             * @private
             * @type {?import("../proj.js").TransformFunction}
             */
            this.transform_ = null;
        }
        /**
         * @private
         */
        handleProjectionChanged_() {
            this.transform_ = null;
        }
        /**
         * Return the coordinate format type used to render the current position or
         * undefined.
         * @return {import("../coordinate.js").CoordinateFormat|undefined} The format to render the current
         *     position in.
         * @observable
         * @api
         */
        getCoordinateFormat() {
            return /** @type {import("../coordinate.js").CoordinateFormat|undefined} */ (this.get(COORDINATE_FORMAT));
        }
        /**
         * Return the projection that is used to report the mouse position.
         * @return {import("../proj/Projection.js").default|undefined} The projection to report mouse
         *     position in.
         * @observable
         * @api
         */
        getProjection() {
            return /** @type {import("../proj/Projection.js").default|undefined} */ (this.get(PROJECTION));
        }
        /**
         * @param {MouseEvent} event Browser event.
         * @protected
         */
        handleMouseMove(event) {
            const map = this.getMap();
            this.updateHTML_(map.getEventPixel(event));
        }
        /**
         * @param {Event} event Browser event.
         * @protected
         */
        handleMouseOut(event) {
            this.updateHTML_(null);
        }
        /**
         * Remove the control from its current map and attach it to the new map.
         * Subclasses may set up event handlers to get notified about changes to
         * the map here.
         * @param {import("../PluggableMap.js").default} map Map.
         * @api
         */
        setMap(map) {
            super.setMap(map);
            if (map) {
                const viewport = map.getViewport();
                this.listenerKeys.push(events_js_13.listen(viewport, EventType_js_24.default.POINTERMOVE, this.handleMouseMove, this));
                if (this.renderOnMouseOut_) {
                    this.listenerKeys.push(events_js_13.listen(viewport, EventType_js_24.default.POINTEROUT, this.handleMouseOut, this));
                }
            }
        }
        /**
         * Set the coordinate format type used to render the current position.
         * @param {import("../coordinate.js").CoordinateFormat} format The format to render the current
         *     position in.
         * @observable
         * @api
         */
        setCoordinateFormat(format) {
            this.set(COORDINATE_FORMAT, format);
        }
        /**
         * Set the projection that is used to report the mouse position.
         * @param {import("../proj.js").ProjectionLike} projection The projection to report mouse
         *     position in.
         * @observable
         * @api
         */
        setProjection(projection) {
            this.set(PROJECTION, proj_js_9.get(projection));
        }
        /**
         * @param {?import("../pixel.js").Pixel} pixel Pixel.
         * @private
         */
        updateHTML_(pixel) {
            let html = this.undefinedHTML_;
            if (pixel && this.mapProjection_) {
                if (!this.transform_) {
                    const projection = this.getProjection();
                    if (projection) {
                        this.transform_ = proj_js_9.getTransformFromProjections(this.mapProjection_, projection);
                    }
                    else {
                        this.transform_ = proj_js_9.identityTransform;
                    }
                }
                const map = this.getMap();
                const coordinate = map.getCoordinateFromPixelInternal(pixel);
                if (coordinate) {
                    const userProjection = proj_js_9.getUserProjection();
                    if (userProjection) {
                        this.transform_ = proj_js_9.getTransformFromProjections(this.mapProjection_, userProjection);
                    }
                    this.transform_(coordinate, coordinate);
                    const coordinateFormat = this.getCoordinateFormat();
                    if (coordinateFormat) {
                        html = coordinateFormat(coordinate);
                    }
                    else {
                        html = coordinate.toString();
                    }
                }
            }
            if (!this.renderedHTML_ || html !== this.renderedHTML_) {
                this.element.innerHTML = html;
                this.renderedHTML_ = html;
            }
        }
        /**
         * Update the projection. Rendering of the coordinates is done in
         * `handleMouseMove` and `handleMouseUp`.
         * @param {import("../MapEvent.js").default} mapEvent Map event.
         * @override
         */
        render(mapEvent) {
            const frameState = mapEvent.frameState;
            if (!frameState) {
                this.mapProjection_ = null;
            }
            else {
                if (this.mapProjection_ != frameState.viewState.projection) {
                    this.mapProjection_ = frameState.viewState.projection;
                    this.transform_ = null;
                }
            }
        }
    }
    exports.default = MousePosition;
});
define("node_modules/ol/src/control/OverviewMap", ["require", "exports", "node_modules/ol/src/renderer/Composite", "node_modules/ol/src/control/Control", "node_modules/ol/src/events/EventType", "node_modules/ol/src/MapEventType", "node_modules/ol/src/MapProperty", "node_modules/ol/src/ObjectEventType", "node_modules/ol/src/Overlay", "node_modules/ol/src/OverlayPositioning", "node_modules/ol/src/PluggableMap", "node_modules/ol/src/View", "node_modules/ol/src/ViewProperty", "node_modules/ol/src/css", "node_modules/ol/src/extent", "node_modules/ol/src/Object", "node_modules/ol/src/events", "node_modules/ol/src/geom/Polygon", "node_modules/ol/src/dom"], function (require, exports, Composite_js_1, Control_js_6, EventType_js_25, MapEventType_js_4, MapProperty_js_2, ObjectEventType_js_5, Overlay_js_1, OverlayPositioning_js_2, PluggableMap_js_1, View_js_2, ViewProperty_js_2, css_js_8, extent_js_30, Object_js_15, events_js_14, Polygon_js_3, dom_js_10) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Maximum width and/or height extent ratio that determines when the overview
     * map should be zoomed out.
     * @type {number}
     */
    const MAX_RATIO = 0.75;
    /**
     * Minimum width and/or height extent ratio that determines when the overview
     * map should be zoomed in.
     * @type {number}
     */
    const MIN_RATIO = 0.1;
    class ControlledMap extends PluggableMap_js_1.default {
        createRenderer() {
            return new Composite_js_1.default(this);
        }
    }
    /**
     * @typedef {Object} Options
     * @property {string} [className='ol-overviewmap'] CSS class name.
     * @property {boolean} [collapsed=true] Whether the control should start collapsed or not (expanded).
     * @property {string|HTMLElement} [collapseLabel='«'] Text label to use for the
     * expanded overviewmap button. Instead of text, also an element (e.g. a `span` element) can be used.
     * @property {boolean} [collapsible=true] Whether the control can be collapsed or not.
     * @property {string|HTMLElement} [label='»'] Text label to use for the collapsed
     * overviewmap button. Instead of text, also an element (e.g. a `span` element) can be used.
     * @property {Array<import("../layer/Layer.js").default>|import("../Collection.js").default<import("../layer/Layer.js").default>} [layers]
     * Layers for the overview map.
     * @property {function(import("../MapEvent.js").default):void} [render] Function called when the control
     * should be re-rendered. This is called in a `requestAnimationFrame` callback.
     * @property {boolean} [rotateWithView=false] Whether the control view should rotate with the main map view.
     * @property {HTMLElement|string} [target] Specify a target if you want the control
     * to be rendered outside of the map's viewport.
     * @property {string} [tipLabel='Overview map'] Text label to use for the button tip.
     * @property {View} [view] Custom view for the overview map (should use same projection as main map). If not provided,
     * a default view with the same projection as the main map will be used.
     */
    /**
     * Create a new control with a map acting as an overview map for another
     * defined map.
     *
     * @api
     */
    class OverviewMap extends Control_js_6.default {
        /**
         * @param {Options=} opt_options OverviewMap options.
         */
        constructor(opt_options) {
            const options = opt_options ? opt_options : {};
            super({
                element: document.createElement('div'),
                render: options.render,
                target: options.target,
            });
            /**
             * @private
             */
            this.boundHandleRotationChanged_ = this.handleRotationChanged_.bind(this);
            /**
             * @type {boolean}
             * @private
             */
            this.collapsed_ =
                options.collapsed !== undefined ? options.collapsed : true;
            /**
             * @private
             * @type {boolean}
             */
            this.collapsible_ =
                options.collapsible !== undefined ? options.collapsible : true;
            if (!this.collapsible_) {
                this.collapsed_ = false;
            }
            /**
             * @private
             * @type {boolean}
             */
            this.rotateWithView_ =
                options.rotateWithView !== undefined ? options.rotateWithView : false;
            /**
             * @private
             * @type {import("../extent.js").Extent|undefined}
             */
            this.viewExtent_ = undefined;
            const className = options.className !== undefined ? options.className : 'ol-overviewmap';
            const tipLabel = options.tipLabel !== undefined ? options.tipLabel : 'Overview map';
            const collapseLabel = options.collapseLabel !== undefined ? options.collapseLabel : '\u00AB';
            if (typeof collapseLabel === 'string') {
                /**
                 * @private
                 * @type {HTMLElement}
                 */
                this.collapseLabel_ = document.createElement('span');
                this.collapseLabel_.textContent = collapseLabel;
            }
            else {
                this.collapseLabel_ = collapseLabel;
            }
            const label = options.label !== undefined ? options.label : '\u00BB';
            if (typeof label === 'string') {
                /**
                 * @private
                 * @type {HTMLElement}
                 */
                this.label_ = document.createElement('span');
                this.label_.textContent = label;
            }
            else {
                this.label_ = label;
            }
            const activeLabel = this.collapsible_ && !this.collapsed_ ? this.collapseLabel_ : this.label_;
            const button = document.createElement('button');
            button.setAttribute('type', 'button');
            button.title = tipLabel;
            button.appendChild(activeLabel);
            button.addEventListener(EventType_js_25.default.CLICK, this.handleClick_.bind(this), false);
            /**
             * @type {HTMLElement}
             * @private
             */
            this.ovmapDiv_ = document.createElement('div');
            this.ovmapDiv_.className = 'ol-overviewmap-map';
            /**
             * Explicitly given view to be used instead of a view derived from the main map.
             * @type {View}
             * @private
             */
            this.view_ = options.view;
            /**
             * @type {ControlledMap}
             * @private
             */
            this.ovmap_ = new ControlledMap({
                view: options.view,
            });
            const ovmap = this.ovmap_;
            if (options.layers) {
                options.layers.forEach(function (layer) {
                    ovmap.addLayer(layer);
                });
            }
            const box = document.createElement('div');
            box.className = 'ol-overviewmap-box';
            box.style.boxSizing = 'border-box';
            /**
             * @type {import("../Overlay.js").default}
             * @private
             */
            this.boxOverlay_ = new Overlay_js_1.default({
                position: [0, 0],
                positioning: OverlayPositioning_js_2.default.CENTER_CENTER,
                element: box,
            });
            this.ovmap_.addOverlay(this.boxOverlay_);
            const cssClasses = className +
                ' ' +
                css_js_8.CLASS_UNSELECTABLE +
                ' ' +
                css_js_8.CLASS_CONTROL +
                (this.collapsed_ && this.collapsible_ ? ' ' + css_js_8.CLASS_COLLAPSED : '') +
                (this.collapsible_ ? '' : ' ol-uncollapsible');
            const element = this.element;
            element.className = cssClasses;
            element.appendChild(this.ovmapDiv_);
            element.appendChild(button);
            /* Interactive map */
            const scope = this;
            const overlay = this.boxOverlay_;
            const overlayBox = this.boxOverlay_.getElement();
            /* Functions definition */
            const computeDesiredMousePosition = function (mousePosition) {
                return {
                    clientX: mousePosition.clientX,
                    clientY: mousePosition.clientY,
                };
            };
            const move = function (event) {
                const position = /** @type {?} */ (computeDesiredMousePosition(event));
                const coordinates = ovmap.getEventCoordinateInternal(
                /** @type {MouseEvent} */ (position));
                overlay.setPosition(coordinates);
            };
            const endMoving = function (event) {
                const coordinates = ovmap.getEventCoordinateInternal(event);
                scope.getMap().getView().setCenterInternal(coordinates);
                window.removeEventListener('mousemove', move);
                window.removeEventListener('mouseup', endMoving);
            };
            /* Binding */
            overlayBox.addEventListener('mousedown', function () {
                window.addEventListener('mousemove', move);
                window.addEventListener('mouseup', endMoving);
            });
        }
        /**
         * Remove the control from its current map and attach it to the new map.
         * Subclasses may set up event handlers to get notified about changes to
         * the map here.
         * @param {import("../PluggableMap.js").default} map Map.
         * @api
         */
        setMap(map) {
            const oldMap = this.getMap();
            if (map === oldMap) {
                return;
            }
            if (oldMap) {
                const oldView = oldMap.getView();
                if (oldView) {
                    this.unbindView_(oldView);
                }
                this.ovmap_.setTarget(null);
            }
            super.setMap(map);
            if (map) {
                this.ovmap_.setTarget(this.ovmapDiv_);
                this.listenerKeys.push(events_js_14.listen(map, ObjectEventType_js_5.default.PROPERTYCHANGE, this.handleMapPropertyChange_, this));
                const view = map.getView();
                if (view) {
                    this.bindView_(view);
                    if (view.isDef()) {
                        this.ovmap_.updateSize();
                        this.resetExtent_();
                    }
                }
            }
        }
        /**
         * Handle map property changes.  This only deals with changes to the map's view.
         * @param {import("../Object.js").ObjectEvent} event The propertychange event.
         * @private
         */
        handleMapPropertyChange_(event) {
            if (event.key === MapProperty_js_2.default.VIEW) {
                const oldView = /** @type {import("../View.js").default} */ (event.oldValue);
                if (oldView) {
                    this.unbindView_(oldView);
                }
                const newView = this.getMap().getView();
                this.bindView_(newView);
            }
        }
        /**
         * Register listeners for view property changes.
         * @param {import("../View.js").default} view The view.
         * @private
         */
        bindView_(view) {
            if (!this.view_) {
                // Unless an explicit view definition was given, derive default from whatever main map uses.
                const newView = new View_js_2.default({
                    projection: view.getProjection(),
                });
                this.ovmap_.setView(newView);
            }
            view.addEventListener(Object_js_15.getChangeEventType(ViewProperty_js_2.default.ROTATION), this.boundHandleRotationChanged_);
            // Sync once with the new view
            this.handleRotationChanged_();
        }
        /**
         * Unregister listeners for view property changes.
         * @param {import("../View.js").default} view The view.
         * @private
         */
        unbindView_(view) {
            view.removeEventListener(Object_js_15.getChangeEventType(ViewProperty_js_2.default.ROTATION), this.boundHandleRotationChanged_);
        }
        /**
         * Handle rotation changes to the main map.
         * @private
         */
        handleRotationChanged_() {
            if (this.rotateWithView_) {
                this.ovmap_.getView().setRotation(this.getMap().getView().getRotation());
            }
        }
        /**
         * Reset the overview map extent if the box size (width or
         * height) is less than the size of the overview map size times minRatio
         * or is greater than the size of the overview size times maxRatio.
         *
         * If the map extent was not reset, the box size can fits in the defined
         * ratio sizes. This method then checks if is contained inside the overview
         * map current extent. If not, recenter the overview map to the current
         * main map center location.
         * @private
         */
        validateExtent_() {
            const map = this.getMap();
            const ovmap = this.ovmap_;
            if (!map.isRendered() || !ovmap.isRendered()) {
                return;
            }
            const mapSize = /** @type {import("../size.js").Size} */ (map.getSize());
            const view = map.getView();
            const extent = view.calculateExtentInternal(mapSize);
            if (this.viewExtent_ && extent_js_30.equals(extent, this.viewExtent_)) {
                // repeats of the same extent may indicate constraint conflicts leading to an endless cycle
                return;
            }
            this.viewExtent_ = extent;
            const ovmapSize = /** @type {import("../size.js").Size} */ (ovmap.getSize());
            const ovview = ovmap.getView();
            const ovextent = ovview.calculateExtentInternal(ovmapSize);
            const topLeftPixel = ovmap.getPixelFromCoordinateInternal(extent_js_30.getTopLeft(extent));
            const bottomRightPixel = ovmap.getPixelFromCoordinateInternal(extent_js_30.getBottomRight(extent));
            const boxWidth = Math.abs(topLeftPixel[0] - bottomRightPixel[0]);
            const boxHeight = Math.abs(topLeftPixel[1] - bottomRightPixel[1]);
            const ovmapWidth = ovmapSize[0];
            const ovmapHeight = ovmapSize[1];
            if (boxWidth < ovmapWidth * MIN_RATIO ||
                boxHeight < ovmapHeight * MIN_RATIO ||
                boxWidth > ovmapWidth * MAX_RATIO ||
                boxHeight > ovmapHeight * MAX_RATIO) {
                this.resetExtent_();
            }
            else if (!extent_js_30.containsExtent(ovextent, extent)) {
                this.recenter_();
            }
        }
        /**
         * Reset the overview map extent to half calculated min and max ratio times
         * the extent of the main map.
         * @private
         */
        resetExtent_() {
            if (MAX_RATIO === 0 || MIN_RATIO === 0) {
                return;
            }
            const map = this.getMap();
            const ovmap = this.ovmap_;
            const mapSize = /** @type {import("../size.js").Size} */ (map.getSize());
            const view = map.getView();
            const extent = view.calculateExtentInternal(mapSize);
            const ovview = ovmap.getView();
            // get how many times the current map overview could hold different
            // box sizes using the min and max ratio, pick the step in the middle used
            // to calculate the extent from the main map to set it to the overview map,
            const steps = Math.log(MAX_RATIO / MIN_RATIO) / Math.LN2;
            const ratio = 1 / (Math.pow(2, steps / 2) * MIN_RATIO);
            extent_js_30.scaleFromCenter(extent, ratio);
            ovview.fitInternal(Polygon_js_3.fromExtent(extent));
        }
        /**
         * Set the center of the overview map to the map center without changing its
         * resolution.
         * @private
         */
        recenter_() {
            const map = this.getMap();
            const ovmap = this.ovmap_;
            const view = map.getView();
            const ovview = ovmap.getView();
            ovview.setCenterInternal(view.getCenterInternal());
        }
        /**
         * Update the box using the main map extent
         * @private
         */
        updateBox_() {
            const map = this.getMap();
            const ovmap = this.ovmap_;
            if (!map.isRendered() || !ovmap.isRendered()) {
                return;
            }
            const mapSize = /** @type {import("../size.js").Size} */ (map.getSize());
            const view = map.getView();
            const ovview = ovmap.getView();
            const rotation = this.rotateWithView_ ? 0 : -view.getRotation();
            const overlay = this.boxOverlay_;
            const box = this.boxOverlay_.getElement();
            const center = view.getCenterInternal();
            const resolution = view.getResolution();
            const ovresolution = ovview.getResolution();
            const width = (mapSize[0] * resolution) / ovresolution;
            const height = (mapSize[1] * resolution) / ovresolution;
            // set position using center coordinates
            overlay.setPosition(center);
            // set box size calculated from map extent size and overview map resolution
            if (box) {
                box.style.width = width + 'px';
                box.style.height = height + 'px';
                const transform = 'rotate(' + rotation + 'rad)';
                box.style.transform = transform;
            }
        }
        /**
         * @param {MouseEvent} event The event to handle
         * @private
         */
        handleClick_(event) {
            event.preventDefault();
            this.handleToggle_();
        }
        /**
         * @private
         */
        handleToggle_() {
            this.element.classList.toggle(css_js_8.CLASS_COLLAPSED);
            if (this.collapsed_) {
                dom_js_10.replaceNode(this.collapseLabel_, this.label_);
            }
            else {
                dom_js_10.replaceNode(this.label_, this.collapseLabel_);
            }
            this.collapsed_ = !this.collapsed_;
            // manage overview map if it had not been rendered before and control
            // is expanded
            const ovmap = this.ovmap_;
            if (!this.collapsed_) {
                if (ovmap.isRendered()) {
                    this.viewExtent_ = undefined;
                    ovmap.render();
                    return;
                }
                ovmap.updateSize();
                this.resetExtent_();
                events_js_14.listenOnce(ovmap, MapEventType_js_4.default.POSTRENDER, function (event) {
                    this.updateBox_();
                }, this);
            }
        }
        /**
         * Return `true` if the overview map is collapsible, `false` otherwise.
         * @return {boolean} True if the widget is collapsible.
         * @api
         */
        getCollapsible() {
            return this.collapsible_;
        }
        /**
         * Set whether the overview map should be collapsible.
         * @param {boolean} collapsible True if the widget is collapsible.
         * @api
         */
        setCollapsible(collapsible) {
            if (this.collapsible_ === collapsible) {
                return;
            }
            this.collapsible_ = collapsible;
            this.element.classList.toggle('ol-uncollapsible');
            if (!collapsible && this.collapsed_) {
                this.handleToggle_();
            }
        }
        /**
         * Collapse or expand the overview map according to the passed parameter. Will
         * not do anything if the overview map isn't collapsible or if the current
         * collapsed state is already the one requested.
         * @param {boolean} collapsed True if the widget is collapsed.
         * @api
         */
        setCollapsed(collapsed) {
            if (!this.collapsible_ || this.collapsed_ === collapsed) {
                return;
            }
            this.handleToggle_();
        }
        /**
         * Determine if the overview map is collapsed.
         * @return {boolean} The overview map is collapsed.
         * @api
         */
        getCollapsed() {
            return this.collapsed_;
        }
        /**
         * Return `true` if the overview map view can rotate, `false` otherwise.
         * @return {boolean} True if the control view can rotate.
         * @api
         */
        getRotateWithView() {
            return this.rotateWithView_;
        }
        /**
         * Set whether the overview map view should rotate with the main map view.
         * @param {boolean} rotateWithView True if the control view should rotate.
         * @api
         */
        setRotateWithView(rotateWithView) {
            if (this.rotateWithView_ === rotateWithView) {
                return;
            }
            this.rotateWithView_ = rotateWithView;
            if (this.getMap().getView().getRotation() !== 0) {
                if (this.rotateWithView_) {
                    this.handleRotationChanged_();
                }
                else {
                    this.ovmap_.getView().setRotation(0);
                }
                this.viewExtent_ = undefined;
                this.validateExtent_();
                this.updateBox_();
            }
        }
        /**
         * Return the overview map.
         * @return {import("../PluggableMap.js").default} Overview map.
         * @api
         */
        getOverviewMap() {
            return this.ovmap_;
        }
        /**
         * Update the overview map element.
         * @param {import("../MapEvent.js").default} mapEvent Map event.
         * @override
         */
        render(mapEvent) {
            this.validateExtent_();
            this.updateBox_();
        }
    }
    exports.default = OverviewMap;
});
define("node_modules/ol/src/control/ScaleLine", ["require", "exports", "node_modules/ol/src/control/Control", "node_modules/ol/src/proj/Units", "node_modules/ol/src/css", "node_modules/ol/src/proj", "node_modules/ol/src/asserts", "node_modules/ol/src/Object"], function (require, exports, Control_js_7, Units_js_8, css_js_9, proj_js_10, asserts_js_14, Object_js_16) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Units = void 0;
    /**
     * @type {string}
     */
    const UNITS_PROP = 'units';
    /**
     * Units for the scale line. Supported values are `'degrees'`, `'imperial'`,
     * `'nautical'`, `'metric'`, `'us'`.
     * @enum {string}
     */
    exports.Units = {
        DEGREES: 'degrees',
        IMPERIAL: 'imperial',
        NAUTICAL: 'nautical',
        METRIC: 'metric',
        US: 'us',
    };
    /**
     * @const
     * @type {Array<number>}
     */
    const LEADING_DIGITS = [1, 2, 5];
    /**
     * @const
     * @type {number}
     */
    const DEFAULT_DPI = 25.4 / 0.28;
    /**
     * @typedef {Object} Options
     * @property {string} [className='ol-scale-line'] CSS Class name.
     * @property {number} [minWidth=64] Minimum width in pixels at the OGC default dpi. The width will be
     * adjusted to match the dpi used.
     * @property {function(import("../MapEvent.js").default):void} [render] Function called when the control
     * should be re-rendered. This is called in a `requestAnimationFrame` callback.
     * @property {HTMLElement|string} [target] Specify a target if you want the control
     * to be rendered outside of the map's viewport.
     * @property {import("./ScaleLine.js").Units|string} [units='metric'] Units.
     * @property {boolean} [bar=false] Render scalebars instead of a line.
     * @property {number} [steps=4] Number of steps the scalebar should use. Use even numbers
     * for best results. Only applies when `bar` is `true`.
     * @property {boolean} [text=false] Render the text scale above of the scalebar. Only applies
     * when `bar` is `true`.
     * @property {number|undefined} [dpi=undefined] dpi of output device such as printer. Only applies
     * when `bar` is `true`. If undefined the OGC default screen pixel size of 0.28mm will be assumed.
     */
    /**
     * @classdesc
     * A control displaying rough y-axis distances, calculated for the center of the
     * viewport. For conformal projections (e.g. EPSG:3857, the default view
     * projection in OpenLayers), the scale is valid for all directions.
     * No scale line will be shown when the y-axis distance of a pixel at the
     * viewport center cannot be calculated in the view projection.
     * By default the scale line will show in the bottom left portion of the map,
     * but this can be changed by using the css selector `.ol-scale-line`.
     * When specifying `bar` as `true`, a scalebar will be rendered instead
     * of a scaleline.
     *
     * @api
     */
    class ScaleLine extends Control_js_7.default {
        /**
         * @param {Options=} opt_options Scale line options.
         */
        constructor(opt_options) {
            const options = opt_options ? opt_options : {};
            const className = options.className !== undefined
                ? options.className
                : options.bar
                    ? 'ol-scale-bar'
                    : 'ol-scale-line';
            super({
                element: document.createElement('div'),
                render: options.render,
                target: options.target,
            });
            /**
             * @private
             * @type {HTMLElement}
             */
            this.innerElement_ = document.createElement('div');
            this.innerElement_.className = className + '-inner';
            this.element.className = className + ' ' + css_js_9.CLASS_UNSELECTABLE;
            this.element.appendChild(this.innerElement_);
            /**
             * @private
             * @type {?import("../View.js").State}
             */
            this.viewState_ = null;
            /**
             * @private
             * @type {number}
             */
            this.minWidth_ = options.minWidth !== undefined ? options.minWidth : 64;
            /**
             * @private
             * @type {boolean}
             */
            this.renderedVisible_ = false;
            /**
             * @private
             * @type {number|undefined}
             */
            this.renderedWidth_ = undefined;
            /**
             * @private
             * @type {string}
             */
            this.renderedHTML_ = '';
            this.addEventListener(Object_js_16.getChangeEventType(UNITS_PROP), this.handleUnitsChanged_);
            this.setUnits(options.units || exports.Units.METRIC);
            /**
             * @private
             * @type {boolean}
             */
            this.scaleBar_ = options.bar || false;
            /**
             * @private
             * @type {number}
             */
            this.scaleBarSteps_ = options.steps || 4;
            /**
             * @private
             * @type {boolean}
             */
            this.scaleBarText_ = options.text || false;
            /**
             * @private
             * @type {number|undefined}
             */
            this.dpi_ = options.dpi || undefined;
        }
        /**
         * Return the units to use in the scale line.
         * @return {import("./ScaleLine.js").Units} The units
         * to use in the scale line.
         * @observable
         * @api
         */
        getUnits() {
            return this.get(UNITS_PROP);
        }
        /**
         * @private
         */
        handleUnitsChanged_() {
            this.updateElement_();
        }
        /**
         * Set the units to use in the scale line.
         * @param {import("./ScaleLine.js").Units} units The units to use in the scale line.
         * @observable
         * @api
         */
        setUnits(units) {
            this.set(UNITS_PROP, units);
        }
        /**
         * Specify the dpi of output device such as printer.
         * @param {number|undefined} dpi The dpi of output device.
         * @api
         */
        setDpi(dpi) {
            this.dpi_ = dpi;
        }
        /**
         * @private
         */
        updateElement_() {
            const viewState = this.viewState_;
            if (!viewState) {
                if (this.renderedVisible_) {
                    this.element.style.display = 'none';
                    this.renderedVisible_ = false;
                }
                return;
            }
            const center = viewState.center;
            const projection = viewState.projection;
            const units = this.getUnits();
            const pointResolutionUnits = units == exports.Units.DEGREES ? Units_js_8.default.DEGREES : Units_js_8.default.METERS;
            let pointResolution = proj_js_10.getPointResolution(projection, viewState.resolution, center, pointResolutionUnits);
            const minWidth = (this.minWidth_ * (this.dpi_ || DEFAULT_DPI)) / DEFAULT_DPI;
            let nominalCount = minWidth * pointResolution;
            let suffix = '';
            if (units == exports.Units.DEGREES) {
                const metersPerDegree = proj_js_10.METERS_PER_UNIT[Units_js_8.default.DEGREES];
                nominalCount *= metersPerDegree;
                if (nominalCount < metersPerDegree / 60) {
                    suffix = '\u2033'; // seconds
                    pointResolution *= 3600;
                }
                else if (nominalCount < metersPerDegree) {
                    suffix = '\u2032'; // minutes
                    pointResolution *= 60;
                }
                else {
                    suffix = '\u00b0'; // degrees
                }
            }
            else if (units == exports.Units.IMPERIAL) {
                if (nominalCount < 0.9144) {
                    suffix = 'in';
                    pointResolution /= 0.0254;
                }
                else if (nominalCount < 1609.344) {
                    suffix = 'ft';
                    pointResolution /= 0.3048;
                }
                else {
                    suffix = 'mi';
                    pointResolution /= 1609.344;
                }
            }
            else if (units == exports.Units.NAUTICAL) {
                pointResolution /= 1852;
                suffix = 'nm';
            }
            else if (units == exports.Units.METRIC) {
                if (nominalCount < 0.001) {
                    suffix = 'μm';
                    pointResolution *= 1000000;
                }
                else if (nominalCount < 1) {
                    suffix = 'mm';
                    pointResolution *= 1000;
                }
                else if (nominalCount < 1000) {
                    suffix = 'm';
                }
                else {
                    suffix = 'km';
                    pointResolution /= 1000;
                }
            }
            else if (units == exports.Units.US) {
                if (nominalCount < 0.9144) {
                    suffix = 'in';
                    pointResolution *= 39.37;
                }
                else if (nominalCount < 1609.344) {
                    suffix = 'ft';
                    pointResolution /= 0.30480061;
                }
                else {
                    suffix = 'mi';
                    pointResolution /= 1609.3472;
                }
            }
            else {
                asserts_js_14.assert(false, 33); // Invalid units
            }
            let i = 3 * Math.floor(Math.log(minWidth * pointResolution) / Math.log(10));
            let count, width, decimalCount;
            while (true) {
                decimalCount = Math.floor(i / 3);
                const decimal = Math.pow(10, decimalCount);
                count = LEADING_DIGITS[((i % 3) + 3) % 3] * decimal;
                width = Math.round(count / pointResolution);
                if (isNaN(width)) {
                    this.element.style.display = 'none';
                    this.renderedVisible_ = false;
                    return;
                }
                else if (width >= minWidth) {
                    break;
                }
                ++i;
            }
            let html;
            if (this.scaleBar_) {
                html = this.createScaleBar(width, count, suffix);
            }
            else {
                html = count.toFixed(decimalCount < 0 ? -decimalCount : 0) + ' ' + suffix;
            }
            if (this.renderedHTML_ != html) {
                this.innerElement_.innerHTML = html;
                this.renderedHTML_ = html;
            }
            if (this.renderedWidth_ != width) {
                this.innerElement_.style.width = width + 'px';
                this.renderedWidth_ = width;
            }
            if (!this.renderedVisible_) {
                this.element.style.display = '';
                this.renderedVisible_ = true;
            }
        }
        /**
         * @private
         * @param {number} width The current width of the scalebar.
         * @param {number} scale The current scale.
         * @param {string} suffix The suffix to append to the scale text.
         * @returns {string} The stringified HTML of the scalebar.
         */
        createScaleBar(width, scale, suffix) {
            const mapScale = '1 : ' + Math.round(this.getScaleForResolution()).toLocaleString();
            const scaleSteps = [];
            const stepWidth = width / this.scaleBarSteps_;
            let backgroundColor = '#ffffff';
            for (let i = 0; i < this.scaleBarSteps_; i++) {
                if (i === 0) {
                    // create the first marker at position 0
                    scaleSteps.push(this.createMarker('absolute', i));
                }
                scaleSteps.push('<div>' +
                    '<div ' +
                    'class="ol-scale-singlebar" ' +
                    'style=' +
                    '"width: ' +
                    stepWidth +
                    'px;' +
                    'background-color: ' +
                    backgroundColor +
                    ';"' +
                    '>' +
                    '</div>' +
                    this.createMarker('relative', i) +
                    /*render text every second step, except when only 2 steps */
                    (i % 2 === 0 || this.scaleBarSteps_ === 2
                        ? this.createStepText(i, width, false, scale, suffix)
                        : '') +
                    '</div>');
                if (i === this.scaleBarSteps_ - 1) {
                    {
                        /*render text at the end */
                    }
                    scaleSteps.push(this.createStepText(i + 1, width, true, scale, suffix));
                }
                // switch colors of steps between black and white
                if (backgroundColor === '#ffffff') {
                    backgroundColor = '#000000';
                }
                else {
                    backgroundColor = '#ffffff';
                }
            }
            let scaleBarText;
            if (this.scaleBarText_) {
                scaleBarText =
                    '<div ' +
                        'class="ol-scale-text" ' +
                        'style="width: ' +
                        width +
                        'px;">' +
                        mapScale +
                        '</div>';
            }
            else {
                scaleBarText = '';
            }
            const container = '<div ' +
                'style="display: flex;">' +
                scaleBarText +
                scaleSteps.join('') +
                '</div>';
            return container;
        }
        /**
         * Creates a marker at given position
         * @param {string} position - The position, absolute or relative
         * @param {number} i - The iterator
         * @returns {string} The stringified div containing the marker
         */
        createMarker(position, i) {
            const top = position === 'absolute' ? 3 : -10;
            return ('<div ' +
                'class="ol-scale-step-marker" ' +
                'style="position: ' +
                position +
                ';' +
                'top: ' +
                top +
                'px;"' +
                '></div>');
        }
        /**
         * Creates the label for a marker marker at given position
         * @param {number} i - The iterator
         * @param {number} width - The width the scalebar will currently use
         * @param {boolean} isLast - Flag indicating if we add the last step text
         * @param {number} scale - The current scale for the whole scalebar
         * @param {string} suffix - The suffix for the scale
         * @returns {string} The stringified div containing the step text
         */
        createStepText(i, width, isLast, scale, suffix) {
            const length = i === 0 ? 0 : Math.round((scale / this.scaleBarSteps_) * i * 100) / 100;
            const lengthString = length + (i === 0 ? '' : ' ' + suffix);
            const margin = i === 0 ? -3 : (width / this.scaleBarSteps_) * -1;
            const minWidth = i === 0 ? 0 : (width / this.scaleBarSteps_) * 2;
            return ('<div ' +
                'class="ol-scale-step-text" ' +
                'style="' +
                'margin-left: ' +
                margin +
                'px;' +
                'text-align: ' +
                (i === 0 ? 'left' : 'center') +
                '; ' +
                'min-width: ' +
                minWidth +
                'px;' +
                'left: ' +
                (isLast ? width + 'px' : 'unset') +
                ';"' +
                '>' +
                lengthString +
                '</div>');
        }
        /**
         * Returns the appropriate scale for the given resolution and units.
         * @return {number} The appropriate scale.
         */
        getScaleForResolution() {
            const resolution = proj_js_10.getPointResolution(this.viewState_.projection, this.viewState_.resolution, this.viewState_.center);
            const dpi = this.dpi_ || DEFAULT_DPI;
            const mpu = this.viewState_.projection.getMetersPerUnit();
            const inchesPerMeter = 39.37;
            return parseFloat(resolution.toString()) * mpu * inchesPerMeter * dpi;
        }
        /**
         * Update the scale line element.
         * @param {import("../MapEvent.js").default} mapEvent Map event.
         * @override
         */
        render(mapEvent) {
            const frameState = mapEvent.frameState;
            if (!frameState) {
                this.viewState_ = null;
            }
            else {
                this.viewState_ = frameState.viewState;
            }
            this.updateElement_();
        }
    }
    exports.default = ScaleLine;
});
/**
 * @module ol/control/ZoomSlider
 */
define("node_modules/ol/src/control/ZoomSlider", ["require", "exports", "node_modules/ol/src/control/Control", "node_modules/ol/src/events/EventType", "node_modules/ol/src/pointer/EventType", "node_modules/ol/src/css", "node_modules/ol/src/math", "node_modules/ol/src/easing", "node_modules/ol/src/events", "node_modules/ol/src/events/Event"], function (require, exports, Control_js_8, EventType_js_26, EventType_js_27, css_js_10, math_js_18, easing_js_7, events_js_15, Event_js_8) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * The enum for available directions.
     *
     * @enum {number}
     */
    const Direction = {
        VERTICAL: 0,
        HORIZONTAL: 1,
    };
    /**
     * @typedef {Object} Options
     * @property {string} [className='ol-zoomslider'] CSS class name.
     * @property {number} [duration=200] Animation duration in milliseconds.
     * @property {function(import("../MapEvent.js").default):void} [render] Function called when the control
     * should be re-rendered. This is called in a `requestAnimationFrame` callback.
     */
    /**
     * @classdesc
     * A slider type of control for zooming.
     *
     * Example:
     *
     *     map.addControl(new ZoomSlider());
     *
     * @api
     */
    class ZoomSlider extends Control_js_8.default {
        /**
         * @param {Options=} opt_options Zoom slider options.
         */
        constructor(opt_options) {
            const options = opt_options ? opt_options : {};
            super({
                element: document.createElement('div'),
                render: options.render,
            });
            /**
             * @type {!Array.<import("../events.js").EventsKey>}
             * @private
             */
            this.dragListenerKeys_ = [];
            /**
             * Will hold the current resolution of the view.
             *
             * @type {number|undefined}
             * @private
             */
            this.currentResolution_ = undefined;
            /**
             * The direction of the slider. Will be determined from actual display of the
             * container and defaults to Direction.VERTICAL.
             *
             * @type {Direction}
             * @private
             */
            this.direction_ = Direction.VERTICAL;
            /**
             * @type {boolean}
             * @private
             */
            this.dragging_;
            /**
             * @type {number}
             * @private
             */
            this.heightLimit_ = 0;
            /**
             * @type {number}
             * @private
             */
            this.widthLimit_ = 0;
            /**
             * @type {number|undefined}
             * @private
             */
            this.startX_;
            /**
             * @type {number|undefined}
             * @private
             */
            this.startY_;
            /**
             * The calculated thumb size (border box plus margins).  Set when initSlider_
             * is called.
             * @type {import("../size.js").Size}
             * @private
             */
            this.thumbSize_ = null;
            /**
             * Whether the slider is initialized.
             * @type {boolean}
             * @private
             */
            this.sliderInitialized_ = false;
            /**
             * @type {number}
             * @private
             */
            this.duration_ = options.duration !== undefined ? options.duration : 200;
            const className = options.className !== undefined ? options.className : 'ol-zoomslider';
            const thumbElement = document.createElement('button');
            thumbElement.setAttribute('type', 'button');
            thumbElement.className = className + '-thumb ' + css_js_10.CLASS_UNSELECTABLE;
            const containerElement = this.element;
            containerElement.className =
                className + ' ' + css_js_10.CLASS_UNSELECTABLE + ' ' + css_js_10.CLASS_CONTROL;
            containerElement.appendChild(thumbElement);
            containerElement.addEventListener(EventType_js_27.default.POINTERDOWN, this.handleDraggerStart_.bind(this), false);
            containerElement.addEventListener(EventType_js_27.default.POINTERMOVE, this.handleDraggerDrag_.bind(this), false);
            containerElement.addEventListener(EventType_js_27.default.POINTERUP, this.handleDraggerEnd_.bind(this), false);
            containerElement.addEventListener(EventType_js_26.default.CLICK, this.handleContainerClick_.bind(this), false);
            thumbElement.addEventListener(EventType_js_26.default.CLICK, Event_js_8.stopPropagation, false);
        }
        /**
         * Remove the control from its current map and attach it to the new map.
         * Subclasses may set up event handlers to get notified about changes to
         * the map here.
         * @param {import("../PluggableMap.js").default} map Map.
         * @api
         */
        setMap(map) {
            super.setMap(map);
            if (map) {
                map.render();
            }
        }
        /**
         * Initializes the slider element. This will determine and set this controls
         * direction_ and also constrain the dragging of the thumb to always be within
         * the bounds of the container.
         *
         * @return {boolean} Initialization successful
         * @private
         */
        initSlider_() {
            const container = this.element;
            const containerWidth = container.offsetWidth;
            const containerHeight = container.offsetHeight;
            if (containerWidth === 0 && containerHeight === 0) {
                return (this.sliderInitialized_ = false);
            }
            const thumb = /** @type {HTMLElement} */ (container.firstElementChild);
            const computedStyle = getComputedStyle(thumb);
            const thumbWidth = thumb.offsetWidth +
                parseFloat(computedStyle['marginRight']) +
                parseFloat(computedStyle['marginLeft']);
            const thumbHeight = thumb.offsetHeight +
                parseFloat(computedStyle['marginTop']) +
                parseFloat(computedStyle['marginBottom']);
            this.thumbSize_ = [thumbWidth, thumbHeight];
            if (containerWidth > containerHeight) {
                this.direction_ = Direction.HORIZONTAL;
                this.widthLimit_ = containerWidth - thumbWidth;
            }
            else {
                this.direction_ = Direction.VERTICAL;
                this.heightLimit_ = containerHeight - thumbHeight;
            }
            return (this.sliderInitialized_ = true);
        }
        /**
         * @param {PointerEvent} event The browser event to handle.
         * @private
         */
        handleContainerClick_(event) {
            const view = this.getMap().getView();
            const relativePosition = this.getRelativePosition_(event.offsetX - this.thumbSize_[0] / 2, event.offsetY - this.thumbSize_[1] / 2);
            const resolution = this.getResolutionForPosition_(relativePosition);
            const zoom = view.getConstrainedZoom(view.getZoomForResolution(resolution));
            view.animateInternal({
                zoom: zoom,
                duration: this.duration_,
                easing: easing_js_7.easeOut,
            });
        }
        /**
         * Handle dragger start events.
         * @param {PointerEvent} event The drag event.
         * @private
         */
        handleDraggerStart_(event) {
            if (!this.dragging_ && event.target === this.element.firstElementChild) {
                const element = /** @type {HTMLElement} */ (this.element
                    .firstElementChild);
                this.getMap().getView().beginInteraction();
                this.startX_ = event.clientX - parseFloat(element.style.left);
                this.startY_ = event.clientY - parseFloat(element.style.top);
                this.dragging_ = true;
                if (this.dragListenerKeys_.length === 0) {
                    const drag = this.handleDraggerDrag_;
                    const end = this.handleDraggerEnd_;
                    this.dragListenerKeys_.push(events_js_15.listen(document, EventType_js_27.default.POINTERMOVE, drag, this), events_js_15.listen(document, EventType_js_27.default.POINTERUP, end, this));
                }
            }
        }
        /**
         * Handle dragger drag events.
         *
         * @param {PointerEvent} event The drag event.
         * @private
         */
        handleDraggerDrag_(event) {
            if (this.dragging_) {
                const deltaX = event.clientX - this.startX_;
                const deltaY = event.clientY - this.startY_;
                const relativePosition = this.getRelativePosition_(deltaX, deltaY);
                this.currentResolution_ = this.getResolutionForPosition_(relativePosition);
                this.getMap().getView().setResolution(this.currentResolution_);
            }
        }
        /**
         * Handle dragger end events.
         * @param {PointerEvent} event The drag event.
         * @private
         */
        handleDraggerEnd_(event) {
            if (this.dragging_) {
                const view = this.getMap().getView();
                view.endInteraction();
                this.dragging_ = false;
                this.startX_ = undefined;
                this.startY_ = undefined;
                this.dragListenerKeys_.forEach(events_js_15.unlistenByKey);
                this.dragListenerKeys_.length = 0;
            }
        }
        /**
         * Positions the thumb inside its container according to the given resolution.
         *
         * @param {number} res The res.
         * @private
         */
        setThumbPosition_(res) {
            const position = this.getPositionForResolution_(res);
            const thumb = /** @type {HTMLElement} */ (this.element.firstElementChild);
            if (this.direction_ == Direction.HORIZONTAL) {
                thumb.style.left = this.widthLimit_ * position + 'px';
            }
            else {
                thumb.style.top = this.heightLimit_ * position + 'px';
            }
        }
        /**
         * Calculates the relative position of the thumb given x and y offsets.  The
         * relative position scales from 0 to 1.  The x and y offsets are assumed to be
         * in pixel units within the dragger limits.
         *
         * @param {number} x Pixel position relative to the left of the slider.
         * @param {number} y Pixel position relative to the top of the slider.
         * @return {number} The relative position of the thumb.
         * @private
         */
        getRelativePosition_(x, y) {
            let amount;
            if (this.direction_ === Direction.HORIZONTAL) {
                amount = x / this.widthLimit_;
            }
            else {
                amount = y / this.heightLimit_;
            }
            return math_js_18.clamp(amount, 0, 1);
        }
        /**
         * Calculates the corresponding resolution of the thumb given its relative
         * position (where 0 is the minimum and 1 is the maximum).
         *
         * @param {number} position The relative position of the thumb.
         * @return {number} The corresponding resolution.
         * @private
         */
        getResolutionForPosition_(position) {
            const fn = this.getMap().getView().getResolutionForValueFunction();
            return fn(1 - position);
        }
        /**
         * Determines the relative position of the slider for the given resolution.  A
         * relative position of 0 corresponds to the minimum view resolution.  A
         * relative position of 1 corresponds to the maximum view resolution.
         *
         * @param {number} res The resolution.
         * @return {number} The relative position value (between 0 and 1).
         * @private
         */
        getPositionForResolution_(res) {
            const fn = this.getMap().getView().getValueForResolutionFunction();
            return math_js_18.clamp(1 - fn(res), 0, 1);
        }
        /**
         * Update the zoomslider element.
         * @param {import("../MapEvent.js").default} mapEvent Map event.
         * @override
         */
        render(mapEvent) {
            if (!mapEvent.frameState) {
                return;
            }
            if (!this.sliderInitialized_ && !this.initSlider_()) {
                return;
            }
            const res = mapEvent.frameState.viewState.resolution;
            this.currentResolution_ = res;
            this.setThumbPosition_(res);
        }
    }
    exports.default = ZoomSlider;
});
define("node_modules/ol/src/control/ZoomToExtent", ["require", "exports", "node_modules/ol/src/control/Control", "node_modules/ol/src/events/EventType", "node_modules/ol/src/css", "node_modules/ol/src/geom/Polygon"], function (require, exports, Control_js_9, EventType_js_28, css_js_11, Polygon_js_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @typedef {Object} Options
     * @property {string} [className='ol-zoom-extent'] Class name.
     * @property {HTMLElement|string} [target] Specify a target if you want the control
     * to be rendered outside of the map's viewport.
     * @property {string|HTMLElement} [label='E'] Text label to use for the button.
     * Instead of text, also an element (e.g. a `span` element) can be used.
     * @property {string} [tipLabel='Fit to extent'] Text label to use for the button tip.
     * @property {import("../extent.js").Extent} [extent] The extent to zoom to. If undefined the validity
     * extent of the view projection is used.
     */
    /**
     * @classdesc
     * A button control which, when pressed, changes the map view to a specific
     * extent. To style this control use the css selector `.ol-zoom-extent`.
     *
     * @api
     */
    class ZoomToExtent extends Control_js_9.default {
        /**
         * @param {Options=} opt_options Options.
         */
        constructor(opt_options) {
            const options = opt_options ? opt_options : {};
            super({
                element: document.createElement('div'),
                target: options.target,
            });
            /**
             * @type {?import("../extent.js").Extent}
             * @protected
             */
            this.extent = options.extent ? options.extent : null;
            const className = options.className !== undefined ? options.className : 'ol-zoom-extent';
            const label = options.label !== undefined ? options.label : 'E';
            const tipLabel = options.tipLabel !== undefined ? options.tipLabel : 'Fit to extent';
            const button = document.createElement('button');
            button.setAttribute('type', 'button');
            button.title = tipLabel;
            button.appendChild(typeof label === 'string' ? document.createTextNode(label) : label);
            button.addEventListener(EventType_js_28.default.CLICK, this.handleClick_.bind(this), false);
            const cssClasses = className + ' ' + css_js_11.CLASS_UNSELECTABLE + ' ' + css_js_11.CLASS_CONTROL;
            const element = this.element;
            element.className = cssClasses;
            element.appendChild(button);
        }
        /**
         * @param {MouseEvent} event The event to handle
         * @private
         */
        handleClick_(event) {
            event.preventDefault();
            this.handleZoomToExtent();
        }
        /**
         * @protected
         */
        handleZoomToExtent() {
            const map = this.getMap();
            const view = map.getView();
            const extent = !this.extent
                ? view.getProjection().getExtent()
                : this.extent;
            view.fitInternal(Polygon_js_4.fromExtent(extent));
        }
    }
    exports.default = ZoomToExtent;
});
define("node_modules/ol/src/control", ["require", "exports", "node_modules/ol/src/control/Attribution", "node_modules/ol/src/Collection", "node_modules/ol/src/control/Rotate", "node_modules/ol/src/control/Zoom", "node_modules/ol/src/control/Attribution", "node_modules/ol/src/control/Control", "node_modules/ol/src/control/FullScreen", "node_modules/ol/src/control/MousePosition", "node_modules/ol/src/control/OverviewMap", "node_modules/ol/src/control/Rotate", "node_modules/ol/src/control/ScaleLine", "node_modules/ol/src/control/Zoom", "node_modules/ol/src/control/ZoomSlider", "node_modules/ol/src/control/ZoomToExtent"], function (require, exports, Attribution_js_1, Collection_js_3, Rotate_js_1, Zoom_js_1, Attribution_js_2, Control_js_10, FullScreen_js_1, MousePosition_js_1, OverviewMap_js_1, Rotate_js_2, ScaleLine_js_1, Zoom_js_2, ZoomSlider_js_1, ZoomToExtent_js_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaults = exports.ZoomToExtent = exports.ZoomSlider = exports.Zoom = exports.ScaleLine = exports.Rotate = exports.OverviewMap = exports.MousePosition = exports.FullScreen = exports.Control = exports.Attribution = void 0;
    Object.defineProperty(exports, "Attribution", { enumerable: true, get: function () { return Attribution_js_2.default; } });
    Object.defineProperty(exports, "Control", { enumerable: true, get: function () { return Control_js_10.default; } });
    Object.defineProperty(exports, "FullScreen", { enumerable: true, get: function () { return FullScreen_js_1.default; } });
    Object.defineProperty(exports, "MousePosition", { enumerable: true, get: function () { return MousePosition_js_1.default; } });
    Object.defineProperty(exports, "OverviewMap", { enumerable: true, get: function () { return OverviewMap_js_1.default; } });
    Object.defineProperty(exports, "Rotate", { enumerable: true, get: function () { return Rotate_js_2.default; } });
    Object.defineProperty(exports, "ScaleLine", { enumerable: true, get: function () { return ScaleLine_js_1.default; } });
    Object.defineProperty(exports, "Zoom", { enumerable: true, get: function () { return Zoom_js_2.default; } });
    Object.defineProperty(exports, "ZoomSlider", { enumerable: true, get: function () { return ZoomSlider_js_1.default; } });
    Object.defineProperty(exports, "ZoomToExtent", { enumerable: true, get: function () { return ZoomToExtent_js_1.default; } });
    /**
     * @typedef {Object} DefaultsOptions
     * @property {boolean} [attribution=true] Include
     * {@link module:ol/control/Attribution~Attribution}.
     * @property {import("./control/Attribution.js").Options} [attributionOptions]
     * Options for {@link module:ol/control/Attribution~Attribution}.
     * @property {boolean} [rotate=true] Include
     * {@link module:ol/control/Rotate~Rotate}.
     * @property {import("./control/Rotate.js").Options} [rotateOptions] Options
     * for {@link module:ol/control/Rotate~Rotate}.
     * @property {boolean} [zoom] Include {@link module:ol/control/Zoom~Zoom}.
     * @property {import("./control/Zoom.js").Options} [zoomOptions] Options for
     * {@link module:ol/control/Zoom~Zoom}.
     * @api
     */
    /**
     * Set of controls included in maps by default. Unless configured otherwise,
     * this returns a collection containing an instance of each of the following
     * controls:
     * * {@link module:ol/control/Zoom~Zoom}
     * * {@link module:ol/control/Rotate~Rotate}
     * * {@link module:ol/control/Attribution~Attribution}
     *
     * @param {DefaultsOptions=} opt_options
     * Defaults options.
     * @return {Collection<import("./control/Control.js").default>}
     * Controls.
     * @api
     */
    function defaults(opt_options) {
        const options = opt_options ? opt_options : {};
        const controls = new Collection_js_3.default();
        const zoomControl = options.zoom !== undefined ? options.zoom : true;
        if (zoomControl) {
            controls.push(new Zoom_js_1.default(options.zoomOptions));
        }
        const rotateControl = options.rotate !== undefined ? options.rotate : true;
        if (rotateControl) {
            controls.push(new Rotate_js_1.default(options.rotateOptions));
        }
        const attributionControl = options.attribution !== undefined ? options.attribution : true;
        if (attributionControl) {
            controls.push(new Attribution_js_1.default(options.attributionOptions));
        }
        return controls;
    }
    exports.defaults = defaults;
});
define("node_modules/ol/src/interaction/DoubleClickZoom", ["require", "exports", "node_modules/ol/src/interaction/Interaction", "node_modules/ol/src/MapBrowserEventType"], function (require, exports, Interaction_js_1, MapBrowserEventType_js_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @typedef {Object} Options
     * @property {number} [duration=250] Animation duration in milliseconds.
     * @property {number} [delta=1] The zoom delta applied on each double click.
     */
    /**
     * @classdesc
     * Allows the user to zoom by double-clicking on the map.
     * @api
     */
    class DoubleClickZoom extends Interaction_js_1.default {
        /**
         * @param {Options=} opt_options Options.
         */
        constructor(opt_options) {
            super();
            const options = opt_options ? opt_options : {};
            /**
             * @private
             * @type {number}
             */
            this.delta_ = options.delta ? options.delta : 1;
            /**
             * @private
             * @type {number}
             */
            this.duration_ = options.duration !== undefined ? options.duration : 250;
        }
        /**
         * Handles the {@link module:ol/MapBrowserEvent map browser event} (if it was a
         * doubleclick) and eventually zooms the map.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
         * @return {boolean} `false` to stop event propagation.
         */
        handleEvent(mapBrowserEvent) {
            let stopEvent = false;
            if (mapBrowserEvent.type == MapBrowserEventType_js_3.default.DBLCLICK) {
                const browserEvent = /** @type {MouseEvent} */ (mapBrowserEvent.originalEvent);
                const map = mapBrowserEvent.map;
                const anchor = mapBrowserEvent.coordinate;
                const delta = browserEvent.shiftKey ? -this.delta_ : this.delta_;
                const view = map.getView();
                Interaction_js_1.zoomByDelta(view, delta, anchor, this.duration_);
                mapBrowserEvent.preventDefault();
                stopEvent = true;
            }
            return !stopEvent;
        }
    }
    exports.default = DoubleClickZoom;
});
define("node_modules/ol/src/interaction/Pointer", ["require", "exports", "node_modules/ol/src/interaction/Interaction", "node_modules/ol/src/MapBrowserEventType", "node_modules/ol/src/obj"], function (require, exports, Interaction_js_2, MapBrowserEventType_js_4, obj_js_11) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.centroid = void 0;
    /**
     * @typedef {Object} Options
     * @property {function(import("../MapBrowserEvent.js").default):boolean} [handleDownEvent]
     * Function handling "down" events. If the function returns `true` then a drag
     * sequence is started.
     * @property {function(import("../MapBrowserEvent.js").default):void} [handleDragEvent]
     * Function handling "drag" events. This function is called on "move" events
     * during a drag sequence.
     * @property {function(import("../MapBrowserEvent.js").default):boolean} [handleEvent]
     * Method called by the map to notify the interaction that a browser event was
     * dispatched to the map. The function may return `false` to prevent the
     * propagation of the event to other interactions in the map's interactions
     * chain.
     * @property {function(import("../MapBrowserEvent.js").default):void} [handleMoveEvent]
     * Function handling "move" events. This function is called on "move" events.
     * This functions is also called during a drag sequence, so during a drag
     * sequence both the `handleDragEvent` function and this function are called.
     * If `handleDownEvent` is defined and it returns true this function will not
     * be called during a drag sequence.
     * @property {function(import("../MapBrowserEvent.js").default):boolean} [handleUpEvent]
     *  Function handling "up" events. If the function returns `false` then the
     * current drag sequence is stopped.
     * @property {function(boolean):boolean} [stopDown]
     * Should the down event be propagated to other interactions, or should be
     * stopped?
     */
    /**
     * @classdesc
     * Base class that calls user-defined functions on `down`, `move` and `up`
     * events. This class also manages "drag sequences".
     *
     * When the `handleDownEvent` user function returns `true` a drag sequence is
     * started. During a drag sequence the `handleDragEvent` user function is
     * called on `move` events. The drag sequence ends when the `handleUpEvent`
     * user function is called and returns `false`.
     * @api
     */
    class PointerInteraction extends Interaction_js_2.default {
        /**
         * @param {Options=} opt_options Options.
         */
        constructor(opt_options) {
            const options = opt_options ? opt_options : {};
            super(
            /** @type {import("./Interaction.js").InteractionOptions} */ (options));
            if (options.handleDownEvent) {
                this.handleDownEvent = options.handleDownEvent;
            }
            if (options.handleDragEvent) {
                this.handleDragEvent = options.handleDragEvent;
            }
            if (options.handleMoveEvent) {
                this.handleMoveEvent = options.handleMoveEvent;
            }
            if (options.handleUpEvent) {
                this.handleUpEvent = options.handleUpEvent;
            }
            if (options.stopDown) {
                this.stopDown = options.stopDown;
            }
            /**
             * @type {boolean}
             * @protected
             */
            this.handlingDownUpSequence = false;
            /**
             * @type {!Object<string, PointerEvent>}
             * @private
             */
            this.trackedPointers_ = {};
            /**
             * @type {Array<PointerEvent>}
             * @protected
             */
            this.targetPointers = [];
        }
        /**
         * Returns the current number of pointers involved in the interaction,
         * e.g. `2` when two fingers are used.
         * @return {number} The number of pointers.
         * @api
         */
        getPointerCount() {
            return this.targetPointers.length;
        }
        /**
         * Handle pointer down events.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
         * @return {boolean} If the event was consumed.
         * @protected
         */
        handleDownEvent(mapBrowserEvent) {
            return false;
        }
        /**
         * Handle pointer drag events.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
         * @protected
         */
        handleDragEvent(mapBrowserEvent) { }
        /**
         * Handles the {@link module:ol/MapBrowserEvent map browser event} and may call into
         * other functions, if event sequences like e.g. 'drag' or 'down-up' etc. are
         * detected.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
         * @return {boolean} `false` to stop event propagation.
         * @api
         */
        handleEvent(mapBrowserEvent) {
            if (!mapBrowserEvent.originalEvent) {
                return true;
            }
            let stopEvent = false;
            this.updateTrackedPointers_(mapBrowserEvent);
            if (this.handlingDownUpSequence) {
                if (mapBrowserEvent.type == MapBrowserEventType_js_4.default.POINTERDRAG) {
                    this.handleDragEvent(mapBrowserEvent);
                    // prevent page scrolling during dragging
                    mapBrowserEvent.preventDefault();
                }
                else if (mapBrowserEvent.type == MapBrowserEventType_js_4.default.POINTERUP) {
                    const handledUp = this.handleUpEvent(mapBrowserEvent);
                    this.handlingDownUpSequence =
                        handledUp && this.targetPointers.length > 0;
                }
            }
            else {
                if (mapBrowserEvent.type == MapBrowserEventType_js_4.default.POINTERDOWN) {
                    const handled = this.handleDownEvent(mapBrowserEvent);
                    this.handlingDownUpSequence = handled;
                    stopEvent = this.stopDown(handled);
                }
                else if (mapBrowserEvent.type == MapBrowserEventType_js_4.default.POINTERMOVE) {
                    this.handleMoveEvent(mapBrowserEvent);
                }
            }
            return !stopEvent;
        }
        /**
         * Handle pointer move events.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
         * @protected
         */
        handleMoveEvent(mapBrowserEvent) { }
        /**
         * Handle pointer up events.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
         * @return {boolean} If the event was consumed.
         * @protected
         */
        handleUpEvent(mapBrowserEvent) {
            return false;
        }
        /**
         * This function is used to determine if "down" events should be propagated
         * to other interactions or should be stopped.
         * @param {boolean} handled Was the event handled by the interaction?
         * @return {boolean} Should the `down` event be stopped?
         */
        stopDown(handled) {
            return handled;
        }
        /**
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
         * @private
         */
        updateTrackedPointers_(mapBrowserEvent) {
            if (isPointerDraggingEvent(mapBrowserEvent)) {
                const event = mapBrowserEvent.originalEvent;
                const id = event.pointerId.toString();
                if (mapBrowserEvent.type == MapBrowserEventType_js_4.default.POINTERUP) {
                    delete this.trackedPointers_[id];
                }
                else if (mapBrowserEvent.type == MapBrowserEventType_js_4.default.POINTERDOWN) {
                    this.trackedPointers_[id] = event;
                }
                else if (id in this.trackedPointers_) {
                    // update only when there was a pointerdown event for this pointer
                    this.trackedPointers_[id] = event;
                }
                this.targetPointers = obj_js_11.getValues(this.trackedPointers_);
            }
        }
    }
    /**
     * @param {Array<PointerEvent>} pointerEvents List of events.
     * @return {import("../pixel.js").Pixel} Centroid pixel.
     */
    function centroid(pointerEvents) {
        const length = pointerEvents.length;
        let clientX = 0;
        let clientY = 0;
        for (let i = 0; i < length; i++) {
            clientX += pointerEvents[i].clientX;
            clientY += pointerEvents[i].clientY;
        }
        return [clientX / length, clientY / length];
    }
    exports.centroid = centroid;
    /**
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
     * @return {boolean} Whether the event is a pointerdown, pointerdrag
     *     or pointerup event.
     */
    function isPointerDraggingEvent(mapBrowserEvent) {
        const type = mapBrowserEvent.type;
        return (type === MapBrowserEventType_js_4.default.POINTERDOWN ||
            type === MapBrowserEventType_js_4.default.POINTERDRAG ||
            type === MapBrowserEventType_js_4.default.POINTERUP);
    }
    exports.default = PointerInteraction;
});
define("node_modules/ol/src/events/condition", ["require", "exports", "node_modules/ol/src/MapBrowserEventType", "node_modules/ol/src/functions", "node_modules/ol/src/has", "node_modules/ol/src/asserts"], function (require, exports, MapBrowserEventType_js_5, functions_js_7, has_js_7, asserts_js_15) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.primaryAction = exports.penOnly = exports.touchOnly = exports.mouseOnly = exports.targetNotEditable = exports.shiftKeyOnly = exports.platformModifierKeyOnly = exports.noModifierKeys = exports.doubleClick = exports.singleClick = exports.pointerMove = exports.never = exports.mouseActionButton = exports.click = exports.always = exports.focusWithTabindex = exports.focus = exports.altShiftKeysOnly = exports.altKeyOnly = exports.all = void 0;
    /**
     * A function that takes an {@link module:ol/MapBrowserEvent} and returns a
     * `{boolean}`. If the condition is met, true should be returned.
     *
     * @typedef {function(this: ?, import("../MapBrowserEvent.js").default): boolean} Condition
     */
    /**
     * Creates a condition function that passes when all provided conditions pass.
     * @param {...Condition} var_args Conditions to check.
     * @return {Condition} Condition function.
     */
    function all(var_args) {
        const conditions = arguments;
        /**
         * @param {import("../MapBrowserEvent.js").default} event Event.
         * @return {boolean} All conditions passed.
         */
        return function (event) {
            let pass = true;
            for (let i = 0, ii = conditions.length; i < ii; ++i) {
                pass = pass && conditions[i](event);
                if (!pass) {
                    break;
                }
            }
            return pass;
        };
    }
    exports.all = all;
    /**
     * Return `true` if only the alt-key is pressed, `false` otherwise (e.g. when
     * additionally the shift-key is pressed).
     *
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
     * @return {boolean} True if only the alt key is pressed.
     * @api
     */
    const altKeyOnly = function (mapBrowserEvent) {
        const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (mapBrowserEvent.originalEvent);
        return (originalEvent.altKey &&
            !(originalEvent.metaKey || originalEvent.ctrlKey) &&
            !originalEvent.shiftKey);
    };
    exports.altKeyOnly = altKeyOnly;
    /**
     * Return `true` if only the alt-key and shift-key is pressed, `false` otherwise
     * (e.g. when additionally the platform-modifier-key is pressed).
     *
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
     * @return {boolean} True if only the alt and shift keys are pressed.
     * @api
     */
    const altShiftKeysOnly = function (mapBrowserEvent) {
        const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (mapBrowserEvent.originalEvent);
        return (originalEvent.altKey &&
            !(originalEvent.metaKey || originalEvent.ctrlKey) &&
            originalEvent.shiftKey);
    };
    exports.altShiftKeysOnly = altShiftKeysOnly;
    /**
     * Return `true` if the map has the focus. This condition requires a map target
     * element with a `tabindex` attribute, e.g. `<div id="map" tabindex="1">`.
     *
     * @param {import("../MapBrowserEvent.js").default} event Map browser event.
     * @return {boolean} The map has the focus.
     * @api
     */
    const focus = function (event) {
        return event.target.getTargetElement().contains(document.activeElement);
    };
    exports.focus = focus;
    /**
     * Return `true` if the map has the focus or no 'tabindex' attribute set.
     *
     * @param {import("../MapBrowserEvent.js").default} event Map browser event.
     * @return {boolean} The map container has the focus or no 'tabindex' attribute.
     */
    const focusWithTabindex = function (event) {
        return event.map.getTargetElement().hasAttribute('tabindex')
            ? exports.focus(event)
            : true;
    };
    exports.focusWithTabindex = focusWithTabindex;
    /**
     * Return always true.
     *
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
     * @return {boolean} True.
     * @api
     */
    exports.always = functions_js_7.TRUE;
    /**
     * Return `true` if the event is a `click` event, `false` otherwise.
     *
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
     * @return {boolean} True if the event is a map `click` event.
     * @api
     */
    const click = function (mapBrowserEvent) {
        return mapBrowserEvent.type == MapBrowserEventType_js_5.default.CLICK;
    };
    exports.click = click;
    /**
     * Return `true` if the event has an "action"-producing mouse button.
     *
     * By definition, this includes left-click on windows/linux, and left-click
     * without the ctrl key on Macs.
     *
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
     * @return {boolean} The result.
     */
    const mouseActionButton = function (mapBrowserEvent) {
        const originalEvent = /** @type {MouseEvent} */ (mapBrowserEvent.originalEvent);
        return originalEvent.button == 0 && !(has_js_7.WEBKIT && has_js_7.MAC && originalEvent.ctrlKey);
    };
    exports.mouseActionButton = mouseActionButton;
    /**
     * Return always false.
     *
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
     * @return {boolean} False.
     * @api
     */
    exports.never = functions_js_7.FALSE;
    /**
     * Return `true` if the browser event is a `pointermove` event, `false`
     * otherwise.
     *
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
     * @return {boolean} True if the browser event is a `pointermove` event.
     * @api
     */
    const pointerMove = function (mapBrowserEvent) {
        return mapBrowserEvent.type == 'pointermove';
    };
    exports.pointerMove = pointerMove;
    /**
     * Return `true` if the event is a map `singleclick` event, `false` otherwise.
     *
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
     * @return {boolean} True if the event is a map `singleclick` event.
     * @api
     */
    const singleClick = function (mapBrowserEvent) {
        return mapBrowserEvent.type == MapBrowserEventType_js_5.default.SINGLECLICK;
    };
    exports.singleClick = singleClick;
    /**
     * Return `true` if the event is a map `dblclick` event, `false` otherwise.
     *
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
     * @return {boolean} True if the event is a map `dblclick` event.
     * @api
     */
    const doubleClick = function (mapBrowserEvent) {
        return mapBrowserEvent.type == MapBrowserEventType_js_5.default.DBLCLICK;
    };
    exports.doubleClick = doubleClick;
    /**
     * Return `true` if no modifier key (alt-, shift- or platform-modifier-key) is
     * pressed.
     *
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
     * @return {boolean} True only if there no modifier keys are pressed.
     * @api
     */
    const noModifierKeys = function (mapBrowserEvent) {
        const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (mapBrowserEvent.originalEvent);
        return (!originalEvent.altKey &&
            !(originalEvent.metaKey || originalEvent.ctrlKey) &&
            !originalEvent.shiftKey);
    };
    exports.noModifierKeys = noModifierKeys;
    /**
     * Return `true` if only the platform-modifier-key (the meta-key on Mac,
     * ctrl-key otherwise) is pressed, `false` otherwise (e.g. when additionally
     * the shift-key is pressed).
     *
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
     * @return {boolean} True if only the platform modifier key is pressed.
     * @api
     */
    const platformModifierKeyOnly = function (mapBrowserEvent) {
        const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (mapBrowserEvent.originalEvent);
        return (!originalEvent.altKey &&
            (has_js_7.MAC ? originalEvent.metaKey : originalEvent.ctrlKey) &&
            !originalEvent.shiftKey);
    };
    exports.platformModifierKeyOnly = platformModifierKeyOnly;
    /**
     * Return `true` if only the shift-key is pressed, `false` otherwise (e.g. when
     * additionally the alt-key is pressed).
     *
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
     * @return {boolean} True if only the shift key is pressed.
     * @api
     */
    const shiftKeyOnly = function (mapBrowserEvent) {
        const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (mapBrowserEvent.originalEvent);
        return (!originalEvent.altKey &&
            !(originalEvent.metaKey || originalEvent.ctrlKey) &&
            originalEvent.shiftKey);
    };
    exports.shiftKeyOnly = shiftKeyOnly;
    /**
     * Return `true` if the target element is not editable, i.e. not a `<input>`-,
     * `<select>`- or `<textarea>`-element, `false` otherwise.
     *
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
     * @return {boolean} True only if the target element is not editable.
     * @api
     */
    const targetNotEditable = function (mapBrowserEvent) {
        const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (mapBrowserEvent.originalEvent);
        const tagName = /** @type {Element} */ (originalEvent.target).tagName;
        return tagName !== 'INPUT' && tagName !== 'SELECT' && tagName !== 'TEXTAREA';
    };
    exports.targetNotEditable = targetNotEditable;
    /**
     * Return `true` if the event originates from a mouse device.
     *
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
     * @return {boolean} True if the event originates from a mouse device.
     * @api
     */
    const mouseOnly = function (mapBrowserEvent) {
        const pointerEvent = /** @type {import("../MapBrowserEvent").default} */ (mapBrowserEvent)
            .originalEvent;
        asserts_js_15.assert(pointerEvent !== undefined, 56); // mapBrowserEvent must originate from a pointer event
        // see http://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType
        return pointerEvent.pointerType == 'mouse';
    };
    exports.mouseOnly = mouseOnly;
    /**
     * Return `true` if the event originates from a touchable device.
     *
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
     * @return {boolean} True if the event originates from a touchable device.
     * @api
     */
    const touchOnly = function (mapBrowserEvent) {
        const pointerEvt = /** @type {import("../MapBrowserEvent").default} */ (mapBrowserEvent)
            .originalEvent;
        asserts_js_15.assert(pointerEvt !== undefined, 56); // mapBrowserEvent must originate from a pointer event
        // see http://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType
        return pointerEvt.pointerType === 'touch';
    };
    exports.touchOnly = touchOnly;
    /**
     * Return `true` if the event originates from a digital pen.
     *
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
     * @return {boolean} True if the event originates from a digital pen.
     * @api
     */
    const penOnly = function (mapBrowserEvent) {
        const pointerEvt = /** @type {import("../MapBrowserEvent").default} */ (mapBrowserEvent)
            .originalEvent;
        asserts_js_15.assert(pointerEvt !== undefined, 56); // mapBrowserEvent must originate from a pointer event
        // see http://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType
        return pointerEvt.pointerType === 'pen';
    };
    exports.penOnly = penOnly;
    /**
     * Return `true` if the event originates from a primary pointer in
     * contact with the surface or if the left mouse button is pressed.
     * See http://www.w3.org/TR/pointerevents/#button-states.
     *
     * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
     * @return {boolean} True if the event originates from a primary pointer.
     * @api
     */
    const primaryAction = function (mapBrowserEvent) {
        const pointerEvent = /** @type {import("../MapBrowserEvent").default} */ (mapBrowserEvent)
            .originalEvent;
        asserts_js_15.assert(pointerEvent !== undefined, 56); // mapBrowserEvent must originate from a pointer event
        return pointerEvent.isPrimary && pointerEvent.button === 0;
    };
    exports.primaryAction = primaryAction;
});
/**
 * @module ol/Kinetic
 */
define("node_modules/ol/src/Kinetic", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @classdesc
     * Implementation of inertial deceleration for map movement.
     *
     * @api
     */
    class Kinetic {
        /**
         * @param {number} decay Rate of decay (must be negative).
         * @param {number} minVelocity Minimum velocity (pixels/millisecond).
         * @param {number} delay Delay to consider to calculate the kinetic
         *     initial values (milliseconds).
         */
        constructor(decay, minVelocity, delay) {
            /**
             * @private
             * @type {number}
             */
            this.decay_ = decay;
            /**
             * @private
             * @type {number}
             */
            this.minVelocity_ = minVelocity;
            /**
             * @private
             * @type {number}
             */
            this.delay_ = delay;
            /**
             * @private
             * @type {Array<number>}
             */
            this.points_ = [];
            /**
             * @private
             * @type {number}
             */
            this.angle_ = 0;
            /**
             * @private
             * @type {number}
             */
            this.initialVelocity_ = 0;
        }
        /**
         * FIXME empty description for jsdoc
         */
        begin() {
            this.points_.length = 0;
            this.angle_ = 0;
            this.initialVelocity_ = 0;
        }
        /**
         * @param {number} x X.
         * @param {number} y Y.
         */
        update(x, y) {
            this.points_.push(x, y, Date.now());
        }
        /**
         * @return {boolean} Whether we should do kinetic animation.
         */
        end() {
            if (this.points_.length < 6) {
                // at least 2 points are required (i.e. there must be at least 6 elements
                // in the array)
                return false;
            }
            const delay = Date.now() - this.delay_;
            const lastIndex = this.points_.length - 3;
            if (this.points_[lastIndex + 2] < delay) {
                // the last tracked point is too old, which means that the user stopped
                // panning before releasing the map
                return false;
            }
            // get the first point which still falls into the delay time
            let firstIndex = lastIndex - 3;
            while (firstIndex > 0 && this.points_[firstIndex + 2] > delay) {
                firstIndex -= 3;
            }
            const duration = this.points_[lastIndex + 2] - this.points_[firstIndex + 2];
            // we don't want a duration of 0 (divide by zero)
            // we also make sure the user panned for a duration of at least one frame
            // (1/60s) to compute sane displacement values
            if (duration < 1000 / 60) {
                return false;
            }
            const dx = this.points_[lastIndex] - this.points_[firstIndex];
            const dy = this.points_[lastIndex + 1] - this.points_[firstIndex + 1];
            this.angle_ = Math.atan2(dy, dx);
            this.initialVelocity_ = Math.sqrt(dx * dx + dy * dy) / duration;
            return this.initialVelocity_ > this.minVelocity_;
        }
        /**
         * @return {number} Total distance travelled (pixels).
         */
        getDistance() {
            return (this.minVelocity_ - this.initialVelocity_) / this.decay_;
        }
        /**
         * @return {number} Angle of the kinetic panning animation (radians).
         */
        getAngle() {
            return this.angle_;
        }
    }
    exports.default = Kinetic;
});
define("node_modules/ol/src/interaction/DragPan", ["require", "exports", "node_modules/ol/src/interaction/Pointer", "node_modules/ol/src/functions", "node_modules/ol/src/events/condition", "node_modules/ol/src/easing", "node_modules/ol/src/coordinate"], function (require, exports, Pointer_js_1, functions_js_8, condition_js_1, easing_js_8, coordinate_js_5) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @typedef {Object} Options
     * @property {import("../events/condition.js").Condition} [condition] A function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean
     * to indicate whether that event should be handled.
     * Default is {@link module:ol/events/condition~noModifierKeys} and {@link module:ol/events/condition~primaryAction}.
     * @property {boolean} [onFocusOnly=false] When the map's target has a `tabindex` attribute set,
     * the interaction will only handle events when the map has the focus.
     * @property {import("../Kinetic.js").default} [kinetic] Kinetic inertia to apply to the pan.
     */
    /**
     * @classdesc
     * Allows the user to pan the map by dragging the map.
     * @api
     */
    class DragPan extends Pointer_js_1.default {
        /**
         * @param {Options=} opt_options Options.
         */
        constructor(opt_options) {
            super({
                stopDown: functions_js_8.FALSE,
            });
            const options = opt_options ? opt_options : {};
            /**
             * @private
             * @type {import("../Kinetic.js").default|undefined}
             */
            this.kinetic_ = options.kinetic;
            /**
             * @type {import("../pixel.js").Pixel}
             */
            this.lastCentroid = null;
            /**
             * @type {number}
             */
            this.lastPointersCount_;
            /**
             * @type {boolean}
             */
            this.panning_ = false;
            const condition = options.condition
                ? options.condition
                : condition_js_1.all(condition_js_1.noModifierKeys, condition_js_1.primaryAction);
            /**
             * @private
             * @type {import("../events/condition.js").Condition}
             */
            this.condition_ = options.onFocusOnly
                ? condition_js_1.all(condition_js_1.focusWithTabindex, condition)
                : condition;
            /**
             * @private
             * @type {boolean}
             */
            this.noKinetic_ = false;
        }
        /**
         * Handle pointer drag events.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
         */
        handleDragEvent(mapBrowserEvent) {
            if (!this.panning_) {
                this.panning_ = true;
                this.getMap().getView().beginInteraction();
            }
            const targetPointers = this.targetPointers;
            const centroid = Pointer_js_1.centroid(targetPointers);
            if (targetPointers.length == this.lastPointersCount_) {
                if (this.kinetic_) {
                    this.kinetic_.update(centroid[0], centroid[1]);
                }
                if (this.lastCentroid) {
                    const delta = [
                        this.lastCentroid[0] - centroid[0],
                        centroid[1] - this.lastCentroid[1],
                    ];
                    const map = mapBrowserEvent.map;
                    const view = map.getView();
                    coordinate_js_5.scale(delta, view.getResolution());
                    coordinate_js_5.rotate(delta, view.getRotation());
                    view.adjustCenterInternal(delta);
                }
            }
            else if (this.kinetic_) {
                // reset so we don't overestimate the kinetic energy after
                // after one finger down, tiny drag, second finger down
                this.kinetic_.begin();
            }
            this.lastCentroid = centroid;
            this.lastPointersCount_ = targetPointers.length;
            mapBrowserEvent.originalEvent.preventDefault();
        }
        /**
         * Handle pointer up events.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
         * @return {boolean} If the event was consumed.
         */
        handleUpEvent(mapBrowserEvent) {
            const map = mapBrowserEvent.map;
            const view = map.getView();
            if (this.targetPointers.length === 0) {
                if (!this.noKinetic_ && this.kinetic_ && this.kinetic_.end()) {
                    const distance = this.kinetic_.getDistance();
                    const angle = this.kinetic_.getAngle();
                    const center = view.getCenterInternal();
                    const centerpx = map.getPixelFromCoordinateInternal(center);
                    const dest = map.getCoordinateFromPixelInternal([
                        centerpx[0] - distance * Math.cos(angle),
                        centerpx[1] - distance * Math.sin(angle),
                    ]);
                    view.animateInternal({
                        center: view.getConstrainedCenter(dest),
                        duration: 500,
                        easing: easing_js_8.easeOut,
                    });
                }
                if (this.panning_) {
                    this.panning_ = false;
                    view.endInteraction();
                }
                return false;
            }
            else {
                if (this.kinetic_) {
                    // reset so we don't overestimate the kinetic energy after
                    // after one finger up, tiny drag, second finger up
                    this.kinetic_.begin();
                }
                this.lastCentroid = null;
                return true;
            }
        }
        /**
         * Handle pointer down events.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
         * @return {boolean} If the event was consumed.
         */
        handleDownEvent(mapBrowserEvent) {
            if (this.targetPointers.length > 0 && this.condition_(mapBrowserEvent)) {
                const map = mapBrowserEvent.map;
                const view = map.getView();
                this.lastCentroid = null;
                // stop any current animation
                if (view.getAnimating()) {
                    view.cancelAnimations();
                }
                if (this.kinetic_) {
                    this.kinetic_.begin();
                }
                // No kinetic as soon as more than one pointer on the screen is
                // detected. This is to prevent nasty pans after pinch.
                this.noKinetic_ = this.targetPointers.length > 1;
                return true;
            }
            else {
                return false;
            }
        }
    }
    exports.default = DragPan;
});
define("node_modules/ol/src/interaction/DragRotate", ["require", "exports", "node_modules/ol/src/interaction/Pointer", "node_modules/ol/src/functions", "node_modules/ol/src/events/condition", "node_modules/ol/src/rotationconstraint"], function (require, exports, Pointer_js_2, functions_js_9, condition_js_2, rotationconstraint_js_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @typedef {Object} Options
     * @property {import("../events/condition.js").Condition} [condition] A function that takes an
     * {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean
     * to indicate whether that event should be handled.
     * Default is {@link module:ol/events/condition~altShiftKeysOnly}.
     * @property {number} [duration=250] Animation duration in milliseconds.
     */
    /**
     * @classdesc
     * Allows the user to rotate the map by clicking and dragging on the map,
     * normally combined with an {@link module:ol/events/condition} that limits
     * it to when the alt and shift keys are held down.
     *
     * This interaction is only supported for mouse devices.
     * @api
     */
    class DragRotate extends Pointer_js_2.default {
        /**
         * @param {Options=} opt_options Options.
         */
        constructor(opt_options) {
            const options = opt_options ? opt_options : {};
            super({
                stopDown: functions_js_9.FALSE,
            });
            /**
             * @private
             * @type {import("../events/condition.js").Condition}
             */
            this.condition_ = options.condition ? options.condition : condition_js_2.altShiftKeysOnly;
            /**
             * @private
             * @type {number|undefined}
             */
            this.lastAngle_ = undefined;
            /**
             * @private
             * @type {number}
             */
            this.duration_ = options.duration !== undefined ? options.duration : 250;
        }
        /**
         * Handle pointer drag events.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
         */
        handleDragEvent(mapBrowserEvent) {
            if (!condition_js_2.mouseOnly(mapBrowserEvent)) {
                return;
            }
            const map = mapBrowserEvent.map;
            const view = map.getView();
            if (view.getConstraints().rotation === rotationconstraint_js_2.disable) {
                return;
            }
            const size = map.getSize();
            const offset = mapBrowserEvent.pixel;
            const theta = Math.atan2(size[1] / 2 - offset[1], offset[0] - size[0] / 2);
            if (this.lastAngle_ !== undefined) {
                const delta = theta - this.lastAngle_;
                view.adjustRotationInternal(-delta);
            }
            this.lastAngle_ = theta;
        }
        /**
         * Handle pointer up events.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
         * @return {boolean} If the event was consumed.
         */
        handleUpEvent(mapBrowserEvent) {
            if (!condition_js_2.mouseOnly(mapBrowserEvent)) {
                return true;
            }
            const map = mapBrowserEvent.map;
            const view = map.getView();
            view.endInteraction(this.duration_);
            return false;
        }
        /**
         * Handle pointer down events.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
         * @return {boolean} If the event was consumed.
         */
        handleDownEvent(mapBrowserEvent) {
            if (!condition_js_2.mouseOnly(mapBrowserEvent)) {
                return false;
            }
            if (condition_js_2.mouseActionButton(mapBrowserEvent) &&
                this.condition_(mapBrowserEvent)) {
                const map = mapBrowserEvent.map;
                map.getView().beginInteraction();
                this.lastAngle_ = undefined;
                return true;
            }
            else {
                return false;
            }
        }
    }
    exports.default = DragRotate;
});
/**
 * @module ol/render/Box
 */
define("node_modules/ol/src/render/Box", ["require", "exports", "node_modules/ol/src/Disposable", "node_modules/ol/src/geom/Polygon"], function (require, exports, Disposable_js_3, Polygon_js_5) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    class RenderBox extends Disposable_js_3.default {
        /**
         * @param {string} className CSS class name.
         */
        constructor(className) {
            super();
            /**
             * @type {import("../geom/Polygon.js").default}
             * @private
             */
            this.geometry_ = null;
            /**
             * @type {HTMLDivElement}
             * @private
             */
            this.element_ = document.createElement('div');
            this.element_.style.position = 'absolute';
            this.element_.style.pointerEvents = 'auto';
            this.element_.className = 'ol-box ' + className;
            /**
             * @private
             * @type {import("../PluggableMap.js").default}
             */
            this.map_ = null;
            /**
             * @private
             * @type {import("../pixel.js").Pixel}
             */
            this.startPixel_ = null;
            /**
             * @private
             * @type {import("../pixel.js").Pixel}
             */
            this.endPixel_ = null;
        }
        /**
         * Clean up.
         */
        disposeInternal() {
            this.setMap(null);
        }
        /**
         * @private
         */
        render_() {
            const startPixel = this.startPixel_;
            const endPixel = this.endPixel_;
            const px = 'px';
            const style = this.element_.style;
            style.left = Math.min(startPixel[0], endPixel[0]) + px;
            style.top = Math.min(startPixel[1], endPixel[1]) + px;
            style.width = Math.abs(endPixel[0] - startPixel[0]) + px;
            style.height = Math.abs(endPixel[1] - startPixel[1]) + px;
        }
        /**
         * @param {import("../PluggableMap.js").default} map Map.
         */
        setMap(map) {
            if (this.map_) {
                this.map_.getOverlayContainer().removeChild(this.element_);
                const style = this.element_.style;
                style.left = 'inherit';
                style.top = 'inherit';
                style.width = 'inherit';
                style.height = 'inherit';
            }
            this.map_ = map;
            if (this.map_) {
                this.map_.getOverlayContainer().appendChild(this.element_);
            }
        }
        /**
         * @param {import("../pixel.js").Pixel} startPixel Start pixel.
         * @param {import("../pixel.js").Pixel} endPixel End pixel.
         */
        setPixels(startPixel, endPixel) {
            this.startPixel_ = startPixel;
            this.endPixel_ = endPixel;
            this.createOrUpdateGeometry();
            this.render_();
        }
        /**
         * Creates or updates the cached geometry.
         */
        createOrUpdateGeometry() {
            const startPixel = this.startPixel_;
            const endPixel = this.endPixel_;
            const pixels = [
                startPixel,
                [startPixel[0], endPixel[1]],
                endPixel,
                [endPixel[0], startPixel[1]],
            ];
            const coordinates = pixels.map(this.map_.getCoordinateFromPixelInternal, this.map_);
            // close the polygon
            coordinates[4] = coordinates[0].slice();
            if (!this.geometry_) {
                this.geometry_ = new Polygon_js_5.default([coordinates]);
            }
            else {
                this.geometry_.setCoordinates([coordinates]);
            }
        }
        /**
         * @return {import("../geom/Polygon.js").default} Geometry.
         */
        getGeometry() {
            return this.geometry_;
        }
    }
    exports.default = RenderBox;
});
define("node_modules/ol/src/interaction/DragBox", ["require", "exports", "node_modules/ol/src/events/Event", "node_modules/ol/src/interaction/Pointer", "node_modules/ol/src/render/Box", "node_modules/ol/src/events/condition"], function (require, exports, Event_js_9, Pointer_js_3, Box_js_1, condition_js_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * A function that takes a {@link module:ol/MapBrowserEvent} and two
     * {@link module:ol/pixel~Pixel}s and returns a `{boolean}`. If the condition is met,
     * true should be returned.
     * @typedef {function(this: ?, import("../MapBrowserEvent.js").default, import("../pixel.js").Pixel, import("../pixel.js").Pixel):boolean} EndCondition
     */
    /**
     * @typedef {Object} Options
     * @property {string} [className='ol-dragbox'] CSS class name for styling the box.
     * @property {import("../events/condition.js").Condition} [condition] A function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean
     * to indicate whether that event should be handled.
     * Default is {@link ol/events/condition~mouseActionButton}.
     * @property {number} [minArea=64] The minimum area of the box in pixel, this value is used by the default
     * `boxEndCondition` function.
     * @property {EndCondition} [boxEndCondition] A function that takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and two
     * {@link module:ol/pixel~Pixel}s to indicate whether a `boxend` event should be fired.
     * Default is `true` if the area of the box is bigger than the `minArea` option.
     * @property {function(this:DragBox, import("../MapBrowserEvent.js").default):void} [onBoxEnd] Code to execute just
     * before `boxend` is fired.
     */
    /**
     * @enum {string}
     */
    const DragBoxEventType = {
        /**
         * Triggered upon drag box start.
         * @event DragBoxEvent#boxstart
         * @api
         */
        BOXSTART: 'boxstart',
        /**
         * Triggered on drag when box is active.
         * @event DragBoxEvent#boxdrag
         * @api
         */
        BOXDRAG: 'boxdrag',
        /**
         * Triggered upon drag box end.
         * @event DragBoxEvent#boxend
         * @api
         */
        BOXEND: 'boxend',
    };
    /**
     * @classdesc
     * Events emitted by {@link module:ol/interaction/DragBox~DragBox} instances are instances of
     * this type.
     */
    class DragBoxEvent extends Event_js_9.default {
        /**
         * @param {string} type The event type.
         * @param {import("../coordinate.js").Coordinate} coordinate The event coordinate.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Originating event.
         */
        constructor(type, coordinate, mapBrowserEvent) {
            super(type);
            /**
             * The coordinate of the drag event.
             * @const
             * @type {import("../coordinate.js").Coordinate}
             * @api
             */
            this.coordinate = coordinate;
            /**
             * @const
             * @type {import("../MapBrowserEvent.js").default}
             * @api
             */
            this.mapBrowserEvent = mapBrowserEvent;
        }
    }
    /**
     * @classdesc
     * Allows the user to draw a vector box by clicking and dragging on the map,
     * normally combined with an {@link module:ol/events/condition} that limits
     * it to when the shift or other key is held down. This is used, for example,
     * for zooming to a specific area of the map
     * (see {@link module:ol/interaction/DragZoom~DragZoom} and
     * {@link module:ol/interaction/DragRotateAndZoom}).
     *
     * @fires DragBoxEvent
     * @api
     */
    class DragBox extends Pointer_js_3.default {
        /**
         * @param {Options=} opt_options Options.
         */
        constructor(opt_options) {
            super();
            const options = opt_options ? opt_options : {};
            /**
             * @type {import("../render/Box.js").default}
             * @private
             */
            this.box_ = new Box_js_1.default(options.className || 'ol-dragbox');
            /**
             * @type {number}
             * @private
             */
            this.minArea_ = options.minArea !== undefined ? options.minArea : 64;
            if (options.onBoxEnd) {
                this.onBoxEnd = options.onBoxEnd;
            }
            /**
             * @type {import("../pixel.js").Pixel}
             * @private
             */
            this.startPixel_ = null;
            /**
             * @private
             * @type {import("../events/condition.js").Condition}
             */
            this.condition_ = options.condition ? options.condition : condition_js_3.mouseActionButton;
            /**
             * @private
             * @type {EndCondition}
             */
            this.boxEndCondition_ = options.boxEndCondition
                ? options.boxEndCondition
                : this.defaultBoxEndCondition;
        }
        /**
         * The default condition for determining whether the boxend event
         * should fire.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent The originating MapBrowserEvent
         *     leading to the box end.
         * @param {import("../pixel.js").Pixel} startPixel The starting pixel of the box.
         * @param {import("../pixel.js").Pixel} endPixel The end pixel of the box.
         * @return {boolean} Whether or not the boxend condition should be fired.
         */
        defaultBoxEndCondition(mapBrowserEvent, startPixel, endPixel) {
            const width = endPixel[0] - startPixel[0];
            const height = endPixel[1] - startPixel[1];
            return width * width + height * height >= this.minArea_;
        }
        /**
         * Returns geometry of last drawn box.
         * @return {import("../geom/Polygon.js").default} Geometry.
         * @api
         */
        getGeometry() {
            return this.box_.getGeometry();
        }
        /**
         * Handle pointer drag events.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
         */
        handleDragEvent(mapBrowserEvent) {
            this.box_.setPixels(this.startPixel_, mapBrowserEvent.pixel);
            this.dispatchEvent(new DragBoxEvent(DragBoxEventType.BOXDRAG, mapBrowserEvent.coordinate, mapBrowserEvent));
        }
        /**
         * Handle pointer up events.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
         * @return {boolean} If the event was consumed.
         */
        handleUpEvent(mapBrowserEvent) {
            this.box_.setMap(null);
            if (this.boxEndCondition_(mapBrowserEvent, this.startPixel_, mapBrowserEvent.pixel)) {
                this.onBoxEnd(mapBrowserEvent);
                this.dispatchEvent(new DragBoxEvent(DragBoxEventType.BOXEND, mapBrowserEvent.coordinate, mapBrowserEvent));
            }
            return false;
        }
        /**
         * Handle pointer down events.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
         * @return {boolean} If the event was consumed.
         */
        handleDownEvent(mapBrowserEvent) {
            if (this.condition_(mapBrowserEvent)) {
                this.startPixel_ = mapBrowserEvent.pixel;
                this.box_.setMap(mapBrowserEvent.map);
                this.box_.setPixels(this.startPixel_, this.startPixel_);
                this.dispatchEvent(new DragBoxEvent(DragBoxEventType.BOXSTART, mapBrowserEvent.coordinate, mapBrowserEvent));
                return true;
            }
            else {
                return false;
            }
        }
        /**
         * Function to execute just before `onboxend` is fired
         * @param {import("../MapBrowserEvent.js").default} event Event.
         */
        onBoxEnd(event) { }
    }
    exports.default = DragBox;
});
define("node_modules/ol/src/interaction/DragZoom", ["require", "exports", "node_modules/ol/src/interaction/DragBox", "node_modules/ol/src/extent", "node_modules/ol/src/easing", "node_modules/ol/src/events/condition"], function (require, exports, DragBox_js_1, extent_js_31, easing_js_9, condition_js_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @typedef {Object} Options
     * @property {string} [className='ol-dragzoom'] CSS class name for styling the
     * box.
     * @property {import("../events/condition.js").Condition} [condition] A function that
     * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
     * boolean to indicate whether that event should be handled.
     * Default is {@link module:ol/events/condition~shiftKeyOnly}.
     * @property {number} [duration=200] Animation duration in milliseconds.
     * @property {boolean} [out=false] Use interaction for zooming out.
     * @property {number} [minArea=64] The minimum area of the box in pixel, this value is used by the parent default
     * `boxEndCondition` function.
     */
    /**
     * @classdesc
     * Allows the user to zoom the map by clicking and dragging on the map,
     * normally combined with an {@link module:ol/events/condition} that limits
     * it to when a key, shift by default, is held down.
     *
     * To change the style of the box, use CSS and the `.ol-dragzoom` selector, or
     * your custom one configured with `className`.
     * @api
     */
    class DragZoom extends DragBox_js_1.default {
        /**
         * @param {Options=} opt_options Options.
         */
        constructor(opt_options) {
            const options = opt_options ? opt_options : {};
            const condition = options.condition ? options.condition : condition_js_4.shiftKeyOnly;
            super({
                condition: condition,
                className: options.className || 'ol-dragzoom',
                minArea: options.minArea,
            });
            /**
             * @private
             * @type {number}
             */
            this.duration_ = options.duration !== undefined ? options.duration : 200;
            /**
             * @private
             * @type {boolean}
             */
            this.out_ = options.out !== undefined ? options.out : false;
        }
        /**
         * Function to execute just before `onboxend` is fired
         * @param {import("../MapBrowserEvent.js").default} event Event.
         */
        onBoxEnd(event) {
            const map = this.getMap();
            const view = /** @type {!import("../View.js").default} */ (map.getView());
            const size = /** @type {!import("../size.js").Size} */ (map.getSize());
            let extent = this.getGeometry().getExtent();
            if (this.out_) {
                const mapExtent = view.calculateExtentInternal(size);
                const boxPixelExtent = extent_js_31.createOrUpdateFromCoordinates([
                    map.getPixelFromCoordinateInternal(extent_js_31.getBottomLeft(extent)),
                    map.getPixelFromCoordinateInternal(extent_js_31.getTopRight(extent)),
                ]);
                const factor = view.getResolutionForExtentInternal(boxPixelExtent, size);
                extent_js_31.scaleFromCenter(mapExtent, 1 / factor);
                extent = mapExtent;
            }
            const resolution = view.getConstrainedResolution(view.getResolutionForExtentInternal(extent, size));
            const center = view.getConstrainedCenter(extent_js_31.getCenter(extent), resolution);
            view.animateInternal({
                resolution: resolution,
                center: center,
                duration: this.duration_,
                easing: easing_js_9.easeOut,
            });
        }
    }
    exports.default = DragZoom;
});
/**
 * @module ol/events/KeyCode
 */
define("node_modules/ol/src/events/KeyCode", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @enum {number}
     * @const
     */
    exports.default = {
        LEFT: 37,
        UP: 38,
        RIGHT: 39,
        DOWN: 40,
    };
});
define("node_modules/ol/src/interaction/KeyboardPan", ["require", "exports", "node_modules/ol/src/events/EventType", "node_modules/ol/src/interaction/Interaction", "node_modules/ol/src/events/KeyCode", "node_modules/ol/src/events/condition", "node_modules/ol/src/coordinate"], function (require, exports, EventType_js_29, Interaction_js_3, KeyCode_js_1, condition_js_5, coordinate_js_6) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @typedef {Object} Options
     * @property {import("../events/condition.js").Condition} [condition] A function that
     * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
     * boolean to indicate whether that event should be handled. Default is
     * {@link module:ol/events/condition~noModifierKeys} and
     * {@link module:ol/events/condition~targetNotEditable}.
     * @property {number} [duration=100] Animation duration in milliseconds.
     * @property {number} [pixelDelta=128] The amount of pixels to pan on each key
     * press.
     */
    /**
     * @classdesc
     * Allows the user to pan the map using keyboard arrows.
     * Note that, although this interaction is by default included in maps,
     * the keys can only be used when browser focus is on the element to which
     * the keyboard events are attached. By default, this is the map div,
     * though you can change this with the `keyboardEventTarget` in
     * {@link module:ol/Map~Map}. `document` never loses focus but, for any other
     * element, focus will have to be on, and returned to, this element if the keys
     * are to function.
     * See also {@link module:ol/interaction/KeyboardZoom~KeyboardZoom}.
     * @api
     */
    class KeyboardPan extends Interaction_js_3.default {
        /**
         * @param {Options=} opt_options Options.
         */
        constructor(opt_options) {
            super();
            const options = opt_options || {};
            /**
             * @private
             * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Browser event.
             * @return {boolean} Combined condition result.
             */
            this.defaultCondition_ = function (mapBrowserEvent) {
                return (condition_js_5.noModifierKeys(mapBrowserEvent) && condition_js_5.targetNotEditable(mapBrowserEvent));
            };
            /**
             * @private
             * @type {import("../events/condition.js").Condition}
             */
            this.condition_ =
                options.condition !== undefined
                    ? options.condition
                    : this.defaultCondition_;
            /**
             * @private
             * @type {number}
             */
            this.duration_ = options.duration !== undefined ? options.duration : 100;
            /**
             * @private
             * @type {number}
             */
            this.pixelDelta_ =
                options.pixelDelta !== undefined ? options.pixelDelta : 128;
        }
        /**
         * Handles the {@link module:ol/MapBrowserEvent map browser event} if it was a
         * `KeyEvent`, and decides the direction to pan to (if an arrow key was
         * pressed).
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
         * @return {boolean} `false` to stop event propagation.
         * @this {KeyboardPan}
         */
        handleEvent(mapBrowserEvent) {
            let stopEvent = false;
            if (mapBrowserEvent.type == EventType_js_29.default.KEYDOWN) {
                const keyEvent = /** @type {KeyboardEvent} */ (mapBrowserEvent.originalEvent);
                const keyCode = keyEvent.keyCode;
                if (this.condition_(mapBrowserEvent) &&
                    (keyCode == KeyCode_js_1.default.DOWN ||
                        keyCode == KeyCode_js_1.default.LEFT ||
                        keyCode == KeyCode_js_1.default.RIGHT ||
                        keyCode == KeyCode_js_1.default.UP)) {
                    const map = mapBrowserEvent.map;
                    const view = map.getView();
                    const mapUnitsDelta = view.getResolution() * this.pixelDelta_;
                    let deltaX = 0, deltaY = 0;
                    if (keyCode == KeyCode_js_1.default.DOWN) {
                        deltaY = -mapUnitsDelta;
                    }
                    else if (keyCode == KeyCode_js_1.default.LEFT) {
                        deltaX = -mapUnitsDelta;
                    }
                    else if (keyCode == KeyCode_js_1.default.RIGHT) {
                        deltaX = mapUnitsDelta;
                    }
                    else {
                        deltaY = mapUnitsDelta;
                    }
                    const delta = [deltaX, deltaY];
                    coordinate_js_6.rotate(delta, view.getRotation());
                    Interaction_js_3.pan(view, delta, this.duration_);
                    mapBrowserEvent.preventDefault();
                    stopEvent = true;
                }
            }
            return !stopEvent;
        }
    }
    exports.default = KeyboardPan;
});
define("node_modules/ol/src/interaction/KeyboardZoom", ["require", "exports", "node_modules/ol/src/events/EventType", "node_modules/ol/src/interaction/Interaction", "node_modules/ol/src/events/condition"], function (require, exports, EventType_js_30, Interaction_js_4, condition_js_6) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @typedef {Object} Options
     * @property {number} [duration=100] Animation duration in milliseconds.
     * @property {import("../events/condition.js").Condition} [condition] A function that
     * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
     * boolean to indicate whether that event should be handled. Default is
     * {@link module:ol/events/condition~targetNotEditable}.
     * @property {number} [delta=1] The zoom level delta on each key press.
     */
    /**
     * @classdesc
     * Allows the user to zoom the map using keyboard + and -.
     * Note that, although this interaction is by default included in maps,
     * the keys can only be used when browser focus is on the element to which
     * the keyboard events are attached. By default, this is the map div,
     * though you can change this with the `keyboardEventTarget` in
     * {@link module:ol/Map~Map}. `document` never loses focus but, for any other
     * element, focus will have to be on, and returned to, this element if the keys
     * are to function.
     * See also {@link module:ol/interaction/KeyboardPan~KeyboardPan}.
     * @api
     */
    class KeyboardZoom extends Interaction_js_4.default {
        /**
         * @param {Options=} opt_options Options.
         */
        constructor(opt_options) {
            super();
            const options = opt_options ? opt_options : {};
            /**
             * @private
             * @type {import("../events/condition.js").Condition}
             */
            this.condition_ = options.condition ? options.condition : condition_js_6.targetNotEditable;
            /**
             * @private
             * @type {number}
             */
            this.delta_ = options.delta ? options.delta : 1;
            /**
             * @private
             * @type {number}
             */
            this.duration_ = options.duration !== undefined ? options.duration : 100;
        }
        /**
         * Handles the {@link module:ol/MapBrowserEvent map browser event} if it was a
         * `KeyEvent`, and decides whether to zoom in or out (depending on whether the
         * key pressed was '+' or '-').
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
         * @return {boolean} `false` to stop event propagation.
         * @this {KeyboardZoom}
         */
        handleEvent(mapBrowserEvent) {
            let stopEvent = false;
            if (mapBrowserEvent.type == EventType_js_30.default.KEYDOWN ||
                mapBrowserEvent.type == EventType_js_30.default.KEYPRESS) {
                const keyEvent = /** @type {KeyboardEvent} */ (mapBrowserEvent.originalEvent);
                const charCode = keyEvent.charCode;
                if (this.condition_(mapBrowserEvent) &&
                    (charCode == '+'.charCodeAt(0) || charCode == '-'.charCodeAt(0))) {
                    const map = mapBrowserEvent.map;
                    const delta = charCode == '+'.charCodeAt(0) ? this.delta_ : -this.delta_;
                    const view = map.getView();
                    Interaction_js_4.zoomByDelta(view, delta, undefined, this.duration_);
                    mapBrowserEvent.preventDefault();
                    stopEvent = true;
                }
            }
            return !stopEvent;
        }
    }
    exports.default = KeyboardZoom;
});
define("node_modules/ol/src/interaction/MouseWheelZoom", ["require", "exports", "node_modules/ol/src/events/EventType", "node_modules/ol/src/interaction/Interaction", "node_modules/ol/src/has", "node_modules/ol/src/events/condition", "node_modules/ol/src/math"], function (require, exports, EventType_js_31, Interaction_js_5, has_js_8, condition_js_7, math_js_19) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Mode = void 0;
    /**
     * @enum {string}
     */
    exports.Mode = {
        TRACKPAD: 'trackpad',
        WHEEL: 'wheel',
    };
    /**
     * @typedef {Object} Options
     * @property {import("../events/condition.js").Condition} [condition] A function that
     * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
     * boolean to indicate whether that event should be handled. Default is
     * {@link module:ol/events/condition~always}.
     * @property {boolean} [onFocusOnly=false] When the map's target has a `tabindex` attribute set,
     * the interaction will only handle events when the map has the focus.
     * @property {number} [maxDelta=1] Maximum mouse wheel delta.
     * @property {number} [duration=250] Animation duration in milliseconds.
     * @property {number} [timeout=80] Mouse wheel timeout duration in milliseconds.
     * @property {boolean} [useAnchor=true] Enable zooming using the mouse's
     * location as the anchor. When set to `false`, zooming in and out will zoom to
     * the center of the screen instead of zooming on the mouse's location.
     * @property {boolean} [constrainResolution=false] If true, the mouse wheel zoom
     * event will always animate to the closest zoom level after an interaction;
     * false means intermediary zoom levels are allowed.
     */
    /**
     * @classdesc
     * Allows the user to zoom the map by scrolling the mouse wheel.
     * @api
     */
    class MouseWheelZoom extends Interaction_js_5.default {
        /**
         * @param {Options=} opt_options Options.
         */
        constructor(opt_options) {
            const options = opt_options ? opt_options : {};
            super(
            /** @type {import("./Interaction.js").InteractionOptions} */ (options));
            /**
             * @private
             * @type {number}
             */
            this.totalDelta_ = 0;
            /**
             * @private
             * @type {number}
             */
            this.lastDelta_ = 0;
            /**
             * @private
             * @type {number}
             */
            this.maxDelta_ = options.maxDelta !== undefined ? options.maxDelta : 1;
            /**
             * @private
             * @type {number}
             */
            this.duration_ = options.duration !== undefined ? options.duration : 250;
            /**
             * @private
             * @type {number}
             */
            this.timeout_ = options.timeout !== undefined ? options.timeout : 80;
            /**
             * @private
             * @type {boolean}
             */
            this.useAnchor_ =
                options.useAnchor !== undefined ? options.useAnchor : true;
            /**
             * @private
             * @type {boolean}
             */
            this.constrainResolution_ =
                options.constrainResolution !== undefined
                    ? options.constrainResolution
                    : false;
            const condition = options.condition ? options.condition : condition_js_7.always;
            /**
             * @private
             * @type {import("../events/condition.js").Condition}
             */
            this.condition_ = options.onFocusOnly
                ? condition_js_7.all(condition_js_7.focusWithTabindex, condition)
                : condition;
            /**
             * @private
             * @type {?import("../coordinate.js").Coordinate}
             */
            this.lastAnchor_ = null;
            /**
             * @private
             * @type {number|undefined}
             */
            this.startTime_ = undefined;
            /**
             * @private
             * @type {?}
             */
            this.timeoutId_;
            /**
             * @private
             * @type {Mode|undefined}
             */
            this.mode_ = undefined;
            /**
             * Trackpad events separated by this delay will be considered separate
             * interactions.
             * @type {number}
             */
            this.trackpadEventGap_ = 400;
            /**
             * @type {?}
             */
            this.trackpadTimeoutId_;
            /**
             * The number of delta values per zoom level
             * @private
             * @type {number}
             */
            this.deltaPerZoom_ = 300;
        }
        /**
         * @private
         */
        endInteraction_() {
            this.trackpadTimeoutId_ = undefined;
            const view = this.getMap().getView();
            view.endInteraction(undefined, this.lastDelta_ ? (this.lastDelta_ > 0 ? 1 : -1) : 0, this.lastAnchor_);
        }
        /**
         * Handles the {@link module:ol/MapBrowserEvent map browser event} (if it was a mousewheel-event) and eventually
         * zooms the map.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
         * @return {boolean} `false` to stop event propagation.
         */
        handleEvent(mapBrowserEvent) {
            if (!this.condition_(mapBrowserEvent)) {
                return true;
            }
            const type = mapBrowserEvent.type;
            if (type !== EventType_js_31.default.WHEEL) {
                return true;
            }
            mapBrowserEvent.preventDefault();
            const map = mapBrowserEvent.map;
            const wheelEvent = /** @type {WheelEvent} */ (mapBrowserEvent.originalEvent);
            if (this.useAnchor_) {
                this.lastAnchor_ = mapBrowserEvent.coordinate;
            }
            // Delta normalisation inspired by
            // https://github.com/mapbox/mapbox-gl-js/blob/001c7b9/js/ui/handler/scroll_zoom.js
            let delta;
            if (mapBrowserEvent.type == EventType_js_31.default.WHEEL) {
                delta = wheelEvent.deltaY;
                if (has_js_8.FIREFOX && wheelEvent.deltaMode === WheelEvent.DOM_DELTA_PIXEL) {
                    delta /= has_js_8.DEVICE_PIXEL_RATIO;
                }
                if (wheelEvent.deltaMode === WheelEvent.DOM_DELTA_LINE) {
                    delta *= 40;
                }
            }
            if (delta === 0) {
                return false;
            }
            else {
                this.lastDelta_ = delta;
            }
            const now = Date.now();
            if (this.startTime_ === undefined) {
                this.startTime_ = now;
            }
            if (!this.mode_ || now - this.startTime_ > this.trackpadEventGap_) {
                this.mode_ = Math.abs(delta) < 4 ? exports.Mode.TRACKPAD : exports.Mode.WHEEL;
            }
            const view = map.getView();
            if (this.mode_ === exports.Mode.TRACKPAD &&
                !(view.getConstrainResolution() || this.constrainResolution_)) {
                if (this.trackpadTimeoutId_) {
                    clearTimeout(this.trackpadTimeoutId_);
                }
                else {
                    if (view.getAnimating()) {
                        view.cancelAnimations();
                    }
                    view.beginInteraction();
                }
                this.trackpadTimeoutId_ = setTimeout(this.endInteraction_.bind(this), this.timeout_);
                view.adjustZoom(-delta / this.deltaPerZoom_, this.lastAnchor_);
                this.startTime_ = now;
                return false;
            }
            this.totalDelta_ += delta;
            const timeLeft = Math.max(this.timeout_ - (now - this.startTime_), 0);
            clearTimeout(this.timeoutId_);
            this.timeoutId_ = setTimeout(this.handleWheelZoom_.bind(this, map), timeLeft);
            return false;
        }
        /**
         * @private
         * @param {import("../PluggableMap.js").default} map Map.
         */
        handleWheelZoom_(map) {
            const view = map.getView();
            if (view.getAnimating()) {
                view.cancelAnimations();
            }
            let delta = -math_js_19.clamp(this.totalDelta_, -this.maxDelta_ * this.deltaPerZoom_, this.maxDelta_ * this.deltaPerZoom_) / this.deltaPerZoom_;
            if (view.getConstrainResolution() || this.constrainResolution_) {
                // view has a zoom constraint, zoom by 1
                delta = delta ? (delta > 0 ? 1 : -1) : 0;
            }
            Interaction_js_5.zoomByDelta(view, delta, this.lastAnchor_, this.duration_);
            this.mode_ = undefined;
            this.totalDelta_ = 0;
            this.lastAnchor_ = null;
            this.startTime_ = undefined;
            this.timeoutId_ = undefined;
        }
        /**
         * Enable or disable using the mouse's location as an anchor when zooming
         * @param {boolean} useAnchor true to zoom to the mouse's location, false
         * to zoom to the center of the map
         * @api
         */
        setMouseAnchor(useAnchor) {
            this.useAnchor_ = useAnchor;
            if (!useAnchor) {
                this.lastAnchor_ = null;
            }
        }
    }
    exports.default = MouseWheelZoom;
});
define("node_modules/ol/src/interaction/PinchRotate", ["require", "exports", "node_modules/ol/src/interaction/Pointer", "node_modules/ol/src/functions", "node_modules/ol/src/rotationconstraint"], function (require, exports, Pointer_js_4, functions_js_10, rotationconstraint_js_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @typedef {Object} Options
     * @property {number} [duration=250] The duration of the animation in
     * milliseconds.
     * @property {number} [threshold=0.3] Minimal angle in radians to start a rotation.
     */
    /**
     * @classdesc
     * Allows the user to rotate the map by twisting with two fingers
     * on a touch screen.
     * @api
     */
    class PinchRotate extends Pointer_js_4.default {
        /**
         * @param {Options=} opt_options Options.
         */
        constructor(opt_options) {
            const options = opt_options ? opt_options : {};
            const pointerOptions = /** @type {import("./Pointer.js").Options} */ (options);
            if (!pointerOptions.stopDown) {
                pointerOptions.stopDown = functions_js_10.FALSE;
            }
            super(pointerOptions);
            /**
             * @private
             * @type {import("../coordinate.js").Coordinate}
             */
            this.anchor_ = null;
            /**
             * @private
             * @type {number|undefined}
             */
            this.lastAngle_ = undefined;
            /**
             * @private
             * @type {boolean}
             */
            this.rotating_ = false;
            /**
             * @private
             * @type {number}
             */
            this.rotationDelta_ = 0.0;
            /**
             * @private
             * @type {number}
             */
            this.threshold_ = options.threshold !== undefined ? options.threshold : 0.3;
            /**
             * @private
             * @type {number}
             */
            this.duration_ = options.duration !== undefined ? options.duration : 250;
        }
        /**
         * Handle pointer drag events.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
         */
        handleDragEvent(mapBrowserEvent) {
            let rotationDelta = 0.0;
            const touch0 = this.targetPointers[0];
            const touch1 = this.targetPointers[1];
            // angle between touches
            const angle = Math.atan2(touch1.clientY - touch0.clientY, touch1.clientX - touch0.clientX);
            if (this.lastAngle_ !== undefined) {
                const delta = angle - this.lastAngle_;
                this.rotationDelta_ += delta;
                if (!this.rotating_ && Math.abs(this.rotationDelta_) > this.threshold_) {
                    this.rotating_ = true;
                }
                rotationDelta = delta;
            }
            this.lastAngle_ = angle;
            const map = mapBrowserEvent.map;
            const view = map.getView();
            if (view.getConstraints().rotation === rotationconstraint_js_3.disable) {
                return;
            }
            // rotate anchor point.
            // FIXME: should be the intersection point between the lines:
            //     touch0,touch1 and previousTouch0,previousTouch1
            const viewportPosition = map.getViewport().getBoundingClientRect();
            const centroid = Pointer_js_4.centroid(this.targetPointers);
            centroid[0] -= viewportPosition.left;
            centroid[1] -= viewportPosition.top;
            this.anchor_ = map.getCoordinateFromPixelInternal(centroid);
            // rotate
            if (this.rotating_) {
                map.render();
                view.adjustRotationInternal(rotationDelta, this.anchor_);
            }
        }
        /**
         * Handle pointer up events.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
         * @return {boolean} If the event was consumed.
         */
        handleUpEvent(mapBrowserEvent) {
            if (this.targetPointers.length < 2) {
                const map = mapBrowserEvent.map;
                const view = map.getView();
                view.endInteraction(this.duration_);
                return false;
            }
            else {
                return true;
            }
        }
        /**
         * Handle pointer down events.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
         * @return {boolean} If the event was consumed.
         */
        handleDownEvent(mapBrowserEvent) {
            if (this.targetPointers.length >= 2) {
                const map = mapBrowserEvent.map;
                this.anchor_ = null;
                this.lastAngle_ = undefined;
                this.rotating_ = false;
                this.rotationDelta_ = 0.0;
                if (!this.handlingDownUpSequence) {
                    map.getView().beginInteraction();
                }
                return true;
            }
            else {
                return false;
            }
        }
    }
    exports.default = PinchRotate;
});
define("node_modules/ol/src/interaction/PinchZoom", ["require", "exports", "node_modules/ol/src/interaction/Pointer", "node_modules/ol/src/functions"], function (require, exports, Pointer_js_5, functions_js_11) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @typedef {Object} Options
     * @property {number} [duration=400] Animation duration in milliseconds.
     */
    /**
     * @classdesc
     * Allows the user to zoom the map by pinching with two fingers
     * on a touch screen.
     * @api
     */
    class PinchZoom extends Pointer_js_5.default {
        /**
         * @param {Options=} opt_options Options.
         */
        constructor(opt_options) {
            const options = opt_options ? opt_options : {};
            const pointerOptions = /** @type {import("./Pointer.js").Options} */ (options);
            if (!pointerOptions.stopDown) {
                pointerOptions.stopDown = functions_js_11.FALSE;
            }
            super(pointerOptions);
            /**
             * @private
             * @type {import("../coordinate.js").Coordinate}
             */
            this.anchor_ = null;
            /**
             * @private
             * @type {number}
             */
            this.duration_ = options.duration !== undefined ? options.duration : 400;
            /**
             * @private
             * @type {number|undefined}
             */
            this.lastDistance_ = undefined;
            /**
             * @private
             * @type {number}
             */
            this.lastScaleDelta_ = 1;
        }
        /**
         * Handle pointer drag events.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
         */
        handleDragEvent(mapBrowserEvent) {
            let scaleDelta = 1.0;
            const touch0 = this.targetPointers[0];
            const touch1 = this.targetPointers[1];
            const dx = touch0.clientX - touch1.clientX;
            const dy = touch0.clientY - touch1.clientY;
            // distance between touches
            const distance = Math.sqrt(dx * dx + dy * dy);
            if (this.lastDistance_ !== undefined) {
                scaleDelta = this.lastDistance_ / distance;
            }
            this.lastDistance_ = distance;
            const map = mapBrowserEvent.map;
            const view = map.getView();
            if (scaleDelta != 1.0) {
                this.lastScaleDelta_ = scaleDelta;
            }
            // scale anchor point.
            const viewportPosition = map.getViewport().getBoundingClientRect();
            const centroid = Pointer_js_5.centroid(this.targetPointers);
            centroid[0] -= viewportPosition.left;
            centroid[1] -= viewportPosition.top;
            this.anchor_ = map.getCoordinateFromPixelInternal(centroid);
            // scale, bypass the resolution constraint
            map.render();
            view.adjustResolutionInternal(scaleDelta, this.anchor_);
        }
        /**
         * Handle pointer up events.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
         * @return {boolean} If the event was consumed.
         */
        handleUpEvent(mapBrowserEvent) {
            if (this.targetPointers.length < 2) {
                const map = mapBrowserEvent.map;
                const view = map.getView();
                const direction = this.lastScaleDelta_ > 1 ? 1 : -1;
                view.endInteraction(this.duration_, direction);
                return false;
            }
            else {
                return true;
            }
        }
        /**
         * Handle pointer down events.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
         * @return {boolean} If the event was consumed.
         */
        handleDownEvent(mapBrowserEvent) {
            if (this.targetPointers.length >= 2) {
                const map = mapBrowserEvent.map;
                this.anchor_ = null;
                this.lastDistance_ = undefined;
                this.lastScaleDelta_ = 1;
                if (!this.handlingDownUpSequence) {
                    map.getView().beginInteraction();
                }
                return true;
            }
            else {
                return false;
            }
        }
    }
    exports.default = PinchZoom;
});
/**
 * @module ol/format/FormatType
 */
define("node_modules/ol/src/format/FormatType", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @enum {string}
     */
    exports.default = {
        ARRAY_BUFFER: 'arraybuffer',
        JSON: 'json',
        TEXT: 'text',
        XML: 'xml',
    };
});
define("node_modules/ol/src/format/Feature", ["require", "exports", "node_modules/ol/src/proj/Units", "node_modules/ol/src/util", "node_modules/ol/src/obj", "node_modules/ol/src/proj"], function (require, exports, Units_js_9, util_js_16, obj_js_12, proj_js_11) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.transformExtentWithOptions = exports.transformGeometryWithOptions = void 0;
    /**
     * @typedef {Object} ReadOptions
     * @property {import("../proj.js").ProjectionLike} [dataProjection] Projection of the data we are reading.
     * If not provided, the projection will be derived from the data (where possible) or
     * the `dataProjection` of the format is assigned (where set). If the projection
     * can not be derived from the data and if no `dataProjection` is set for a format,
     * the features will not be reprojected.
     * @property {import("../extent.js").Extent} [extent] Tile extent in map units of the tile being read.
     * This is only required when reading data with tile pixels as geometry units. When configured,
     * a `dataProjection` with `TILE_PIXELS` as `units` and the tile's pixel extent as `extent` needs to be
     * provided.
     * @property {import("../proj.js").ProjectionLike} [featureProjection] Projection of the feature geometries
     * created by the format reader. If not provided, features will be returned in the
     * `dataProjection`.
     */
    /**
     * @typedef {Object} WriteOptions
     * @property {import("../proj.js").ProjectionLike} [dataProjection] Projection of the data we are writing.
     * If not provided, the `dataProjection` of the format is assigned (where set).
     * If no `dataProjection` is set for a format, the features will be returned
     * in the `featureProjection`.
     * @property {import("../proj.js").ProjectionLike} [featureProjection] Projection of the feature geometries
     * that will be serialized by the format writer. If not provided, geometries are assumed
     * to be in the `dataProjection` if that is set; in other words, they are not transformed.
     * @property {boolean} [rightHanded] When writing geometries, follow the right-hand
     * rule for linear ring orientation.  This means that polygons will have counter-clockwise
     * exterior rings and clockwise interior rings.  By default, coordinates are serialized
     * as they are provided at construction.  If `true`, the right-hand rule will
     * be applied.  If `false`, the left-hand rule will be applied (clockwise for
     * exterior and counter-clockwise for interior rings).  Note that not all
     * formats support this.  The GeoJSON format does use this property when writing
     * geometries.
     * @property {number} [decimals] Maximum number of decimal places for coordinates.
     * Coordinates are stored internally as floats, but floating-point arithmetic can create
     * coordinates with a large number of decimal places, not generally wanted on output.
     * Set a number here to round coordinates. Can also be used to ensure that
     * coordinates read in can be written back out with the same number of decimals.
     * Default is no rounding.
     */
    /**
     * @classdesc
     * Abstract base class; normally only used for creating subclasses and not
     * instantiated in apps.
     * Base class for feature formats.
     * {@link module:ol/format/Feature~FeatureFormat} subclasses provide the ability to decode and encode
     * {@link module:ol/Feature~Feature} objects from a variety of commonly used geospatial
     * file formats.  See the documentation for each format for more details.
     *
     * @abstract
     * @api
     */
    class FeatureFormat {
        constructor() {
            /**
             * @protected
             * @type {import("../proj/Projection.js").default}
             */
            this.dataProjection = null;
            /**
             * @protected
             * @type {import("../proj/Projection.js").default}
             */
            this.defaultFeatureProjection = null;
        }
        /**
         * Adds the data projection to the read options.
         * @param {Document|Element|Object|string} source Source.
         * @param {ReadOptions=} opt_options Options.
         * @return {ReadOptions|undefined} Options.
         * @protected
         */
        getReadOptions(source, opt_options) {
            let options;
            if (opt_options) {
                let dataProjection = opt_options.dataProjection
                    ? proj_js_11.get(opt_options.dataProjection)
                    : this.readProjection(source);
                if (opt_options.extent &&
                    dataProjection &&
                    dataProjection.getUnits() === Units_js_9.default.TILE_PIXELS) {
                    dataProjection = proj_js_11.get(dataProjection);
                    dataProjection.setWorldExtent(opt_options.extent);
                }
                options = {
                    dataProjection: dataProjection,
                    featureProjection: opt_options.featureProjection,
                };
            }
            return this.adaptOptions(options);
        }
        /**
         * Sets the `dataProjection` on the options, if no `dataProjection`
         * is set.
         * @param {WriteOptions|ReadOptions|undefined} options
         *     Options.
         * @protected
         * @return {WriteOptions|ReadOptions|undefined}
         *     Updated options.
         */
        adaptOptions(options) {
            return obj_js_12.assign({
                dataProjection: this.dataProjection,
                featureProjection: this.defaultFeatureProjection,
            }, options);
        }
        /**
         * @abstract
         * @return {import("./FormatType.js").default} Format.
         */
        getType() {
            return util_js_16.abstract();
        }
        /**
         * Read a single feature from a source.
         *
         * @abstract
         * @param {Document|Element|Object|string} source Source.
         * @param {ReadOptions=} opt_options Read options.
         * @return {import("../Feature.js").FeatureLike} Feature.
         */
        readFeature(source, opt_options) {
            return util_js_16.abstract();
        }
        /**
         * Read all features from a source.
         *
         * @abstract
         * @param {Document|Element|ArrayBuffer|Object|string} source Source.
         * @param {ReadOptions=} opt_options Read options.
         * @return {Array<import("../Feature.js").FeatureLike>} Features.
         */
        readFeatures(source, opt_options) {
            return util_js_16.abstract();
        }
        /**
         * Read a single geometry from a source.
         *
         * @abstract
         * @param {Document|Element|Object|string} source Source.
         * @param {ReadOptions=} opt_options Read options.
         * @return {import("../geom/Geometry.js").default} Geometry.
         */
        readGeometry(source, opt_options) {
            return util_js_16.abstract();
        }
        /**
         * Read the projection from a source.
         *
         * @abstract
         * @param {Document|Element|Object|string} source Source.
         * @return {import("../proj/Projection.js").default} Projection.
         */
        readProjection(source) {
            return util_js_16.abstract();
        }
        /**
         * Encode a feature in this format.
         *
         * @abstract
         * @param {import("../Feature.js").default} feature Feature.
         * @param {WriteOptions=} opt_options Write options.
         * @return {string} Result.
         */
        writeFeature(feature, opt_options) {
            return util_js_16.abstract();
        }
        /**
         * Encode an array of features in this format.
         *
         * @abstract
         * @param {Array<import("../Feature.js").default>} features Features.
         * @param {WriteOptions=} opt_options Write options.
         * @return {string} Result.
         */
        writeFeatures(features, opt_options) {
            return util_js_16.abstract();
        }
        /**
         * Write a single geometry in this format.
         *
         * @abstract
         * @param {import("../geom/Geometry.js").default} geometry Geometry.
         * @param {WriteOptions=} opt_options Write options.
         * @return {string} Result.
         */
        writeGeometry(geometry, opt_options) {
            return util_js_16.abstract();
        }
    }
    exports.default = FeatureFormat;
    /**
     * @param {import("../geom/Geometry.js").default} geometry Geometry.
     * @param {boolean} write Set to true for writing, false for reading.
     * @param {(WriteOptions|ReadOptions)=} opt_options Options.
     * @return {import("../geom/Geometry.js").default} Transformed geometry.
     */
    function transformGeometryWithOptions(geometry, write, opt_options) {
        const featureProjection = opt_options
            ? proj_js_11.get(opt_options.featureProjection)
            : null;
        const dataProjection = opt_options
            ? proj_js_11.get(opt_options.dataProjection)
            : null;
        let transformed;
        if (featureProjection &&
            dataProjection &&
            !proj_js_11.equivalent(featureProjection, dataProjection)) {
            transformed = (write ? geometry.clone() : geometry).transform(write ? featureProjection : dataProjection, write ? dataProjection : featureProjection);
        }
        else {
            transformed = geometry;
        }
        if (write &&
            opt_options &&
            /** @type {WriteOptions} */ (opt_options).decimals !== undefined) {
            const power = Math.pow(10, 
            /** @type {WriteOptions} */ (opt_options).decimals);
            // if decimals option on write, round each coordinate appropriately
            /**
             * @param {Array<number>} coordinates Coordinates.
             * @return {Array<number>} Transformed coordinates.
             */
            const transform = function (coordinates) {
                for (let i = 0, ii = coordinates.length; i < ii; ++i) {
                    coordinates[i] = Math.round(coordinates[i] * power) / power;
                }
                return coordinates;
            };
            if (transformed === geometry) {
                transformed = geometry.clone();
            }
            transformed.applyTransform(transform);
        }
        return transformed;
    }
    exports.transformGeometryWithOptions = transformGeometryWithOptions;
    /**
     * @param {import("../extent.js").Extent} extent Extent.
     * @param {ReadOptions=} opt_options Read options.
     * @return {import("../extent.js").Extent} Transformed extent.
     */
    function transformExtentWithOptions(extent, opt_options) {
        const featureProjection = opt_options
            ? proj_js_11.get(opt_options.featureProjection)
            : null;
        const dataProjection = opt_options
            ? proj_js_11.get(opt_options.dataProjection)
            : null;
        if (featureProjection &&
            dataProjection &&
            !proj_js_11.equivalent(featureProjection, dataProjection)) {
            return proj_js_11.transformExtent(extent, dataProjection, featureProjection);
        }
        else {
            return extent;
        }
    }
    exports.transformExtentWithOptions = transformExtentWithOptions;
});
define("node_modules/quickselect/index", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function quickselect(arr, k, left, right, compare) {
        quickselectStep(arr, k, left || 0, right || (arr.length - 1), compare || defaultCompare);
    }
    exports.default = quickselect;
    function quickselectStep(arr, k, left, right, compare) {
        while (right > left) {
            if (right - left > 600) {
                var n = right - left + 1;
                var m = k - left + 1;
                var z = Math.log(n);
                var s = 0.5 * Math.exp(2 * z / 3);
                var sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);
                var newLeft = Math.max(left, Math.floor(k - m * s / n + sd));
                var newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));
                quickselectStep(arr, k, newLeft, newRight, compare);
            }
            var t = arr[k];
            var i = left;
            var j = right;
            swap(arr, left, k);
            if (compare(arr[right], t) > 0)
                swap(arr, left, right);
            while (i < j) {
                swap(arr, i, j);
                i++;
                j--;
                while (compare(arr[i], t) < 0)
                    i++;
                while (compare(arr[j], t) > 0)
                    j--;
            }
            if (compare(arr[left], t) === 0)
                swap(arr, left, j);
            else {
                j++;
                swap(arr, j, right);
            }
            if (j <= k)
                left = j + 1;
            if (k <= j)
                right = j - 1;
        }
    }
    function swap(arr, i, j) {
        var tmp = arr[i];
        arr[i] = arr[j];
        arr[j] = tmp;
    }
    function defaultCompare(a, b) {
        return a < b ? -1 : a > b ? 1 : 0;
    }
});
define("node_modules/rbush/index", ["require", "exports", "node_modules/quickselect/index"], function (require, exports, quickselect_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    class RBush {
        constructor(maxEntries = 9) {
            // max entries in a node is 9 by default; min node fill is 40% for best performance
            this._maxEntries = Math.max(4, maxEntries);
            this._minEntries = Math.max(2, Math.ceil(this._maxEntries * 0.4));
            this.clear();
        }
        all() {
            return this._all(this.data, []);
        }
        search(bbox) {
            let node = this.data;
            const result = [];
            if (!intersects(bbox, node))
                return result;
            const toBBox = this.toBBox;
            const nodesToSearch = [];
            while (node) {
                for (let i = 0; i < node.children.length; i++) {
                    const child = node.children[i];
                    const childBBox = node.leaf ? toBBox(child) : child;
                    if (intersects(bbox, childBBox)) {
                        if (node.leaf)
                            result.push(child);
                        else if (contains(bbox, childBBox))
                            this._all(child, result);
                        else
                            nodesToSearch.push(child);
                    }
                }
                node = nodesToSearch.pop();
            }
            return result;
        }
        collides(bbox) {
            let node = this.data;
            if (!intersects(bbox, node))
                return false;
            const nodesToSearch = [];
            while (node) {
                for (let i = 0; i < node.children.length; i++) {
                    const child = node.children[i];
                    const childBBox = node.leaf ? this.toBBox(child) : child;
                    if (intersects(bbox, childBBox)) {
                        if (node.leaf || contains(bbox, childBBox))
                            return true;
                        nodesToSearch.push(child);
                    }
                }
                node = nodesToSearch.pop();
            }
            return false;
        }
        load(data) {
            if (!(data && data.length))
                return this;
            if (data.length < this._minEntries) {
                for (let i = 0; i < data.length; i++) {
                    this.insert(data[i]);
                }
                return this;
            }
            // recursively build the tree with the given data from scratch using OMT algorithm
            let node = this._build(data.slice(), 0, data.length - 1, 0);
            if (!this.data.children.length) {
                // save as is if tree is empty
                this.data = node;
            }
            else if (this.data.height === node.height) {
                // split root if trees have the same height
                this._splitRoot(this.data, node);
            }
            else {
                if (this.data.height < node.height) {
                    // swap trees if inserted one is bigger
                    const tmpNode = this.data;
                    this.data = node;
                    node = tmpNode;
                }
                // insert the small tree into the large tree at appropriate level
                this._insert(node, this.data.height - node.height - 1, true);
            }
            return this;
        }
        insert(item) {
            if (item)
                this._insert(item, this.data.height - 1);
            return this;
        }
        clear() {
            this.data = createNode([]);
            return this;
        }
        remove(item, equalsFn) {
            if (!item)
                return this;
            let node = this.data;
            const bbox = this.toBBox(item);
            const path = [];
            const indexes = [];
            let i, parent, goingUp;
            // depth-first iterative tree traversal
            while (node || path.length) {
                if (!node) { // go up
                    node = path.pop();
                    parent = path[path.length - 1];
                    i = indexes.pop();
                    goingUp = true;
                }
                if (node.leaf) { // check current node
                    const index = findItem(item, node.children, equalsFn);
                    if (index !== -1) {
                        // item found, remove the item and condense tree upwards
                        node.children.splice(index, 1);
                        path.push(node);
                        this._condense(path);
                        return this;
                    }
                }
                if (!goingUp && !node.leaf && contains(node, bbox)) { // go down
                    path.push(node);
                    indexes.push(i);
                    i = 0;
                    parent = node;
                    node = node.children[0];
                }
                else if (parent) { // go right
                    i++;
                    node = parent.children[i];
                    goingUp = false;
                }
                else
                    node = null; // nothing found
            }
            return this;
        }
        toBBox(item) { return item; }
        compareMinX(a, b) { return a.minX - b.minX; }
        compareMinY(a, b) { return a.minY - b.minY; }
        toJSON() { return this.data; }
        fromJSON(data) {
            this.data = data;
            return this;
        }
        _all(node, result) {
            const nodesToSearch = [];
            while (node) {
                if (node.leaf)
                    result.push(...node.children);
                else
                    nodesToSearch.push(...node.children);
                node = nodesToSearch.pop();
            }
            return result;
        }
        _build(items, left, right, height) {
            const N = right - left + 1;
            let M = this._maxEntries;
            let node;
            if (N <= M) {
                // reached leaf level; return leaf
                node = createNode(items.slice(left, right + 1));
                calcBBox(node, this.toBBox);
                return node;
            }
            if (!height) {
                // target height of the bulk-loaded tree
                height = Math.ceil(Math.log(N) / Math.log(M));
                // target number of root entries to maximize storage utilization
                M = Math.ceil(N / Math.pow(M, height - 1));
            }
            node = createNode([]);
            node.leaf = false;
            node.height = height;
            // split the items into M mostly square tiles
            const N2 = Math.ceil(N / M);
            const N1 = N2 * Math.ceil(Math.sqrt(M));
            multiSelect(items, left, right, N1, this.compareMinX);
            for (let i = left; i <= right; i += N1) {
                const right2 = Math.min(i + N1 - 1, right);
                multiSelect(items, i, right2, N2, this.compareMinY);
                for (let j = i; j <= right2; j += N2) {
                    const right3 = Math.min(j + N2 - 1, right2);
                    // pack each entry recursively
                    node.children.push(this._build(items, j, right3, height - 1));
                }
            }
            calcBBox(node, this.toBBox);
            return node;
        }
        _chooseSubtree(bbox, node, level, path) {
            while (true) {
                path.push(node);
                if (node.leaf || path.length - 1 === level)
                    break;
                let minArea = Infinity;
                let minEnlargement = Infinity;
                let targetNode;
                for (let i = 0; i < node.children.length; i++) {
                    const child = node.children[i];
                    const area = bboxArea(child);
                    const enlargement = enlargedArea(bbox, child) - area;
                    // choose entry with the least area enlargement
                    if (enlargement < minEnlargement) {
                        minEnlargement = enlargement;
                        minArea = area < minArea ? area : minArea;
                        targetNode = child;
                    }
                    else if (enlargement === minEnlargement) {
                        // otherwise choose one with the smallest area
                        if (area < minArea) {
                            minArea = area;
                            targetNode = child;
                        }
                    }
                }
                node = targetNode || node.children[0];
            }
            return node;
        }
        _insert(item, level, isNode) {
            const bbox = isNode ? item : this.toBBox(item);
            const insertPath = [];
            // find the best node for accommodating the item, saving all nodes along the path too
            const node = this._chooseSubtree(bbox, this.data, level, insertPath);
            // put the item into the node
            node.children.push(item);
            extend(node, bbox);
            // split on node overflow; propagate upwards if necessary
            while (level >= 0) {
                if (insertPath[level].children.length > this._maxEntries) {
                    this._split(insertPath, level);
                    level--;
                }
                else
                    break;
            }
            // adjust bboxes along the insertion path
            this._adjustParentBBoxes(bbox, insertPath, level);
        }
        // split overflowed node into two
        _split(insertPath, level) {
            const node = insertPath[level];
            const M = node.children.length;
            const m = this._minEntries;
            this._chooseSplitAxis(node, m, M);
            const splitIndex = this._chooseSplitIndex(node, m, M);
            const newNode = createNode(node.children.splice(splitIndex, node.children.length - splitIndex));
            newNode.height = node.height;
            newNode.leaf = node.leaf;
            calcBBox(node, this.toBBox);
            calcBBox(newNode, this.toBBox);
            if (level)
                insertPath[level - 1].children.push(newNode);
            else
                this._splitRoot(node, newNode);
        }
        _splitRoot(node, newNode) {
            // split root node
            this.data = createNode([node, newNode]);
            this.data.height = node.height + 1;
            this.data.leaf = false;
            calcBBox(this.data, this.toBBox);
        }
        _chooseSplitIndex(node, m, M) {
            let index;
            let minOverlap = Infinity;
            let minArea = Infinity;
            for (let i = m; i <= M - m; i++) {
                const bbox1 = distBBox(node, 0, i, this.toBBox);
                const bbox2 = distBBox(node, i, M, this.toBBox);
                const overlap = intersectionArea(bbox1, bbox2);
                const area = bboxArea(bbox1) + bboxArea(bbox2);
                // choose distribution with minimum overlap
                if (overlap < minOverlap) {
                    minOverlap = overlap;
                    index = i;
                    minArea = area < minArea ? area : minArea;
                }
                else if (overlap === minOverlap) {
                    // otherwise choose distribution with minimum area
                    if (area < minArea) {
                        minArea = area;
                        index = i;
                    }
                }
            }
            return index || M - m;
        }
        // sorts node children by the best axis for split
        _chooseSplitAxis(node, m, M) {
            const compareMinX = node.leaf ? this.compareMinX : compareNodeMinX;
            const compareMinY = node.leaf ? this.compareMinY : compareNodeMinY;
            const xMargin = this._allDistMargin(node, m, M, compareMinX);
            const yMargin = this._allDistMargin(node, m, M, compareMinY);
            // if total distributions margin value is minimal for x, sort by minX,
            // otherwise it's already sorted by minY
            if (xMargin < yMargin)
                node.children.sort(compareMinX);
        }
        // total margin of all possible split distributions where each node is at least m full
        _allDistMargin(node, m, M, compare) {
            node.children.sort(compare);
            const toBBox = this.toBBox;
            const leftBBox = distBBox(node, 0, m, toBBox);
            const rightBBox = distBBox(node, M - m, M, toBBox);
            let margin = bboxMargin(leftBBox) + bboxMargin(rightBBox);
            for (let i = m; i < M - m; i++) {
                const child = node.children[i];
                extend(leftBBox, node.leaf ? toBBox(child) : child);
                margin += bboxMargin(leftBBox);
            }
            for (let i = M - m - 1; i >= m; i--) {
                const child = node.children[i];
                extend(rightBBox, node.leaf ? toBBox(child) : child);
                margin += bboxMargin(rightBBox);
            }
            return margin;
        }
        _adjustParentBBoxes(bbox, path, level) {
            // adjust bboxes along the given tree path
            for (let i = level; i >= 0; i--) {
                extend(path[i], bbox);
            }
        }
        _condense(path) {
            // go through the path, removing empty nodes and updating bboxes
            for (let i = path.length - 1, siblings; i >= 0; i--) {
                if (path[i].children.length === 0) {
                    if (i > 0) {
                        siblings = path[i - 1].children;
                        siblings.splice(siblings.indexOf(path[i]), 1);
                    }
                    else
                        this.clear();
                }
                else
                    calcBBox(path[i], this.toBBox);
            }
        }
    }
    exports.default = RBush;
    function findItem(item, items, equalsFn) {
        if (!equalsFn)
            return items.indexOf(item);
        for (let i = 0; i < items.length; i++) {
            if (equalsFn(item, items[i]))
                return i;
        }
        return -1;
    }
    // calculate node's bbox from bboxes of its children
    function calcBBox(node, toBBox) {
        distBBox(node, 0, node.children.length, toBBox, node);
    }
    // min bounding rectangle of node children from k to p-1
    function distBBox(node, k, p, toBBox, destNode) {
        if (!destNode)
            destNode = createNode(null);
        destNode.minX = Infinity;
        destNode.minY = Infinity;
        destNode.maxX = -Infinity;
        destNode.maxY = -Infinity;
        for (let i = k; i < p; i++) {
            const child = node.children[i];
            extend(destNode, node.leaf ? toBBox(child) : child);
        }
        return destNode;
    }
    function extend(a, b) {
        a.minX = Math.min(a.minX, b.minX);
        a.minY = Math.min(a.minY, b.minY);
        a.maxX = Math.max(a.maxX, b.maxX);
        a.maxY = Math.max(a.maxY, b.maxY);
        return a;
    }
    function compareNodeMinX(a, b) { return a.minX - b.minX; }
    function compareNodeMinY(a, b) { return a.minY - b.minY; }
    function bboxArea(a) { return (a.maxX - a.minX) * (a.maxY - a.minY); }
    function bboxMargin(a) { return (a.maxX - a.minX) + (a.maxY - a.minY); }
    function enlargedArea(a, b) {
        return (Math.max(b.maxX, a.maxX) - Math.min(b.minX, a.minX)) *
            (Math.max(b.maxY, a.maxY) - Math.min(b.minY, a.minY));
    }
    function intersectionArea(a, b) {
        const minX = Math.max(a.minX, b.minX);
        const minY = Math.max(a.minY, b.minY);
        const maxX = Math.min(a.maxX, b.maxX);
        const maxY = Math.min(a.maxY, b.maxY);
        return Math.max(0, maxX - minX) *
            Math.max(0, maxY - minY);
    }
    function contains(a, b) {
        return a.minX <= b.minX &&
            a.minY <= b.minY &&
            b.maxX <= a.maxX &&
            b.maxY <= a.maxY;
    }
    function intersects(a, b) {
        return b.minX <= a.maxX &&
            b.minY <= a.maxY &&
            b.maxX >= a.minX &&
            b.maxY >= a.minY;
    }
    function createNode(children) {
        return {
            children,
            height: 1,
            leaf: true,
            minX: Infinity,
            minY: Infinity,
            maxX: -Infinity,
            maxY: -Infinity
        };
    }
    // sort an array so that items come in groups of n unsorted items, with groups sorted between each other;
    // combines selection algorithm with binary divide & conquer approach
    function multiSelect(arr, left, right, n, compare) {
        const stack = [left, right];
        while (stack.length) {
            right = stack.pop();
            left = stack.pop();
            if (right - left <= n)
                continue;
            const mid = left + Math.ceil((right - left) / n / 2) * n;
            quickselect_1.default(arr, mid, left, right, compare);
            stack.push(left, mid, mid, right);
        }
    }
});
define("node_modules/ol/src/structs/RBush", ["require", "exports", "node_modules/rbush/index", "node_modules/ol/src/extent", "node_modules/ol/src/util", "node_modules/ol/src/obj"], function (require, exports, rbush_js_1, extent_js_32, util_js_17, obj_js_13) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @typedef {Object} Entry
     * @property {number} minX
     * @property {number} minY
     * @property {number} maxX
     * @property {number} maxY
     * @property {Object} [value]
     */
    /**
     * @classdesc
     * Wrapper around the RBush by Vladimir Agafonkin.
     * See https://github.com/mourner/rbush.
     *
     * @template T
     */
    class RBush {
        /**
         * @param {number=} opt_maxEntries Max entries.
         */
        constructor(opt_maxEntries) {
            /**
             * @private
             */
            this.rbush_ = new rbush_js_1.default(opt_maxEntries);
            /**
             * A mapping between the objects added to this rbush wrapper
             * and the objects that are actually added to the internal rbush.
             * @private
             * @type {Object<string, Entry>}
             */
            this.items_ = {};
        }
        /**
         * Insert a value into the RBush.
         * @param {import("../extent.js").Extent} extent Extent.
         * @param {T} value Value.
         */
        insert(extent, value) {
            /** @type {Entry} */
            const item = {
                minX: extent[0],
                minY: extent[1],
                maxX: extent[2],
                maxY: extent[3],
                value: value,
            };
            this.rbush_.insert(item);
            this.items_[util_js_17.getUid(value)] = item;
        }
        /**
         * Bulk-insert values into the RBush.
         * @param {Array<import("../extent.js").Extent>} extents Extents.
         * @param {Array<T>} values Values.
         */
        load(extents, values) {
            const items = new Array(values.length);
            for (let i = 0, l = values.length; i < l; i++) {
                const extent = extents[i];
                const value = values[i];
                /** @type {Entry} */
                const item = {
                    minX: extent[0],
                    minY: extent[1],
                    maxX: extent[2],
                    maxY: extent[3],
                    value: value,
                };
                items[i] = item;
                this.items_[util_js_17.getUid(value)] = item;
            }
            this.rbush_.load(items);
        }
        /**
         * Remove a value from the RBush.
         * @param {T} value Value.
         * @return {boolean} Removed.
         */
        remove(value) {
            const uid = util_js_17.getUid(value);
            // get the object in which the value was wrapped when adding to the
            // internal rbush. then use that object to do the removal.
            const item = this.items_[uid];
            delete this.items_[uid];
            return this.rbush_.remove(item) !== null;
        }
        /**
         * Update the extent of a value in the RBush.
         * @param {import("../extent.js").Extent} extent Extent.
         * @param {T} value Value.
         */
        update(extent, value) {
            const item = this.items_[util_js_17.getUid(value)];
            const bbox = [item.minX, item.minY, item.maxX, item.maxY];
            if (!extent_js_32.equals(bbox, extent)) {
                this.remove(value);
                this.insert(extent, value);
            }
        }
        /**
         * Return all values in the RBush.
         * @return {Array<T>} All.
         */
        getAll() {
            const items = this.rbush_.all();
            return items.map(function (item) {
                return item.value;
            });
        }
        /**
         * Return all values in the given extent.
         * @param {import("../extent.js").Extent} extent Extent.
         * @return {Array<T>} All in extent.
         */
        getInExtent(extent) {
            /** @type {Entry} */
            const bbox = {
                minX: extent[0],
                minY: extent[1],
                maxX: extent[2],
                maxY: extent[3],
            };
            const items = this.rbush_.search(bbox);
            return items.map(function (item) {
                return item.value;
            });
        }
        /**
         * Calls a callback function with each value in the tree.
         * If the callback returns a truthy value, this value is returned without
         * checking the rest of the tree.
         * @param {function(T): *} callback Callback.
         * @return {*} Callback return value.
         */
        forEach(callback) {
            return this.forEach_(this.getAll(), callback);
        }
        /**
         * Calls a callback function with each value in the provided extent.
         * @param {import("../extent.js").Extent} extent Extent.
         * @param {function(T): *} callback Callback.
         * @return {*} Callback return value.
         */
        forEachInExtent(extent, callback) {
            return this.forEach_(this.getInExtent(extent), callback);
        }
        /**
         * @param {Array<T>} values Values.
         * @param {function(T): *} callback Callback.
         * @private
         * @return {*} Callback return value.
         */
        forEach_(values, callback) {
            let result;
            for (let i = 0, l = values.length; i < l; i++) {
                result = callback(values[i]);
                if (result) {
                    return result;
                }
            }
            return result;
        }
        /**
         * @return {boolean} Is empty.
         */
        isEmpty() {
            return obj_js_13.isEmpty(this.items_);
        }
        /**
         * Remove all values from the RBush.
         */
        clear() {
            this.rbush_.clear();
            this.items_ = {};
        }
        /**
         * @param {import("../extent.js").Extent=} opt_extent Extent.
         * @return {import("../extent.js").Extent} Extent.
         */
        getExtent(opt_extent) {
            const data = this.rbush_.toJSON();
            return extent_js_32.createOrUpdate(data.minX, data.minY, data.maxX, data.maxY, opt_extent);
        }
        /**
         * @param {RBush} rbush R-Tree.
         */
        concat(rbush) {
            this.rbush_.load(rbush.rbush_.all());
            for (const i in rbush.items_) {
                this.items_[i] = rbush.items_[i];
            }
        }
    }
    exports.default = RBush;
});
/**
 * @module ol/source/VectorEventType
 */
define("node_modules/ol/src/source/VectorEventType", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @enum {string}
     */
    exports.default = {
        /**
         * Triggered when a feature is added to the source.
         * @event module:ol/source/Vector.VectorSourceEvent#addfeature
         * @api
         */
        ADDFEATURE: 'addfeature',
        /**
         * Triggered when a feature is updated.
         * @event module:ol/source/Vector.VectorSourceEvent#changefeature
         * @api
         */
        CHANGEFEATURE: 'changefeature',
        /**
         * Triggered when the clear method is called on the source.
         * @event module:ol/source/Vector.VectorSourceEvent#clear
         * @api
         */
        CLEAR: 'clear',
        /**
         * Triggered when a feature is removed from the source.
         * See {@link module:ol/source/Vector#clear source.clear()} for exceptions.
         * @event module:ol/source/Vector.VectorSourceEvent#removefeature
         * @api
         */
        REMOVEFEATURE: 'removefeature',
    };
});
/**
 * @module ol/loadingstrategy
 */
define("node_modules/ol/src/loadingstrategy", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.tile = exports.bbox = exports.all = void 0;
    /**
     * Strategy function for loading all features with a single request.
     * @param {import("./extent.js").Extent} extent Extent.
     * @param {number} resolution Resolution.
     * @return {Array<import("./extent.js").Extent>} Extents.
     * @api
     */
    function all(extent, resolution) {
        return [[-Infinity, -Infinity, Infinity, Infinity]];
    }
    exports.all = all;
    /**
     * Strategy function for loading features based on the view's extent and
     * resolution.
     * @param {import("./extent.js").Extent} extent Extent.
     * @param {number} resolution Resolution.
     * @return {Array<import("./extent.js").Extent>} Extents.
     * @api
     */
    function bbox(extent, resolution) {
        return [extent];
    }
    exports.bbox = bbox;
    /**
     * Creates a strategy function for loading features based on a tile grid.
     * @param {import("./tilegrid/TileGrid.js").default} tileGrid Tile grid.
     * @return {function(import("./extent.js").Extent, number): Array<import("./extent.js").Extent>} Loading strategy.
     * @api
     */
    function tile(tileGrid) {
        return (
        /**
         * @param {import("./extent.js").Extent} extent Extent.
         * @param {number} resolution Resolution.
         * @return {Array<import("./extent.js").Extent>} Extents.
         */
        function (extent, resolution) {
            const z = tileGrid.getZForResolution(resolution);
            const tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z);
            /** @type {Array<import("./extent.js").Extent>} */
            const extents = [];
            /** @type {import("./tilecoord.js").TileCoord} */
            const tileCoord = [z, 0, 0];
            for (tileCoord[1] = tileRange.minX; tileCoord[1] <= tileRange.maxX; ++tileCoord[1]) {
                for (tileCoord[2] = tileRange.minY; tileCoord[2] <= tileRange.maxY; ++tileCoord[2]) {
                    extents.push(tileGrid.getTileCoordExtent(tileCoord));
                }
            }
            return extents;
        });
    }
    exports.tile = tile;
});
define("node_modules/ol/src/VectorTile", ["require", "exports", "node_modules/ol/src/Tile", "node_modules/ol/src/TileState"], function (require, exports, Tile_js_1, TileState_js_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    class VectorTile extends Tile_js_1.default {
        /**
         * @param {import("./tilecoord.js").TileCoord} tileCoord Tile coordinate.
         * @param {import("./TileState.js").default} state State.
         * @param {string} src Data source url.
         * @param {import("./format/Feature.js").default} format Feature format.
         * @param {import("./Tile.js").LoadFunction} tileLoadFunction Tile load function.
         * @param {import("./Tile.js").Options=} opt_options Tile options.
         */
        constructor(tileCoord, state, src, format, tileLoadFunction, opt_options) {
            super(tileCoord, state, opt_options);
            /**
             * Extent of this tile; set by the source.
             * @type {import("./extent.js").Extent}
             */
            this.extent = null;
            /**
             * @private
             * @type {import("./format/Feature.js").default}
             */
            this.format_ = format;
            /**
             * @private
             * @type {Array<import("./Feature.js").default>}
             */
            this.features_ = null;
            /**
             * @private
             * @type {import("./featureloader.js").FeatureLoader}
             */
            this.loader_;
            /**
             * Feature projection of this tile; set by the source.
             * @type {import("./proj/Projection.js").default}
             */
            this.projection = null;
            /**
             * Resolution of this tile; set by the source.
             * @type {number}
             */
            this.resolution;
            /**
             * @private
             * @type {import("./Tile.js").LoadFunction}
             */
            this.tileLoadFunction_ = tileLoadFunction;
            /**
             * @private
             * @type {string}
             */
            this.url_ = src;
        }
        /**
         * Get the feature format assigned for reading this tile's features.
         * @return {import("./format/Feature.js").default} Feature format.
         * @api
         */
        getFormat() {
            return this.format_;
        }
        /**
         * Get the features for this tile. Geometries will be in the view projection.
         * @return {Array<import("./Feature.js").FeatureLike>} Features.
         * @api
         */
        getFeatures() {
            return this.features_;
        }
        /**
         * @return {string} Key.
         */
        getKey() {
            return this.url_;
        }
        /**
         * Load not yet loaded URI.
         */
        load() {
            if (this.state == TileState_js_4.default.IDLE) {
                this.setState(TileState_js_4.default.LOADING);
                this.tileLoadFunction_(this, this.url_);
                if (this.loader_) {
                    this.loader_(this.extent, this.resolution, this.projection);
                }
            }
        }
        /**
         * Handler for successful tile load.
         * @param {Array<import("./Feature.js").default>} features The loaded features.
         * @param {import("./proj/Projection.js").default} dataProjection Data projection.
         */
        onLoad(features, dataProjection) {
            this.setFeatures(features);
        }
        /**
         * Handler for tile load errors.
         */
        onError() {
            this.setState(TileState_js_4.default.ERROR);
        }
        /**
         * Function for use in an {@link module:ol/source/VectorTile~VectorTile}'s `tileLoadFunction`.
         * Sets the features for the tile.
         * @param {Array<import("./Feature.js").default>} features Features.
         * @api
         */
        setFeatures(features) {
            this.features_ = features;
            this.setState(TileState_js_4.default.LOADED);
        }
        /**
         * Set the feature loader for reading this tile's features.
         * @param {import("./featureloader.js").FeatureLoader} loader Feature loader.
         * @api
         */
        setLoader(loader) {
            this.loader_ = loader;
        }
    }
    exports.default = VectorTile;
});
define("node_modules/ol/src/featureloader", ["require", "exports", "node_modules/ol/src/format/FormatType", "node_modules/ol/src/functions"], function (require, exports, FormatType_js_1, functions_js_12) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.setWithCredentials = exports.xhr = exports.loadFeaturesXhr = void 0;
    /**
     *
     * @type {boolean}
     * @private
     */
    let withCredentials = false;
    /**
     * {@link module:ol/source/Vector} sources use a function of this type to
     * load features.
     *
     * This function takes an {@link module:ol/extent~Extent} representing the area to be loaded,
     * a `{number}` representing the resolution (map units per pixel) and an
     * {@link module:ol/proj/Projection} for the projection  as
     * arguments. `this` within the function is bound to the
     * {@link module:ol/source/Vector} it's called from.
     *
     * The function is responsible for loading the features and adding them to the
     * source.
     * @typedef {function(this:(import("./source/Vector").default|import("./VectorTile.js").default), import("./extent.js").Extent, number,
     *                    import("./proj/Projection.js").default): void} FeatureLoader
     * @api
     */
    /**
     * {@link module:ol/source/Vector} sources use a function of this type to
     * get the url to load features from.
     *
     * This function takes an {@link module:ol/extent~Extent} representing the area
     * to be loaded, a `{number}` representing the resolution (map units per pixel)
     * and an {@link module:ol/proj/Projection} for the projection  as
     * arguments and returns a `{string}` representing the URL.
     * @typedef {function(import("./extent.js").Extent, number, import("./proj/Projection.js").default): string} FeatureUrlFunction
     * @api
     */
    /**
     * @param {string|FeatureUrlFunction} url Feature URL service.
     * @param {import("./format/Feature.js").default} format Feature format.
     * @param {function(this:import("./VectorTile.js").default, Array<import("./Feature.js").default>, import("./proj/Projection.js").default, import("./extent.js").Extent): void|function(this:import("./source/Vector").default, Array<import("./Feature.js").default>): void} success
     *     Function called with the loaded features and optionally with the data
     *     projection. Called with the vector tile or source as `this`.
     * @param {function(this:import("./VectorTile.js").default): void|function(this:import("./source/Vector").default): void} failure
     *     Function called when loading failed. Called with the vector tile or
     *     source as `this`.
     * @return {FeatureLoader} The feature loader.
     */
    function loadFeaturesXhr(url, format, success, failure) {
        return (
        /**
         * @param {import("./extent.js").Extent} extent Extent.
         * @param {number} resolution Resolution.
         * @param {import("./proj/Projection.js").default} projection Projection.
         * @this {import("./source/Vector").default|import("./VectorTile.js").default}
         */
        function (extent, resolution, projection) {
            const xhr = new XMLHttpRequest();
            xhr.open('GET', typeof url === 'function' ? url(extent, resolution, projection) : url, true);
            if (format.getType() == FormatType_js_1.default.ARRAY_BUFFER) {
                xhr.responseType = 'arraybuffer';
            }
            xhr.withCredentials = withCredentials;
            /**
             * @param {Event} event Event.
             * @private
             */
            xhr.onload = function (event) {
                // status will be 0 for file:// urls
                if (!xhr.status || (xhr.status >= 200 && xhr.status < 300)) {
                    const type = format.getType();
                    /** @type {Document|Node|Object|string|undefined} */
                    let source;
                    if (type == FormatType_js_1.default.JSON || type == FormatType_js_1.default.TEXT) {
                        source = xhr.responseText;
                    }
                    else if (type == FormatType_js_1.default.XML) {
                        source = xhr.responseXML;
                        if (!source) {
                            source = new DOMParser().parseFromString(xhr.responseText, 'application/xml');
                        }
                    }
                    else if (type == FormatType_js_1.default.ARRAY_BUFFER) {
                        source = /** @type {ArrayBuffer} */ (xhr.response);
                    }
                    if (source) {
                        success.call(this, format.readFeatures(source, {
                            extent: extent,
                            featureProjection: projection,
                        }), format.readProjection(source));
                    }
                    else {
                        failure.call(this);
                    }
                }
                else {
                    failure.call(this);
                }
            }.bind(this);
            /**
             * @private
             */
            xhr.onerror = function () {
                failure.call(this);
            }.bind(this);
            xhr.send();
        });
    }
    exports.loadFeaturesXhr = loadFeaturesXhr;
    /**
     * Create an XHR feature loader for a `url` and `format`. The feature loader
     * loads features (with XHR), parses the features, and adds them to the
     * vector source.
     * @param {string|FeatureUrlFunction} url Feature URL service.
     * @param {import("./format/Feature.js").default} format Feature format.
     * @return {FeatureLoader} The feature loader.
     * @api
     */
    function xhr(url, format) {
        return loadFeaturesXhr(url, format, 
        /**
         * @param {Array<import("./Feature.js").default>} features The loaded features.
         * @param {import("./proj/Projection.js").default} dataProjection Data
         * projection.
         * @this {import("./source/Vector").default|import("./VectorTile.js").default}
         */
        function (features, dataProjection) {
            const sourceOrTile = /** @type {?} */ (this);
            if (typeof sourceOrTile.addFeatures === 'function') {
                /** @type {import("./source/Vector").default} */ (sourceOrTile).addFeatures(features);
            }
        }, 
        /* FIXME handle error */ functions_js_12.VOID);
    }
    exports.xhr = xhr;
    /**
     * Setter for the withCredentials configuration for the XHR.
     *
     * @param {boolean} xhrWithCredentials The value of withCredentials to set.
     * Compare https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/
     * @api
     */
    function setWithCredentials(xhrWithCredentials) {
        withCredentials = xhrWithCredentials;
    }
    exports.setWithCredentials = setWithCredentials;
});
/**
 * @module ol/source/Vector
 */
define("node_modules/ol/src/source/Vector", ["require", "exports", "node_modules/ol/src/Collection", "node_modules/ol/src/CollectionEventType", "node_modules/ol/src/events/Event", "node_modules/ol/src/events/EventType", "node_modules/ol/src/ObjectEventType", "node_modules/ol/src/structs/RBush", "node_modules/ol/src/source/Source", "node_modules/ol/src/source/State", "node_modules/ol/src/source/VectorEventType", "node_modules/ol/src/functions", "node_modules/ol/src/loadingstrategy", "node_modules/ol/src/asserts", "node_modules/ol/src/extent", "node_modules/ol/src/array", "node_modules/ol/src/util", "node_modules/ol/src/obj", "node_modules/ol/src/events", "node_modules/ol/src/featureloader"], function (require, exports, Collection_js_4, CollectionEventType_js_4, Event_js_10, EventType_js_32, ObjectEventType_js_6, RBush_js_1, Source_js_2, State_js_6, VectorEventType_js_1, functions_js_13, loadingstrategy_js_1, asserts_js_16, extent_js_33, array_js_16, util_js_18, obj_js_14, events_js_16, featureloader_js_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.VectorSourceEvent = void 0;
    /**
     * A function that takes an {@link module:ol/extent~Extent} and a resolution as arguments, and
     * returns an array of {@link module:ol/extent~Extent} with the extents to load. Usually this
     * is one of the standard {@link module:ol/loadingstrategy} strategies.
     *
     * @typedef {function(import("../extent.js").Extent, number): Array<import("../extent.js").Extent>} LoadingStrategy
     * @api
     */
    /**
     * @classdesc
     * Events emitted by {@link module:ol/source/Vector} instances are instances of this
     * type.
     * @template {import("../geom/Geometry.js").default} Geometry
     */
    class VectorSourceEvent extends Event_js_10.default {
        /**
         * @param {string} type Type.
         * @param {import("../Feature.js").default<Geometry>=} opt_feature Feature.
         */
        constructor(type, opt_feature) {
            super(type);
            /**
             * The feature being added or removed.
             * @type {import("../Feature.js").default<Geometry>|undefined}
             * @api
             */
            this.feature = opt_feature;
        }
    }
    exports.VectorSourceEvent = VectorSourceEvent;
    /**
     * @typedef {Object} Options
     * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
     * @property {Array<import("../Feature.js").default>|Collection<import("../Feature.js").default>} [features]
     * Features. If provided as {@link module:ol/Collection}, the features in the source
     * and the collection will stay in sync.
     * @property {import("../format/Feature.js").default} [format] The feature format used by the XHR
     * feature loader when `url` is set. Required if `url` is set, otherwise ignored.
     * @property {import("../featureloader.js").FeatureLoader} [loader]
     * The loader function used to load features, from a remote source for example.
     * If this is not set and `url` is set, the source will create and use an XHR
     * feature loader.
     *
     * Example:
     *
     * ```js
     * import {Vector} from 'ol/source';
     * import {GeoJSON} from 'ol/format';
     * import {bbox} from 'ol/loadingstrategy';
     *
     * var vectorSource = new Vector({
     *   format: new GeoJSON(),
     *   loader: function(extent, resolution, projection) {
     *      var proj = projection.getCode();
     *      var url = 'https://ahocevar.com/geoserver/wfs?service=WFS&' +
     *          'version=1.1.0&request=GetFeature&typename=osm:water_areas&' +
     *          'outputFormat=application/json&srsname=' + proj + '&' +
     *          'bbox=' + extent.join(',') + ',' + proj;
     *      var xhr = new XMLHttpRequest();
     *      xhr.open('GET', url);
     *      var onError = function() {
     *        vectorSource.removeLoadedExtent(extent);
     *      }
     *      xhr.onerror = onError;
     *      xhr.onload = function() {
     *        if (xhr.status == 200) {
     *          vectorSource.addFeatures(
     *              vectorSource.getFormat().readFeatures(xhr.responseText));
     *        } else {
     *          onError();
     *        }
     *      }
     *      xhr.send();
     *    },
     *    strategy: bbox
     *  });
     * ```
     * @property {boolean} [overlaps=true] This source may have overlapping geometries.
     * Setting this to `false` (e.g. for sources with polygons that represent administrative
     * boundaries or TopoJSON sources) allows the renderer to optimise fill and
     * stroke operations.
     * @property {LoadingStrategy} [strategy] The loading strategy to use.
     * By default an {@link module:ol/loadingstrategy~all}
     * strategy is used, a one-off strategy which loads all features at once.
     * @property {string|import("../featureloader.js").FeatureUrlFunction} [url]
     * Setting this option instructs the source to load features using an XHR loader
     * (see {@link module:ol/featureloader~xhr}). Use a `string` and an
     * {@link module:ol/loadingstrategy~all} for a one-off download of all features from
     * the given URL. Use a {@link module:ol/featureloader~FeatureUrlFunction} to generate the url with
     * other loading strategies.
     * Requires `format` to be set as well.
     * When default XHR feature loader is provided, the features will
     * be transformed from the data projection to the view projection
     * during parsing. If your remote data source does not advertise its projection
     * properly, this transformation will be incorrect. For some formats, the
     * default projection (usually EPSG:4326) can be overridden by setting the
     * dataProjection constructor option on the format.
     * Note that if a source contains non-feature data, such as a GeoJSON geometry
     * or a KML NetworkLink, these will be ignored. Use a custom loader to load these.
     * @property {boolean} [useSpatialIndex=true]
     * By default, an RTree is used as spatial index. When features are removed and
     * added frequently, and the total number of features is low, setting this to
     * `false` may improve performance.
     *
     * Note that
     * {@link module:ol/source/Vector~VectorSource#getFeaturesInExtent},
     * {@link module:ol/source/Vector~VectorSource#getClosestFeatureToCoordinate} and
     * {@link module:ol/source/Vector~VectorSource#getExtent} cannot be used when `useSpatialIndex` is
     * set to `false`, and {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent} will loop
     * through all features.
     *
     * When set to `false`, the features will be maintained in an
     * {@link module:ol/Collection}, which can be retrieved through
     * {@link module:ol/source/Vector~VectorSource#getFeaturesCollection}.
     * @property {boolean} [wrapX=true] Wrap the world horizontally. For vector editing across the
     * -180° and 180° meridians to work properly, this should be set to `false`. The
     * resulting geometry coordinates will then exceed the world bounds.
     */
    /**
     * @classdesc
     * Provides a source of features for vector layers. Vector features provided
     * by this source are suitable for editing. See {@link module:ol/source/VectorTile~VectorTile} for
     * vector data that is optimized for rendering.
     *
     * @fires VectorSourceEvent
     * @api
     * @template {import("../geom/Geometry.js").default} Geometry
     */
    class VectorSource extends Source_js_2.default {
        /**
         * @param {Options=} opt_options Vector source options.
         */
        constructor(opt_options) {
            const options = opt_options || {};
            super({
                attributions: options.attributions,
                projection: undefined,
                state: State_js_6.default.READY,
                wrapX: options.wrapX !== undefined ? options.wrapX : true,
            });
            /**
             * @private
             * @type {import("../featureloader.js").FeatureLoader}
             */
            this.loader_ = functions_js_13.VOID;
            /**
             * @private
             * @type {import("../format/Feature.js").default|undefined}
             */
            this.format_ = options.format;
            /**
             * @private
             * @type {boolean}
             */
            this.overlaps_ = options.overlaps === undefined ? true : options.overlaps;
            /**
             * @private
             * @type {string|import("../featureloader.js").FeatureUrlFunction|undefined}
             */
            this.url_ = options.url;
            if (options.loader !== undefined) {
                this.loader_ = options.loader;
            }
            else if (this.url_ !== undefined) {
                asserts_js_16.assert(this.format_, 7); // `format` must be set when `url` is set
                // create a XHR feature loader for "url" and "format"
                this.loader_ = featureloader_js_1.xhr(this.url_, 
                /** @type {import("../format/Feature.js").default} */ (this.format_));
            }
            /**
             * @private
             * @type {LoadingStrategy}
             */
            this.strategy_ =
                options.strategy !== undefined ? options.strategy : loadingstrategy_js_1.all;
            const useSpatialIndex = options.useSpatialIndex !== undefined ? options.useSpatialIndex : true;
            /**
             * @private
             * @type {RBush<import("../Feature.js").default<Geometry>>}
             */
            this.featuresRtree_ = useSpatialIndex ? new RBush_js_1.default() : null;
            /**
             * @private
             * @type {RBush<{extent: import("../extent.js").Extent}>}
             */
            this.loadedExtentsRtree_ = new RBush_js_1.default();
            /**
             * @private
             * @type {!Object<string, import("../Feature.js").default<Geometry>>}
             */
            this.nullGeometryFeatures_ = {};
            /**
             * A lookup of features by id (the return from feature.getId()).
             * @private
             * @type {!Object<string, import("../Feature.js").default<Geometry>>}
             */
            this.idIndex_ = {};
            /**
             * A lookup of features by uid (using getUid(feature)).
             * @private
             * @type {!Object<string, import("../Feature.js").default<Geometry>>}
             */
            this.uidIndex_ = {};
            /**
             * @private
             * @type {Object<string, Array<import("../events.js").EventsKey>>}
             */
            this.featureChangeKeys_ = {};
            /**
             * @private
             * @type {Collection<import("../Feature.js").default<Geometry>>}
             */
            this.featuresCollection_ = null;
            let collection, features;
            if (Array.isArray(options.features)) {
                features = options.features;
            }
            else if (options.features) {
                collection = options.features;
                features = collection.getArray();
            }
            if (!useSpatialIndex && collection === undefined) {
                collection = new Collection_js_4.default(features);
            }
            if (features !== undefined) {
                this.addFeaturesInternal(features);
            }
            if (collection !== undefined) {
                this.bindFeaturesCollection_(collection);
            }
        }
        /**
         * Add a single feature to the source.  If you want to add a batch of features
         * at once, call {@link module:ol/source/Vector~VectorSource#addFeatures #addFeatures()}
         * instead. A feature will not be added to the source if feature with
         * the same id is already there. The reason for this behavior is to avoid
         * feature duplication when using bbox or tile loading strategies.
         * Note: this also applies if an {@link module:ol/Collection} is used for features,
         * meaning that if a feature with a duplicate id is added in the collection, it will
         * be removed from it right away.
         * @param {import("../Feature.js").default<Geometry>} feature Feature to add.
         * @api
         */
        addFeature(feature) {
            this.addFeatureInternal(feature);
            this.changed();
        }
        /**
         * Add a feature without firing a `change` event.
         * @param {import("../Feature.js").default<Geometry>} feature Feature.
         * @protected
         */
        addFeatureInternal(feature) {
            const featureKey = util_js_18.getUid(feature);
            if (!this.addToIndex_(featureKey, feature)) {
                if (this.featuresCollection_) {
                    this.featuresCollection_.remove(feature);
                }
                return;
            }
            this.setupChangeEvents_(featureKey, feature);
            const geometry = feature.getGeometry();
            if (geometry) {
                const extent = geometry.getExtent();
                if (this.featuresRtree_) {
                    this.featuresRtree_.insert(extent, feature);
                }
            }
            else {
                this.nullGeometryFeatures_[featureKey] = feature;
            }
            this.dispatchEvent(new VectorSourceEvent(VectorEventType_js_1.default.ADDFEATURE, feature));
        }
        /**
         * @param {string} featureKey Unique identifier for the feature.
         * @param {import("../Feature.js").default<Geometry>} feature The feature.
         * @private
         */
        setupChangeEvents_(featureKey, feature) {
            this.featureChangeKeys_[featureKey] = [
                events_js_16.listen(feature, EventType_js_32.default.CHANGE, this.handleFeatureChange_, this),
                events_js_16.listen(feature, ObjectEventType_js_6.default.PROPERTYCHANGE, this.handleFeatureChange_, this),
            ];
        }
        /**
         * @param {string} featureKey Unique identifier for the feature.
         * @param {import("../Feature.js").default<Geometry>} feature The feature.
         * @return {boolean} The feature is "valid", in the sense that it is also a
         *     candidate for insertion into the Rtree.
         * @private
         */
        addToIndex_(featureKey, feature) {
            let valid = true;
            const id = feature.getId();
            if (id !== undefined) {
                if (!(id.toString() in this.idIndex_)) {
                    this.idIndex_[id.toString()] = feature;
                }
                else {
                    valid = false;
                }
            }
            if (valid) {
                asserts_js_16.assert(!(featureKey in this.uidIndex_), 30); // The passed `feature` was already added to the source
                this.uidIndex_[featureKey] = feature;
            }
            return valid;
        }
        /**
         * Add a batch of features to the source.
         * @param {Array<import("../Feature.js").default<Geometry>>} features Features to add.
         * @api
         */
        addFeatures(features) {
            this.addFeaturesInternal(features);
            this.changed();
        }
        /**
         * Add features without firing a `change` event.
         * @param {Array<import("../Feature.js").default<Geometry>>} features Features.
         * @protected
         */
        addFeaturesInternal(features) {
            const extents = [];
            const newFeatures = [];
            const geometryFeatures = [];
            for (let i = 0, length = features.length; i < length; i++) {
                const feature = features[i];
                const featureKey = util_js_18.getUid(feature);
                if (this.addToIndex_(featureKey, feature)) {
                    newFeatures.push(feature);
                }
            }
            for (let i = 0, length = newFeatures.length; i < length; i++) {
                const feature = newFeatures[i];
                const featureKey = util_js_18.getUid(feature);
                this.setupChangeEvents_(featureKey, feature);
                const geometry = feature.getGeometry();
                if (geometry) {
                    const extent = geometry.getExtent();
                    extents.push(extent);
                    geometryFeatures.push(feature);
                }
                else {
                    this.nullGeometryFeatures_[featureKey] = feature;
                }
            }
            if (this.featuresRtree_) {
                this.featuresRtree_.load(extents, geometryFeatures);
            }
            for (let i = 0, length = newFeatures.length; i < length; i++) {
                this.dispatchEvent(new VectorSourceEvent(VectorEventType_js_1.default.ADDFEATURE, newFeatures[i]));
            }
        }
        /**
         * @param {!Collection<import("../Feature.js").default<Geometry>>} collection Collection.
         * @private
         */
        bindFeaturesCollection_(collection) {
            let modifyingCollection = false;
            this.addEventListener(VectorEventType_js_1.default.ADDFEATURE, 
            /**
             * @param {VectorSourceEvent<Geometry>} evt The vector source event
             */
            function (evt) {
                if (!modifyingCollection) {
                    modifyingCollection = true;
                    collection.push(evt.feature);
                    modifyingCollection = false;
                }
            });
            this.addEventListener(VectorEventType_js_1.default.REMOVEFEATURE, 
            /**
             * @param {VectorSourceEvent<Geometry>} evt The vector source event
             */
            function (evt) {
                if (!modifyingCollection) {
                    modifyingCollection = true;
                    collection.remove(evt.feature);
                    modifyingCollection = false;
                }
            });
            collection.addEventListener(CollectionEventType_js_4.default.ADD, 
            /**
             * @param {import("../Collection.js").CollectionEvent} evt The collection event
             */
            function (evt) {
                if (!modifyingCollection) {
                    modifyingCollection = true;
                    this.addFeature(
                    /** @type {import("../Feature.js").default<Geometry>} */ (evt.element));
                    modifyingCollection = false;
                }
            }.bind(this));
            collection.addEventListener(CollectionEventType_js_4.default.REMOVE, 
            /**
             * @param {import("../Collection.js").CollectionEvent} evt The collection event
             */
            function (evt) {
                if (!modifyingCollection) {
                    modifyingCollection = true;
                    this.removeFeature(
                    /** @type {import("../Feature.js").default<Geometry>} */ (evt.element));
                    modifyingCollection = false;
                }
            }.bind(this));
            this.featuresCollection_ = collection;
        }
        /**
         * Remove all features from the source.
         * @param {boolean=} opt_fast Skip dispatching of {@link module:ol/source/Vector.VectorSourceEvent#removefeature} events.
         * @api
         */
        clear(opt_fast) {
            if (opt_fast) {
                for (const featureId in this.featureChangeKeys_) {
                    const keys = this.featureChangeKeys_[featureId];
                    keys.forEach(events_js_16.unlistenByKey);
                }
                if (!this.featuresCollection_) {
                    this.featureChangeKeys_ = {};
                    this.idIndex_ = {};
                    this.uidIndex_ = {};
                }
            }
            else {
                if (this.featuresRtree_) {
                    this.featuresRtree_.forEach(this.removeFeatureInternal.bind(this));
                    for (const id in this.nullGeometryFeatures_) {
                        this.removeFeatureInternal(this.nullGeometryFeatures_[id]);
                    }
                }
            }
            if (this.featuresCollection_) {
                this.featuresCollection_.clear();
            }
            if (this.featuresRtree_) {
                this.featuresRtree_.clear();
            }
            this.nullGeometryFeatures_ = {};
            const clearEvent = new VectorSourceEvent(VectorEventType_js_1.default.CLEAR);
            this.dispatchEvent(clearEvent);
            this.changed();
        }
        /**
         * Iterate through all features on the source, calling the provided callback
         * with each one.  If the callback returns any "truthy" value, iteration will
         * stop and the function will return the same value.
         * Note: this function only iterate through the feature that have a defined geometry.
         *
         * @param {function(import("../Feature.js").default<Geometry>): T} callback Called with each feature
         *     on the source.  Return a truthy value to stop iteration.
         * @return {T|undefined} The return value from the last call to the callback.
         * @template T
         * @api
         */
        forEachFeature(callback) {
            if (this.featuresRtree_) {
                return this.featuresRtree_.forEach(callback);
            }
            else if (this.featuresCollection_) {
                this.featuresCollection_.forEach(callback);
            }
        }
        /**
         * Iterate through all features whose geometries contain the provided
         * coordinate, calling the callback with each feature.  If the callback returns
         * a "truthy" value, iteration will stop and the function will return the same
         * value.
         *
         * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
         * @param {function(import("../Feature.js").default<Geometry>): T} callback Called with each feature
         *     whose goemetry contains the provided coordinate.
         * @return {T|undefined} The return value from the last call to the callback.
         * @template T
         */
        forEachFeatureAtCoordinateDirect(coordinate, callback) {
            const extent = [coordinate[0], coordinate[1], coordinate[0], coordinate[1]];
            return this.forEachFeatureInExtent(extent, function (feature) {
                const geometry = feature.getGeometry();
                if (geometry.intersectsCoordinate(coordinate)) {
                    return callback(feature);
                }
                else {
                    return undefined;
                }
            });
        }
        /**
         * Iterate through all features whose bounding box intersects the provided
         * extent (note that the feature's geometry may not intersect the extent),
         * calling the callback with each feature.  If the callback returns a "truthy"
         * value, iteration will stop and the function will return the same value.
         *
         * If you are interested in features whose geometry intersects an extent, call
         * the {@link module:ol/source/Vector~VectorSource#forEachFeatureIntersectingExtent #forEachFeatureIntersectingExtent()} method instead.
         *
         * When `useSpatialIndex` is set to false, this method will loop through all
         * features, equivalent to {@link module:ol/source/Vector~VectorSource#forEachFeature #forEachFeature()}.
         *
         * @param {import("../extent.js").Extent} extent Extent.
         * @param {function(import("../Feature.js").default<Geometry>): T} callback Called with each feature
         *     whose bounding box intersects the provided extent.
         * @return {T|undefined} The return value from the last call to the callback.
         * @template T
         * @api
         */
        forEachFeatureInExtent(extent, callback) {
            if (this.featuresRtree_) {
                return this.featuresRtree_.forEachInExtent(extent, callback);
            }
            else if (this.featuresCollection_) {
                this.featuresCollection_.forEach(callback);
            }
        }
        /**
         * Iterate through all features whose geometry intersects the provided extent,
         * calling the callback with each feature.  If the callback returns a "truthy"
         * value, iteration will stop and the function will return the same value.
         *
         * If you only want to test for bounding box intersection, call the
         * {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent #forEachFeatureInExtent()} method instead.
         *
         * @param {import("../extent.js").Extent} extent Extent.
         * @param {function(import("../Feature.js").default<Geometry>): T} callback Called with each feature
         *     whose geometry intersects the provided extent.
         * @return {T|undefined} The return value from the last call to the callback.
         * @template T
         * @api
         */
        forEachFeatureIntersectingExtent(extent, callback) {
            return this.forEachFeatureInExtent(extent, 
            /**
             * @param {import("../Feature.js").default<Geometry>} feature Feature.
             * @return {T|undefined} The return value from the last call to the callback.
             */
            function (feature) {
                const geometry = feature.getGeometry();
                if (geometry.intersectsExtent(extent)) {
                    const result = callback(feature);
                    if (result) {
                        return result;
                    }
                }
            });
        }
        /**
         * Get the features collection associated with this source. Will be `null`
         * unless the source was configured with `useSpatialIndex` set to `false`, or
         * with an {@link module:ol/Collection} as `features`.
         * @return {Collection<import("../Feature.js").default<Geometry>>} The collection of features.
         * @api
         */
        getFeaturesCollection() {
            return this.featuresCollection_;
        }
        /**
         * Get all features on the source in random order.
         * @return {Array<import("../Feature.js").default<Geometry>>} Features.
         * @api
         */
        getFeatures() {
            let features;
            if (this.featuresCollection_) {
                features = this.featuresCollection_.getArray();
            }
            else if (this.featuresRtree_) {
                features = this.featuresRtree_.getAll();
                if (!obj_js_14.isEmpty(this.nullGeometryFeatures_)) {
                    array_js_16.extend(features, obj_js_14.getValues(this.nullGeometryFeatures_));
                }
            }
            return /** @type {Array<import("../Feature.js").default<Geometry>>} */ (features);
        }
        /**
         * Get all features whose geometry intersects the provided coordinate.
         * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
         * @return {Array<import("../Feature.js").default<Geometry>>} Features.
         * @api
         */
        getFeaturesAtCoordinate(coordinate) {
            const features = [];
            this.forEachFeatureAtCoordinateDirect(coordinate, function (feature) {
                features.push(feature);
            });
            return features;
        }
        /**
         * Get all features whose bounding box intersects the provided extent.  Note that this returns an array of
         * all features intersecting the given extent in random order (so it may include
         * features whose geometries do not intersect the extent).
         *
         * When `useSpatialIndex` is set to false, this method will return all
         * features.
         *
         * @param {import("../extent.js").Extent} extent Extent.
         * @return {Array<import("../Feature.js").default<Geometry>>} Features.
         * @api
         */
        getFeaturesInExtent(extent) {
            if (this.featuresRtree_) {
                return this.featuresRtree_.getInExtent(extent);
            }
            else if (this.featuresCollection_) {
                return this.featuresCollection_.getArray();
            }
            else {
                return [];
            }
        }
        /**
         * Get the closest feature to the provided coordinate.
         *
         * This method is not available when the source is configured with
         * `useSpatialIndex` set to `false`.
         * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
         * @param {function(import("../Feature.js").default<Geometry>):boolean=} opt_filter Feature filter function.
         *     The filter function will receive one argument, the {@link module:ol/Feature feature}
         *     and it should return a boolean value. By default, no filtering is made.
         * @return {import("../Feature.js").default<Geometry>} Closest feature.
         * @api
         */
        getClosestFeatureToCoordinate(coordinate, opt_filter) {
            // Find the closest feature using branch and bound.  We start searching an
            // infinite extent, and find the distance from the first feature found.  This
            // becomes the closest feature.  We then compute a smaller extent which any
            // closer feature must intersect.  We continue searching with this smaller
            // extent, trying to find a closer feature.  Every time we find a closer
            // feature, we update the extent being searched so that any even closer
            // feature must intersect it.  We continue until we run out of features.
            const x = coordinate[0];
            const y = coordinate[1];
            let closestFeature = null;
            const closestPoint = [NaN, NaN];
            let minSquaredDistance = Infinity;
            const extent = [-Infinity, -Infinity, Infinity, Infinity];
            const filter = opt_filter ? opt_filter : functions_js_13.TRUE;
            this.featuresRtree_.forEachInExtent(extent, 
            /**
             * @param {import("../Feature.js").default<Geometry>} feature Feature.
             */
            function (feature) {
                if (filter(feature)) {
                    const geometry = feature.getGeometry();
                    const previousMinSquaredDistance = minSquaredDistance;
                    minSquaredDistance = geometry.closestPointXY(x, y, closestPoint, minSquaredDistance);
                    if (minSquaredDistance < previousMinSquaredDistance) {
                        closestFeature = feature;
                        // This is sneaky.  Reduce the extent that it is currently being
                        // searched while the R-Tree traversal using this same extent object
                        // is still in progress.  This is safe because the new extent is
                        // strictly contained by the old extent.
                        const minDistance = Math.sqrt(minSquaredDistance);
                        extent[0] = x - minDistance;
                        extent[1] = y - minDistance;
                        extent[2] = x + minDistance;
                        extent[3] = y + minDistance;
                    }
                }
            });
            return closestFeature;
        }
        /**
         * Get the extent of the features currently in the source.
         *
         * This method is not available when the source is configured with
         * `useSpatialIndex` set to `false`.
         * @param {import("../extent.js").Extent=} opt_extent Destination extent. If provided, no new extent
         *     will be created. Instead, that extent's coordinates will be overwritten.
         * @return {import("../extent.js").Extent} Extent.
         * @api
         */
        getExtent(opt_extent) {
            return this.featuresRtree_.getExtent(opt_extent);
        }
        /**
         * Get a feature by its identifier (the value returned by feature.getId()).
         * Note that the index treats string and numeric identifiers as the same.  So
         * `source.getFeatureById(2)` will return a feature with id `'2'` or `2`.
         *
         * @param {string|number} id Feature identifier.
         * @return {import("../Feature.js").default<Geometry>} The feature (or `null` if not found).
         * @api
         */
        getFeatureById(id) {
            const feature = this.idIndex_[id.toString()];
            return feature !== undefined ? feature : null;
        }
        /**
         * Get a feature by its internal unique identifier (using `getUid`).
         *
         * @param {string} uid Feature identifier.
         * @return {import("../Feature.js").default<Geometry>} The feature (or `null` if not found).
         */
        getFeatureByUid(uid) {
            const feature = this.uidIndex_[uid];
            return feature !== undefined ? feature : null;
        }
        /**
         * Get the format associated with this source.
         *
         * @return {import("../format/Feature.js").default|undefined} The feature format.
         * @api
         */
        getFormat() {
            return this.format_;
        }
        /**
         * @return {boolean} The source can have overlapping geometries.
         */
        getOverlaps() {
            return this.overlaps_;
        }
        /**
         * Get the url associated with this source.
         *
         * @return {string|import("../featureloader.js").FeatureUrlFunction|undefined} The url.
         * @api
         */
        getUrl() {
            return this.url_;
        }
        /**
         * @param {Event} event Event.
         * @private
         */
        handleFeatureChange_(event) {
            const feature = /** @type {import("../Feature.js").default<Geometry>} */ (event.target);
            const featureKey = util_js_18.getUid(feature);
            const geometry = feature.getGeometry();
            if (!geometry) {
                if (!(featureKey in this.nullGeometryFeatures_)) {
                    if (this.featuresRtree_) {
                        this.featuresRtree_.remove(feature);
                    }
                    this.nullGeometryFeatures_[featureKey] = feature;
                }
            }
            else {
                const extent = geometry.getExtent();
                if (featureKey in this.nullGeometryFeatures_) {
                    delete this.nullGeometryFeatures_[featureKey];
                    if (this.featuresRtree_) {
                        this.featuresRtree_.insert(extent, feature);
                    }
                }
                else {
                    if (this.featuresRtree_) {
                        this.featuresRtree_.update(extent, feature);
                    }
                }
            }
            const id = feature.getId();
            if (id !== undefined) {
                const sid = id.toString();
                if (this.idIndex_[sid] !== feature) {
                    this.removeFromIdIndex_(feature);
                    this.idIndex_[sid] = feature;
                }
            }
            else {
                this.removeFromIdIndex_(feature);
                this.uidIndex_[featureKey] = feature;
            }
            this.changed();
            this.dispatchEvent(new VectorSourceEvent(VectorEventType_js_1.default.CHANGEFEATURE, feature));
        }
        /**
         * Returns true if the feature is contained within the source.
         * @param {import("../Feature.js").default<Geometry>} feature Feature.
         * @return {boolean} Has feature.
         * @api
         */
        hasFeature(feature) {
            const id = feature.getId();
            if (id !== undefined) {
                return id in this.idIndex_;
            }
            else {
                return util_js_18.getUid(feature) in this.uidIndex_;
            }
        }
        /**
         * @return {boolean} Is empty.
         */
        isEmpty() {
            return this.featuresRtree_.isEmpty() && obj_js_14.isEmpty(this.nullGeometryFeatures_);
        }
        /**
         * @param {import("../extent.js").Extent} extent Extent.
         * @param {number} resolution Resolution.
         * @param {import("../proj/Projection.js").default} projection Projection.
         */
        loadFeatures(extent, resolution, projection) {
            const loadedExtentsRtree = this.loadedExtentsRtree_;
            const extentsToLoad = this.strategy_(extent, resolution);
            this.loading = false;
            for (let i = 0, ii = extentsToLoad.length; i < ii; ++i) {
                const extentToLoad = extentsToLoad[i];
                const alreadyLoaded = loadedExtentsRtree.forEachInExtent(extentToLoad, 
                /**
                 * @param {{extent: import("../extent.js").Extent}} object Object.
                 * @return {boolean} Contains.
                 */
                function (object) {
                    return extent_js_33.containsExtent(object.extent, extentToLoad);
                });
                if (!alreadyLoaded) {
                    this.loader_.call(this, extentToLoad, resolution, projection);
                    loadedExtentsRtree.insert(extentToLoad, { extent: extentToLoad.slice() });
                    this.loading = this.loader_ !== functions_js_13.VOID;
                }
            }
        }
        refresh() {
            this.clear(true);
            this.loadedExtentsRtree_.clear();
            super.refresh();
        }
        /**
         * Remove an extent from the list of loaded extents.
         * @param {import("../extent.js").Extent} extent Extent.
         * @api
         */
        removeLoadedExtent(extent) {
            const loadedExtentsRtree = this.loadedExtentsRtree_;
            let obj;
            loadedExtentsRtree.forEachInExtent(extent, function (object) {
                if (extent_js_33.equals(object.extent, extent)) {
                    obj = object;
                    return true;
                }
            });
            if (obj) {
                loadedExtentsRtree.remove(obj);
            }
        }
        /**
         * Remove a single feature from the source.  If you want to remove all features
         * at once, use the {@link module:ol/source/Vector~VectorSource#clear #clear()} method
         * instead.
         * @param {import("../Feature.js").default<Geometry>} feature Feature to remove.
         * @api
         */
        removeFeature(feature) {
            const featureKey = util_js_18.getUid(feature);
            if (featureKey in this.nullGeometryFeatures_) {
                delete this.nullGeometryFeatures_[featureKey];
            }
            else {
                if (this.featuresRtree_) {
                    this.featuresRtree_.remove(feature);
                }
            }
            this.removeFeatureInternal(feature);
            this.changed();
        }
        /**
         * Remove feature without firing a `change` event.
         * @param {import("../Feature.js").default<Geometry>} feature Feature.
         * @protected
         */
        removeFeatureInternal(feature) {
            const featureKey = util_js_18.getUid(feature);
            this.featureChangeKeys_[featureKey].forEach(events_js_16.unlistenByKey);
            delete this.featureChangeKeys_[featureKey];
            const id = feature.getId();
            if (id !== undefined) {
                delete this.idIndex_[id.toString()];
            }
            delete this.uidIndex_[featureKey];
            this.dispatchEvent(new VectorSourceEvent(VectorEventType_js_1.default.REMOVEFEATURE, feature));
        }
        /**
         * Remove a feature from the id index.  Called internally when the feature id
         * may have changed.
         * @param {import("../Feature.js").default<Geometry>} feature The feature.
         * @return {boolean} Removed the feature from the index.
         * @private
         */
        removeFromIdIndex_(feature) {
            let removed = false;
            for (const id in this.idIndex_) {
                if (this.idIndex_[id] === feature) {
                    delete this.idIndex_[id];
                    removed = true;
                    break;
                }
            }
            return removed;
        }
        /**
         * Set the new loader of the source. The next render cycle will use the
         * new loader.
         * @param {import("../featureloader.js").FeatureLoader} loader The loader to set.
         * @api
         */
        setLoader(loader) {
            this.loader_ = loader;
        }
        /**
         * Points the source to a new url. The next render cycle will use the new url.
         * @param {string|import("../featureloader.js").FeatureUrlFunction} url Url.
         * @api
         */
        setUrl(url) {
            asserts_js_16.assert(this.format_, 7); // `format` must be set when `url` is set
            this.setLoader(featureloader_js_1.xhr(url, this.format_));
        }
    }
    exports.default = VectorSource;
});
/**
 * @module ol/interaction/DragAndDrop
 */
// FIXME should handle all geo-referenced data, not just vector data
define("node_modules/ol/src/interaction/DragAndDrop", ["require", "exports", "node_modules/ol/src/events/Event", "node_modules/ol/src/events/EventType", "node_modules/ol/src/interaction/Interaction", "node_modules/ol/src/functions", "node_modules/ol/src/proj", "node_modules/ol/src/events"], function (require, exports, Event_js_11, EventType_js_33, Interaction_js_6, functions_js_14, proj_js_12, events_js_17) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @typedef {Object} Options
     * @property {Array<typeof import("../format/Feature.js").default>} [formatConstructors] Format constructors.
     * @property {import("../source/Vector.js").default} [source] Optional vector source where features will be added.  If a source is provided
     * all existing features will be removed and new features will be added when
     * they are dropped on the target.  If you want to add features to a vector
     * source without removing the existing features (append only), instead of
     * providing the source option listen for the "addfeatures" event.
     * @property {import("../proj.js").ProjectionLike} [projection] Target projection. By default, the map's view's projection is used.
     * @property {HTMLElement} [target] The element that is used as the drop target, default is the viewport element.
     */
    /**
     * @enum {string}
     */
    const DragAndDropEventType = {
        /**
         * Triggered when features are added
         * @event DragAndDropEvent#addfeatures
         * @api
         */
        ADD_FEATURES: 'addfeatures',
    };
    /**
     * @classdesc
     * Events emitted by {@link module:ol/interaction/DragAndDrop~DragAndDrop} instances are instances
     * of this type.
     */
    class DragAndDropEvent extends Event_js_11.default {
        /**
         * @param {DragAndDropEventType} type Type.
         * @param {File} file File.
         * @param {Array<import("../Feature.js").default>=} opt_features Features.
         * @param {import("../proj/Projection.js").default=} opt_projection Projection.
         */
        constructor(type, file, opt_features, opt_projection) {
            super(type);
            /**
             * The features parsed from dropped data.
             * @type {Array<import("../Feature.js").FeatureLike>|undefined}
             * @api
             */
            this.features = opt_features;
            /**
             * The dropped file.
             * @type {File}
             * @api
             */
            this.file = file;
            /**
             * The feature projection.
             * @type {import("../proj/Projection.js").default|undefined}
             * @api
             */
            this.projection = opt_projection;
        }
    }
    /**
     * @classdesc
     * Handles input of vector data by drag and drop.
     * @api
     *
     * @fires DragAndDropEvent
     */
    class DragAndDrop extends Interaction_js_6.default {
        /**
         * @param {Options=} opt_options Options.
         */
        constructor(opt_options) {
            const options = opt_options ? opt_options : {};
            super({
                handleEvent: functions_js_14.TRUE,
            });
            /**
             * @private
             * @type {Array<typeof import("../format/Feature.js").default>}
             */
            this.formatConstructors_ = options.formatConstructors
                ? options.formatConstructors
                : [];
            /**
             * @private
             * @type {import("../proj/Projection.js").default}
             */
            this.projection_ = options.projection
                ? proj_js_12.get(options.projection)
                : null;
            /**
             * @private
             * @type {?Array<import("../events.js").EventsKey>}
             */
            this.dropListenKeys_ = null;
            /**
             * @private
             * @type {import("../source/Vector.js").default}
             */
            this.source_ = options.source || null;
            /**
             * @private
             * @type {HTMLElement}
             */
            this.target = options.target ? options.target : null;
        }
        /**
         * @param {File} file File.
         * @param {Event} event Load event.
         * @private
         */
        handleResult_(file, event) {
            const result = event.target.result;
            const map = this.getMap();
            let projection = this.projection_;
            if (!projection) {
                const view = map.getView();
                projection = view.getProjection();
            }
            const formatConstructors = this.formatConstructors_;
            for (let i = 0, ii = formatConstructors.length; i < ii; ++i) {
                const format = new formatConstructors[i]();
                const features = this.tryReadFeatures_(format, result, {
                    featureProjection: projection,
                });
                if (features && features.length > 0) {
                    if (this.source_) {
                        this.source_.clear();
                        this.source_.addFeatures(features);
                    }
                    this.dispatchEvent(new DragAndDropEvent(DragAndDropEventType.ADD_FEATURES, file, features, projection));
                    break;
                }
            }
        }
        /**
         * @private
         */
        registerListeners_() {
            const map = this.getMap();
            if (map) {
                const dropArea = this.target ? this.target : map.getViewport();
                this.dropListenKeys_ = [
                    events_js_17.listen(dropArea, EventType_js_33.default.DROP, this.handleDrop, this),
                    events_js_17.listen(dropArea, EventType_js_33.default.DRAGENTER, this.handleStop, this),
                    events_js_17.listen(dropArea, EventType_js_33.default.DRAGOVER, this.handleStop, this),
                    events_js_17.listen(dropArea, EventType_js_33.default.DROP, this.handleStop, this),
                ];
            }
        }
        /**
         * Activate or deactivate the interaction.
         * @param {boolean} active Active.
         * @observable
         * @api
         */
        setActive(active) {
            if (!this.getActive() && active) {
                this.registerListeners_();
            }
            if (this.getActive() && !active) {
                this.unregisterListeners_();
            }
            super.setActive(active);
        }
        /**
         * Remove the interaction from its current map and attach it to the new map.
         * Subclasses may set up event handlers to get notified about changes to
         * the map here.
         * @param {import("../PluggableMap.js").default} map Map.
         */
        setMap(map) {
            this.unregisterListeners_();
            super.setMap(map);
            if (this.getActive()) {
                this.registerListeners_();
            }
        }
        /**
         * @param {import("../format/Feature.js").default} format Format.
         * @param {string} text Text.
         * @param {import("../format/Feature.js").ReadOptions} options Read options.
         * @private
         * @return {Array<import("../Feature.js").default>} Features.
         */
        tryReadFeatures_(format, text, options) {
            try {
                return (
                /** @type {Array<import("../Feature.js").default>} */
                (format.readFeatures(text, options)));
            }
            catch (e) {
                return null;
            }
        }
        /**
         * @private
         */
        unregisterListeners_() {
            if (this.dropListenKeys_) {
                this.dropListenKeys_.forEach(events_js_17.unlistenByKey);
                this.dropListenKeys_ = null;
            }
        }
        /**
         * @param {DragEvent} event Event.
         */
        handleDrop(event) {
            const files = event.dataTransfer.files;
            for (let i = 0, ii = files.length; i < ii; ++i) {
                const file = files.item(i);
                const reader = new FileReader();
                reader.addEventListener(EventType_js_33.default.LOAD, this.handleResult_.bind(this, file));
                reader.readAsText(file);
            }
        }
        /**
         * @param {DragEvent} event Event.
         */
        handleStop(event) {
            event.stopPropagation();
            event.preventDefault();
            event.dataTransfer.dropEffect = 'copy';
        }
    }
    exports.default = DragAndDrop;
});
define("node_modules/ol/src/interaction/DragRotateAndZoom", ["require", "exports", "node_modules/ol/src/interaction/Pointer", "node_modules/ol/src/events/condition"], function (require, exports, Pointer_js_6, condition_js_8) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @typedef {Object} Options
     * @property {import("../events/condition.js").Condition} [condition] A function that
     * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
     * boolean to indicate whether that event should be handled.
     * Default is {@link module:ol/events/condition~shiftKeyOnly}.
     * @property {number} [duration=400] Animation duration in milliseconds.
     */
    /**
     * @classdesc
     * Allows the user to zoom and rotate the map by clicking and dragging
     * on the map.  By default, this interaction is limited to when the shift
     * key is held down.
     *
     * This interaction is only supported for mouse devices.
     *
     * And this interaction is not included in the default interactions.
     * @api
     */
    class DragRotateAndZoom extends Pointer_js_6.default {
        /**
         * @param {Options=} opt_options Options.
         */
        constructor(opt_options) {
            const options = opt_options ? opt_options : {};
            super(/** @type {import("./Pointer.js").Options} */ (options));
            /**
             * @private
             * @type {import("../events/condition.js").Condition}
             */
            this.condition_ = options.condition ? options.condition : condition_js_8.shiftKeyOnly;
            /**
             * @private
             * @type {number|undefined}
             */
            this.lastAngle_ = undefined;
            /**
             * @private
             * @type {number|undefined}
             */
            this.lastMagnitude_ = undefined;
            /**
             * @private
             * @type {number}
             */
            this.lastScaleDelta_ = 0;
            /**
             * @private
             * @type {number}
             */
            this.duration_ = options.duration !== undefined ? options.duration : 400;
        }
        /**
         * Handle pointer drag events.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
         */
        handleDragEvent(mapBrowserEvent) {
            if (!condition_js_8.mouseOnly(mapBrowserEvent)) {
                return;
            }
            const map = mapBrowserEvent.map;
            const size = map.getSize();
            const offset = mapBrowserEvent.pixel;
            const deltaX = offset[0] - size[0] / 2;
            const deltaY = size[1] / 2 - offset[1];
            const theta = Math.atan2(deltaY, deltaX);
            const magnitude = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
            const view = map.getView();
            if (this.lastAngle_ !== undefined) {
                const angleDelta = this.lastAngle_ - theta;
                view.adjustRotationInternal(angleDelta);
            }
            this.lastAngle_ = theta;
            if (this.lastMagnitude_ !== undefined) {
                view.adjustResolutionInternal(this.lastMagnitude_ / magnitude);
            }
            if (this.lastMagnitude_ !== undefined) {
                this.lastScaleDelta_ = this.lastMagnitude_ / magnitude;
            }
            this.lastMagnitude_ = magnitude;
        }
        /**
         * Handle pointer up events.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
         * @return {boolean} If the event was consumed.
         */
        handleUpEvent(mapBrowserEvent) {
            if (!condition_js_8.mouseOnly(mapBrowserEvent)) {
                return true;
            }
            const map = mapBrowserEvent.map;
            const view = map.getView();
            const direction = this.lastScaleDelta_ > 1 ? 1 : -1;
            view.endInteraction(this.duration_, direction);
            this.lastScaleDelta_ = 0;
            return false;
        }
        /**
         * Handle pointer down events.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
         * @return {boolean} If the event was consumed.
         */
        handleDownEvent(mapBrowserEvent) {
            if (!condition_js_8.mouseOnly(mapBrowserEvent)) {
                return false;
            }
            if (this.condition_(mapBrowserEvent)) {
                mapBrowserEvent.map.getView().beginInteraction();
                this.lastAngle_ = undefined;
                this.lastMagnitude_ = undefined;
                return true;
            }
            else {
                return false;
            }
        }
    }
    exports.default = DragRotateAndZoom;
});
/**
 * @module ol/source/TileEventType
 */
define("node_modules/ol/src/source/TileEventType", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @enum {string}
     */
    exports.default = {
        /**
         * Triggered when a tile starts loading.
         * @event module:ol/source/Tile.TileSourceEvent#tileloadstart
         * @api
         */
        TILELOADSTART: 'tileloadstart',
        /**
         * Triggered when a tile finishes loading, either when its data is loaded,
         * or when loading was aborted because the tile is no longer needed.
         * @event module:ol/source/Tile.TileSourceEvent#tileloadend
         * @api
         */
        TILELOADEND: 'tileloadend',
        /**
         * Triggered if tile loading results in an error.
         * @event module:ol/source/Tile.TileSourceEvent#tileloaderror
         * @api
         */
        TILELOADERROR: 'tileloaderror',
    };
});
define("node_modules/ol/src/tileurlfunction", ["require", "exports", "node_modules/ol/src/asserts", "node_modules/ol/src/math", "node_modules/ol/src/tilecoord"], function (require, exports, asserts_js_17, math_js_20, tilecoord_js_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.expandUrl = exports.nullTileUrlFunction = exports.createFromTileUrlFunctions = exports.createFromTemplates = exports.createFromTemplate = void 0;
    /**
     * @param {string} template Template.
     * @param {import("./tilegrid/TileGrid.js").default} tileGrid Tile grid.
     * @return {import("./Tile.js").UrlFunction} Tile URL function.
     */
    function createFromTemplate(template, tileGrid) {
        const zRegEx = /\{z\}/g;
        const xRegEx = /\{x\}/g;
        const yRegEx = /\{y\}/g;
        const dashYRegEx = /\{-y\}/g;
        return (
        /**
         * @param {import("./tilecoord.js").TileCoord} tileCoord Tile Coordinate.
         * @param {number} pixelRatio Pixel ratio.
         * @param {import("./proj/Projection.js").default} projection Projection.
         * @return {string|undefined} Tile URL.
         */
        function (tileCoord, pixelRatio, projection) {
            if (!tileCoord) {
                return undefined;
            }
            else {
                return template
                    .replace(zRegEx, tileCoord[0].toString())
                    .replace(xRegEx, tileCoord[1].toString())
                    .replace(yRegEx, tileCoord[2].toString())
                    .replace(dashYRegEx, function () {
                    const z = tileCoord[0];
                    const range = tileGrid.getFullTileRange(z);
                    asserts_js_17.assert(range, 55); // The {-y} placeholder requires a tile grid with extent
                    const y = range.getHeight() - tileCoord[2] - 1;
                    return y.toString();
                });
            }
        });
    }
    exports.createFromTemplate = createFromTemplate;
    /**
     * @param {Array<string>} templates Templates.
     * @param {import("./tilegrid/TileGrid.js").default} tileGrid Tile grid.
     * @return {import("./Tile.js").UrlFunction} Tile URL function.
     */
    function createFromTemplates(templates, tileGrid) {
        const len = templates.length;
        const tileUrlFunctions = new Array(len);
        for (let i = 0; i < len; ++i) {
            tileUrlFunctions[i] = createFromTemplate(templates[i], tileGrid);
        }
        return createFromTileUrlFunctions(tileUrlFunctions);
    }
    exports.createFromTemplates = createFromTemplates;
    /**
     * @param {Array<import("./Tile.js").UrlFunction>} tileUrlFunctions Tile URL Functions.
     * @return {import("./Tile.js").UrlFunction} Tile URL function.
     */
    function createFromTileUrlFunctions(tileUrlFunctions) {
        if (tileUrlFunctions.length === 1) {
            return tileUrlFunctions[0];
        }
        return (
        /**
         * @param {import("./tilecoord.js").TileCoord} tileCoord Tile Coordinate.
         * @param {number} pixelRatio Pixel ratio.
         * @param {import("./proj/Projection.js").default} projection Projection.
         * @return {string|undefined} Tile URL.
         */
        function (tileCoord, pixelRatio, projection) {
            if (!tileCoord) {
                return undefined;
            }
            else {
                const h = tilecoord_js_4.hash(tileCoord);
                const index = math_js_20.modulo(h, tileUrlFunctions.length);
                return tileUrlFunctions[index](tileCoord, pixelRatio, projection);
            }
        });
    }
    exports.createFromTileUrlFunctions = createFromTileUrlFunctions;
    /**
     * @param {import("./tilecoord.js").TileCoord} tileCoord Tile coordinate.
     * @param {number} pixelRatio Pixel ratio.
     * @param {import("./proj/Projection.js").default} projection Projection.
     * @return {string|undefined} Tile URL.
     */
    function nullTileUrlFunction(tileCoord, pixelRatio, projection) {
        return undefined;
    }
    exports.nullTileUrlFunction = nullTileUrlFunction;
    /**
     * @param {string} url URL.
     * @return {Array<string>} Array of urls.
     */
    function expandUrl(url) {
        const urls = [];
        let match = /\{([a-z])-([a-z])\}/.exec(url);
        if (match) {
            // char range
            const startCharCode = match[1].charCodeAt(0);
            const stopCharCode = match[2].charCodeAt(0);
            let charCode;
            for (charCode = startCharCode; charCode <= stopCharCode; ++charCode) {
                urls.push(url.replace(match[0], String.fromCharCode(charCode)));
            }
            return urls;
        }
        match = /\{(\d+)-(\d+)\}/.exec(url);
        if (match) {
            // number range
            const stop = parseInt(match[2], 10);
            for (let i = parseInt(match[1], 10); i <= stop; i++) {
                urls.push(url.replace(match[0], i.toString()));
            }
            return urls;
        }
        urls.push(url);
        return urls;
    }
    exports.expandUrl = expandUrl;
});
define("node_modules/ol/src/source/UrlTile", ["require", "exports", "node_modules/ol/src/source/TileEventType", "node_modules/ol/src/source/Tile", "node_modules/ol/src/TileState", "node_modules/ol/src/tileurlfunction", "node_modules/ol/src/tilecoord", "node_modules/ol/src/util"], function (require, exports, TileEventType_js_1, Tile_js_2, TileState_js_5, tileurlfunction_js_1, tilecoord_js_5, util_js_19) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @typedef {Object} Options
     * @property {import("./Source.js").AttributionLike} [attributions]
     * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
     * @property {number} [cacheSize]
     * @property {boolean} [opaque=false] Whether the layer is opaque.
     * @property {import("../proj.js").ProjectionLike} [projection]
     * @property {import("./State.js").default} [state]
     * @property {import("../tilegrid/TileGrid.js").default} [tileGrid]
     * @property {import("../Tile.js").LoadFunction} tileLoadFunction
     * @property {number} [tilePixelRatio]
     * @property {import("../Tile.js").UrlFunction} [tileUrlFunction]
     * @property {string} [url]
     * @property {Array<string>} [urls]
     * @property {boolean} [wrapX=true]
     * @property {number} [transition]
     * @property {string} [key]
     * @property {number} [zDirection=0]
     */
    /**
     * @classdesc
     * Base class for sources providing tiles divided into a tile grid over http.
     *
     * @fires import("./Tile.js").TileSourceEvent
     */
    class UrlTile extends Tile_js_2.default {
        /**
         * @param {Options} options Image tile options.
         */
        constructor(options) {
            super({
                attributions: options.attributions,
                cacheSize: options.cacheSize,
                opaque: options.opaque,
                projection: options.projection,
                state: options.state,
                tileGrid: options.tileGrid,
                tilePixelRatio: options.tilePixelRatio,
                wrapX: options.wrapX,
                transition: options.transition,
                key: options.key,
                attributionsCollapsible: options.attributionsCollapsible,
                zDirection: options.zDirection,
            });
            /**
             * @private
             * @type {boolean}
             */
            this.generateTileUrlFunction_ =
                this.tileUrlFunction === UrlTile.prototype.tileUrlFunction;
            /**
             * @protected
             * @type {import("../Tile.js").LoadFunction}
             */
            this.tileLoadFunction = options.tileLoadFunction;
            if (options.tileUrlFunction) {
                this.tileUrlFunction = options.tileUrlFunction.bind(this);
            }
            /**
             * @protected
             * @type {!Array<string>|null}
             */
            this.urls = null;
            if (options.urls) {
                this.setUrls(options.urls);
            }
            else if (options.url) {
                this.setUrl(options.url);
            }
            /**
             * @private
             * @type {!Object<string, boolean>}
             */
            this.tileLoadingKeys_ = {};
        }
        /**
         * Return the tile load function of the source.
         * @return {import("../Tile.js").LoadFunction} TileLoadFunction
         * @api
         */
        getTileLoadFunction() {
            return this.tileLoadFunction;
        }
        /**
         * Return the tile URL function of the source.
         * @return {import("../Tile.js").UrlFunction} TileUrlFunction
         * @api
         */
        getTileUrlFunction() {
            return this.tileUrlFunction;
        }
        /**
         * Return the URLs used for this source.
         * When a tileUrlFunction is used instead of url or urls,
         * null will be returned.
         * @return {!Array<string>|null} URLs.
         * @api
         */
        getUrls() {
            return this.urls;
        }
        /**
         * Handle tile change events.
         * @param {import("../events/Event.js").default} event Event.
         * @protected
         */
        handleTileChange(event) {
            const tile = /** @type {import("../Tile.js").default} */ (event.target);
            const uid = util_js_19.getUid(tile);
            const tileState = tile.getState();
            let type;
            if (tileState == TileState_js_5.default.LOADING) {
                this.tileLoadingKeys_[uid] = true;
                type = TileEventType_js_1.default.TILELOADSTART;
            }
            else if (uid in this.tileLoadingKeys_) {
                delete this.tileLoadingKeys_[uid];
                type =
                    tileState == TileState_js_5.default.ERROR
                        ? TileEventType_js_1.default.TILELOADERROR
                        : tileState == TileState_js_5.default.LOADED
                            ? TileEventType_js_1.default.TILELOADEND
                            : undefined;
            }
            if (type != undefined) {
                this.dispatchEvent(new Tile_js_2.TileSourceEvent(type, tile));
            }
        }
        /**
         * Set the tile load function of the source.
         * @param {import("../Tile.js").LoadFunction} tileLoadFunction Tile load function.
         * @api
         */
        setTileLoadFunction(tileLoadFunction) {
            this.tileCache.clear();
            this.tileLoadFunction = tileLoadFunction;
            this.changed();
        }
        /**
         * Set the tile URL function of the source.
         * @param {import("../Tile.js").UrlFunction} tileUrlFunction Tile URL function.
         * @param {string=} key Optional new tile key for the source.
         * @api
         */
        setTileUrlFunction(tileUrlFunction, key) {
            this.tileUrlFunction = tileUrlFunction;
            this.tileCache.pruneExceptNewestZ();
            if (typeof key !== 'undefined') {
                this.setKey(key);
            }
            else {
                this.changed();
            }
        }
        /**
         * Set the URL to use for requests.
         * @param {string} url URL.
         * @api
         */
        setUrl(url) {
            const urls = tileurlfunction_js_1.expandUrl(url);
            this.urls = urls;
            this.setUrls(urls);
        }
        /**
         * Set the URLs to use for requests.
         * @param {Array<string>} urls URLs.
         * @api
         */
        setUrls(urls) {
            this.urls = urls;
            const key = urls.join('\n');
            if (this.generateTileUrlFunction_) {
                this.setTileUrlFunction(tileurlfunction_js_1.createFromTemplates(urls, this.tileGrid), key);
            }
            else {
                this.setKey(key);
            }
        }
        /**
         * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
         * @param {number} pixelRatio Pixel ratio.
         * @param {import("../proj/Projection.js").default} projection Projection.
         * @return {string|undefined} Tile URL.
         */
        tileUrlFunction(tileCoord, pixelRatio, projection) {
            return undefined;
        }
        /**
         * Marks a tile coord as being used, without triggering a load.
         * @param {number} z Tile coordinate z.
         * @param {number} x Tile coordinate x.
         * @param {number} y Tile coordinate y.
         */
        useTile(z, x, y) {
            const tileCoordKey = tilecoord_js_5.getKeyZXY(z, x, y);
            if (this.tileCache.containsKey(tileCoordKey)) {
                this.tileCache.get(tileCoordKey);
            }
        }
    }
    exports.default = UrlTile;
});
define("node_modules/ol/src/geom/flat/textpath", ["require", "exports", "node_modules/ol/src/math", "node_modules/ol/src/geom/flat/transform"], function (require, exports, math_js_21, transform_js_13) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.drawTextOnPath = void 0;
    /**
     * @param {Array<number>} flatCoordinates Path to put text on.
     * @param {number} offset Start offset of the `flatCoordinates`.
     * @param {number} end End offset of the `flatCoordinates`.
     * @param {number} stride Stride.
     * @param {string} text Text to place on the path.
     * @param {number} startM m along the path where the text starts.
     * @param {number} maxAngle Max angle between adjacent chars in radians.
     * @param {number} scale The product of the text scale and the device pixel ratio.
     * @param {function(string, string, Object<string, number>):number} measureAndCacheTextWidth Measure and cache text width.
     * @param {string} font The font.
     * @param {Object<string, number>} cache A cache of measured widths.
     * @param {number} rotation Rotation to apply to the flatCoordinates to determine whether text needs to be reversed.
     * @return {Array<Array<*>>} The result array (or null if `maxAngle` was
     * exceeded). Entries of the array are x, y, anchorX, angle, chunk.
     */
    function drawTextOnPath(flatCoordinates, offset, end, stride, text, startM, maxAngle, scale, measureAndCacheTextWidth, font, cache, rotation) {
        const result = [];
        // Keep text upright
        let reverse;
        if (rotation) {
            const rotatedCoordinates = transform_js_13.rotate(flatCoordinates, offset, end, stride, rotation, [flatCoordinates[offset], flatCoordinates[offset + 1]]);
            reverse =
                rotatedCoordinates[0] >
                    rotatedCoordinates[rotatedCoordinates.length - stride];
        }
        else {
            reverse = flatCoordinates[offset] > flatCoordinates[end - stride];
        }
        const numChars = text.length;
        let x1 = flatCoordinates[offset];
        let y1 = flatCoordinates[offset + 1];
        offset += stride;
        let x2 = flatCoordinates[offset];
        let y2 = flatCoordinates[offset + 1];
        let segmentM = 0;
        let segmentLength = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
        let angleChanged = false;
        let index, previousAngle;
        for (let i = 0; i < numChars; ++i) {
            index = reverse ? numChars - i - 1 : i;
            const char = text[index];
            const charLength = scale * measureAndCacheTextWidth(font, char, cache);
            const charM = startM + charLength / 2;
            while (offset < end - stride && segmentM + segmentLength < charM) {
                x1 = x2;
                y1 = y2;
                offset += stride;
                x2 = flatCoordinates[offset];
                y2 = flatCoordinates[offset + 1];
                segmentM += segmentLength;
                segmentLength = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
            }
            const segmentPos = charM - segmentM;
            let angle = Math.atan2(y2 - y1, x2 - x1);
            if (reverse) {
                angle += angle > 0 ? -Math.PI : Math.PI;
            }
            if (previousAngle !== undefined) {
                let delta = angle - previousAngle;
                angleChanged = angleChanged || delta !== 0;
                delta +=
                    delta > Math.PI ? -2 * Math.PI : delta < -Math.PI ? 2 * Math.PI : 0;
                if (Math.abs(delta) > maxAngle) {
                    return null;
                }
            }
            previousAngle = angle;
            const interpolate = segmentPos / segmentLength;
            const x = math_js_21.lerp(x1, x2, interpolate);
            const y = math_js_21.lerp(y1, y2, interpolate);
            result[index] = [x, y, charLength / 2, angle, char];
            startM += charLength;
        }
        return angleChanged
            ? result
            : [[result[0][0], result[0][1], result[0][2], result[0][3], text]];
    }
    exports.drawTextOnPath = drawTextOnPath;
});
define("node_modules/ol/src/render/canvas/Executor", ["require", "exports", "node_modules/ol/src/render/canvas/Instruction", "node_modules/rbush/index", "node_modules/ol/src/render/canvas/TextBuilder", "node_modules/ol/src/has", "node_modules/ol/src/transform", "node_modules/ol/src/extent", "node_modules/ol/src/render/canvas", "node_modules/ol/src/render/canvas", "node_modules/ol/src/geom/flat/textpath", "node_modules/ol/src/array", "node_modules/ol/src/geom/flat/length", "node_modules/ol/src/geom/flat/transform"], function (require, exports, Instruction_js_6, rbush_js_2, TextBuilder_js_2, has_js_9, transform_js_14, extent_js_34, canvas_js_7, canvas_js_8, textpath_js_1, array_js_17, length_js_2, transform_js_15) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @typedef {Object} SerializableInstructions
     * @property {Array<*>} instructions The rendering instructions.
     * @property {Array<*>} hitDetectionInstructions The rendering hit detection instructions.
     * @property {Array<number>} coordinates The array of all coordinates.
     * @property {!Object<string, import("../canvas.js").TextState>} textStates The text states (decluttering).
     * @property {!Object<string, import("../canvas.js").FillState>} fillStates The fill states (decluttering).
     * @property {!Object<string, import("../canvas.js").StrokeState>} strokeStates The stroke states (decluttering).
     */
    /**
     * @type {import("../../extent.js").Extent}
     */
    const tmpExtent = extent_js_34.createEmpty();
    /**
     * @type {!import("../../transform.js").Transform}
     */
    const tmpTransform = transform_js_14.create();
    /** @type {import("../../coordinate.js").Coordinate} */
    const p1 = [];
    /** @type {import("../../coordinate.js").Coordinate} */
    const p2 = [];
    /** @type {import("../../coordinate.js").Coordinate} */
    const p3 = [];
    /** @type {import("../../coordinate.js").Coordinate} */
    const p4 = [];
    class Executor {
        /**
         * @param {number} resolution Resolution.
         * @param {number} pixelRatio Pixel ratio.
         * @param {boolean} overlaps The replay can have overlapping geometries.
         * @param {SerializableInstructions} instructions The serializable instructions
         * @param {import("../../size.js").Size} renderBuffer Render buffer (width/height) in pixels.
         */
        constructor(resolution, pixelRatio, overlaps, instructions, renderBuffer) {
            /**
             * @protected
             * @type {boolean}
             */
            this.overlaps = overlaps;
            /**
             * @protected
             * @type {number}
             */
            this.pixelRatio = pixelRatio;
            /**
             * @protected
             * @const
             * @type {number}
             */
            this.resolution = resolution;
            /**
             * @private
             * @type {boolean}
             */
            this.alignFill_;
            /**
             * @type {Array<*>}
             */
            this.declutterItems = [];
            /**
             * @protected
             * @type {Array<*>}
             */
            this.instructions = instructions.instructions;
            /**
             * @protected
             * @type {Array<number>}
             */
            this.coordinates = instructions.coordinates;
            /**
             * @private
             * @type {!Object<number,import("../../coordinate.js").Coordinate|Array<import("../../coordinate.js").Coordinate>|Array<Array<import("../../coordinate.js").Coordinate>>>}
             */
            this.coordinateCache_ = {};
            /**
             * @private
             * @type {import("../../size.js").Size}
             */
            this.renderBuffer_ = renderBuffer;
            /**
             * @private
             * @type {!import("../../transform.js").Transform}
             */
            this.renderedTransform_ = transform_js_14.create();
            /**
             * @protected
             * @type {Array<*>}
             */
            this.hitDetectionInstructions = instructions.hitDetectionInstructions;
            /**
             * @private
             * @type {Array<number>}
             */
            this.pixelCoordinates_ = null;
            /**
             * @private
             * @type {number}
             */
            this.viewRotation_ = 0;
            /**
             * @type {!Object<string, import("../canvas.js").FillState>}
             */
            this.fillStates = instructions.fillStates || {};
            /**
             * @type {!Object<string, import("../canvas.js").StrokeState>}
             */
            this.strokeStates = instructions.strokeStates || {};
            /**
             * @type {!Object<string, import("../canvas.js").TextState>}
             */
            this.textStates = instructions.textStates || {};
            /**
             * @private
             * @type {Object<string, Object<string, number>>}
             */
            this.widths_ = {};
            /**
             * @private
             * @type {Object<string, import("../canvas.js").Label>}
             */
            this.labels_ = {};
        }
        /**
         * @param {string} text Text.
         * @param {string} textKey Text style key.
         * @param {string} fillKey Fill style key.
         * @param {string} strokeKey Stroke style key.
         * @return {import("../canvas.js").Label} Label.
         */
        createLabel(text, textKey, fillKey, strokeKey) {
            const key = text + textKey + fillKey + strokeKey;
            if (this.labels_[key]) {
                return this.labels_[key];
            }
            const strokeState = strokeKey ? this.strokeStates[strokeKey] : null;
            const fillState = fillKey ? this.fillStates[fillKey] : null;
            const textState = this.textStates[textKey];
            const pixelRatio = this.pixelRatio;
            const scale = [
                textState.scale[0] * pixelRatio,
                textState.scale[1] * pixelRatio,
            ];
            const align = TextBuilder_js_2.TEXT_ALIGN[textState.textAlign || canvas_js_8.defaultTextAlign];
            const strokeWidth = strokeKey && strokeState.lineWidth ? strokeState.lineWidth : 0;
            const lines = text.split('\n');
            const numLines = lines.length;
            const widths = [];
            const width = canvas_js_8.measureTextWidths(textState.font, lines, widths);
            const lineHeight = canvas_js_8.measureTextHeight(textState.font);
            const height = lineHeight * numLines;
            const renderWidth = width + strokeWidth;
            const contextInstructions = [];
            // make canvas 2 pixels wider to account for italic text width measurement errors
            const w = (renderWidth + 2) * scale[0];
            const h = (height + strokeWidth) * scale[1];
            /** @type {import("../canvas.js").Label} */
            const label = {
                width: w < 0 ? Math.floor(w) : Math.ceil(w),
                height: h < 0 ? Math.floor(h) : Math.ceil(h),
                contextInstructions: contextInstructions,
            };
            if (scale[0] != 1 || scale[1] != 1) {
                contextInstructions.push('scale', scale);
            }
            contextInstructions.push('font', textState.font);
            if (strokeKey) {
                contextInstructions.push('strokeStyle', strokeState.strokeStyle);
                contextInstructions.push('lineWidth', strokeWidth);
                contextInstructions.push('lineCap', strokeState.lineCap);
                contextInstructions.push('lineJoin', strokeState.lineJoin);
                contextInstructions.push('miterLimit', strokeState.miterLimit);
                // eslint-disable-next-line
                const Context = has_js_9.WORKER_OFFSCREEN_CANVAS ? OffscreenCanvasRenderingContext2D : CanvasRenderingContext2D;
                if (Context.prototype.setLineDash) {
                    contextInstructions.push('setLineDash', [strokeState.lineDash]);
                    contextInstructions.push('lineDashOffset', strokeState.lineDashOffset);
                }
            }
            if (fillKey) {
                contextInstructions.push('fillStyle', fillState.fillStyle);
            }
            contextInstructions.push('textBaseline', 'middle');
            contextInstructions.push('textAlign', 'center');
            const leftRight = 0.5 - align;
            const x = align * renderWidth + leftRight * strokeWidth;
            let i;
            if (strokeKey) {
                for (i = 0; i < numLines; ++i) {
                    contextInstructions.push('strokeText', [
                        lines[i],
                        x + leftRight * widths[i],
                        0.5 * (strokeWidth + lineHeight) + i * lineHeight,
                    ]);
                }
            }
            if (fillKey) {
                for (i = 0; i < numLines; ++i) {
                    contextInstructions.push('fillText', [
                        lines[i],
                        x + leftRight * widths[i],
                        0.5 * (strokeWidth + lineHeight) + i * lineHeight,
                    ]);
                }
            }
            this.labels_[key] = label;
            return label;
        }
        /**
         * @param {CanvasRenderingContext2D} context Context.
         * @param {import("../../coordinate.js").Coordinate} p1 1st point of the background box.
         * @param {import("../../coordinate.js").Coordinate} p2 2nd point of the background box.
         * @param {import("../../coordinate.js").Coordinate} p3 3rd point of the background box.
         * @param {import("../../coordinate.js").Coordinate} p4 4th point of the background box.
         * @param {Array<*>} fillInstruction Fill instruction.
         * @param {Array<*>} strokeInstruction Stroke instruction.
         * @param {boolean} declutter Declutter.
         */
        replayTextBackground_(context, p1, p2, p3, p4, fillInstruction, strokeInstruction, declutter) {
            context.beginPath();
            context.moveTo.apply(context, p1);
            context.lineTo.apply(context, p2);
            context.lineTo.apply(context, p3);
            context.lineTo.apply(context, p4);
            context.lineTo.apply(context, p1);
            if (fillInstruction) {
                this.alignFill_ = /** @type {boolean} */ (fillInstruction[2]);
                if (declutter) {
                    context.fillStyle = /** @type {import("../../colorlike.js").ColorLike} */ (fillInstruction[1]);
                }
                this.fill_(context);
            }
            if (strokeInstruction) {
                this.setStrokeStyle_(context, 
                /** @type {Array<*>} */ (strokeInstruction));
                context.stroke();
            }
        }
        /**
         * @private
         * @param {CanvasRenderingContext2D} context Context.
         * @param {number} contextScale Scale of the context.
         * @param {number} x X.
         * @param {number} y Y.
         * @param {import("../canvas.js").Label|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} imageOrLabel Image.
         * @param {number} anchorX Anchor X.
         * @param {number} anchorY Anchor Y.
         * @param {import("../canvas.js").DeclutterGroup} declutterGroup Declutter group.
         * @param {number} height Height.
         * @param {number} opacity Opacity.
         * @param {number} originX Origin X.
         * @param {number} originY Origin Y.
         * @param {number} rotation Rotation.
         * @param {import("../../size.js").Size} scale Scale.
         * @param {boolean} snapToPixel Snap to pixel.
         * @param {number} width Width.
         * @param {Array<number>} padding Padding.
         * @param {Array<*>} fillInstruction Fill instruction.
         * @param {Array<*>} strokeInstruction Stroke instruction.
         * @return {boolean} The image or label was rendered.
         */
        replayImageOrLabel_(context, contextScale, x, y, imageOrLabel, anchorX, anchorY, declutterGroup, height, opacity, originX, originY, rotation, scale, snapToPixel, width, padding, fillInstruction, strokeInstruction) {
            const fillStroke = fillInstruction || strokeInstruction;
            anchorX *= scale[0];
            anchorY *= scale[1];
            x -= anchorX;
            y -= anchorY;
            const w = width + originX > imageOrLabel.width
                ? imageOrLabel.width - originX
                : width;
            const h = height + originY > imageOrLabel.height
                ? imageOrLabel.height - originY
                : height;
            const boxW = padding[3] + w * scale[0] + padding[1];
            const boxH = padding[0] + h * scale[1] + padding[2];
            const boxX = x - padding[3];
            const boxY = y - padding[0];
            if (fillStroke || rotation !== 0) {
                p1[0] = boxX;
                p4[0] = boxX;
                p1[1] = boxY;
                p2[1] = boxY;
                p2[0] = boxX + boxW;
                p3[0] = p2[0];
                p3[1] = boxY + boxH;
                p4[1] = p3[1];
            }
            let transform = null;
            if (rotation !== 0) {
                const centerX = x + anchorX;
                const centerY = y + anchorY;
                transform = transform_js_14.compose(tmpTransform, centerX, centerY, 1, 1, rotation, -centerX, -centerY);
                transform_js_14.apply(tmpTransform, p1);
                transform_js_14.apply(tmpTransform, p2);
                transform_js_14.apply(tmpTransform, p3);
                transform_js_14.apply(tmpTransform, p4);
                extent_js_34.createOrUpdate(Math.min(p1[0], p2[0], p3[0], p4[0]), Math.min(p1[1], p2[1], p3[1], p4[1]), Math.max(p1[0], p2[0], p3[0], p4[0]), Math.max(p1[1], p2[1], p3[1], p4[1]), tmpExtent);
            }
            else {
                extent_js_34.createOrUpdate(boxX, boxY, boxX + boxW, boxY + boxH, tmpExtent);
            }
            let renderBufferX = 0;
            let renderBufferY = 0;
            if (declutterGroup) {
                const renderBuffer = this.renderBuffer_;
                renderBuffer[0] = Math.max(renderBuffer[0], extent_js_34.getWidth(tmpExtent));
                renderBufferX = renderBuffer[0];
                renderBuffer[1] = Math.max(renderBuffer[1], extent_js_34.getHeight(tmpExtent));
                renderBufferY = renderBuffer[1];
            }
            const canvas = context.canvas;
            const strokePadding = strokeInstruction
                ? (strokeInstruction[2] * scale[0]) / 2
                : 0;
            const intersects = tmpExtent[0] - strokePadding <=
                (canvas.width + renderBufferX) / contextScale &&
                tmpExtent[2] + strokePadding >= -renderBufferX / contextScale &&
                tmpExtent[1] - strokePadding <=
                    (canvas.height + renderBufferY) / contextScale &&
                tmpExtent[3] + strokePadding >= -renderBufferY / contextScale;
            if (snapToPixel) {
                x = Math.round(x);
                y = Math.round(y);
            }
            if (declutterGroup) {
                if (!intersects && declutterGroup[0] == 1) {
                    return false;
                }
                const declutterArgs = intersects
                    ? [
                        context,
                        transform ? transform.slice(0) : null,
                        opacity,
                        imageOrLabel,
                        originX,
                        originY,
                        w,
                        h,
                        x,
                        y,
                        scale,
                        tmpExtent.slice(),
                    ]
                    : null;
                if (declutterArgs) {
                    if (fillStroke) {
                        declutterArgs.push(fillInstruction, strokeInstruction, p1.slice(0), p2.slice(0), p3.slice(0), p4.slice(0));
                    }
                    declutterGroup.push(declutterArgs);
                }
            }
            else if (intersects) {
                if (fillStroke) {
                    this.replayTextBackground_(context, p1, p2, p3, p4, 
                    /** @type {Array<*>} */ (fillInstruction), 
                    /** @type {Array<*>} */ (strokeInstruction), false);
                }
                canvas_js_7.drawImageOrLabel(context, transform, opacity, imageOrLabel, originX, originY, w, h, x, y, scale);
            }
            return true;
        }
        /**
         * @private
         * @param {CanvasRenderingContext2D} context Context.
         */
        fill_(context) {
            if (this.alignFill_) {
                const origin = transform_js_14.apply(this.renderedTransform_, [0, 0]);
                const repeatSize = 512 * this.pixelRatio;
                context.save();
                context.translate(origin[0] % repeatSize, origin[1] % repeatSize);
                context.rotate(this.viewRotation_);
            }
            context.fill();
            if (this.alignFill_) {
                context.restore();
            }
        }
        /**
         * @private
         * @param {CanvasRenderingContext2D} context Context.
         * @param {Array<*>} instruction Instruction.
         */
        setStrokeStyle_(context, instruction) {
            context.strokeStyle = /** @type {import("../../colorlike.js").ColorLike} */ (instruction[1]);
            context.lineWidth = /** @type {number} */ (instruction[2]);
            context.lineCap = /** @type {CanvasLineCap} */ (instruction[3]);
            context.lineJoin = /** @type {CanvasLineJoin} */ (instruction[4]);
            context.miterLimit = /** @type {number} */ (instruction[5]);
            if (context.setLineDash) {
                context.lineDashOffset = /** @type {number} */ (instruction[7]);
                context.setLineDash(/** @type {Array<number>} */ (instruction[6]));
            }
        }
        /**
         * @param {import("../canvas.js").DeclutterGroup} declutterGroup Declutter group.
         * @param {import("../../Feature.js").FeatureLike} feature Feature.
         * @param {number} opacity Layer opacity.
         * @param {?} declutterTree Declutter tree.
         * @return {?} Declutter tree.
         */
        renderDeclutter(declutterGroup, feature, opacity, declutterTree) {
            /** @type {Array<import("../../structs/RBush.js").Entry>} */
            const boxes = [];
            for (let i = 1, ii = declutterGroup.length; i < ii; ++i) {
                const declutterData = declutterGroup[i];
                const box = declutterData[11];
                boxes.push({
                    minX: box[0],
                    minY: box[1],
                    maxX: box[2],
                    maxY: box[3],
                    value: feature,
                });
            }
            if (!declutterTree) {
                declutterTree = new rbush_js_2.default(9);
            }
            let collides = false;
            for (let i = 0, ii = boxes.length; i < ii; ++i) {
                if (declutterTree.collides(boxes[i])) {
                    collides = true;
                    break;
                }
            }
            if (!collides) {
                declutterTree.load(boxes);
                for (let j = 1, jj = declutterGroup.length; j < jj; ++j) {
                    const declutterData = /** @type {Array} */ (declutterGroup[j]);
                    const context = declutterData[0];
                    const currentAlpha = context.globalAlpha;
                    if (currentAlpha !== opacity) {
                        context.globalAlpha = opacity;
                    }
                    if (declutterData.length > 12) {
                        this.replayTextBackground_(declutterData[0], declutterData[14], declutterData[15], declutterData[16], declutterData[17], declutterData[12], declutterData[13], true);
                    }
                    canvas_js_7.drawImageOrLabel.apply(undefined, declutterData);
                    if (currentAlpha !== opacity) {
                        context.globalAlpha = currentAlpha;
                    }
                }
            }
            declutterGroup.length = 1;
            return declutterTree;
        }
        /**
         * @private
         * @param {string} text The text to draw.
         * @param {string} textKey The key of the text state.
         * @param {string} strokeKey The key for the stroke state.
         * @param {string} fillKey The key for the fill state.
         * @return {{label: import("../canvas.js").Label, anchorX: number, anchorY: number}} The text image and its anchor.
         */
        drawLabelWithPointPlacement_(text, textKey, strokeKey, fillKey) {
            const textState = this.textStates[textKey];
            const label = this.createLabel(text, textKey, fillKey, strokeKey);
            const strokeState = this.strokeStates[strokeKey];
            const pixelRatio = this.pixelRatio;
            const align = TextBuilder_js_2.TEXT_ALIGN[textState.textAlign || canvas_js_8.defaultTextAlign];
            const baseline = TextBuilder_js_2.TEXT_ALIGN[textState.textBaseline || canvas_js_7.defaultTextBaseline];
            const strokeWidth = strokeState && strokeState.lineWidth ? strokeState.lineWidth : 0;
            // Remove the 2 pixels we added in createLabel() for the anchor
            const width = label.width / pixelRatio - 2 * textState.scale[0];
            const anchorX = align * width + 2 * (0.5 - align) * strokeWidth;
            const anchorY = (baseline * label.height) / pixelRatio +
                2 * (0.5 - baseline) * strokeWidth;
            return {
                label: label,
                anchorX: anchorX,
                anchorY: anchorY,
            };
        }
        /**
         * @private
         * @param {CanvasRenderingContext2D} context Context.
         * @param {number} contextScale Scale of the context.
         * @param {import("../../transform.js").Transform} transform Transform.
         * @param {Array<*>} instructions Instructions array.
         * @param {boolean} snapToPixel Snap point symbols and text to integer pixels.
         * @param {function(import("../../Feature.js").FeatureLike): T|undefined} featureCallback Feature callback.
         * @param {import("../../extent.js").Extent=} opt_hitExtent Only check features that intersect this
         *     extent.
         * @return {T|undefined} Callback result.
         * @template T
         */
        execute_(context, contextScale, transform, instructions, snapToPixel, featureCallback, opt_hitExtent) {
            this.declutterItems.length = 0;
            /** @type {Array<number>} */
            let pixelCoordinates;
            if (this.pixelCoordinates_ && array_js_17.equals(transform, this.renderedTransform_)) {
                pixelCoordinates = this.pixelCoordinates_;
            }
            else {
                if (!this.pixelCoordinates_) {
                    this.pixelCoordinates_ = [];
                }
                pixelCoordinates = transform_js_15.transform2D(this.coordinates, 0, this.coordinates.length, 2, transform, this.pixelCoordinates_);
                transform_js_14.setFromArray(this.renderedTransform_, transform);
            }
            let i = 0; // instruction index
            const ii = instructions.length; // end of instructions
            let d = 0; // data index
            let dd; // end of per-instruction data
            let anchorX, anchorY, prevX, prevY, roundX, roundY, declutterGroup, declutterGroups, image, text, textKey;
            let strokeKey, fillKey;
            let pendingFill = 0;
            let pendingStroke = 0;
            let lastFillInstruction = null;
            let lastStrokeInstruction = null;
            const coordinateCache = this.coordinateCache_;
            const viewRotation = this.viewRotation_;
            const viewRotationFromTransform = Math.round(Math.atan2(-transform[1], transform[0]) * 1e12) / 1e12;
            const state = /** @type {import("../../render.js").State} */ ({
                context: context,
                pixelRatio: this.pixelRatio,
                resolution: this.resolution,
                rotation: viewRotation,
            });
            // When the batch size gets too big, performance decreases. 200 is a good
            // balance between batch size and number of fill/stroke instructions.
            const batchSize = this.instructions != instructions || this.overlaps ? 0 : 200;
            let /** @type {import("../../Feature.js").FeatureLike} */ feature;
            let x, y;
            while (i < ii) {
                const instruction = instructions[i];
                const type = /** @type {import("./Instruction.js").default} */ (instruction[0]);
                switch (type) {
                    case Instruction_js_6.default.BEGIN_GEOMETRY:
                        feature = /** @type {import("../../Feature.js").FeatureLike} */ (instruction[1]);
                        if (!feature.getGeometry()) {
                            i = /** @type {number} */ (instruction[2]);
                        }
                        else if (opt_hitExtent !== undefined &&
                            !extent_js_34.intersects(opt_hitExtent, instruction[3])) {
                            i = /** @type {number} */ (instruction[2]) + 1;
                        }
                        else {
                            ++i;
                        }
                        break;
                    case Instruction_js_6.default.BEGIN_PATH:
                        if (pendingFill > batchSize) {
                            this.fill_(context);
                            pendingFill = 0;
                        }
                        if (pendingStroke > batchSize) {
                            context.stroke();
                            pendingStroke = 0;
                        }
                        if (!pendingFill && !pendingStroke) {
                            context.beginPath();
                            prevX = NaN;
                            prevY = NaN;
                        }
                        ++i;
                        break;
                    case Instruction_js_6.default.CIRCLE:
                        d = /** @type {number} */ (instruction[1]);
                        const x1 = pixelCoordinates[d];
                        const y1 = pixelCoordinates[d + 1];
                        const x2 = pixelCoordinates[d + 2];
                        const y2 = pixelCoordinates[d + 3];
                        const dx = x2 - x1;
                        const dy = y2 - y1;
                        const r = Math.sqrt(dx * dx + dy * dy);
                        context.moveTo(x1 + r, y1);
                        context.arc(x1, y1, r, 0, 2 * Math.PI, true);
                        ++i;
                        break;
                    case Instruction_js_6.default.CLOSE_PATH:
                        context.closePath();
                        ++i;
                        break;
                    case Instruction_js_6.default.CUSTOM:
                        d = /** @type {number} */ (instruction[1]);
                        dd = instruction[2];
                        const geometry = /** @type {import("../../geom/SimpleGeometry.js").default} */ (instruction[3]);
                        const renderer = instruction[4];
                        const fn = instruction.length == 6 ? instruction[5] : undefined;
                        state.geometry = geometry;
                        state.feature = feature;
                        if (!(i in coordinateCache)) {
                            coordinateCache[i] = [];
                        }
                        const coords = coordinateCache[i];
                        if (fn) {
                            fn(pixelCoordinates, d, dd, 2, coords);
                        }
                        else {
                            coords[0] = pixelCoordinates[d];
                            coords[1] = pixelCoordinates[d + 1];
                            coords.length = 2;
                        }
                        renderer(coords, state);
                        ++i;
                        break;
                    case Instruction_js_6.default.DRAW_IMAGE:
                        d = /** @type {number} */ (instruction[1]);
                        dd = /** @type {number} */ (instruction[2]);
                        image = /** @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} */ (instruction[3]);
                        // Remaining arguments in DRAW_IMAGE are in alphabetical order
                        anchorX = /** @type {number} */ (instruction[4]);
                        anchorY = /** @type {number} */ (instruction[5]);
                        declutterGroups = featureCallback ? null : instruction[6];
                        let height = /** @type {number} */ (instruction[7]);
                        const opacity = /** @type {number} */ (instruction[8]);
                        const originX = /** @type {number} */ (instruction[9]);
                        const originY = /** @type {number} */ (instruction[10]);
                        const rotateWithView = /** @type {boolean} */ (instruction[11]);
                        let rotation = /** @type {number} */ (instruction[12]);
                        const scale = /** @type {import("../../size.js").Size} */ (instruction[13]);
                        let width = /** @type {number} */ (instruction[14]);
                        if (!image && instruction.length >= 19) {
                            // create label images
                            text = /** @type {string} */ (instruction[18]);
                            textKey = /** @type {string} */ (instruction[19]);
                            strokeKey = /** @type {string} */ (instruction[20]);
                            fillKey = /** @type {string} */ (instruction[21]);
                            const labelWithAnchor = this.drawLabelWithPointPlacement_(text, textKey, strokeKey, fillKey);
                            image = labelWithAnchor.label;
                            instruction[3] = image;
                            const textOffsetX = /** @type {number} */ (instruction[22]);
                            anchorX = (labelWithAnchor.anchorX - textOffsetX) * this.pixelRatio;
                            instruction[4] = anchorX;
                            const textOffsetY = /** @type {number} */ (instruction[23]);
                            anchorY = (labelWithAnchor.anchorY - textOffsetY) * this.pixelRatio;
                            instruction[5] = anchorY;
                            height = image.height;
                            instruction[7] = height;
                            width = image.width;
                            instruction[14] = width;
                        }
                        let geometryWidths;
                        if (instruction.length > 24) {
                            geometryWidths = /** @type {number} */ (instruction[24]);
                        }
                        let padding, backgroundFill, backgroundStroke;
                        if (instruction.length > 16) {
                            padding = /** @type {Array<number>} */ (instruction[15]);
                            backgroundFill = /** @type {boolean} */ (instruction[16]);
                            backgroundStroke = /** @type {boolean} */ (instruction[17]);
                        }
                        else {
                            padding = canvas_js_7.defaultPadding;
                            backgroundFill = false;
                            backgroundStroke = false;
                        }
                        if (rotateWithView && viewRotationFromTransform) {
                            // Canvas is expected to be rotated to reverse view rotation.
                            rotation += viewRotation;
                        }
                        else if (!rotateWithView && !viewRotationFromTransform) {
                            // Canvas is not rotated, images need to be rotated back to be north-up.
                            rotation -= viewRotation;
                        }
                        let widthIndex = 0;
                        let declutterGroupIndex = 0;
                        for (; d < dd; d += 2) {
                            if (geometryWidths &&
                                geometryWidths[widthIndex++] < width / this.pixelRatio) {
                                continue;
                            }
                            if (declutterGroups) {
                                const index = Math.floor(declutterGroupIndex);
                                declutterGroup =
                                    declutterGroups.length < index + 1
                                        ? [declutterGroups[0][0]]
                                        : declutterGroups[index];
                            }
                            const rendered = this.replayImageOrLabel_(context, contextScale, pixelCoordinates[d], pixelCoordinates[d + 1], image, anchorX, anchorY, declutterGroup, height, opacity, originX, originY, rotation, scale, snapToPixel, width, padding, backgroundFill
                                ? /** @type {Array<*>} */ (lastFillInstruction)
                                : null, backgroundStroke
                                ? /** @type {Array<*>} */ (lastStrokeInstruction)
                                : null);
                            if (rendered &&
                                declutterGroup &&
                                declutterGroups[declutterGroups.length - 1] !== declutterGroup) {
                                declutterGroups.push(declutterGroup);
                            }
                            if (declutterGroup) {
                                if (declutterGroup.length - 1 === declutterGroup[0]) {
                                    this.declutterItems.push(this, declutterGroup, feature);
                                }
                                declutterGroupIndex += 1 / declutterGroup[0];
                            }
                        }
                        ++i;
                        break;
                    case Instruction_js_6.default.DRAW_CHARS:
                        const begin = /** @type {number} */ (instruction[1]);
                        const end = /** @type {number} */ (instruction[2]);
                        const baseline = /** @type {number} */ (instruction[3]);
                        declutterGroup = featureCallback ? null : instruction[4];
                        const overflow = /** @type {number} */ (instruction[5]);
                        fillKey = /** @type {string} */ (instruction[6]);
                        const maxAngle = /** @type {number} */ (instruction[7]);
                        const measurePixelRatio = /** @type {number} */ (instruction[8]);
                        const offsetY = /** @type {number} */ (instruction[9]);
                        strokeKey = /** @type {string} */ (instruction[10]);
                        const strokeWidth = /** @type {number} */ (instruction[11]);
                        text = /** @type {string} */ (instruction[12]);
                        textKey = /** @type {string} */ (instruction[13]);
                        const pixelRatioScale = [
                            /** @type {number} */ (instruction[14]),
                            /** @type {number} */ (instruction[14]),
                        ];
                        const textState = this.textStates[textKey];
                        const font = textState.font;
                        const textScale = [
                            textState.scale[0] * measurePixelRatio,
                            textState.scale[1] * measurePixelRatio,
                        ];
                        let cachedWidths;
                        if (font in this.widths_) {
                            cachedWidths = this.widths_[font];
                        }
                        else {
                            cachedWidths = {};
                            this.widths_[font] = cachedWidths;
                        }
                        const pathLength = length_js_2.lineStringLength(pixelCoordinates, begin, end, 2);
                        const textLength = Math.abs(textScale[0]) *
                            canvas_js_8.measureAndCacheTextWidth(font, text, cachedWidths);
                        if (overflow || textLength <= pathLength) {
                            const textAlign = this.textStates[textKey].textAlign;
                            const startM = (pathLength - textLength) * TextBuilder_js_2.TEXT_ALIGN[textAlign];
                            const parts = textpath_js_1.drawTextOnPath(pixelCoordinates, begin, end, 2, text, startM, maxAngle, Math.abs(textScale[0]), canvas_js_8.measureAndCacheTextWidth, font, cachedWidths, viewRotationFromTransform ? 0 : this.viewRotation_);
                            if (parts) {
                                let rendered = false;
                                let c, cc, chars, label, part;
                                if (strokeKey) {
                                    for (c = 0, cc = parts.length; c < cc; ++c) {
                                        part = parts[c]; // x, y, anchorX, rotation, chunk
                                        chars = /** @type {string} */ (part[4]);
                                        label = this.createLabel(chars, textKey, '', strokeKey);
                                        anchorX = /** @type {number} */ (part[2]) + strokeWidth;
                                        anchorY =
                                            baseline * label.height +
                                                ((0.5 - baseline) * 2 * strokeWidth * textScale[1]) /
                                                    textScale[0] -
                                                offsetY;
                                        rendered =
                                            this.replayImageOrLabel_(context, contextScale, 
                                            /** @type {number} */ (part[0]), 
                                            /** @type {number} */ (part[1]), label, anchorX, anchorY, declutterGroup, label.height, 1, 0, 0, 
                                            /** @type {number} */ (part[3]), pixelRatioScale, false, label.width, canvas_js_7.defaultPadding, null, null) || rendered;
                                    }
                                }
                                if (fillKey) {
                                    for (c = 0, cc = parts.length; c < cc; ++c) {
                                        part = parts[c]; // x, y, anchorX, rotation, chunk
                                        chars = /** @type {string} */ (part[4]);
                                        label = this.createLabel(chars, textKey, fillKey, '');
                                        anchorX = /** @type {number} */ (part[2]);
                                        anchorY = baseline * label.height - offsetY;
                                        rendered =
                                            this.replayImageOrLabel_(context, contextScale, 
                                            /** @type {number} */ (part[0]), 
                                            /** @type {number} */ (part[1]), label, anchorX, anchorY, declutterGroup, label.height, 1, 0, 0, 
                                            /** @type {number} */ (part[3]), pixelRatioScale, false, label.width, canvas_js_7.defaultPadding, null, null) || rendered;
                                    }
                                }
                                if (rendered) {
                                    this.declutterItems.push(this, declutterGroup, feature);
                                }
                            }
                        }
                        ++i;
                        break;
                    case Instruction_js_6.default.END_GEOMETRY:
                        if (featureCallback !== undefined) {
                            feature = /** @type {import("../../Feature.js").FeatureLike} */ (instruction[1]);
                            const result = featureCallback(feature);
                            if (result) {
                                return result;
                            }
                        }
                        ++i;
                        break;
                    case Instruction_js_6.default.FILL:
                        if (batchSize) {
                            pendingFill++;
                        }
                        else {
                            this.fill_(context);
                        }
                        ++i;
                        break;
                    case Instruction_js_6.default.MOVE_TO_LINE_TO:
                        d = /** @type {number} */ (instruction[1]);
                        dd = /** @type {number} */ (instruction[2]);
                        x = pixelCoordinates[d];
                        y = pixelCoordinates[d + 1];
                        roundX = (x + 0.5) | 0;
                        roundY = (y + 0.5) | 0;
                        if (roundX !== prevX || roundY !== prevY) {
                            context.moveTo(x, y);
                            prevX = roundX;
                            prevY = roundY;
                        }
                        for (d += 2; d < dd; d += 2) {
                            x = pixelCoordinates[d];
                            y = pixelCoordinates[d + 1];
                            roundX = (x + 0.5) | 0;
                            roundY = (y + 0.5) | 0;
                            if (d == dd - 2 || roundX !== prevX || roundY !== prevY) {
                                context.lineTo(x, y);
                                prevX = roundX;
                                prevY = roundY;
                            }
                        }
                        ++i;
                        break;
                    case Instruction_js_6.default.SET_FILL_STYLE:
                        lastFillInstruction = instruction;
                        this.alignFill_ = instruction[2];
                        if (pendingFill) {
                            this.fill_(context);
                            pendingFill = 0;
                            if (pendingStroke) {
                                context.stroke();
                                pendingStroke = 0;
                            }
                        }
                        context.fillStyle = /** @type {import("../../colorlike.js").ColorLike} */ (instruction[1]);
                        ++i;
                        break;
                    case Instruction_js_6.default.SET_STROKE_STYLE:
                        lastStrokeInstruction = instruction;
                        if (pendingStroke) {
                            context.stroke();
                            pendingStroke = 0;
                        }
                        this.setStrokeStyle_(context, /** @type {Array<*>} */ (instruction));
                        ++i;
                        break;
                    case Instruction_js_6.default.STROKE:
                        if (batchSize) {
                            pendingStroke++;
                        }
                        else {
                            context.stroke();
                        }
                        ++i;
                        break;
                    default:
                        ++i; // consume the instruction anyway, to avoid an infinite loop
                        break;
                }
            }
            if (pendingFill) {
                this.fill_(context);
            }
            if (pendingStroke) {
                context.stroke();
            }
            return undefined;
        }
        /**
         * @param {CanvasRenderingContext2D} context Context.
         * @param {number} contextScale Scale of the context.
         * @param {import("../../transform.js").Transform} transform Transform.
         * @param {number} viewRotation View rotation.
         * @param {boolean} snapToPixel Snap point symbols and text to integer pixels.
         */
        execute(context, contextScale, transform, viewRotation, snapToPixel) {
            this.viewRotation_ = viewRotation;
            this.execute_(context, contextScale, transform, this.instructions, snapToPixel, undefined, undefined);
        }
        /**
         * @param {CanvasRenderingContext2D} context Context.
         * @param {import("../../transform.js").Transform} transform Transform.
         * @param {number} viewRotation View rotation.
         * @param {function(import("../../Feature.js").FeatureLike): T=} opt_featureCallback
         *     Feature callback.
         * @param {import("../../extent.js").Extent=} opt_hitExtent Only check features that intersect this
         *     extent.
         * @return {T|undefined} Callback result.
         * @template T
         */
        executeHitDetection(context, transform, viewRotation, opt_featureCallback, opt_hitExtent) {
            this.viewRotation_ = viewRotation;
            return this.execute_(context, 1, transform, this.hitDetectionInstructions, true, opt_featureCallback, opt_hitExtent);
        }
    }
    exports.default = Executor;
});
/**
 * @module ol/render/canvas/ExecutorGroup
 */
define("node_modules/ol/src/render/canvas/ExecutorGroup", ["require", "exports", "node_modules/ol/src/render/canvas/BuilderType", "node_modules/ol/src/render/canvas/Executor", "node_modules/ol/src/extent", "node_modules/ol/src/transform", "node_modules/ol/src/dom", "node_modules/ol/src/obj", "node_modules/ol/src/array", "node_modules/ol/src/geom/flat/transform"], function (require, exports, BuilderType_js_2, Executor_js_1, extent_js_35, transform_js_16, dom_js_11, obj_js_15, array_js_18, transform_js_17) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.replayDeclutter = exports.getCircleArray = void 0;
    /**
     * @const
     * @type {Array<import("./BuilderType.js").default>}
     */
    const ORDER = [
        BuilderType_js_2.default.POLYGON,
        BuilderType_js_2.default.CIRCLE,
        BuilderType_js_2.default.LINE_STRING,
        BuilderType_js_2.default.IMAGE,
        BuilderType_js_2.default.TEXT,
        BuilderType_js_2.default.DEFAULT,
    ];
    class ExecutorGroup {
        /**
         * @param {import("../../extent.js").Extent} maxExtent Max extent for clipping. When a
         * `maxExtent` was set on the Buillder for this executor group, the same `maxExtent`
         * should be set here, unless the target context does not exceet that extent (which
         * can be the case when rendering to tiles).
         * @param {number} resolution Resolution.
         * @param {number} pixelRatio Pixel ratio.
         * @param {boolean} overlaps The executor group can have overlapping geometries.
         * @param {!Object<string, !Object<import("./BuilderType.js").default, import("./Builder.js").SerializableInstructions>>} allInstructions
         * The serializable instructions.
         * @param {number=} opt_renderBuffer Optional rendering buffer.
         */
        constructor(maxExtent, resolution, pixelRatio, overlaps, allInstructions, opt_renderBuffer) {
            /**
             * @private
             * @type {import("../../extent.js").Extent}
             */
            this.maxExtent_ = maxExtent;
            /**
             * @private
             * @type {boolean}
             */
            this.overlaps_ = overlaps;
            /**
             * @private
             * @type {number}
             */
            this.pixelRatio_ = pixelRatio;
            /**
             * @private
             * @type {number}
             */
            this.resolution_ = resolution;
            /**
             * @private
             * @type {number|undefined}
             */
            this.renderBuffer_ = opt_renderBuffer;
            /**
             * @private
             * @type {!Object<string, !Object<import("./BuilderType.js").default, import("./Executor").default>>}
             */
            this.executorsByZIndex_ = {};
            /**
             * @private
             * @type {CanvasRenderingContext2D}
             */
            this.hitDetectionContext_ = null;
            /**
             * @private
             * @type {import("../../transform.js").Transform}
             */
            this.hitDetectionTransform_ = transform_js_16.create();
            this.createExecutors_(allInstructions);
        }
        /**
         * @param {CanvasRenderingContext2D} context Context.
         * @param {import("../../transform.js").Transform} transform Transform.
         */
        clip(context, transform) {
            const flatClipCoords = this.getClipCoords(transform);
            context.beginPath();
            context.moveTo(flatClipCoords[0], flatClipCoords[1]);
            context.lineTo(flatClipCoords[2], flatClipCoords[3]);
            context.lineTo(flatClipCoords[4], flatClipCoords[5]);
            context.lineTo(flatClipCoords[6], flatClipCoords[7]);
            context.clip();
        }
        /**
         * Create executors and populate them using the provided instructions.
         * @private
         * @param {!Object<string, !Object<import("./BuilderType.js").default, import("./Builder.js").SerializableInstructions>>} allInstructions The serializable instructions
         */
        createExecutors_(allInstructions) {
            for (const zIndex in allInstructions) {
                let executors = this.executorsByZIndex_[zIndex];
                if (executors === undefined) {
                    executors = {};
                    this.executorsByZIndex_[zIndex] = executors;
                }
                const instructionByZindex = allInstructions[zIndex];
                const renderBuffer = [this.renderBuffer_ || 0, this.renderBuffer_ || 0];
                for (const builderType in instructionByZindex) {
                    const instructions = instructionByZindex[builderType];
                    executors[builderType] = new Executor_js_1.default(this.resolution_, this.pixelRatio_, this.overlaps_, instructions, renderBuffer);
                }
            }
        }
        /**
         * @param {Array<import("./BuilderType.js").default>} executors Executors.
         * @return {boolean} Has executors of the provided types.
         */
        hasExecutors(executors) {
            for (const zIndex in this.executorsByZIndex_) {
                const candidates = this.executorsByZIndex_[zIndex];
                for (let i = 0, ii = executors.length; i < ii; ++i) {
                    if (executors[i] in candidates) {
                        return true;
                    }
                }
            }
            return false;
        }
        /**
         * @param {import("../../coordinate.js").Coordinate} coordinate Coordinate.
         * @param {number} resolution Resolution.
         * @param {number} rotation Rotation.
         * @param {number} hitTolerance Hit tolerance in pixels.
         * @param {function(import("../../Feature.js").FeatureLike): T} callback Feature callback.
         * @param {Array<import("../../Feature.js").FeatureLike>} declutteredFeatures Decluttered features.
         * @return {T|undefined} Callback result.
         * @template T
         */
        forEachFeatureAtCoordinate(coordinate, resolution, rotation, hitTolerance, callback, declutteredFeatures) {
            hitTolerance = Math.round(hitTolerance);
            const contextSize = hitTolerance * 2 + 1;
            const transform = transform_js_16.compose(this.hitDetectionTransform_, hitTolerance + 0.5, hitTolerance + 0.5, 1 / resolution, -1 / resolution, -rotation, -coordinate[0], -coordinate[1]);
            if (!this.hitDetectionContext_) {
                this.hitDetectionContext_ = dom_js_11.createCanvasContext2D(contextSize, contextSize);
            }
            const context = this.hitDetectionContext_;
            if (context.canvas.width !== contextSize ||
                context.canvas.height !== contextSize) {
                context.canvas.width = contextSize;
                context.canvas.height = contextSize;
            }
            else {
                context.clearRect(0, 0, contextSize, contextSize);
            }
            /**
             * @type {import("../../extent.js").Extent}
             */
            let hitExtent;
            if (this.renderBuffer_ !== undefined) {
                hitExtent = extent_js_35.createEmpty();
                extent_js_35.extendCoordinate(hitExtent, coordinate);
                extent_js_35.buffer(hitExtent, resolution * (this.renderBuffer_ + hitTolerance), hitExtent);
            }
            const mask = getCircleArray(hitTolerance);
            let builderType;
            /**
             * @param {import("../../Feature.js").FeatureLike} feature Feature.
             * @return {?} Callback result.
             */
            function featureCallback(feature) {
                const imageData = context.getImageData(0, 0, contextSize, contextSize)
                    .data;
                for (let i = 0; i < contextSize; i++) {
                    for (let j = 0; j < contextSize; j++) {
                        if (mask[i][j]) {
                            if (imageData[(j * contextSize + i) * 4 + 3] > 0) {
                                let result;
                                if (!(declutteredFeatures &&
                                    (builderType == BuilderType_js_2.default.IMAGE ||
                                        builderType == BuilderType_js_2.default.TEXT)) ||
                                    declutteredFeatures.indexOf(feature) !== -1) {
                                    result = callback(feature);
                                }
                                if (result) {
                                    return result;
                                }
                                else {
                                    context.clearRect(0, 0, contextSize, contextSize);
                                    return undefined;
                                }
                            }
                        }
                    }
                }
            }
            /** @type {Array<number>} */
            const zs = Object.keys(this.executorsByZIndex_).map(Number);
            zs.sort(array_js_18.numberSafeCompareFunction);
            let i, j, executors, executor, result;
            for (i = zs.length - 1; i >= 0; --i) {
                const zIndexKey = zs[i].toString();
                executors = this.executorsByZIndex_[zIndexKey];
                for (j = ORDER.length - 1; j >= 0; --j) {
                    builderType = ORDER[j];
                    executor = executors[builderType];
                    if (executor !== undefined) {
                        result = executor.executeHitDetection(context, transform, rotation, featureCallback, hitExtent);
                        if (result) {
                            return result;
                        }
                    }
                }
            }
            return undefined;
        }
        /**
         * @param {import("../../transform.js").Transform} transform Transform.
         * @return {Array<number>} Clip coordinates.
         */
        getClipCoords(transform) {
            const maxExtent = this.maxExtent_;
            if (!maxExtent) {
                return null;
            }
            const minX = maxExtent[0];
            const minY = maxExtent[1];
            const maxX = maxExtent[2];
            const maxY = maxExtent[3];
            const flatClipCoords = [minX, minY, minX, maxY, maxX, maxY, maxX, minY];
            transform_js_17.transform2D(flatClipCoords, 0, 8, 2, transform, flatClipCoords);
            return flatClipCoords;
        }
        /**
         * @return {boolean} Is empty.
         */
        isEmpty() {
            return obj_js_15.isEmpty(this.executorsByZIndex_);
        }
        /**
         * @param {CanvasRenderingContext2D} context Context.
         * @param {number} contextScale Scale of the context.
         * @param {import("../../transform.js").Transform} transform Transform.
         * @param {number} viewRotation View rotation.
         * @param {boolean} snapToPixel Snap point symbols and test to integer pixel.
         * @param {Array<import("./BuilderType.js").default>=} opt_builderTypes Ordered replay types to replay.
         *     Default is {@link module:ol/render/replay~ORDER}
         * @param {Object<string, import("../canvas.js").DeclutterGroup>=} opt_declutterReplays Declutter replays.
         */
        execute(context, contextScale, transform, viewRotation, snapToPixel, opt_builderTypes, opt_declutterReplays) {
            /** @type {Array<number>} */
            const zs = Object.keys(this.executorsByZIndex_).map(Number);
            zs.sort(array_js_18.numberSafeCompareFunction);
            // setup clipping so that the parts of over-simplified geometries are not
            // visible outside the current extent when panning
            if (this.maxExtent_) {
                context.save();
                this.clip(context, transform);
            }
            const builderTypes = opt_builderTypes ? opt_builderTypes : ORDER;
            let i, ii, j, jj, replays, replay;
            for (i = 0, ii = zs.length; i < ii; ++i) {
                const zIndexKey = zs[i].toString();
                replays = this.executorsByZIndex_[zIndexKey];
                for (j = 0, jj = builderTypes.length; j < jj; ++j) {
                    const builderType = builderTypes[j];
                    replay = replays[builderType];
                    if (replay !== undefined) {
                        if (opt_declutterReplays &&
                            (builderType == BuilderType_js_2.default.IMAGE ||
                                builderType == BuilderType_js_2.default.TEXT)) {
                            const declutter = opt_declutterReplays[zIndexKey];
                            if (!declutter) {
                                opt_declutterReplays[zIndexKey] = [replay, transform.slice(0)];
                            }
                            else {
                                declutter.push(replay, transform.slice(0));
                            }
                        }
                        else {
                            replay.execute(context, contextScale, transform, viewRotation, snapToPixel);
                        }
                    }
                }
            }
            if (this.maxExtent_) {
                context.restore();
            }
        }
    }
    /**
     * This cache is used for storing calculated pixel circles for increasing performance.
     * It is a static property to allow each Replaygroup to access it.
     * @type {Object<number, Array<Array<(boolean|undefined)>>>}
     */
    const circleArrayCache = {
        0: [[true]],
    };
    /**
     * This method fills a row in the array from the given coordinate to the
     * middle with `true`.
     * @param {Array<Array<(boolean|undefined)>>} array The array that will be altered.
     * @param {number} x X coordinate.
     * @param {number} y Y coordinate.
     */
    function fillCircleArrayRowToMiddle(array, x, y) {
        let i;
        const radius = Math.floor(array.length / 2);
        if (x >= radius) {
            for (i = radius; i < x; i++) {
                array[i][y] = true;
            }
        }
        else if (x < radius) {
            for (i = x + 1; i < radius; i++) {
                array[i][y] = true;
            }
        }
    }
    /**
     * This methods creates a circle inside a fitting array. Points inside the
     * circle are marked by true, points on the outside are undefined.
     * It uses the midpoint circle algorithm.
     * A cache is used to increase performance.
     * @param {number} radius Radius.
     * @returns {Array<Array<(boolean|undefined)>>} An array with marked circle points.
     */
    function getCircleArray(radius) {
        if (circleArrayCache[radius] !== undefined) {
            return circleArrayCache[radius];
        }
        const arraySize = radius * 2 + 1;
        const arr = new Array(arraySize);
        for (let i = 0; i < arraySize; i++) {
            arr[i] = new Array(arraySize);
        }
        let x = radius;
        let y = 0;
        let error = 0;
        while (x >= y) {
            fillCircleArrayRowToMiddle(arr, radius + x, radius + y);
            fillCircleArrayRowToMiddle(arr, radius + y, radius + x);
            fillCircleArrayRowToMiddle(arr, radius - y, radius + x);
            fillCircleArrayRowToMiddle(arr, radius - x, radius + y);
            fillCircleArrayRowToMiddle(arr, radius - x, radius - y);
            fillCircleArrayRowToMiddle(arr, radius - y, radius - x);
            fillCircleArrayRowToMiddle(arr, radius + y, radius - x);
            fillCircleArrayRowToMiddle(arr, radius + x, radius - y);
            y++;
            error += 1 + 2 * y;
            if (2 * (error - x) + 1 > 0) {
                x -= 1;
                error += 1 - 2 * x;
            }
        }
        circleArrayCache[radius] = arr;
        return arr;
    }
    exports.getCircleArray = getCircleArray;
    /**
     * @param {!Object<string, Array<*>>} declutterReplays Declutter replays.
     * @param {CanvasRenderingContext2D} context Context.
     * @param {number} rotation Rotation.
     * @param {number} opacity Opacity.
     * @param {boolean} snapToPixel Snap point symbols and text to integer pixels.
     * @param {Array<import("../../PluggableMap.js").DeclutterItems>} declutterItems Declutter items.
     */
    function replayDeclutter(declutterReplays, context, rotation, opacity, snapToPixel, declutterItems) {
        const zs = Object.keys(declutterReplays)
            .map(Number)
            .sort(array_js_18.numberSafeCompareFunction);
        for (let z = 0, zz = zs.length; z < zz; ++z) {
            const executorData = declutterReplays[zs[z].toString()];
            let currentExecutor;
            for (let i = 0, ii = executorData.length; i < ii;) {
                const executor = executorData[i++];
                const transform = executorData[i++];
                executor.execute(context, 1, transform, rotation, snapToPixel);
                if (executor !== currentExecutor && executor.declutterItems.length > 0) {
                    currentExecutor = executor;
                    declutterItems.push({
                        items: executor.declutterItems,
                        opacity: opacity,
                    });
                }
            }
        }
    }
    exports.replayDeclutter = replayDeclutter;
    exports.default = ExecutorGroup;
});
define("node_modules/ol/src/VectorRenderTile", ["require", "exports", "node_modules/ol/src/Tile", "node_modules/ol/src/dom", "node_modules/ol/src/util"], function (require, exports, Tile_js_3, dom_js_12, util_js_20) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @typedef {Object} ReplayState
     * @property {boolean} dirty
     * @property {null|import("./render.js").OrderFunction} renderedRenderOrder
     * @property {number} renderedTileRevision
     * @property {number} renderedResolution
     * @property {number} renderedRevision
     * @property {number} renderedZ
     * @property {number} renderedTileResolution
     * @property {number} renderedTileZ
     */
    /**
     * @type {Array<HTMLCanvasElement>}
     */
    const canvasPool = [];
    class VectorRenderTile extends Tile_js_3.default {
        /**
         * @param {import("./tilecoord.js").TileCoord} tileCoord Tile coordinate.
         * @param {import("./TileState.js").default} state State.
         * @param {import("./tilecoord.js").TileCoord} urlTileCoord Wrapped tile coordinate for source urls.
         * @param {function(VectorRenderTile):Array<import("./VectorTile").default>} getSourceTiles Function
         * to get source tiles for this tile.
         */
        constructor(tileCoord, state, urlTileCoord, getSourceTiles) {
            super(tileCoord, state, { transition: 0 });
            /**
             * @private
             * @type {!Object<string, CanvasRenderingContext2D>}
             */
            this.context_ = {};
            /**
             * Executor groups by layer uid. Entries are read/written by the renderer.
             * @type {Object<string, Array<import("./render/canvas/ExecutorGroup.js").default>>}
             */
            this.executorGroups = {};
            /**
             * Number of loading source tiles. Read/written by the source.
             * @type {number}
             */
            this.loadingSourceTiles = 0;
            /**
             * Tile keys of error source tiles. Read/written by the source.
             * @type {Object<string, boolean>}
             */
            this.errorSourceTileKeys = {};
            /**
             * @type {Object<number, ImageData>}
             */
            this.hitDetectionImageData = {};
            /**
             * @private
             * @type {!Object<string, ReplayState>}
             */
            this.replayState_ = {};
            /**
             * @type {Array<import("./VectorTile.js").default>}
             */
            this.sourceTiles = null;
            /**
             * @type {number}
             */
            this.wantedResolution;
            /**
             * @type {!function():Array<import("./VectorTile.js").default>}
             */
            this.getSourceTiles = getSourceTiles.bind(undefined, this);
            /**
             * z of the source tiles of the last getSourceTiles call.
             * @type {number}
             */
            this.sourceZ = -1;
            /**
             * True when all tiles for this tile's nominal resolution are available.
             * @type {boolean}
             */
            this.hifi = false;
            /**
             * @type {import("./tilecoord.js").TileCoord}
             */
            this.wrappedTileCoord = urlTileCoord;
        }
        /**
         * @param {import("./layer/Layer.js").default} layer Layer.
         * @return {CanvasRenderingContext2D} The rendering context.
         */
        getContext(layer) {
            const key = util_js_20.getUid(layer);
            if (!(key in this.context_)) {
                this.context_[key] = dom_js_12.createCanvasContext2D(1, 1, canvasPool);
            }
            return this.context_[key];
        }
        /**
         * @param {import("./layer/Layer.js").default} layer Layer.
         * @return {boolean} Tile has a rendering context for the given layer.
         */
        hasContext(layer) {
            return util_js_20.getUid(layer) in this.context_;
        }
        /**
         * Get the Canvas for this tile.
         * @param {import("./layer/Layer.js").default} layer Layer.
         * @return {HTMLCanvasElement} Canvas.
         */
        getImage(layer) {
            return this.hasContext(layer) ? this.getContext(layer).canvas : null;
        }
        /**
         * @param {import("./layer/Layer.js").default} layer Layer.
         * @return {ReplayState} The replay state.
         */
        getReplayState(layer) {
            const key = util_js_20.getUid(layer);
            if (!(key in this.replayState_)) {
                this.replayState_[key] = {
                    dirty: false,
                    renderedRenderOrder: null,
                    renderedResolution: NaN,
                    renderedRevision: -1,
                    renderedTileResolution: NaN,
                    renderedTileRevision: -1,
                    renderedZ: -1,
                    renderedTileZ: -1,
                };
            }
            return this.replayState_[key];
        }
        /**
         * Load the tile.
         */
        load() {
            this.getSourceTiles();
        }
        /**
         * Remove from the cache due to expiry
         */
        release() {
            for (const key in this.context_) {
                canvasPool.push(this.context_[key].canvas);
            }
            super.release();
        }
    }
    exports.default = VectorRenderTile;
});
/**
 * @module ol/source/VectorTile
 */
define("node_modules/ol/src/source/VectorTile", ["require", "exports", "node_modules/ol/src/events/EventType", "node_modules/ol/src/VectorTile", "node_modules/ol/src/TileCache", "node_modules/ol/src/TileState", "node_modules/ol/src/source/UrlTile", "node_modules/ol/src/VectorRenderTile", "node_modules/ol/src/extent", "node_modules/ol/src/tilegrid", "node_modules/ol/src/array", "node_modules/ol/src/tilecoord", "node_modules/ol/src/featureloader", "node_modules/ol/src/size"], function (require, exports, EventType_js_34, VectorTile_js_1, TileCache_js_2, TileState_js_6, UrlTile_js_1, VectorRenderTile_js_1, extent_js_36, tilegrid_js_2, array_js_19, tilecoord_js_6, featureloader_js_2, size_js_7) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultLoadFunction = void 0;
    /**
     * @typedef {Object} Options
     * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
     * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
     * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least twice the number of tiles in the viewport.
     * @property {import("../extent.js").Extent} [extent]
     * @property {import("../format/Feature.js").default} [format] Feature format for tiles. Used and required by the default.
     * @property {boolean} [overlaps=true] This source may have overlapping geometries. Setting this
     * to `false` (e.g. for sources with polygons that represent administrative
     * boundaries or TopoJSON sources) allows the renderer to optimise fill and
     * stroke operations.
     * @property {import("../proj.js").ProjectionLike} [projection='EPSG:3857'] Projection of the tile grid.
     * @property {import("./State.js").default} [state] Source state.
     * @property {typeof import("../VectorTile.js").default} [tileClass] Class used to instantiate image tiles.
     * Default is {@link module:ol/VectorTile}.
     * @property {number} [maxZoom=22] Optional max zoom level. Not used if `tileGrid` is provided.
     * @property {number} [minZoom] Optional min zoom level. Not used if `tileGrid` is provided.
     * @property {number|import("../size.js").Size} [tileSize=512] Optional tile size. Not used if `tileGrid` is provided.
     * @property {number} [maxResolution] Optional tile grid resolution at level zero. Not used if `tileGrid` is provided.
     * @property {import("../tilegrid/TileGrid.js").default} [tileGrid] Tile grid.
     * @property {import("../Tile.js").LoadFunction} [tileLoadFunction]
     * Optional function to load a tile given a URL. Could look like this for pbf tiles:
     * ```js
     * function(tile, url) {
     *   tile.setLoader(function(extent, resolution, projection) {
     *     fetch(url).then(function(response) {
     *       response.arrayBuffer().then(function(data) {
     *         const format = tile.getFormat() // ol/format/MVT configured as source format
     *         const features = format.readFeatures(data, {
     *           extent: extent,
     *           featureProjection: projection
     *         });
     *         tile.setFeatures(features);
     *       });
     *     });
     *   });
     * }
     * ```
     * If you do not need extent, resolution and projection to get the features for a tile (e.g.
     * for GeoJSON tiles), your `tileLoadFunction` does not need a `setLoader()` call. Only make sure
     * to call `setFeatures()` on the tile:
     * ```js
     * const format = new GeoJSON({featureProjection: map.getView().getProjection()});
     * async function tileLoadFunction(tile, url) {
     *   const response = await fetch(url);
     *   const data = await response.json();
     *   tile.setFeatures(format.readFeatures(data));
     * }
     * ```
     * @property {import("../Tile.js").UrlFunction} [tileUrlFunction] Optional function to get tile URL given a tile coordinate and the projection.
     * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.
     * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be
     * used instead of defining each one separately in the `urls` option.
     * @property {number} [transition] A duration for tile opacity
     * transitions in milliseconds. A duration of 0 disables the opacity transition.
     * @property {Array<string>} [urls] An array of URL templates.
     * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.
     * When set to `false`, only one world
     * will be rendered. When set to `true`, tiles will be wrapped horizontally to
     * render multiple worlds.
     * @property {number} [zDirection=1] Indicate which resolution should be used
     * by a renderer if the view resolution does not match any resolution of the tile source.
     * If 0, the nearest resolution will be used. If 1, the nearest lower resolution
     * will be used. If -1, the nearest higher resolution will be used.
     */
    /**
     * @classdesc
     * Class for layer sources providing vector data divided into a tile grid, to be
     * used with {@link module:ol/layer/VectorTile~VectorTile}. Although this source receives tiles
     * with vector features from the server, it is not meant for feature editing.
     * Features are optimized for rendering, their geometries are clipped at or near
     * tile boundaries and simplified for a view resolution. See
     * {@link module:ol/source/Vector} for vector sources that are suitable for feature
     * editing.
     *
     * @fires import("./Tile.js").TileSourceEvent
     * @api
     */
    class VectorTile extends UrlTile_js_1.default {
        /**
         * @param {!Options} options Vector tile options.
         */
        constructor(options) {
            const projection = options.projection || 'EPSG:3857';
            const extent = options.extent || tilegrid_js_2.extentFromProjection(projection);
            const tileGrid = options.tileGrid ||
                tilegrid_js_2.createXYZ({
                    extent: extent,
                    maxResolution: options.maxResolution,
                    maxZoom: options.maxZoom !== undefined ? options.maxZoom : 22,
                    minZoom: options.minZoom,
                    tileSize: options.tileSize || 512,
                });
            super({
                attributions: options.attributions,
                attributionsCollapsible: options.attributionsCollapsible,
                cacheSize: options.cacheSize,
                opaque: false,
                projection: projection,
                state: options.state,
                tileGrid: tileGrid,
                tileLoadFunction: options.tileLoadFunction
                    ? options.tileLoadFunction
                    : defaultLoadFunction,
                tileUrlFunction: options.tileUrlFunction,
                url: options.url,
                urls: options.urls,
                wrapX: options.wrapX === undefined ? true : options.wrapX,
                transition: options.transition,
                zDirection: options.zDirection === undefined ? 1 : options.zDirection,
            });
            /**
             * @private
             * @type {import("../format/Feature.js").default}
             */
            this.format_ = options.format ? options.format : null;
            /**
             * @type {Object<string, import("./VectorTile").default>}
             */
            this.loadingTiles_ = {};
            /**
             * @private
             * @type {TileCache}
             */
            this.sourceTileCache = new TileCache_js_2.default(this.tileCache.highWaterMark);
            /**
             * @private
             * @type {boolean}
             */
            this.overlaps_ = options.overlaps == undefined ? true : options.overlaps;
            /**
             * @protected
             * @type {typeof import("../VectorTile.js").default}
             */
            this.tileClass = options.tileClass ? options.tileClass : VectorTile_js_1.default;
            /**
             * @private
             * @type {Object<string, import("../tilegrid/TileGrid.js").default>}
             */
            this.tileGrids_ = {};
        }
        /**
         * Get features whose bounding box intersects the provided extent. Only features for cached
         * tiles for the last rendered zoom level are available in the source. So this method is only
         * suitable for requesting tiles for extents that are currently rendered.
         *
         * Features are returned in random tile order and as they are included in the tiles. This means
         * they can be clipped, duplicated across tiles, and simplified to the render resolution.
         *
         * @param {import("../extent.js").Extent} extent Extent.
         * @return {Array<import("../Feature.js").FeatureLike>} Features.
         * @api
         */
        getFeaturesInExtent(extent) {
            const features = [];
            const tileCache = this.tileCache;
            if (tileCache.getCount() === 0) {
                return features;
            }
            const z = tilecoord_js_6.fromKey(tileCache.peekFirstKey())[0];
            const tileGrid = this.tileGrid;
            tileCache.forEach(function (tile) {
                if (tile.tileCoord[0] !== z || tile.getState() !== TileState_js_6.default.LOADED) {
                    return;
                }
                const sourceTiles = tile.getSourceTiles();
                for (let i = 0, ii = sourceTiles.length; i < ii; ++i) {
                    const sourceTile = sourceTiles[i];
                    const tileCoord = sourceTile.tileCoord;
                    if (extent_js_36.intersects(extent, tileGrid.getTileCoordExtent(tileCoord))) {
                        const tileFeatures = sourceTile.getFeatures();
                        if (tileFeatures) {
                            for (let j = 0, jj = tileFeatures.length; j < jj; ++j) {
                                const candidate = tileFeatures[j];
                                const geometry = candidate.getGeometry();
                                if (extent_js_36.intersects(extent, geometry.getExtent())) {
                                    features.push(candidate);
                                }
                            }
                        }
                    }
                }
            });
            return features;
        }
        /**
         * @return {boolean} The source can have overlapping geometries.
         */
        getOverlaps() {
            return this.overlaps_;
        }
        /**
         * clear {@link module:ol/TileCache~TileCache} and delete all source tiles
         * @api
         */
        clear() {
            this.tileCache.clear();
            this.sourceTileCache.clear();
        }
        /**
         * @param {import("../proj/Projection.js").default} projection Projection.
         * @param {!Object<string, boolean>} usedTiles Used tiles.
         */
        expireCache(projection, usedTiles) {
            super.expireCache(projection, usedTiles);
            this.sourceTileCache.expireCache({});
        }
        /**
         * @param {number} pixelRatio Pixel ratio.
         * @param {import("../proj/Projection").default} projection Projection.
         * @param {VectorRenderTile} tile Vector image tile.
         * @return {Array<import("../VectorTile").default>} Tile keys.
         */
        getSourceTiles(pixelRatio, projection, tile) {
            const urlTileCoord = tile.wrappedTileCoord;
            const tileGrid = this.getTileGridForProjection(projection);
            const extent = tileGrid.getTileCoordExtent(urlTileCoord);
            const z = urlTileCoord[0];
            const resolution = tileGrid.getResolution(z);
            // make extent 1 pixel smaller so we don't load tiles for < 0.5 pixel render space
            extent_js_36.buffer(extent, -resolution, extent);
            const sourceTileGrid = this.tileGrid;
            const sourceExtent = sourceTileGrid.getExtent();
            if (sourceExtent) {
                extent_js_36.getIntersection(extent, sourceExtent, extent);
            }
            const sourceZ = sourceTileGrid.getZForResolution(resolution, 1);
            const minZoom = sourceTileGrid.getMinZoom();
            const previousSourceTiles = tile.sourceTiles;
            let sourceTiles, covered, loadedZ;
            if (previousSourceTiles &&
                previousSourceTiles.length > 0 &&
                previousSourceTiles[0].tileCoord[0] === sourceZ) {
                sourceTiles = previousSourceTiles;
                covered = true;
                loadedZ = sourceZ;
            }
            else {
                sourceTiles = [];
                loadedZ = sourceZ + 1;
                do {
                    --loadedZ;
                    covered = true;
                    sourceTileGrid.forEachTileCoord(extent, loadedZ, function (sourceTileCoord) {
                        const tileUrl = this.tileUrlFunction(sourceTileCoord, pixelRatio, projection);
                        let sourceTile;
                        if (tileUrl !== undefined) {
                            if (this.sourceTileCache.containsKey(tileUrl)) {
                                sourceTile = this.sourceTileCache.get(tileUrl);
                                const state = sourceTile.getState();
                                if (state === TileState_js_6.default.LOADED ||
                                    state === TileState_js_6.default.ERROR ||
                                    state === TileState_js_6.default.EMPTY) {
                                    sourceTiles.push(sourceTile);
                                    return;
                                }
                            }
                            else if (loadedZ === sourceZ) {
                                sourceTile = new this.tileClass(sourceTileCoord, TileState_js_6.default.IDLE, tileUrl, this.format_, this.tileLoadFunction);
                                sourceTile.extent = sourceTileGrid.getTileCoordExtent(sourceTileCoord);
                                sourceTile.projection = projection;
                                sourceTile.resolution = sourceTileGrid.getResolution(sourceTileCoord[0]);
                                this.sourceTileCache.set(tileUrl, sourceTile);
                                sourceTile.addEventListener(EventType_js_34.default.CHANGE, this.handleTileChange.bind(this));
                                sourceTile.load();
                            }
                        }
                        covered =
                            covered &&
                                sourceTile &&
                                sourceTile.getState() === TileState_js_6.default.LOADED;
                        if (!sourceTile) {
                            return;
                        }
                        if (sourceTile.getState() !== TileState_js_6.default.EMPTY &&
                            tile.getState() === TileState_js_6.default.IDLE) {
                            tile.loadingSourceTiles++;
                            sourceTile.addEventListener(EventType_js_34.default.CHANGE, function listenChange() {
                                const state = sourceTile.getState();
                                const sourceTileKey = sourceTile.getKey();
                                if (state === TileState_js_6.default.LOADED || state === TileState_js_6.default.ERROR) {
                                    if (state === TileState_js_6.default.LOADED) {
                                        sourceTile.removeEventListener(EventType_js_34.default.CHANGE, listenChange);
                                        tile.loadingSourceTiles--;
                                        delete tile.errorSourceTileKeys[sourceTileKey];
                                    }
                                    else if (state === TileState_js_6.default.ERROR) {
                                        tile.errorSourceTileKeys[sourceTileKey] = true;
                                    }
                                    const errorTileCount = Object.keys(tile.errorSourceTileKeys)
                                        .length;
                                    if (tile.loadingSourceTiles - errorTileCount === 0) {
                                        tile.hifi = errorTileCount === 0;
                                        tile.sourceZ = sourceZ;
                                        tile.setState(TileState_js_6.default.LOADED);
                                    }
                                }
                            });
                        }
                    }.bind(this));
                    if (!covered) {
                        sourceTiles.length = 0;
                    }
                } while (!covered && loadedZ > minZoom);
            }
            if (tile.getState() === TileState_js_6.default.IDLE) {
                tile.setState(TileState_js_6.default.LOADING);
            }
            if (covered) {
                tile.hifi = sourceZ === loadedZ;
                tile.sourceZ = loadedZ;
                if (tile.getState() < TileState_js_6.default.LOADED) {
                    tile.setState(TileState_js_6.default.LOADED);
                }
                else if (!previousSourceTiles ||
                    !array_js_19.equals(sourceTiles, previousSourceTiles)) {
                    tile.sourceTiles = sourceTiles;
                }
            }
            return sourceTiles;
        }
        /**
         * @param {number} z Tile coordinate z.
         * @param {number} x Tile coordinate x.
         * @param {number} y Tile coordinate y.
         * @param {number} pixelRatio Pixel ratio.
         * @param {import("../proj/Projection.js").default} projection Projection.
         * @return {!VectorRenderTile} Tile.
         */
        getTile(z, x, y, pixelRatio, projection) {
            const coordKey = tilecoord_js_6.getKeyZXY(z, x, y);
            const key = this.getKey();
            let tile;
            if (this.tileCache.containsKey(coordKey)) {
                tile = this.tileCache.get(coordKey);
                if (tile.key === key) {
                    return tile;
                }
            }
            const tileCoord = [z, x, y];
            let urlTileCoord = this.getTileCoordForTileUrlFunction(tileCoord, projection);
            const sourceExtent = this.getTileGrid().getExtent();
            const tileGrid = this.getTileGridForProjection(projection);
            if (urlTileCoord && sourceExtent) {
                const tileExtent = tileGrid.getTileCoordExtent(urlTileCoord);
                // make extent 1 pixel smaller so we don't load tiles for < 0.5 pixel render space
                extent_js_36.buffer(tileExtent, -tileGrid.getResolution(z), tileExtent);
                if (!extent_js_36.intersects(sourceExtent, tileExtent)) {
                    urlTileCoord = null;
                }
            }
            let empty = true;
            if (urlTileCoord !== null) {
                const sourceTileGrid = this.tileGrid;
                const resolution = tileGrid.getResolution(z);
                const sourceZ = sourceTileGrid.getZForResolution(resolution, 1);
                // make extent 1 pixel smaller so we don't load tiles for < 0.5 pixel render space
                const extent = tileGrid.getTileCoordExtent(urlTileCoord);
                extent_js_36.buffer(extent, -resolution, extent);
                sourceTileGrid.forEachTileCoord(extent, sourceZ, function (sourceTileCoord) {
                    empty =
                        empty &&
                            !this.tileUrlFunction(sourceTileCoord, pixelRatio, projection);
                }.bind(this));
            }
            const newTile = new VectorRenderTile_js_1.default(tileCoord, empty ? TileState_js_6.default.EMPTY : TileState_js_6.default.IDLE, urlTileCoord, this.getSourceTiles.bind(this, pixelRatio, projection));
            newTile.key = key;
            if (tile) {
                newTile.interimTile = tile;
                newTile.refreshInterimChain();
                this.tileCache.replace(coordKey, newTile);
            }
            else {
                this.tileCache.set(coordKey, newTile);
            }
            return newTile;
        }
        /**
         * @param {import("../proj/Projection.js").default} projection Projection.
         * @return {!import("../tilegrid/TileGrid.js").default} Tile grid.
         */
        getTileGridForProjection(projection) {
            const code = projection.getCode();
            let tileGrid = this.tileGrids_[code];
            if (!tileGrid) {
                // A tile grid that matches the tile size of the source tile grid is more
                // likely to have 1:1 relationships between source tiles and rendered tiles.
                const sourceTileGrid = this.tileGrid;
                tileGrid = tilegrid_js_2.createForProjection(projection, undefined, sourceTileGrid
                    ? sourceTileGrid.getTileSize(sourceTileGrid.getMinZoom())
                    : undefined);
                this.tileGrids_[code] = tileGrid;
            }
            return tileGrid;
        }
        /**
         * Get the tile pixel ratio for this source.
         * @param {number} pixelRatio Pixel ratio.
         * @return {number} Tile pixel ratio.
         */
        getTilePixelRatio(pixelRatio) {
            return pixelRatio;
        }
        /**
         * @param {number} z Z.
         * @param {number} pixelRatio Pixel ratio.
         * @param {import("../proj/Projection.js").default} projection Projection.
         * @return {import("../size.js").Size} Tile size.
         */
        getTilePixelSize(z, pixelRatio, projection) {
            const tileGrid = this.getTileGridForProjection(projection);
            const tileSize = size_js_7.toSize(tileGrid.getTileSize(z), this.tmpSize);
            return [
                Math.round(tileSize[0] * pixelRatio),
                Math.round(tileSize[1] * pixelRatio),
            ];
        }
        /**
         * Increases the cache size if needed
         * @param {number} tileCount Minimum number of tiles needed.
         * @param {import("../proj/Projection.js").default} projection Projection.
         */
        updateCacheSize(tileCount, projection) {
            super.updateCacheSize(tileCount * 2, projection);
        }
    }
    exports.default = VectorTile;
    /**
     * Sets the loader for a tile.
     * @param {import("../VectorTile.js").default} tile Vector tile.
     * @param {string} url URL.
     */
    function defaultLoadFunction(tile, url) {
        const loader = featureloader_js_2.loadFeaturesXhr(url, tile.getFormat(), tile.onLoad.bind(tile), tile.onError.bind(tile));
        tile.setLoader(loader);
    }
    exports.defaultLoadFunction = defaultLoadFunction;
});
define("node_modules/ol/src/layer/BaseVector", ["require", "exports", "node_modules/ol/src/layer/Layer", "node_modules/ol/src/obj", "node_modules/ol/src/style/Style"], function (require, exports, Layer_js_4, obj_js_16, Style_js_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @typedef {Object} Options
     * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.
     * @property {number} [opacity=1] Opacity (0, 1).
     * @property {boolean} [visible=true] Visibility.
     * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
     * rendered outside of this extent.
     * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
     * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
     * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
     * method was used.
     * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
     * visible.
     * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
     * be visible.
     * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be
     * visible.
     * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will
     * be visible.
     * @property {import("../render.js").OrderFunction} [renderOrder] Render order. Function to be used when sorting
     * features before rendering. By default features are drawn in the order that they are created. Use
     * `null` to avoid the sort, but get an undefined draw order.
     * @property {number} [renderBuffer=100] The buffer in pixels around the viewport extent used by the
     * renderer when getting features from the vector source for the rendering or hit-detection.
     * Recommended value: the size of the largest symbol, line width or label.
     * @property {import("../source/Vector.js").default} [source] Source.
     * @property {import("../PluggableMap.js").default} [map] Sets the layer as overlay on a map. The map will not manage
     * this layer in its layers collection, and the layer will be rendered on top. This is useful for
     * temporary layers. The standard way to add a layer to a map and have it managed by the map is to
     * use {@link module:ol/Map#addLayer}.
     * @property {boolean} [declutter=false] Declutter images and text. Decluttering is applied to all
     * image and text styles of all Vector and VectorTile layers that have set this to `true`. The priority
     * is defined by the z-index of the layer, the `zIndex` of the style and the render order of features.
     * Higher z-index means higher priority. Within the same z-index, a feature rendered before another has
     * higher priority.
     * @property {import("../style/Style.js").StyleLike|null} [style] Layer style. When set to `null`, only
     * features that have their own style will be rendered. See {@link module:ol/style} for default style
     * which will be used if this is not set.
     * @property {boolean} [updateWhileAnimating=false] When set to `true`, feature batches will
     * be recreated during animations. This means that no vectors will be shown clipped, but the
     * setting will have a performance impact for large amounts of vector data. When set to `false`,
     * batches will be recreated when no animation is active.
     * @property {boolean} [updateWhileInteracting=false] When set to `true`, feature batches will
     * be recreated during interactions. See also `updateWhileAnimating`.
     */
    /**
     * @enum {string}
     * @private
     */
    const Property = {
        RENDER_ORDER: 'renderOrder',
    };
    /**
     * @classdesc
     * Vector data that is rendered client-side.
     * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}
     * property on the layer object; for example, setting `title: 'My Title'` in the
     * options means that `title` is observable, and has get/set accessors.
     *
     * @template {import("../source/Vector.js").default|import("../source/VectorTile.js").default} VectorSourceType
     * @extends {Layer<VectorSourceType>}
     * @api
     */
    class BaseVectorLayer extends Layer_js_4.default {
        /**
         * @param {Options=} opt_options Options.
         */
        constructor(opt_options) {
            const options = opt_options ? opt_options : {};
            const baseOptions = obj_js_16.assign({}, options);
            delete baseOptions.style;
            delete baseOptions.renderBuffer;
            delete baseOptions.updateWhileAnimating;
            delete baseOptions.updateWhileInteracting;
            super(baseOptions);
            /**
             * @private
             * @type {boolean}
             */
            this.declutter_ =
                options.declutter !== undefined ? options.declutter : false;
            /**
             * @type {number}
             * @private
             */
            this.renderBuffer_ =
                options.renderBuffer !== undefined ? options.renderBuffer : 100;
            /**
             * User provided style.
             * @type {import("../style/Style.js").StyleLike}
             * @private
             */
            this.style_ = null;
            /**
             * Style function for use within the library.
             * @type {import("../style/Style.js").StyleFunction|undefined}
             * @private
             */
            this.styleFunction_ = undefined;
            this.setStyle(options.style);
            /**
             * @type {boolean}
             * @private
             */
            this.updateWhileAnimating_ =
                options.updateWhileAnimating !== undefined
                    ? options.updateWhileAnimating
                    : false;
            /**
             * @type {boolean}
             * @private
             */
            this.updateWhileInteracting_ =
                options.updateWhileInteracting !== undefined
                    ? options.updateWhileInteracting
                    : false;
        }
        /**
         * @return {boolean} Declutter.
         */
        getDeclutter() {
            return this.declutter_;
        }
        /**
         * Get the topmost feature that intersects the given pixel on the viewport. Returns a promise
         * that resolves with an array of features. The array will either contain the topmost feature
         * when a hit was detected, or it will be empty.
         *
         * The hit detection algorithm used for this method is optimized for performance, but is less
         * accurate than the one used in {@link import("../PluggableMap.js").default#getFeaturesAtPixel}: Text
         * is not considered, and icons are only represented by their bounding box instead of the exact
         * image.
         *
         * @param {import("../pixel.js").Pixel} pixel Pixel.
         * @return {Promise<Array<import("../Feature").default>>} Promise that resolves with an array of features.
         * @api
         */
        getFeatures(pixel) {
            return super.getFeatures(pixel);
        }
        /**
         * @return {number|undefined} Render buffer.
         */
        getRenderBuffer() {
            return this.renderBuffer_;
        }
        /**
         * @return {function(import("../Feature.js").default, import("../Feature.js").default): number|null|undefined} Render
         *     order.
         */
        getRenderOrder() {
            return /** @type {import("../render.js").OrderFunction|null|undefined} */ (this.get(Property.RENDER_ORDER));
        }
        /**
         * Get the style for features.  This returns whatever was passed to the `style`
         * option at construction or to the `setStyle` method.
         * @return {import("../style/Style.js").StyleLike|null|undefined} Layer style.
         * @api
         */
        getStyle() {
            return this.style_;
        }
        /**
         * Get the style function.
         * @return {import("../style/Style.js").StyleFunction|undefined} Layer style function.
         * @api
         */
        getStyleFunction() {
            return this.styleFunction_;
        }
        /**
         * @return {boolean} Whether the rendered layer should be updated while
         *     animating.
         */
        getUpdateWhileAnimating() {
            return this.updateWhileAnimating_;
        }
        /**
         * @return {boolean} Whether the rendered layer should be updated while
         *     interacting.
         */
        getUpdateWhileInteracting() {
            return this.updateWhileInteracting_;
        }
        /**
         * @param {import("../render.js").OrderFunction|null|undefined} renderOrder
         *     Render order.
         */
        setRenderOrder(renderOrder) {
            this.set(Property.RENDER_ORDER, renderOrder);
        }
        /**
         * Set the style for features.  This can be a single style object, an array
         * of styles, or a function that takes a feature and resolution and returns
         * an array of styles. If set to `null`, the layer has no style (a `null` style),
         * so only features that have their own styles will be rendered in the layer. Call
         * `setStyle()` without arguments to reset to the default style. See
         * {@link module:ol/style} for information on the default style.
         * @param {(import("../style/Style.js").StyleLike|null)=} opt_style Layer style.
         * @api
         */
        setStyle(opt_style) {
            this.style_ = opt_style !== undefined ? opt_style : Style_js_1.createDefaultStyle;
            this.styleFunction_ =
                opt_style === null ? undefined : Style_js_1.toFunction(this.style_);
            this.changed();
        }
    }
    exports.default = BaseVectorLayer;
});
define("node_modules/ol/src/renderer/canvas/Layer", ["require", "exports", "node_modules/ol/src/renderer/Layer", "node_modules/ol/src/render/Event", "node_modules/ol/src/render/EventType", "node_modules/ol/src/transform", "node_modules/ol/src/dom", "node_modules/ol/src/extent", "node_modules/ol/src/render/canvas"], function (require, exports, Layer_js_5, Event_js_12, EventType_js_35, transform_js_18, dom_js_13, extent_js_37, canvas_js_9) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @abstract
     * @template {import("../../layer/Layer.js").default} LayerType
     */
    class CanvasLayerRenderer extends Layer_js_5.default {
        /**
         * @param {LayerType} layer Layer.
         */
        constructor(layer) {
            super(layer);
            /**
             * @protected
             * @type {HTMLElement}
             */
            this.container = null;
            /**
             * @protected
             * @type {number}
             */
            this.renderedResolution;
            /**
             * A temporary transform.  The values in this transform should only be used in a
             * function that sets the values.
             * @protected
             * @type {import("../../transform.js").Transform}
             */
            this.tempTransform = transform_js_18.create();
            /**
             * The transform for rendered pixels to viewport CSS pixels.  This transform must
             * be set when rendering a frame and may be used by other functions after rendering.
             * @protected
             * @type {import("../../transform.js").Transform}
             */
            this.pixelTransform = transform_js_18.create();
            /**
             * The transform for viewport CSS pixels to rendered pixels.  This transform must
             * be set when rendering a frame and may be used by other functions after rendering.
             * @protected
             * @type {import("../../transform.js").Transform}
             */
            this.inversePixelTransform = transform_js_18.create();
            /**
             * @type {CanvasRenderingContext2D}
             */
            this.context = null;
            /**
             * @type {boolean}
             */
            this.containerReused = false;
        }
        /**
         * Get a rendering container from an existing target, if compatible.
         * @param {HTMLElement} target Potential render target.
         * @param {string} transform CSS Transform.
         * @param {number} opacity Opacity.
         */
        useContainer(target, transform, opacity) {
            const layerClassName = this.getLayer().getClassName();
            let container, context;
            if (target &&
                target.style.opacity === '' &&
                target.className === layerClassName) {
                const canvas = target.firstElementChild;
                if (canvas instanceof HTMLCanvasElement) {
                    context = canvas.getContext('2d');
                }
            }
            if (context &&
                (context.canvas.width === 0 ||
                    context.canvas.style.transform === transform)) {
                // Container of the previous layer renderer can be used.
                this.container = target;
                this.context = context;
                this.containerReused = true;
            }
            else if (this.containerReused) {
                // Previously reused container cannot be used any more.
                this.container = null;
                this.context = null;
                this.containerReused = false;
            }
            if (!this.container) {
                container = document.createElement('div');
                container.className = layerClassName;
                let style = container.style;
                style.position = 'absolute';
                style.width = '100%';
                style.height = '100%';
                context = dom_js_13.createCanvasContext2D();
                const canvas = context.canvas;
                container.appendChild(canvas);
                style = canvas.style;
                style.position = 'absolute';
                style.left = '0';
                style.transformOrigin = 'top left';
                this.container = container;
                this.context = context;
            }
        }
        /**
         * @param {CanvasRenderingContext2D} context Context.
         * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
         * @param {import("../../extent.js").Extent} extent Clip extent.
         * @protected
         */
        clip(context, frameState, extent) {
            const pixelRatio = frameState.pixelRatio;
            const halfWidth = (frameState.size[0] * pixelRatio) / 2;
            const halfHeight = (frameState.size[1] * pixelRatio) / 2;
            const rotation = frameState.viewState.rotation;
            const topLeft = extent_js_37.getTopLeft(extent);
            const topRight = extent_js_37.getTopRight(extent);
            const bottomRight = extent_js_37.getBottomRight(extent);
            const bottomLeft = extent_js_37.getBottomLeft(extent);
            transform_js_18.apply(frameState.coordinateToPixelTransform, topLeft);
            transform_js_18.apply(frameState.coordinateToPixelTransform, topRight);
            transform_js_18.apply(frameState.coordinateToPixelTransform, bottomRight);
            transform_js_18.apply(frameState.coordinateToPixelTransform, bottomLeft);
            context.save();
            canvas_js_9.rotateAtOffset(context, -rotation, halfWidth, halfHeight);
            context.beginPath();
            context.moveTo(topLeft[0] * pixelRatio, topLeft[1] * pixelRatio);
            context.lineTo(topRight[0] * pixelRatio, topRight[1] * pixelRatio);
            context.lineTo(bottomRight[0] * pixelRatio, bottomRight[1] * pixelRatio);
            context.lineTo(bottomLeft[0] * pixelRatio, bottomLeft[1] * pixelRatio);
            context.clip();
            canvas_js_9.rotateAtOffset(context, rotation, halfWidth, halfHeight);
        }
        /**
         * @param {CanvasRenderingContext2D} context Context.
         * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
         * @param {import("../../extent.js").Extent} extent Clip extent.
         * @protected
         */
        clipUnrotated(context, frameState, extent) {
            const topLeft = extent_js_37.getTopLeft(extent);
            const topRight = extent_js_37.getTopRight(extent);
            const bottomRight = extent_js_37.getBottomRight(extent);
            const bottomLeft = extent_js_37.getBottomLeft(extent);
            transform_js_18.apply(frameState.coordinateToPixelTransform, topLeft);
            transform_js_18.apply(frameState.coordinateToPixelTransform, topRight);
            transform_js_18.apply(frameState.coordinateToPixelTransform, bottomRight);
            transform_js_18.apply(frameState.coordinateToPixelTransform, bottomLeft);
            const inverted = this.inversePixelTransform;
            transform_js_18.apply(inverted, topLeft);
            transform_js_18.apply(inverted, topRight);
            transform_js_18.apply(inverted, bottomRight);
            transform_js_18.apply(inverted, bottomLeft);
            context.save();
            context.beginPath();
            context.moveTo(Math.round(topLeft[0]), Math.round(topLeft[1]));
            context.lineTo(Math.round(topRight[0]), Math.round(topRight[1]));
            context.lineTo(Math.round(bottomRight[0]), Math.round(bottomRight[1]));
            context.lineTo(Math.round(bottomLeft[0]), Math.round(bottomLeft[1]));
            context.clip();
        }
        /**
         * @param {import("../../render/EventType.js").default} type Event type.
         * @param {CanvasRenderingContext2D} context Context.
         * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
         * @private
         */
        dispatchRenderEvent_(type, context, frameState) {
            const layer = this.getLayer();
            if (layer.hasListener(type)) {
                const event = new Event_js_12.default(type, this.inversePixelTransform, frameState, context);
                layer.dispatchEvent(event);
            }
        }
        /**
         * @param {CanvasRenderingContext2D} context Context.
         * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
         * @protected
         */
        preRender(context, frameState) {
            this.dispatchRenderEvent_(EventType_js_35.default.PRERENDER, context, frameState);
        }
        /**
         * @param {CanvasRenderingContext2D} context Context.
         * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
         * @protected
         */
        postRender(context, frameState) {
            this.dispatchRenderEvent_(EventType_js_35.default.POSTRENDER, context, frameState);
        }
        /**
         * Creates a transform for rendering to an element that will be rotated after rendering.
         * @param {import("../../coordinate.js").Coordinate} center Center.
         * @param {number} resolution Resolution.
         * @param {number} rotation Rotation.
         * @param {number} pixelRatio Pixel ratio.
         * @param {number} width Width of the rendered element (in pixels).
         * @param {number} height Height of the rendered element (in pixels).
         * @param {number} offsetX Offset on the x-axis in view coordinates.
         * @protected
         * @return {!import("../../transform.js").Transform} Transform.
         */
        getRenderTransform(center, resolution, rotation, pixelRatio, width, height, offsetX) {
            const dx1 = width / 2;
            const dy1 = height / 2;
            const sx = pixelRatio / resolution;
            const sy = -sx;
            const dx2 = -center[0] + offsetX;
            const dy2 = -center[1];
            return transform_js_18.compose(this.tempTransform, dx1, dy1, sx, sy, -rotation, dx2, dy2);
        }
        /**
         * @param {import("../../pixel.js").Pixel} pixel Pixel.
         * @param {import("../../PluggableMap.js").FrameState} frameState FrameState.
         * @param {number} hitTolerance Hit tolerance in pixels.
         * @return {Uint8ClampedArray|Uint8Array} The result.  If there is no data at the pixel
         *    location, null will be returned.  If there is data, but pixel values cannot be
         *    returned, and empty array will be returned.
         */
        getDataAtPixel(pixel, frameState, hitTolerance) {
            const renderPixel = transform_js_18.apply(this.inversePixelTransform, pixel.slice());
            const context = this.context;
            let data;
            try {
                const x = Math.round(renderPixel[0]);
                const y = Math.round(renderPixel[1]);
                const newCanvas = document.createElement('canvas');
                const newContext = newCanvas.getContext('2d');
                newCanvas.width = 1;
                newCanvas.height = 1;
                newContext.clearRect(0, 0, 1, 1);
                newContext.drawImage(context.canvas, x, y, 1, 1, 0, 0, 1, 1);
                data = newContext.getImageData(0, 0, 1, 1).data;
            }
            catch (err) {
                if (err.name === 'SecurityError') {
                    // tainted canvas, we assume there is data at the given pixel (although there might not be)
                    return new Uint8Array();
                }
                return data;
            }
            if (data[3] === 0) {
                return null;
            }
            return data;
        }
    }
    exports.default = CanvasLayerRenderer;
});
/**
 * @module ol/style/IconAnchorUnits
 */
define("node_modules/ol/src/style/IconAnchorUnits", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Icon anchor units. One of 'fraction', 'pixels'.
     * @enum {string}
     */
    exports.default = {
        /**
         * Anchor is a fraction
         * @api
         */
        FRACTION: 'fraction',
        /**
         * Anchor is in pixels
         * @api
         */
        PIXELS: 'pixels',
    };
});
/**
 * @module ol/style/IconOrigin
 */
define("node_modules/ol/src/style/IconOrigin", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Icon origin. One of 'bottom-left', 'bottom-right', 'top-left', 'top-right'.
     * @enum {string}
     */
    exports.default = {
        /**
         * Origin is at bottom left
         * @api
         */
        BOTTOM_LEFT: 'bottom-left',
        /**
         * Origin is at bottom right
         * @api
         */
        BOTTOM_RIGHT: 'bottom-right',
        /**
         * Origin is at top left
         * @api
         */
        TOP_LEFT: 'top-left',
        /**
         * Origin is at top right
         * @api
         */
        TOP_RIGHT: 'top-right',
    };
});
define("node_modules/ol/src/style/Icon", ["require", "exports", "node_modules/ol/src/events/EventType", "node_modules/ol/src/style/IconAnchorUnits", "node_modules/ol/src/style/IconOrigin", "node_modules/ol/src/ImageState", "node_modules/ol/src/style/Image", "node_modules/ol/src/color", "node_modules/ol/src/asserts", "node_modules/ol/src/style/IconImage", "node_modules/ol/src/util"], function (require, exports, EventType_js_36, IconAnchorUnits_js_1, IconOrigin_js_1, ImageState_js_6, Image_js_3, color_js_4, asserts_js_18, IconImage_js_1, util_js_21) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @typedef {Object} Options
     * @property {Array<number>} [anchor=[0.5, 0.5]] Anchor. Default value is the icon center.
     * @property {import("./IconOrigin.js").default} [anchorOrigin='top-left'] Origin of the anchor: `bottom-left`, `bottom-right`,
     * `top-left` or `top-right`.
     * @property {import("./IconAnchorUnits.js").default} [anchorXUnits='fraction'] Units in which the anchor x value is
     * specified. A value of `'fraction'` indicates the x value is a fraction of the icon. A value of `'pixels'` indicates
     * the x value in pixels.
     * @property {import("./IconAnchorUnits.js").default} [anchorYUnits='fraction'] Units in which the anchor y value is
     * specified. A value of `'fraction'` indicates the y value is a fraction of the icon. A value of `'pixels'` indicates
     * the y value in pixels.
     * @property {import("../color.js").Color|string} [color] Color to tint the icon. If not specified,
     * the icon will be left as is.
     * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images. Note that you must provide a
     * `crossOrigin` value if you want to access pixel data with the Canvas renderer.
     * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.
     * @property {HTMLImageElement|HTMLCanvasElement} [img] Image object for the icon. If the `src` option is not provided then the
     * provided image must already be loaded. And in that case, it is required
     * to provide the size of the image, with the `imgSize` option.
     * @property {Array<number>} [offset=[0, 0]] Offset, which, together with the size and the offset origin, define the
     * sub-rectangle to use from the original icon image.
     * @property {Array<number>} [displacement=[0,0]] Displacement the icon
     * @property {import("./IconOrigin.js").default} [offsetOrigin='top-left'] Origin of the offset: `bottom-left`, `bottom-right`,
     * `top-left` or `top-right`.
     * @property {number} [opacity=1] Opacity of the icon.
     * @property {number|import("../size.js").Size} [scale=1] Scale.
     * @property {boolean} [rotateWithView=false] Whether to rotate the icon with the view.
     * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).
     * @property {import("../size.js").Size} [size] Icon size in pixel. Can be used together with `offset` to define the
     * sub-rectangle to use from the origin (sprite) icon image.
     * @property {import("../size.js").Size} [imgSize] Image size in pixels. Only required if `img` is set and `src` is not, and
     * for SVG images in Internet Explorer 11. The provided `imgSize` needs to match the actual size of the image.
     * @property {string} [src] Image source URI.
     */
    /**
     * @classdesc
     * Set icon style for vector features.
     * @api
     */
    class Icon extends Image_js_3.default {
        /**
         * @param {Options=} opt_options Options.
         */
        constructor(opt_options) {
            const options = opt_options || {};
            /**
             * @type {number}
             */
            const opacity = options.opacity !== undefined ? options.opacity : 1;
            /**
             * @type {number}
             */
            const rotation = options.rotation !== undefined ? options.rotation : 0;
            /**
             * @type {number|import("../size.js").Size}
             */
            const scale = options.scale !== undefined ? options.scale : 1;
            /**
             * @type {boolean}
             */
            const rotateWithView = options.rotateWithView !== undefined ? options.rotateWithView : false;
            super({
                opacity: opacity,
                rotation: rotation,
                scale: scale,
                displacement: options.displacement !== undefined ? options.displacement : [0, 0],
                rotateWithView: rotateWithView,
            });
            /**
             * @private
             * @type {Array<number>}
             */
            this.anchor_ = options.anchor !== undefined ? options.anchor : [0.5, 0.5];
            /**
             * @private
             * @type {Array<number>}
             */
            this.normalizedAnchor_ = null;
            /**
             * @private
             * @type {import("./IconOrigin.js").default}
             */
            this.anchorOrigin_ =
                options.anchorOrigin !== undefined
                    ? options.anchorOrigin
                    : IconOrigin_js_1.default.TOP_LEFT;
            /**
             * @private
             * @type {import("./IconAnchorUnits.js").default}
             */
            this.anchorXUnits_ =
                options.anchorXUnits !== undefined
                    ? options.anchorXUnits
                    : IconAnchorUnits_js_1.default.FRACTION;
            /**
             * @private
             * @type {import("./IconAnchorUnits.js").default}
             */
            this.anchorYUnits_ =
                options.anchorYUnits !== undefined
                    ? options.anchorYUnits
                    : IconAnchorUnits_js_1.default.FRACTION;
            /**
             * @private
             * @type {?string}
             */
            this.crossOrigin_ =
                options.crossOrigin !== undefined ? options.crossOrigin : null;
            /**
             * @type {HTMLImageElement|HTMLCanvasElement}
             */
            const image = options.img !== undefined ? options.img : null;
            /**
             * @type {import("../size.js").Size}
             */
            const imgSize = options.imgSize !== undefined ? options.imgSize : null;
            /**
             * @type {string|undefined}
             */
            let src = options.src;
            asserts_js_18.assert(!(src !== undefined && image), 4); // `image` and `src` cannot be provided at the same time
            asserts_js_18.assert(!image || (image && imgSize), 5); // `imgSize` must be set when `image` is provided
            if ((src === undefined || src.length === 0) && image) {
                src = /** @type {HTMLImageElement} */ (image).src || util_js_21.getUid(image);
            }
            asserts_js_18.assert(src !== undefined && src.length > 0, 6); // A defined and non-empty `src` or `image` must be provided
            /**
             * @type {import("../ImageState.js").default}
             */
            const imageState = options.src !== undefined ? ImageState_js_6.default.IDLE : ImageState_js_6.default.LOADED;
            /**
             * @private
             * @type {import("../color.js").Color}
             */
            this.color_ = options.color !== undefined ? color_js_4.asArray(options.color) : null;
            /**
             * @private
             * @type {import("./IconImage.js").default}
             */
            this.iconImage_ = IconImage_js_1.get(image, 
            /** @type {string} */ (src), imgSize, this.crossOrigin_, imageState, this.color_);
            /**
             * @private
             * @type {Array<number>}
             */
            this.offset_ = options.offset !== undefined ? options.offset : [0, 0];
            /**
             * @private
             * @type {import("./IconOrigin.js").default}
             */
            this.offsetOrigin_ =
                options.offsetOrigin !== undefined
                    ? options.offsetOrigin
                    : IconOrigin_js_1.default.TOP_LEFT;
            /**
             * @private
             * @type {Array<number>}
             */
            this.origin_ = null;
            /**
             * @private
             * @type {import("../size.js").Size}
             */
            this.size_ = options.size !== undefined ? options.size : null;
        }
        /**
         * Clones the style. The underlying Image/HTMLCanvasElement is not cloned.
         * @return {Icon} The cloned style.
         * @api
         */
        clone() {
            const scale = this.getScale();
            return new Icon({
                anchor: this.anchor_.slice(),
                anchorOrigin: this.anchorOrigin_,
                anchorXUnits: this.anchorXUnits_,
                anchorYUnits: this.anchorYUnits_,
                crossOrigin: this.crossOrigin_,
                color: this.color_ && this.color_.slice
                    ? this.color_.slice()
                    : this.color_ || undefined,
                src: this.getSrc(),
                offset: this.offset_.slice(),
                offsetOrigin: this.offsetOrigin_,
                size: this.size_ !== null ? this.size_.slice() : undefined,
                opacity: this.getOpacity(),
                scale: Array.isArray(scale) ? scale.slice() : scale,
                rotation: this.getRotation(),
                rotateWithView: this.getRotateWithView(),
            });
        }
        /**
         * Get the anchor point in pixels. The anchor determines the center point for the
         * symbolizer.
         * @return {Array<number>} Anchor.
         * @api
         */
        getAnchor() {
            if (this.normalizedAnchor_) {
                return this.normalizedAnchor_;
            }
            let anchor = this.anchor_;
            const size = this.getSize();
            if (this.anchorXUnits_ == IconAnchorUnits_js_1.default.FRACTION ||
                this.anchorYUnits_ == IconAnchorUnits_js_1.default.FRACTION) {
                if (!size) {
                    return null;
                }
                anchor = this.anchor_.slice();
                if (this.anchorXUnits_ == IconAnchorUnits_js_1.default.FRACTION) {
                    anchor[0] *= size[0];
                }
                if (this.anchorYUnits_ == IconAnchorUnits_js_1.default.FRACTION) {
                    anchor[1] *= size[1];
                }
            }
            if (this.anchorOrigin_ != IconOrigin_js_1.default.TOP_LEFT) {
                if (!size) {
                    return null;
                }
                if (anchor === this.anchor_) {
                    anchor = this.anchor_.slice();
                }
                if (this.anchorOrigin_ == IconOrigin_js_1.default.TOP_RIGHT ||
                    this.anchorOrigin_ == IconOrigin_js_1.default.BOTTOM_RIGHT) {
                    anchor[0] = -anchor[0] + size[0];
                }
                if (this.anchorOrigin_ == IconOrigin_js_1.default.BOTTOM_LEFT ||
                    this.anchorOrigin_ == IconOrigin_js_1.default.BOTTOM_RIGHT) {
                    anchor[1] = -anchor[1] + size[1];
                }
            }
            this.normalizedAnchor_ = anchor;
            return this.normalizedAnchor_;
        }
        /**
         * Set the anchor point. The anchor determines the center point for the
         * symbolizer.
         *
         * @param {Array<number>} anchor Anchor.
         * @api
         */
        setAnchor(anchor) {
            this.anchor_ = anchor;
            this.normalizedAnchor_ = null;
        }
        /**
         * Get the icon color.
         * @return {import("../color.js").Color} Color.
         * @api
         */
        getColor() {
            return this.color_;
        }
        /**
         * Get the image icon.
         * @param {number} pixelRatio Pixel ratio.
         * @return {HTMLImageElement|HTMLCanvasElement} Image or Canvas element.
         * @api
         */
        getImage(pixelRatio) {
            return this.iconImage_.getImage(pixelRatio);
        }
        /**
         * Get the pixel ratio.
         * @param {number} pixelRatio Pixel ratio.
         * @return {number} The pixel ration of the image.
         * @api
         */
        getPixelRatio(pixelRatio) {
            return this.iconImage_.getPixelRatio(pixelRatio);
        }
        /**
         * @return {import("../size.js").Size} Image size.
         */
        getImageSize() {
            return this.iconImage_.getSize();
        }
        /**
         * @return {import("../size.js").Size} Size of the hit-detection image.
         */
        getHitDetectionImageSize() {
            return this.getImageSize();
        }
        /**
         * @return {import("../ImageState.js").default} Image state.
         */
        getImageState() {
            return this.iconImage_.getImageState();
        }
        /**
         * @return {HTMLImageElement|HTMLCanvasElement} Image element.
         */
        getHitDetectionImage() {
            return this.iconImage_.getHitDetectionImage();
        }
        /**
         * Get the origin of the symbolizer.
         * @return {Array<number>} Origin.
         * @api
         */
        getOrigin() {
            if (this.origin_) {
                return this.origin_;
            }
            let offset = this.offset_;
            const displacement = this.getDisplacement();
            if (this.offsetOrigin_ != IconOrigin_js_1.default.TOP_LEFT) {
                const size = this.getSize();
                const iconImageSize = this.iconImage_.getSize();
                if (!size || !iconImageSize) {
                    return null;
                }
                offset = offset.slice();
                if (this.offsetOrigin_ == IconOrigin_js_1.default.TOP_RIGHT ||
                    this.offsetOrigin_ == IconOrigin_js_1.default.BOTTOM_RIGHT) {
                    offset[0] = iconImageSize[0] - size[0] - offset[0];
                }
                if (this.offsetOrigin_ == IconOrigin_js_1.default.BOTTOM_LEFT ||
                    this.offsetOrigin_ == IconOrigin_js_1.default.BOTTOM_RIGHT) {
                    offset[1] = iconImageSize[1] - size[1] - offset[1];
                }
            }
            offset[0] += displacement[0];
            offset[1] += displacement[1];
            this.origin_ = offset;
            return this.origin_;
        }
        /**
         * Get the image URL.
         * @return {string|undefined} Image src.
         * @api
         */
        getSrc() {
            return this.iconImage_.getSrc();
        }
        /**
         * Get the size of the icon (in pixels).
         * @return {import("../size.js").Size} Image size.
         * @api
         */
        getSize() {
            return !this.size_ ? this.iconImage_.getSize() : this.size_;
        }
        /**
         * @param {function(import("../events/Event.js").default): void} listener Listener function.
         */
        listenImageChange(listener) {
            this.iconImage_.addEventListener(EventType_js_36.default.CHANGE, listener);
        }
        /**
         * Load not yet loaded URI.
         * When rendering a feature with an icon style, the vector renderer will
         * automatically call this method. However, you might want to call this
         * method yourself for preloading or other purposes.
         * @api
         */
        load() {
            this.iconImage_.load();
        }
        /**
         * @param {function(import("../events/Event.js").default): void} listener Listener function.
         */
        unlistenImageChange(listener) {
            this.iconImage_.removeEventListener(EventType_js_36.default.CHANGE, listener);
        }
    }
    exports.default = Icon;
});
/**
 * @module ol/style
 */
define("node_modules/ol/src/style", ["require", "exports", "node_modules/ol/src/style/Circle", "node_modules/ol/src/style/Fill", "node_modules/ol/src/style/Icon", "node_modules/ol/src/style/IconImage", "node_modules/ol/src/style/Image", "node_modules/ol/src/style/RegularShape", "node_modules/ol/src/style/Stroke", "node_modules/ol/src/style/Style", "node_modules/ol/src/style/Text"], function (require, exports, Circle_js_2, Fill_js_3, Icon_js_1, IconImage_js_2, Image_js_4, RegularShape_js_2, Stroke_js_2, Style_js_2, Text_js_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Text = exports.Style = exports.Stroke = exports.RegularShape = exports.Image = exports.IconImage = exports.Icon = exports.Fill = exports.Circle = void 0;
    Object.defineProperty(exports, "Circle", { enumerable: true, get: function () { return Circle_js_2.default; } });
    Object.defineProperty(exports, "Fill", { enumerable: true, get: function () { return Fill_js_3.default; } });
    Object.defineProperty(exports, "Icon", { enumerable: true, get: function () { return Icon_js_1.default; } });
    Object.defineProperty(exports, "IconImage", { enumerable: true, get: function () { return IconImage_js_2.default; } });
    Object.defineProperty(exports, "Image", { enumerable: true, get: function () { return Image_js_4.default; } });
    Object.defineProperty(exports, "RegularShape", { enumerable: true, get: function () { return RegularShape_js_2.default; } });
    Object.defineProperty(exports, "Stroke", { enumerable: true, get: function () { return Stroke_js_2.default; } });
    Object.defineProperty(exports, "Style", { enumerable: true, get: function () { return Style_js_2.default; } });
    Object.defineProperty(exports, "Text", { enumerable: true, get: function () { return Text_js_1.default; } });
});
/**
 * @module ol/render/canvas/hitdetet
 */
define("node_modules/ol/src/render/canvas/hitdetect", ["require", "exports", "node_modules/ol/src/render/canvas/Immediate", "node_modules/ol/src/geom/GeometryType", "node_modules/ol/src/style/IconAnchorUnits", "node_modules/ol/src/style", "node_modules/ol/src/dom", "node_modules/ol/src/extent", "node_modules/ol/src/array"], function (require, exports, Immediate_js_2, GeometryType_js_18, IconAnchorUnits_js_2, style_js_1, dom_js_14, extent_js_38, array_js_20) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.hitDetect = exports.createHitDetectionImageData = void 0;
    /**
     * @param {import("../../size.js").Size} size Canvas size in css pixels.
     * @param {Array<import("../../transform.js").Transform>} transforms Transforms
     * for rendering features to all worlds of the viewport, from coordinates to css
     * pixels.
     * @param {Array<import("../../Feature.js").FeatureLike>} features
     * Features to consider for hit detection.
     * @param {import("../../style/Style.js").StyleFunction|undefined} styleFunction
     * Layer style function.
     * @param {import("../../extent.js").Extent} extent Extent.
     * @param {number} resolution Resolution.
     * @param {number} rotation Rotation.
     * @return {ImageData} Hit detection image data.
     */
    function createHitDetectionImageData(size, transforms, features, styleFunction, extent, resolution, rotation) {
        const width = size[0] / 2;
        const height = size[1] / 2;
        const context = dom_js_14.createCanvasContext2D(width, height);
        context.imageSmoothingEnabled = false;
        const canvas = context.canvas;
        const renderer = new Immediate_js_2.default(context, 0.5, extent, null, rotation);
        const featureCount = features.length;
        // Stretch hit detection index to use the whole available color range
        const indexFactor = Math.floor((256 * 256 * 256 - 1) / featureCount);
        const featuresByZIndex = {};
        for (let i = 1; i <= featureCount; ++i) {
            const feature = features[i - 1];
            const featureStyleFunction = feature.getStyleFunction() || styleFunction;
            if (!styleFunction) {
                continue;
            }
            let styles = featureStyleFunction(feature, resolution);
            if (!styles) {
                continue;
            }
            if (!Array.isArray(styles)) {
                styles = [styles];
            }
            const index = i * indexFactor;
            const color = '#' + ('000000' + index.toString(16)).slice(-6);
            for (let j = 0, jj = styles.length; j < jj; ++j) {
                const originalStyle = styles[j];
                const style = originalStyle.clone();
                const fill = style.getFill();
                if (fill) {
                    fill.setColor(color);
                }
                const stroke = style.getStroke();
                if (stroke) {
                    stroke.setColor(color);
                }
                style.setText(undefined);
                const image = originalStyle.getImage();
                if (image) {
                    const imgSize = image.getImageSize();
                    if (!imgSize) {
                        continue;
                    }
                    const canvas = document.createElement('canvas');
                    canvas.width = imgSize[0];
                    canvas.height = imgSize[1];
                    const imgContext = canvas.getContext('2d', { alpha: false });
                    imgContext.fillStyle = color;
                    const img = imgContext.canvas;
                    imgContext.fillRect(0, 0, img.width, img.height);
                    const width = imgSize ? imgSize[0] : img.width;
                    const height = imgSize ? imgSize[1] : img.height;
                    const iconContext = dom_js_14.createCanvasContext2D(width, height);
                    iconContext.drawImage(img, 0, 0);
                    style.setImage(new style_js_1.Icon({
                        img: img,
                        imgSize: imgSize,
                        anchor: image.getAnchor(),
                        anchorXUnits: IconAnchorUnits_js_2.default.PIXELS,
                        anchorYUnits: IconAnchorUnits_js_2.default.PIXELS,
                        offset: image.getOrigin(),
                        size: image.getSize(),
                        opacity: image.getOpacity(),
                        scale: image.getScale(),
                        rotation: image.getRotation(),
                        rotateWithView: image.getRotateWithView(),
                    }));
                }
                const zIndex = Number(style.getZIndex());
                let byGeometryType = featuresByZIndex[zIndex];
                if (!byGeometryType) {
                    byGeometryType = {};
                    featuresByZIndex[zIndex] = byGeometryType;
                    byGeometryType[GeometryType_js_18.default.POLYGON] = [];
                    byGeometryType[GeometryType_js_18.default.CIRCLE] = [];
                    byGeometryType[GeometryType_js_18.default.LINE_STRING] = [];
                    byGeometryType[GeometryType_js_18.default.POINT] = [];
                }
                const geometry = style.getGeometryFunction()(feature);
                if (geometry && extent_js_38.intersects(extent, geometry.getExtent())) {
                    byGeometryType[geometry.getType().replace('Multi', '')].push(geometry, style);
                }
            }
        }
        const zIndexKeys = Object.keys(featuresByZIndex)
            .map(Number)
            .sort(array_js_20.numberSafeCompareFunction);
        for (let i = 0, ii = zIndexKeys.length; i < ii; ++i) {
            const byGeometryType = featuresByZIndex[zIndexKeys[i]];
            for (const type in byGeometryType) {
                const geomAndStyle = byGeometryType[type];
                for (let j = 0, jj = geomAndStyle.length; j < jj; j += 2) {
                    renderer.setStyle(geomAndStyle[j + 1]);
                    for (let k = 0, kk = transforms.length; k < kk; ++k) {
                        renderer.setTransform(transforms[k]);
                        renderer.drawGeometry(geomAndStyle[j]);
                    }
                }
            }
        }
        return context.getImageData(0, 0, canvas.width, canvas.height);
    }
    exports.createHitDetectionImageData = createHitDetectionImageData;
    /**
     * @param {import("../../pixel").Pixel} pixel Pixel coordinate on the hit
     * detection canvas in css pixels.
     * @param {Array<import("../../Feature").FeatureLike>} features Features. Has to
     * match the `features` array that was passed to `createHitDetectionImageData()`.
     * @param {ImageData} imageData Hit detection image data generated by
     * `createHitDetectionImageData()`.
     * @return {Array<import("../../Feature").FeatureLike>} features Features.
     */
    function hitDetect(pixel, features, imageData) {
        const resultFeatures = [];
        if (imageData) {
            const index = (Math.round(pixel[0] / 2) + Math.round(pixel[1] / 2) * imageData.width) *
                4;
            const r = imageData.data[index];
            const g = imageData.data[index + 1];
            const b = imageData.data[index + 2];
            const i = b + 256 * (g + 256 * r);
            const indexFactor = Math.floor((256 * 256 * 256 - 1) / features.length);
            if (i && i % indexFactor === 0) {
                resultFeatures.push(features[i / indexFactor - 1]);
            }
        }
        return resultFeatures;
    }
    exports.hitDetect = hitDetect;
});
define("node_modules/ol/src/renderer/canvas/VectorLayer", ["require", "exports", "node_modules/ol/src/render/canvas/BuilderGroup", "node_modules/ol/src/renderer/canvas/Layer", "node_modules/ol/src/render/canvas/ExecutorGroup", "node_modules/ol/src/ViewHint", "node_modules/ol/src/transform", "node_modules/ol/src/extent", "node_modules/ol/src/render/canvas/hitdetect", "node_modules/ol/src/renderer/vector", "node_modules/ol/src/proj", "node_modules/ol/src/util", "node_modules/ol/src/coordinate"], function (require, exports, BuilderGroup_js_1, Layer_js_6, ExecutorGroup_js_1, ViewHint_js_3, transform_js_19, extent_js_39, hitdetect_js_1, vector_js_2, proj_js_13, util_js_22, coordinate_js_7) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @classdesc
     * Canvas renderer for vector layers.
     * @api
     */
    class CanvasVectorLayerRenderer extends Layer_js_6.default {
        /**
         * @param {import("../../layer/Vector.js").default} vectorLayer Vector layer.
         */
        constructor(vectorLayer) {
            super(vectorLayer);
            /** @private */
            this.boundHandleStyleImageChange_ = this.handleStyleImageChange_.bind(this);
            /**
             * @type {boolean}
             */
            this.animatingOrInteracting_;
            /**
             * @private
             * @type {boolean}
             */
            this.dirty_ = false;
            /**
             * @type {ImageData}
             */
            this.hitDetectionImageData_ = null;
            /**
             * @type {Array<import("../../Feature.js").default>}
             */
            this.renderedFeatures_ = null;
            /**
             * @private
             * @type {number}
             */
            this.renderedRevision_ = -1;
            /**
             * @private
             * @type {number}
             */
            this.renderedResolution_ = NaN;
            /**
             * @private
             * @type {import("../../extent.js").Extent}
             */
            this.renderedExtent_ = extent_js_39.createEmpty();
            /**
             * @private
             * @type {number}
             */
            this.renderedRotation_;
            /**
             * @private
             * @type {import("../../coordinate").Coordinate}
             */
            this.renderedCenter_ = null;
            /**
             * @private
             * @type {import("../../proj/Projection").default}
             */
            this.renderedProjection_ = null;
            /**
             * @private
             * @type {function(import("../../Feature.js").default, import("../../Feature.js").default): number|null}
             */
            this.renderedRenderOrder_ = null;
            /**
             * @private
             * @type {import("../../render/canvas/ExecutorGroup").default}
             */
            this.replayGroup_ = null;
            /**
             * A new replay group had to be created by `prepareFrame()`
             * @type {boolean}
             */
            this.replayGroupChanged = true;
            /**
             * Clipping to be performed by `renderFrame()`
             * @type {boolean}
             */
            this.clipping = true;
        }
        /**
         * Get a rendering container from an existing target, if compatible.
         * @param {HTMLElement} target Potential render target.
         * @param {string} transform CSS Transform.
         * @param {number} opacity Opacity.
         */
        useContainer(target, transform, opacity) {
            if (opacity < 1) {
                target = null;
            }
            super.useContainer(target, transform, opacity);
        }
        /**
         * Render the layer.
         * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
         * @param {HTMLElement} target Target that may be used to render content to.
         * @return {HTMLElement} The rendered element.
         */
        renderFrame(frameState, target) {
            const pixelRatio = frameState.pixelRatio;
            const layerState = frameState.layerStatesArray[frameState.layerIndex];
            // set forward and inverse pixel transforms
            transform_js_19.makeScale(this.pixelTransform, 1 / pixelRatio, 1 / pixelRatio);
            transform_js_19.makeInverse(this.inversePixelTransform, this.pixelTransform);
            const canvasTransform = transform_js_19.toString(this.pixelTransform);
            this.useContainer(target, canvasTransform, layerState.opacity);
            const context = this.context;
            const canvas = context.canvas;
            const replayGroup = this.replayGroup_;
            if (!replayGroup || replayGroup.isEmpty()) {
                if (!this.containerReused && canvas.width > 0) {
                    canvas.width = 0;
                }
                return this.container;
            }
            // resize and clear
            const width = Math.round(frameState.size[0] * pixelRatio);
            const height = Math.round(frameState.size[1] * pixelRatio);
            if (canvas.width != width || canvas.height != height) {
                canvas.width = width;
                canvas.height = height;
                if (canvas.style.transform !== canvasTransform) {
                    canvas.style.transform = canvasTransform;
                }
            }
            else if (!this.containerReused) {
                context.clearRect(0, 0, width, height);
            }
            this.preRender(context, frameState);
            const extent = frameState.extent;
            const viewState = frameState.viewState;
            const center = viewState.center;
            const resolution = viewState.resolution;
            const projection = viewState.projection;
            const rotation = viewState.rotation;
            const projectionExtent = projection.getExtent();
            const vectorSource = this.getLayer().getSource();
            // clipped rendering if layer extent is set
            let clipped = false;
            if (layerState.extent && this.clipping) {
                const layerExtent = proj_js_13.fromUserExtent(layerState.extent, projection);
                clipped =
                    !extent_js_39.containsExtent(layerExtent, frameState.extent) &&
                        extent_js_39.intersects(layerExtent, frameState.extent);
                if (clipped) {
                    this.clipUnrotated(context, frameState, layerExtent);
                }
            }
            const viewHints = frameState.viewHints;
            const snapToPixel = !(viewHints[ViewHint_js_3.default.ANIMATING] || viewHints[ViewHint_js_3.default.INTERACTING]);
            const transform = this.getRenderTransform(center, resolution, rotation, pixelRatio, width, height, 0);
            const declutterReplays = this.getLayer().getDeclutter() ? {} : null;
            replayGroup.execute(context, 1, transform, rotation, snapToPixel, undefined, declutterReplays);
            if (vectorSource.getWrapX() &&
                projection.canWrapX() &&
                !extent_js_39.containsExtent(projectionExtent, extent)) {
                let startX = extent[0];
                const worldWidth = extent_js_39.getWidth(projectionExtent);
                let world = 0;
                let offsetX;
                while (startX < projectionExtent[0]) {
                    --world;
                    offsetX = worldWidth * world;
                    const transform = this.getRenderTransform(center, resolution, rotation, pixelRatio, width, height, offsetX);
                    replayGroup.execute(context, 1, transform, rotation, snapToPixel, undefined, declutterReplays);
                    startX += worldWidth;
                }
                world = 0;
                startX = extent[2];
                while (startX > projectionExtent[2]) {
                    ++world;
                    offsetX = worldWidth * world;
                    const transform = this.getRenderTransform(center, resolution, rotation, pixelRatio, width, height, offsetX);
                    replayGroup.execute(context, 1, transform, rotation, snapToPixel, undefined, declutterReplays);
                    startX -= worldWidth;
                }
            }
            if (declutterReplays) {
                const viewHints = frameState.viewHints;
                const hifi = !(viewHints[ViewHint_js_3.default.ANIMATING] || viewHints[ViewHint_js_3.default.INTERACTING]);
                ExecutorGroup_js_1.replayDeclutter(declutterReplays, context, rotation, 1, hifi, frameState.declutterItems);
            }
            if (clipped) {
                context.restore();
            }
            this.postRender(context, frameState);
            const opacity = layerState.opacity;
            const container = this.container;
            if (opacity !== parseFloat(container.style.opacity)) {
                container.style.opacity = opacity === 1 ? '' : String(opacity);
            }
            if (this.renderedRotation_ !== viewState.rotation) {
                this.renderedRotation_ = viewState.rotation;
                this.hitDetectionImageData_ = null;
            }
            return this.container;
        }
        /**
         * Asynchronous layer level hit detection.
         * @param {import("../../pixel.js").Pixel} pixel Pixel.
         * @return {Promise<Array<import("../../Feature").default>>} Promise that resolves with an array of features.
         */
        getFeatures(pixel) {
            return new Promise(function (resolve, reject) {
                if (!this.hitDetectionImageData_ && !this.animatingOrInteracting_) {
                    const size = [this.context.canvas.width, this.context.canvas.height];
                    transform_js_19.apply(this.pixelTransform, size);
                    const center = this.renderedCenter_;
                    const resolution = this.renderedResolution_;
                    const rotation = this.renderedRotation_;
                    const projection = this.renderedProjection_;
                    const extent = this.renderedExtent_;
                    const layer = this.getLayer();
                    const transforms = [];
                    const width = size[0] / 2;
                    const height = size[1] / 2;
                    transforms.push(this.getRenderTransform(center, resolution, rotation, 0.5, width, height, 0).slice());
                    const source = layer.getSource();
                    const projectionExtent = projection.getExtent();
                    if (source.getWrapX() &&
                        projection.canWrapX() &&
                        !extent_js_39.containsExtent(projectionExtent, extent)) {
                        let startX = extent[0];
                        const worldWidth = extent_js_39.getWidth(projectionExtent);
                        let world = 0;
                        let offsetX;
                        while (startX < projectionExtent[0]) {
                            --world;
                            offsetX = worldWidth * world;
                            transforms.push(this.getRenderTransform(center, resolution, rotation, 0.5, width, height, offsetX).slice());
                            startX += worldWidth;
                        }
                        world = 0;
                        startX = extent[2];
                        while (startX > projectionExtent[2]) {
                            ++world;
                            offsetX = worldWidth * world;
                            transforms.push(this.getRenderTransform(center, resolution, rotation, 0.5, width, height, offsetX).slice());
                            startX -= worldWidth;
                        }
                    }
                    this.hitDetectionImageData_ = hitdetect_js_1.createHitDetectionImageData(size, transforms, this.renderedFeatures_, layer.getStyleFunction(), extent, resolution, rotation);
                }
                resolve(hitdetect_js_1.hitDetect(pixel, this.renderedFeatures_, this.hitDetectionImageData_));
            }.bind(this));
        }
        /**
         * @param {import("../../coordinate.js").Coordinate} coordinate Coordinate.
         * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
         * @param {number} hitTolerance Hit tolerance in pixels.
         * @param {function(import("../../Feature.js").FeatureLike, import("../../layer/Layer.js").default): T} callback Feature callback.
         * @param {Array<import("../../Feature.js").FeatureLike>} declutteredFeatures Decluttered features.
         * @return {T|void} Callback result.
         * @template T
         */
        forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, callback, declutteredFeatures) {
            if (!this.replayGroup_) {
                return undefined;
            }
            else {
                const resolution = frameState.viewState.resolution;
                const rotation = frameState.viewState.rotation;
                const layer = this.getLayer();
                /** @type {!Object<string, boolean>} */
                const features = {};
                const result = this.replayGroup_.forEachFeatureAtCoordinate(coordinate, resolution, rotation, hitTolerance, 
                /**
                 * @param {import("../../Feature.js").FeatureLike} feature Feature.
                 * @return {?} Callback result.
                 */
                function (feature) {
                    const key = util_js_22.getUid(feature);
                    if (!(key in features)) {
                        features[key] = true;
                        return callback(feature, layer);
                    }
                }, layer.getDeclutter() ? declutteredFeatures : null);
                return result;
            }
        }
        /**
         * Perform action necessary to get the layer rendered after new fonts have loaded
         */
        handleFontsChanged() {
            const layer = this.getLayer();
            if (layer.getVisible() && this.replayGroup_) {
                layer.changed();
            }
        }
        /**
         * Handle changes in image style state.
         * @param {import("../../events/Event.js").default} event Image style change event.
         * @private
         */
        handleStyleImageChange_(event) {
            this.renderIfReadyAndVisible();
        }
        /**
         * Determine whether render should be called.
         * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
         * @return {boolean} Layer is ready to be rendered.
         */
        prepareFrame(frameState) {
            const vectorLayer = this.getLayer();
            const vectorSource = vectorLayer.getSource();
            if (!vectorSource) {
                return false;
            }
            const animating = frameState.viewHints[ViewHint_js_3.default.ANIMATING];
            const interacting = frameState.viewHints[ViewHint_js_3.default.INTERACTING];
            const updateWhileAnimating = vectorLayer.getUpdateWhileAnimating();
            const updateWhileInteracting = vectorLayer.getUpdateWhileInteracting();
            if ((!this.dirty_ && !updateWhileAnimating && animating) ||
                (!updateWhileInteracting && interacting)) {
                this.animatingOrInteracting_ = true;
                return true;
            }
            this.animatingOrInteracting_ = false;
            const frameStateExtent = frameState.extent;
            const viewState = frameState.viewState;
            const projection = viewState.projection;
            const resolution = viewState.resolution;
            const pixelRatio = frameState.pixelRatio;
            const vectorLayerRevision = vectorLayer.getRevision();
            const vectorLayerRenderBuffer = vectorLayer.getRenderBuffer();
            let vectorLayerRenderOrder = vectorLayer.getRenderOrder();
            if (vectorLayerRenderOrder === undefined) {
                vectorLayerRenderOrder = vector_js_2.defaultOrder;
            }
            const center = viewState.center.slice();
            const extent = extent_js_39.buffer(frameStateExtent, vectorLayerRenderBuffer * resolution);
            const loadExtents = [extent.slice()];
            const projectionExtent = projection.getExtent();
            if (vectorSource.getWrapX() &&
                projection.canWrapX() &&
                !extent_js_39.containsExtent(projectionExtent, frameState.extent)) {
                // For the replay group, we need an extent that intersects the real world
                // (-180° to +180°). To support geometries in a coordinate range from -540°
                // to +540°, we add at least 1 world width on each side of the projection
                // extent. If the viewport is wider than the world, we need to add half of
                // the viewport width to make sure we cover the whole viewport.
                const worldWidth = extent_js_39.getWidth(projectionExtent);
                const gutter = Math.max(extent_js_39.getWidth(extent) / 2, worldWidth);
                extent[0] = projectionExtent[0] - gutter;
                extent[2] = projectionExtent[2] + gutter;
                coordinate_js_7.wrapX(center, projection);
                const loadExtent = extent_js_39.wrapX(loadExtents[0], projection);
                // If the extent crosses the date line, we load data for both edges of the worlds
                if (loadExtent[0] < projectionExtent[0] &&
                    loadExtent[2] < projectionExtent[2]) {
                    loadExtents.push([
                        loadExtent[0] + worldWidth,
                        loadExtent[1],
                        loadExtent[2] + worldWidth,
                        loadExtent[3],
                    ]);
                }
                else if (loadExtent[0] > projectionExtent[0] &&
                    loadExtent[2] > projectionExtent[2]) {
                    loadExtents.push([
                        loadExtent[0] - worldWidth,
                        loadExtent[1],
                        loadExtent[2] - worldWidth,
                        loadExtent[3],
                    ]);
                }
            }
            if (!this.dirty_ &&
                this.renderedResolution_ == resolution &&
                this.renderedRevision_ == vectorLayerRevision &&
                this.renderedRenderOrder_ == vectorLayerRenderOrder &&
                extent_js_39.containsExtent(this.renderedExtent_, extent)) {
                this.replayGroupChanged = false;
                return true;
            }
            this.replayGroup_ = null;
            this.dirty_ = false;
            const replayGroup = new BuilderGroup_js_1.default(vector_js_2.getTolerance(resolution, pixelRatio), extent, resolution, pixelRatio, vectorLayer.getDeclutter());
            const userProjection = proj_js_13.getUserProjection();
            let userTransform;
            if (userProjection) {
                for (let i = 0, ii = loadExtents.length; i < ii; ++i) {
                    vectorSource.loadFeatures(proj_js_13.toUserExtent(loadExtents[i], projection), resolution, userProjection);
                }
                userTransform = proj_js_13.getTransformFromProjections(userProjection, projection);
            }
            else {
                for (let i = 0, ii = loadExtents.length; i < ii; ++i) {
                    vectorSource.loadFeatures(loadExtents[i], resolution, projection);
                }
            }
            const squaredTolerance = vector_js_2.getSquaredTolerance(resolution, pixelRatio);
            /**
             * @param {import("../../Feature.js").default} feature Feature.
             * @this {CanvasVectorLayerRenderer}
             */
            const render = function (feature) {
                let styles;
                const styleFunction = feature.getStyleFunction() || vectorLayer.getStyleFunction();
                if (styleFunction) {
                    styles = styleFunction(feature, resolution);
                }
                if (styles) {
                    const dirty = this.renderFeature(feature, squaredTolerance, styles, replayGroup, userTransform);
                    this.dirty_ = this.dirty_ || dirty;
                }
            }.bind(this);
            const userExtent = proj_js_13.toUserExtent(extent, projection);
            /** @type {Array<import("../../Feature.js").default>} */
            const features = vectorSource.getFeaturesInExtent(userExtent);
            if (vectorLayerRenderOrder) {
                features.sort(vectorLayerRenderOrder);
            }
            for (let i = 0, ii = features.length; i < ii; ++i) {
                render(features[i]);
            }
            this.renderedFeatures_ = features;
            const replayGroupInstructions = replayGroup.finish();
            const executorGroup = new ExecutorGroup_js_1.default(extent, resolution, pixelRatio, vectorSource.getOverlaps(), replayGroupInstructions, vectorLayer.getRenderBuffer());
            this.renderedResolution_ = resolution;
            this.renderedRevision_ = vectorLayerRevision;
            this.renderedRenderOrder_ = vectorLayerRenderOrder;
            this.renderedExtent_ = extent;
            this.renderedCenter_ = center;
            this.renderedProjection_ = projection;
            this.replayGroup_ = executorGroup;
            this.hitDetectionImageData_ = null;
            this.replayGroupChanged = true;
            return true;
        }
        /**
         * @param {import("../../Feature.js").default} feature Feature.
         * @param {number} squaredTolerance Squared render tolerance.
         * @param {import("../../style/Style.js").default|Array<import("../../style/Style.js").default>} styles The style or array of styles.
         * @param {import("../../render/canvas/BuilderGroup.js").default} builderGroup Builder group.
         * @param {import("../../proj.js").TransformFunction=} opt_transform Transform from user to view projection.
         * @return {boolean} `true` if an image is loading.
         */
        renderFeature(feature, squaredTolerance, styles, builderGroup, opt_transform) {
            if (!styles) {
                return false;
            }
            let loading = false;
            if (Array.isArray(styles)) {
                for (let i = 0, ii = styles.length; i < ii; ++i) {
                    loading =
                        vector_js_2.renderFeature(builderGroup, feature, styles[i], squaredTolerance, this.boundHandleStyleImageChange_, opt_transform) || loading;
                }
            }
            else {
                loading = vector_js_2.renderFeature(builderGroup, feature, styles, squaredTolerance, this.boundHandleStyleImageChange_, opt_transform);
            }
            return loading;
        }
    }
    exports.default = CanvasVectorLayerRenderer;
});
define("node_modules/ol/src/layer/Vector", ["require", "exports", "node_modules/ol/src/layer/BaseVector", "node_modules/ol/src/renderer/canvas/VectorLayer"], function (require, exports, BaseVector_js_1, VectorLayer_js_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @classdesc
     * Vector data that is rendered client-side.
     * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}
     * property on the layer object; for example, setting `title: 'My Title'` in the
     * options means that `title` is observable, and has get/set accessors.
     *
     * @extends {BaseVectorLayer<import("../source/Vector.js").default>}
     * @api
     */
    class VectorLayer extends BaseVector_js_1.default {
        /**
         * @param {import("./BaseVector.js").Options=} opt_options Options.
         */
        constructor(opt_options) {
            super(opt_options);
        }
        /**
         * Create a renderer for this layer.
         * @return {import("../renderer/Layer.js").default} A layer renderer.
         */
        createRenderer() {
            return new VectorLayer_js_1.default(this);
        }
    }
    exports.default = VectorLayer;
});
define("node_modules/ol/src/interaction/Draw", ["require", "exports", "node_modules/ol/src/geom/Circle", "node_modules/ol/src/events/Event", "node_modules/ol/src/events/EventType", "node_modules/ol/src/Feature", "node_modules/ol/src/geom/GeometryType", "node_modules/ol/src/interaction/Property", "node_modules/ol/src/geom/LineString", "node_modules/ol/src/MapBrowserEvent", "node_modules/ol/src/MapBrowserEventType", "node_modules/ol/src/geom/MultiLineString", "node_modules/ol/src/geom/MultiPoint", "node_modules/ol/src/geom/MultiPolygon", "node_modules/ol/src/geom/Point", "node_modules/ol/src/interaction/Pointer", "node_modules/ol/src/geom/Polygon", "node_modules/ol/src/layer/Vector", "node_modules/ol/src/source/Vector", "node_modules/ol/src/functions", "node_modules/ol/src/events/condition", "node_modules/ol/src/extent", "node_modules/ol/src/style/Style", "node_modules/ol/src/proj", "node_modules/ol/src/Object", "node_modules/ol/src/coordinate"], function (require, exports, Circle_js_3, Event_js_13, EventType_js_37, Feature_js_1, GeometryType_js_19, Property_js_4, LineString_js_2, MapBrowserEvent_js_3, MapBrowserEventType_js_6, MultiLineString_js_1, MultiPoint_js_2, MultiPolygon_js_1, Point_js_3, Pointer_js_7, Polygon_js_6, Vector_js_1, Vector_js_2, functions_js_15, condition_js_9, extent_js_40, Style_js_3, proj_js_14, Object_js_17, coordinate_js_8) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createBox = exports.createRegularPolygon = void 0;
    /**
     * @typedef {Object} Options
     * @property {import("../geom/GeometryType.js").default} type Geometry type of
     * the geometries being drawn with this instance.
     * @property {number} [clickTolerance=6] The maximum distance in pixels between
     * "down" and "up" for a "up" event to be considered a "click" event and
     * actually add a point/vertex to the geometry being drawn.  The default of `6`
     * was chosen for the draw interaction to behave correctly on mouse as well as
     * on touch devices.
     * @property {import("../Collection.js").default<Feature>} [features]
     * Destination collection for the drawn features.
     * @property {VectorSource} [source] Destination source for
     * the drawn features.
     * @property {number} [dragVertexDelay=500] Delay in milliseconds after pointerdown
     * before the current vertex can be dragged to its exact position.
     * @property {number} [snapTolerance=12] Pixel distance for snapping to the
     * drawing finish.
     * @property {boolean} [stopClick=false] Stop click, singleclick, and
     * doubleclick events from firing during drawing.
     * @property {number} [maxPoints] The number of points that can be drawn before
     * a polygon ring or line string is finished. By default there is no
     * restriction.
     * @property {number} [minPoints] The number of points that must be drawn
     * before a polygon ring or line string can be finished. Default is `3` for
     * polygon rings and `2` for line strings.
     * @property {import("../events/condition.js").Condition} [finishCondition] A function
     * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
     * boolean to indicate whether the drawing can be finished.
     * @property {import("../style/Style.js").StyleLike} [style]
     * Style for sketch features.
     * @property {GeometryFunction} [geometryFunction]
     * Function that is called when a geometry's coordinates are updated.
     * @property {string} [geometryName] Geometry name to use for features created
     * by the draw interaction.
     * @property {import("../events/condition.js").Condition} [condition] A function that
     * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
     * boolean to indicate whether that event should be handled.
     * By default {@link module:ol/events/condition~noModifierKeys}, i.e. a click,
     * adds a vertex or deactivates freehand drawing.
     * @property {boolean} [freehand=false] Operate in freehand mode for lines,
     * polygons, and circles.  This makes the interaction always operate in freehand
     * mode and takes precedence over any `freehandCondition` option.
     * @property {import("../events/condition.js").Condition} [freehandCondition]
     * Condition that activates freehand drawing for lines and polygons. This
     * function takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and
     * returns a boolean to indicate whether that event should be handled. The
     * default is {@link module:ol/events/condition~shiftKeyOnly}, meaning that the
     * Shift key activates freehand drawing.
     * @property {boolean} [wrapX=false] Wrap the world horizontally on the sketch
     * overlay.
     */
    /**
     * Coordinate type when drawing points.
     * @typedef {import("../coordinate.js").Coordinate} PointCoordType
     */
    /**
     * Coordinate type when drawing lines.
     * @typedef {Array<import("../coordinate.js").Coordinate>} LineCoordType
     */
    /**
     * Coordinate type when drawing polygons.
     * @typedef {Array<Array<import("../coordinate.js").Coordinate>>} PolyCoordType
     */
    /**
     * Types used for drawing coordinates.
     * @typedef {PointCoordType|LineCoordType|PolyCoordType} SketchCoordType
     */
    /**
     * Function that takes an array of coordinates and an optional existing geometry
     * and a projection as arguments, and returns a geometry. The optional existing
     * geometry is the geometry that is returned when the function is called without
     * a second argument.
     * @typedef {function(!SketchCoordType, import("../geom/SimpleGeometry.js").default=,
     *     import("../proj/Projection.js").default=):
     *     import("../geom/SimpleGeometry.js").default} GeometryFunction
     */
    /**
     * Draw mode.  This collapses multi-part geometry types with their single-part
     * cousins.
     * @enum {string}
     */
    const Mode = {
        POINT: 'Point',
        LINE_STRING: 'LineString',
        POLYGON: 'Polygon',
        CIRCLE: 'Circle',
    };
    /**
     * @enum {string}
     */
    const DrawEventType = {
        /**
         * Triggered upon feature draw start
         * @event DrawEvent#drawstart
         * @api
         */
        DRAWSTART: 'drawstart',
        /**
         * Triggered upon feature draw end
         * @event DrawEvent#drawend
         * @api
         */
        DRAWEND: 'drawend',
        /**
         * Triggered upon feature draw abortion
         * @event DrawEvent#drawabort
         * @api
         */
        DRAWABORT: 'drawabort',
    };
    /**
     * @classdesc
     * Events emitted by {@link module:ol/interaction/Draw~Draw} instances are
     * instances of this type.
     */
    class DrawEvent extends Event_js_13.default {
        /**
         * @param {DrawEventType} type Type.
         * @param {Feature} feature The feature drawn.
         */
        constructor(type, feature) {
            super(type);
            /**
             * The feature being drawn.
             * @type {Feature}
             * @api
             */
            this.feature = feature;
        }
    }
    /**
     * @classdesc
     * Interaction for drawing feature geometries.
     *
     * @fires DrawEvent
     * @api
     */
    class Draw extends Pointer_js_7.default {
        /**
         * @param {Options} options Options.
         */
        constructor(options) {
            const pointerOptions = /** @type {import("./Pointer.js").Options} */ (options);
            if (!pointerOptions.stopDown) {
                pointerOptions.stopDown = functions_js_15.FALSE;
            }
            super(pointerOptions);
            /**
             * @type {boolean}
             * @private
             */
            this.shouldHandle_ = false;
            /**
             * @type {import("../pixel.js").Pixel}
             * @private
             */
            this.downPx_ = null;
            /**
             * @type {?}
             * @private
             */
            this.downTimeout_;
            /**
             * @type {number|undefined}
             * @private
             */
            this.lastDragTime_;
            /**
             * @type {boolean}
             * @private
             */
            this.freehand_ = false;
            /**
             * Target source for drawn features.
             * @type {VectorSource}
             * @private
             */
            this.source_ = options.source ? options.source : null;
            /**
             * Target collection for drawn features.
             * @type {import("../Collection.js").default<Feature>}
             * @private
             */
            this.features_ = options.features ? options.features : null;
            /**
             * Pixel distance for snapping.
             * @type {number}
             * @private
             */
            this.snapTolerance_ = options.snapTolerance ? options.snapTolerance : 12;
            /**
             * Geometry type.
             * @type {import("../geom/GeometryType.js").default}
             * @private
             */
            this.type_ = /** @type {import("../geom/GeometryType.js").default} */ (options.type);
            /**
             * Drawing mode (derived from geometry type.
             * @type {Mode}
             * @private
             */
            this.mode_ = getMode(this.type_);
            /**
             * Stop click, singleclick, and doubleclick events from firing during drawing.
             * Default is `false`.
             * @type {boolean}
             * @private
             */
            this.stopClick_ = !!options.stopClick;
            /**
             * The number of points that must be drawn before a polygon ring or line
             * string can be finished.  The default is 3 for polygon rings and 2 for
             * line strings.
             * @type {number}
             * @private
             */
            this.minPoints_ = options.minPoints
                ? options.minPoints
                : this.mode_ === Mode.POLYGON
                    ? 3
                    : 2;
            /**
             * The number of points that can be drawn before a polygon ring or line string
             * is finished. The default is no restriction.
             * @type {number}
             * @private
             */
            this.maxPoints_ = options.maxPoints ? options.maxPoints : Infinity;
            /**
             * A function to decide if a potential finish coordinate is permissible
             * @private
             * @type {import("../events/condition.js").Condition}
             */
            this.finishCondition_ = options.finishCondition
                ? options.finishCondition
                : functions_js_15.TRUE;
            let geometryFunction = options.geometryFunction;
            if (!geometryFunction) {
                if (this.type_ === GeometryType_js_19.default.CIRCLE) {
                    /**
                     * @param {!LineCoordType} coordinates The coordinates.
                     * @param {import("../geom/SimpleGeometry.js").default=} opt_geometry Optional geometry.
                     * @param {import("../proj/Projection.js").default} projection The view projection.
                     * @return {import("../geom/SimpleGeometry.js").default} A geometry.
                     */
                    geometryFunction = function (coordinates, opt_geometry, projection) {
                        const circle = opt_geometry
                            ? /** @type {Circle} */ (opt_geometry)
                            : new Circle_js_3.default([NaN, NaN]);
                        const center = proj_js_14.fromUserCoordinate(coordinates[0], projection);
                        const squaredLength = coordinate_js_8.squaredDistance(center, proj_js_14.fromUserCoordinate(coordinates[1], projection));
                        circle.setCenterAndRadius(center, Math.sqrt(squaredLength));
                        const userProjection = proj_js_14.getUserProjection();
                        if (userProjection) {
                            circle.transform(projection, userProjection);
                        }
                        return circle;
                    };
                }
                else {
                    let Constructor;
                    const mode = this.mode_;
                    if (mode === Mode.POINT) {
                        Constructor = Point_js_3.default;
                    }
                    else if (mode === Mode.LINE_STRING) {
                        Constructor = LineString_js_2.default;
                    }
                    else if (mode === Mode.POLYGON) {
                        Constructor = Polygon_js_6.default;
                    }
                    /**
                     * @param {!LineCoordType} coordinates The coordinates.
                     * @param {import("../geom/SimpleGeometry.js").default=} opt_geometry Optional geometry.
                     * @param {import("../proj/Projection.js").default} projection The view projection.
                     * @return {import("../geom/SimpleGeometry.js").default} A geometry.
                     */
                    geometryFunction = function (coordinates, opt_geometry, projection) {
                        let geometry = opt_geometry;
                        if (geometry) {
                            if (mode === Mode.POLYGON) {
                                if (coordinates[0].length) {
                                    // Add a closing coordinate to match the first
                                    geometry.setCoordinates([
                                        coordinates[0].concat([coordinates[0][0]]),
                                    ]);
                                }
                                else {
                                    geometry.setCoordinates([]);
                                }
                            }
                            else {
                                geometry.setCoordinates(coordinates);
                            }
                        }
                        else {
                            geometry = new Constructor(coordinates);
                        }
                        return geometry;
                    };
                }
            }
            /**
             * @type {GeometryFunction}
             * @private
             */
            this.geometryFunction_ = geometryFunction;
            /**
             * @type {number}
             * @private
             */
            this.dragVertexDelay_ =
                options.dragVertexDelay !== undefined ? options.dragVertexDelay : 500;
            /**
             * Finish coordinate for the feature (first point for polygons, last point for
             * linestrings).
             * @type {import("../coordinate.js").Coordinate}
             * @private
             */
            this.finishCoordinate_ = null;
            /**
             * Sketch feature.
             * @type {Feature}
             * @private
             */
            this.sketchFeature_ = null;
            /**
             * Sketch point.
             * @type {Feature<Point>}
             * @private
             */
            this.sketchPoint_ = null;
            /**
             * Sketch coordinates. Used when drawing a line or polygon.
             * @type {SketchCoordType}
             * @private
             */
            this.sketchCoords_ = null;
            /**
             * Sketch line. Used when drawing polygon.
             * @type {Feature<LineString>}
             * @private
             */
            this.sketchLine_ = null;
            /**
             * Sketch line coordinates. Used when drawing a polygon or circle.
             * @type {LineCoordType}
             * @private
             */
            this.sketchLineCoords_ = null;
            /**
             * Squared tolerance for handling up events.  If the squared distance
             * between a down and up event is greater than this tolerance, up events
             * will not be handled.
             * @type {number}
             * @private
             */
            this.squaredClickTolerance_ = options.clickTolerance
                ? options.clickTolerance * options.clickTolerance
                : 36;
            /**
             * Draw overlay where our sketch features are drawn.
             * @type {VectorLayer}
             * @private
             */
            this.overlay_ = new Vector_js_1.default({
                source: new Vector_js_2.default({
                    useSpatialIndex: false,
                    wrapX: options.wrapX ? options.wrapX : false,
                }),
                style: options.style ? options.style : getDefaultStyleFunction(),
                updateWhileInteracting: true,
            });
            /**
             * Name of the geometry attribute for newly created features.
             * @type {string|undefined}
             * @private
             */
            this.geometryName_ = options.geometryName;
            /**
             * @private
             * @type {import("../events/condition.js").Condition}
             */
            this.condition_ = options.condition ? options.condition : condition_js_9.noModifierKeys;
            /**
             * @private
             * @type {import("../events/condition.js").Condition}
             */
            this.freehandCondition_;
            if (options.freehand) {
                this.freehandCondition_ = condition_js_9.always;
            }
            else {
                this.freehandCondition_ = options.freehandCondition
                    ? options.freehandCondition
                    : condition_js_9.shiftKeyOnly;
            }
            this.addEventListener(Object_js_17.getChangeEventType(Property_js_4.default.ACTIVE), this.updateState_);
        }
        /**
         * Remove the interaction from its current map and attach it to the new map.
         * Subclasses may set up event handlers to get notified about changes to
         * the map here.
         * @param {import("../PluggableMap.js").default} map Map.
         */
        setMap(map) {
            super.setMap(map);
            this.updateState_();
        }
        /**
         * Get the overlay layer that this interaction renders sketch features to.
         * @return {VectorLayer} Overlay layer.
         * @api
         */
        getOverlay() {
            return this.overlay_;
        }
        /**
         * Handles the {@link module:ol/MapBrowserEvent map browser event} and may actually draw or finish the drawing.
         * @param {import("../MapBrowserEvent.js").default} event Map browser event.
         * @return {boolean} `false` to stop event propagation.
         * @api
         */
        handleEvent(event) {
            if (event.originalEvent.type === EventType_js_37.default.CONTEXTMENU) {
                // Avoid context menu for long taps when drawing on mobile
                event.preventDefault();
            }
            this.freehand_ =
                this.mode_ !== Mode.POINT && this.freehandCondition_(event);
            let move = event.type === MapBrowserEventType_js_6.default.POINTERMOVE;
            let pass = true;
            if (!this.freehand_ &&
                this.lastDragTime_ &&
                event.type === MapBrowserEventType_js_6.default.POINTERDRAG) {
                const now = Date.now();
                if (now - this.lastDragTime_ >= this.dragVertexDelay_) {
                    this.downPx_ = event.pixel;
                    this.shouldHandle_ = !this.freehand_;
                    move = true;
                }
                else {
                    this.lastDragTime_ = undefined;
                }
                if (this.shouldHandle_ && this.downTimeout_ !== undefined) {
                    clearTimeout(this.downTimeout_);
                    this.downTimeout_ = undefined;
                }
            }
            if (this.freehand_ &&
                event.type === MapBrowserEventType_js_6.default.POINTERDRAG &&
                this.sketchFeature_ !== null) {
                this.addToDrawing_(event.coordinate);
                pass = false;
            }
            else if (this.freehand_ &&
                event.type === MapBrowserEventType_js_6.default.POINTERDOWN) {
                pass = false;
            }
            else if (move) {
                pass = event.type === MapBrowserEventType_js_6.default.POINTERMOVE;
                if (pass && this.freehand_) {
                    this.handlePointerMove_(event);
                    if (this.shouldHandle_) {
                        // Avoid page scrolling when freehand drawing on mobile
                        event.preventDefault();
                    }
                }
                else if (event.originalEvent.pointerType == 'mouse' ||
                    (event.type === MapBrowserEventType_js_6.default.POINTERDRAG &&
                        this.downTimeout_ === undefined)) {
                    this.handlePointerMove_(event);
                }
            }
            else if (event.type === MapBrowserEventType_js_6.default.DBLCLICK) {
                pass = false;
            }
            return super.handleEvent(event) && pass;
        }
        /**
         * Handle pointer down events.
         * @param {import("../MapBrowserEvent.js").default} event Event.
         * @return {boolean} If the event was consumed.
         */
        handleDownEvent(event) {
            this.shouldHandle_ = !this.freehand_;
            if (this.freehand_) {
                this.downPx_ = event.pixel;
                if (!this.finishCoordinate_) {
                    this.startDrawing_(event);
                }
                return true;
            }
            else if (this.condition_(event)) {
                this.lastDragTime_ = Date.now();
                this.downTimeout_ = setTimeout(function () {
                    this.handlePointerMove_(new MapBrowserEvent_js_3.default(MapBrowserEventType_js_6.default.POINTERMOVE, event.map, event.originalEvent, false, event.frameState));
                }.bind(this), this.dragVertexDelay_);
                this.downPx_ = event.pixel;
                return true;
            }
            else {
                this.lastDragTime_ = undefined;
                return false;
            }
        }
        /**
         * Handle pointer up events.
         * @param {import("../MapBrowserEvent.js").default} event Event.
         * @return {boolean} If the event was consumed.
         */
        handleUpEvent(event) {
            let pass = true;
            if (this.downTimeout_) {
                clearTimeout(this.downTimeout_);
                this.downTimeout_ = undefined;
            }
            this.handlePointerMove_(event);
            const circleMode = this.mode_ === Mode.CIRCLE;
            if (this.shouldHandle_) {
                if (!this.finishCoordinate_) {
                    this.startDrawing_(event);
                    if (this.mode_ === Mode.POINT) {
                        this.finishDrawing();
                    }
                }
                else if (this.freehand_ || circleMode) {
                    this.finishDrawing();
                }
                else if (this.atFinish_(event)) {
                    if (this.finishCondition_(event)) {
                        this.finishDrawing();
                    }
                }
                else {
                    this.addToDrawing_(event.coordinate);
                }
                pass = false;
            }
            else if (this.freehand_) {
                this.abortDrawing();
            }
            if (!pass && this.stopClick_) {
                event.stopPropagation();
            }
            return pass;
        }
        /**
         * Handle move events.
         * @param {import("../MapBrowserEvent.js").default} event A move event.
         * @private
         */
        handlePointerMove_(event) {
            if (this.downPx_ &&
                ((!this.freehand_ && this.shouldHandle_) ||
                    (this.freehand_ && !this.shouldHandle_))) {
                const downPx = this.downPx_;
                const clickPx = event.pixel;
                const dx = downPx[0] - clickPx[0];
                const dy = downPx[1] - clickPx[1];
                const squaredDistance = dx * dx + dy * dy;
                this.shouldHandle_ = this.freehand_
                    ? squaredDistance > this.squaredClickTolerance_
                    : squaredDistance <= this.squaredClickTolerance_;
                if (!this.shouldHandle_) {
                    return;
                }
            }
            if (this.finishCoordinate_) {
                this.modifyDrawing_(event);
            }
            else {
                this.createOrUpdateSketchPoint_(event);
            }
        }
        /**
         * Determine if an event is within the snapping tolerance of the start coord.
         * @param {import("../MapBrowserEvent.js").default} event Event.
         * @return {boolean} The event is within the snapping tolerance of the start.
         * @private
         */
        atFinish_(event) {
            let at = false;
            if (this.sketchFeature_) {
                let potentiallyDone = false;
                let potentiallyFinishCoordinates = [this.finishCoordinate_];
                if (this.mode_ === Mode.LINE_STRING) {
                    potentiallyDone = this.sketchCoords_.length > this.minPoints_;
                }
                else if (this.mode_ === Mode.POLYGON) {
                    const sketchCoords = /** @type {PolyCoordType} */ (this.sketchCoords_);
                    potentiallyDone = sketchCoords[0].length > this.minPoints_;
                    potentiallyFinishCoordinates = [
                        sketchCoords[0][0],
                        sketchCoords[0][sketchCoords[0].length - 2],
                    ];
                }
                if (potentiallyDone) {
                    const map = event.map;
                    for (let i = 0, ii = potentiallyFinishCoordinates.length; i < ii; i++) {
                        const finishCoordinate = potentiallyFinishCoordinates[i];
                        const finishPixel = map.getPixelFromCoordinate(finishCoordinate);
                        const pixel = event.pixel;
                        const dx = pixel[0] - finishPixel[0];
                        const dy = pixel[1] - finishPixel[1];
                        const snapTolerance = this.freehand_ ? 1 : this.snapTolerance_;
                        at = Math.sqrt(dx * dx + dy * dy) <= snapTolerance;
                        if (at) {
                            this.finishCoordinate_ = finishCoordinate;
                            break;
                        }
                    }
                }
            }
            return at;
        }
        /**
         * @param {import("../MapBrowserEvent.js").default} event Event.
         * @private
         */
        createOrUpdateSketchPoint_(event) {
            const coordinates = event.coordinate.slice();
            if (!this.sketchPoint_) {
                this.sketchPoint_ = new Feature_js_1.default(new Point_js_3.default(coordinates));
                this.updateSketchFeatures_();
            }
            else {
                const sketchPointGeom = this.sketchPoint_.getGeometry();
                sketchPointGeom.setCoordinates(coordinates);
            }
        }
        /**
         * Start the drawing.
         * @param {import("../MapBrowserEvent.js").default} event Event.
         * @private
         */
        startDrawing_(event) {
            const start = event.coordinate;
            const projection = event.map.getView().getProjection();
            this.finishCoordinate_ = start;
            if (this.mode_ === Mode.POINT) {
                this.sketchCoords_ = start.slice();
            }
            else if (this.mode_ === Mode.POLYGON) {
                this.sketchCoords_ = [[start.slice(), start.slice()]];
                this.sketchLineCoords_ = this.sketchCoords_[0];
            }
            else {
                this.sketchCoords_ = [start.slice(), start.slice()];
            }
            if (this.sketchLineCoords_) {
                this.sketchLine_ = new Feature_js_1.default(new LineString_js_2.default(this.sketchLineCoords_));
            }
            const geometry = this.geometryFunction_(this.sketchCoords_, undefined, projection);
            this.sketchFeature_ = new Feature_js_1.default();
            if (this.geometryName_) {
                this.sketchFeature_.setGeometryName(this.geometryName_);
            }
            this.sketchFeature_.setGeometry(geometry);
            this.updateSketchFeatures_();
            this.dispatchEvent(new DrawEvent(DrawEventType.DRAWSTART, this.sketchFeature_));
        }
        /**
         * Modify the drawing.
         * @param {import("../MapBrowserEvent.js").default} event Event.
         * @private
         */
        modifyDrawing_(event) {
            let coordinate = event.coordinate;
            const geometry = this.sketchFeature_.getGeometry();
            const projection = event.map.getView().getProjection();
            let coordinates, last;
            if (this.mode_ === Mode.POINT) {
                last = this.sketchCoords_;
            }
            else if (this.mode_ === Mode.POLYGON) {
                coordinates = /** @type {PolyCoordType} */ (this.sketchCoords_)[0];
                last = coordinates[coordinates.length - 1];
                if (this.atFinish_(event)) {
                    // snap to finish
                    coordinate = this.finishCoordinate_.slice();
                }
            }
            else {
                coordinates = this.sketchCoords_;
                last = coordinates[coordinates.length - 1];
            }
            last[0] = coordinate[0];
            last[1] = coordinate[1];
            this.geometryFunction_(
            /** @type {!LineCoordType} */ (this.sketchCoords_), geometry, projection);
            if (this.sketchPoint_) {
                const sketchPointGeom = this.sketchPoint_.getGeometry();
                sketchPointGeom.setCoordinates(coordinate);
            }
            /** @type {LineString} */
            let sketchLineGeom;
            if (geometry.getType() == GeometryType_js_19.default.POLYGON &&
                this.mode_ !== Mode.POLYGON) {
                if (!this.sketchLine_) {
                    this.sketchLine_ = new Feature_js_1.default();
                }
                const ring = geometry.getLinearRing(0);
                sketchLineGeom = this.sketchLine_.getGeometry();
                if (!sketchLineGeom) {
                    sketchLineGeom = new LineString_js_2.default(ring.getFlatCoordinates(), ring.getLayout());
                    this.sketchLine_.setGeometry(sketchLineGeom);
                }
                else {
                    sketchLineGeom.setFlatCoordinates(ring.getLayout(), ring.getFlatCoordinates());
                    sketchLineGeom.changed();
                }
            }
            else if (this.sketchLineCoords_) {
                sketchLineGeom = this.sketchLine_.getGeometry();
                sketchLineGeom.setCoordinates(this.sketchLineCoords_);
            }
            this.updateSketchFeatures_();
        }
        /**
         * Add a new coordinate to the drawing.
         * @param {!PointCoordType} coordinate Coordinate
         * @private
         */
        addToDrawing_(coordinate) {
            const geometry = this.sketchFeature_.getGeometry();
            const projection = this.getMap().getView().getProjection();
            let done;
            let coordinates;
            if (this.mode_ === Mode.LINE_STRING) {
                this.finishCoordinate_ = coordinate.slice();
                coordinates = /** @type {LineCoordType} */ (this.sketchCoords_);
                if (coordinates.length >= this.maxPoints_) {
                    if (this.freehand_) {
                        coordinates.pop();
                    }
                    else {
                        done = true;
                    }
                }
                coordinates.push(coordinate.slice());
                this.geometryFunction_(coordinates, geometry, projection);
            }
            else if (this.mode_ === Mode.POLYGON) {
                coordinates = /** @type {PolyCoordType} */ (this.sketchCoords_)[0];
                if (coordinates.length >= this.maxPoints_) {
                    if (this.freehand_) {
                        coordinates.pop();
                    }
                    else {
                        done = true;
                    }
                }
                coordinates.push(coordinate.slice());
                if (done) {
                    this.finishCoordinate_ = coordinates[0];
                }
                this.geometryFunction_(this.sketchCoords_, geometry, projection);
            }
            this.updateSketchFeatures_();
            if (done) {
                this.finishDrawing();
            }
        }
        /**
         * Remove last point of the feature currently being drawn.
         * @api
         */
        removeLastPoint() {
            if (!this.sketchFeature_) {
                return;
            }
            const geometry = this.sketchFeature_.getGeometry();
            const projection = this.getMap().getView().getProjection();
            let coordinates;
            /** @type {LineString} */
            let sketchLineGeom;
            if (this.mode_ === Mode.LINE_STRING) {
                coordinates = /** @type {LineCoordType} */ (this.sketchCoords_);
                coordinates.splice(-2, 1);
                this.geometryFunction_(coordinates, geometry, projection);
                if (coordinates.length >= 2) {
                    this.finishCoordinate_ = coordinates[coordinates.length - 2].slice();
                }
            }
            else if (this.mode_ === Mode.POLYGON) {
                coordinates = /** @type {PolyCoordType} */ (this.sketchCoords_)[0];
                coordinates.splice(-2, 1);
                sketchLineGeom = this.sketchLine_.getGeometry();
                sketchLineGeom.setCoordinates(coordinates);
                this.geometryFunction_(this.sketchCoords_, geometry, projection);
            }
            if (coordinates.length === 0) {
                this.abortDrawing();
            }
            this.updateSketchFeatures_();
        }
        /**
         * Stop drawing and add the sketch feature to the target layer.
         * The {@link module:ol/interaction/Draw~DrawEventType.DRAWEND} event is
         * dispatched before inserting the feature.
         * @api
         */
        finishDrawing() {
            const sketchFeature = this.abortDrawing_();
            if (!sketchFeature) {
                return;
            }
            let coordinates = this.sketchCoords_;
            const geometry = sketchFeature.getGeometry();
            const projection = this.getMap().getView().getProjection();
            if (this.mode_ === Mode.LINE_STRING) {
                // remove the redundant last point
                coordinates.pop();
                this.geometryFunction_(coordinates, geometry, projection);
            }
            else if (this.mode_ === Mode.POLYGON) {
                // remove the redundant last point in ring
                /** @type {PolyCoordType} */ (coordinates)[0].pop();
                this.geometryFunction_(coordinates, geometry, projection);
                coordinates = geometry.getCoordinates();
            }
            // cast multi-part geometries
            if (this.type_ === GeometryType_js_19.default.MULTI_POINT) {
                sketchFeature.setGeometry(new MultiPoint_js_2.default([/** @type {PointCoordType} */ (coordinates)]));
            }
            else if (this.type_ === GeometryType_js_19.default.MULTI_LINE_STRING) {
                sketchFeature.setGeometry(new MultiLineString_js_1.default([/** @type {LineCoordType} */ (coordinates)]));
            }
            else if (this.type_ === GeometryType_js_19.default.MULTI_POLYGON) {
                sketchFeature.setGeometry(new MultiPolygon_js_1.default([/** @type {PolyCoordType} */ (coordinates)]));
            }
            // First dispatch event to allow full set up of feature
            this.dispatchEvent(new DrawEvent(DrawEventType.DRAWEND, sketchFeature));
            // Then insert feature
            if (this.features_) {
                this.features_.push(sketchFeature);
            }
            if (this.source_) {
                this.source_.addFeature(sketchFeature);
            }
        }
        /**
         * Stop drawing without adding the sketch feature to the target layer.
         * @return {Feature} The sketch feature (or null if none).
         * @private
         */
        abortDrawing_() {
            this.finishCoordinate_ = null;
            const sketchFeature = this.sketchFeature_;
            this.sketchFeature_ = null;
            this.sketchPoint_ = null;
            this.sketchLine_ = null;
            this.overlay_.getSource().clear(true);
            return sketchFeature;
        }
        /**
         * Stop drawing without adding the sketch feature to the target layer.
         * @api
         */
        abortDrawing() {
            const sketchFeature = this.abortDrawing_();
            if (sketchFeature) {
                this.dispatchEvent(new DrawEvent(DrawEventType.DRAWABORT, sketchFeature));
            }
        }
        /**
         * Append coordinates to the end of the geometry that is currently being drawn.
         * This can be used when drawing LineStrings or Polygons. Coordinates will
         * either be appended to the current LineString or the outer ring of the current
         * Polygon.
         * @param {!LineCoordType} coordinates Linear coordinates to be appended into
         * the coordinate array.
         * @api
         */
        appendCoordinates(coordinates) {
            const mode = this.mode_;
            let sketchCoords = [];
            if (mode === Mode.LINE_STRING) {
                sketchCoords = /** @type {LineCoordType} */ this.sketchCoords_;
            }
            else if (mode === Mode.POLYGON) {
                sketchCoords =
                    this.sketchCoords_ && this.sketchCoords_.length
                        ? /** @type {PolyCoordType} */ (this.sketchCoords_)[0]
                        : [];
            }
            // Remove last coordinate from sketch drawing (this coordinate follows cursor position)
            const ending = sketchCoords.pop();
            // Append coordinate list
            for (let i = 0; i < coordinates.length; i++) {
                this.addToDrawing_(coordinates[i]);
            }
            // Duplicate last coordinate for sketch drawing
            this.addToDrawing_(ending);
        }
        /**
         * Initiate draw mode by starting from an existing geometry which will
         * receive new additional points. This only works on features with
         * `LineString` geometries, where the interaction will extend lines by adding
         * points to the end of the coordinates array.
         * This will change the original feature, instead of drawing a copy.
         *
         * The function will dispatch a `drawstart` event.
         *
         * @param {!Feature<LineString>} feature Feature to be extended.
         * @api
         */
        extend(feature) {
            const geometry = feature.getGeometry();
            const lineString = geometry;
            this.sketchFeature_ = feature;
            this.sketchCoords_ = lineString.getCoordinates();
            const last = this.sketchCoords_[this.sketchCoords_.length - 1];
            this.finishCoordinate_ = last.slice();
            this.sketchCoords_.push(last.slice());
            this.updateSketchFeatures_();
            this.dispatchEvent(new DrawEvent(DrawEventType.DRAWSTART, this.sketchFeature_));
        }
        /**
         * Redraw the sketch features.
         * @private
         */
        updateSketchFeatures_() {
            const sketchFeatures = [];
            if (this.sketchFeature_) {
                sketchFeatures.push(this.sketchFeature_);
            }
            if (this.sketchLine_) {
                sketchFeatures.push(this.sketchLine_);
            }
            if (this.sketchPoint_) {
                sketchFeatures.push(this.sketchPoint_);
            }
            const overlaySource = this.overlay_.getSource();
            overlaySource.clear(true);
            overlaySource.addFeatures(sketchFeatures);
        }
        /**
         * @private
         */
        updateState_() {
            const map = this.getMap();
            const active = this.getActive();
            if (!map || !active) {
                this.abortDrawing();
            }
            this.overlay_.setMap(active ? map : null);
        }
    }
    /**
     * @return {import("../style/Style.js").StyleFunction} Styles.
     */
    function getDefaultStyleFunction() {
        const styles = Style_js_3.createEditingStyle();
        return function (feature, resolution) {
            return styles[feature.getGeometry().getType()];
        };
    }
    /**
     * Create a `geometryFunction` for `type: 'Circle'` that will create a regular
     * polygon with a user specified number of sides and start angle instead of an
     * `import("../geom/Circle.js").Circle` geometry.
     * @param {number=} opt_sides Number of sides of the regular polygon. Default is
     *     32.
     * @param {number=} opt_angle Angle of the first point in radians. 0 means East.
     *     Default is the angle defined by the heading from the center of the
     *     regular polygon to the current pointer position.
     * @return {GeometryFunction} Function that draws a
     *     polygon.
     * @api
     */
    function createRegularPolygon(opt_sides, opt_angle) {
        return function (coordinates, opt_geometry, projection) {
            const center = proj_js_14.fromUserCoordinate(
            /** @type {LineCoordType} */ (coordinates)[0], projection);
            const end = proj_js_14.fromUserCoordinate(
            /** @type {LineCoordType} */ (coordinates)[1], projection);
            const radius = Math.sqrt(coordinate_js_8.squaredDistance(center, end));
            const geometry = opt_geometry
                ? /** @type {Polygon} */ (opt_geometry)
                : Polygon_js_6.fromCircle(new Circle_js_3.default(center), opt_sides);
            let angle = opt_angle;
            if (!opt_angle) {
                const x = end[0] - center[0];
                const y = end[1] - center[1];
                angle = Math.atan(y / x) - (x < 0 ? Math.PI : 0);
            }
            Polygon_js_6.makeRegular(geometry, center, radius, angle);
            const userProjection = proj_js_14.getUserProjection();
            if (userProjection) {
                geometry.transform(projection, userProjection);
            }
            return geometry;
        };
    }
    exports.createRegularPolygon = createRegularPolygon;
    /**
     * Create a `geometryFunction` that will create a box-shaped polygon (aligned
     * with the coordinate system axes).  Use this with the draw interaction and
     * `type: 'Circle'` to return a box instead of a circle geometry.
     * @return {GeometryFunction} Function that draws a box-shaped polygon.
     * @api
     */
    function createBox() {
        return function (coordinates, opt_geometry, projection) {
            const extent = extent_js_40.boundingExtent(
            /** @type {LineCoordType} */ (coordinates).map(function (coordinate) {
                return proj_js_14.fromUserCoordinate(coordinate, projection);
            }));
            const boxCoordinates = [
                [
                    extent_js_40.getBottomLeft(extent),
                    extent_js_40.getBottomRight(extent),
                    extent_js_40.getTopRight(extent),
                    extent_js_40.getTopLeft(extent),
                    extent_js_40.getBottomLeft(extent),
                ],
            ];
            let geometry = opt_geometry;
            if (geometry) {
                geometry.setCoordinates(boxCoordinates);
            }
            else {
                geometry = new Polygon_js_6.default(boxCoordinates);
            }
            const userProjection = proj_js_14.getUserProjection();
            if (userProjection) {
                geometry.transform(projection, userProjection);
            }
            return geometry;
        };
    }
    exports.createBox = createBox;
    /**
     * Get the drawing mode.  The mode for mult-part geometries is the same as for
     * their single-part cousins.
     * @param {import("../geom/GeometryType.js").default} type Geometry type.
     * @return {Mode} Drawing mode.
     */
    function getMode(type) {
        let mode;
        if (type === GeometryType_js_19.default.POINT || type === GeometryType_js_19.default.MULTI_POINT) {
            mode = Mode.POINT;
        }
        else if (type === GeometryType_js_19.default.LINE_STRING ||
            type === GeometryType_js_19.default.MULTI_LINE_STRING) {
            mode = Mode.LINE_STRING;
        }
        else if (type === GeometryType_js_19.default.POLYGON ||
            type === GeometryType_js_19.default.MULTI_POLYGON) {
            mode = Mode.POLYGON;
        }
        else if (type === GeometryType_js_19.default.CIRCLE) {
            mode = Mode.CIRCLE;
        }
        return /** @type {!Mode} */ (mode);
    }
    exports.default = Draw;
});
define("node_modules/ol/src/interaction/Extent", ["require", "exports", "node_modules/ol/src/events/Event", "node_modules/ol/src/Feature", "node_modules/ol/src/geom/GeometryType", "node_modules/ol/src/MapBrowserEventType", "node_modules/ol/src/geom/Point", "node_modules/ol/src/interaction/Pointer", "node_modules/ol/src/layer/Vector", "node_modules/ol/src/source/Vector", "node_modules/ol/src/events/condition", "node_modules/ol/src/extent", "node_modules/ol/src/coordinate", "node_modules/ol/src/style/Style", "node_modules/ol/src/geom/Polygon", "node_modules/ol/src/proj"], function (require, exports, Event_js_14, Feature_js_2, GeometryType_js_20, MapBrowserEventType_js_7, Point_js_4, Pointer_js_8, Vector_js_3, Vector_js_4, condition_js_10, extent_js_41, coordinate_js_9, Style_js_4, Polygon_js_7, proj_js_15) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @typedef {Object} Options
     * @property {import("../events/condition.js").Condition} [condition] A function that
     * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
     * boolean to indicate whether that event should be handled.
     * Default is {@link module:ol/events/condition~always}.
     * @property {import("../extent.js").Extent} [extent] Initial extent. Defaults to no
     * initial extent.
     * @property {import("../style/Style.js").StyleLike} [boxStyle]
     * Style for the drawn extent box. Defaults to
     * {@link module:ol/style/Style~createEditing()['Polygon']}
     * @property {number} [pixelTolerance=10] Pixel tolerance for considering the
     * pointer close enough to a segment or vertex for editing.
     * @property {import("../style/Style.js").StyleLike} [pointerStyle]
     * Style for the cursor used to draw the extent. Defaults to
     * {@link module:ol/style/Style~createEditing()['Point']}
     * @property {boolean} [wrapX=false] Wrap the drawn extent across multiple maps
     * in the X direction? Only affects visuals, not functionality.
     */
    /**
     * @enum {string}
     */
    const ExtentEventType = {
        /**
         * Triggered after the extent is changed
         * @event ExtentEvent#extentchanged
         * @api
         */
        EXTENTCHANGED: 'extentchanged',
    };
    /**
     * @classdesc
     * Events emitted by {@link module:ol/interaction/Extent~Extent} instances are
     * instances of this type.
     */
    class ExtentEvent extends Event_js_14.default {
        /**
         * @param {import("../extent.js").Extent} extent the new extent
         */
        constructor(extent) {
            super(ExtentEventType.EXTENTCHANGED);
            /**
             * The current extent.
             * @type {import("../extent.js").Extent}
             * @api
             */
            this.extent = extent;
        }
    }
    /**
     * @classdesc
     * Allows the user to draw a vector box by clicking and dragging on the map.
     * Once drawn, the vector box can be modified by dragging its vertices or edges.
     * This interaction is only supported for mouse devices.
     *
     * @fires ExtentEvent
     * @api
     */
    class Extent extends Pointer_js_8.default {
        /**
         * @param {Options=} opt_options Options.
         */
        constructor(opt_options) {
            const options = opt_options || {};
            super(/** @type {import("./Pointer.js").Options} */ (options));
            /**
             * Condition
             * @type {import("../events/condition.js").Condition}
             * @private
             */
            this.condition_ = options.condition ? options.condition : condition_js_10.always;
            /**
             * Extent of the drawn box
             * @type {import("../extent.js").Extent}
             * @private
             */
            this.extent_ = null;
            /**
             * Handler for pointer move events
             * @type {function (import("../coordinate.js").Coordinate): import("../extent.js").Extent|null}
             * @private
             */
            this.pointerHandler_ = null;
            /**
             * Pixel threshold to snap to extent
             * @type {number}
             * @private
             */
            this.pixelTolerance_ =
                options.pixelTolerance !== undefined ? options.pixelTolerance : 10;
            /**
             * Is the pointer snapped to an extent vertex
             * @type {boolean}
             * @private
             */
            this.snappedToVertex_ = false;
            /**
             * Feature for displaying the visible extent
             * @type {Feature}
             * @private
             */
            this.extentFeature_ = null;
            /**
             * Feature for displaying the visible pointer
             * @type {Feature<Point>}
             * @private
             */
            this.vertexFeature_ = null;
            if (!opt_options) {
                opt_options = {};
            }
            /**
             * Layer for the extentFeature
             * @type {VectorLayer}
             * @private
             */
            this.extentOverlay_ = new Vector_js_3.default({
                source: new Vector_js_4.default({
                    useSpatialIndex: false,
                    wrapX: !!opt_options.wrapX,
                }),
                style: opt_options.boxStyle
                    ? opt_options.boxStyle
                    : getDefaultExtentStyleFunction(),
                updateWhileAnimating: true,
                updateWhileInteracting: true,
            });
            /**
             * Layer for the vertexFeature
             * @type {VectorLayer}
             * @private
             */
            this.vertexOverlay_ = new Vector_js_3.default({
                source: new Vector_js_4.default({
                    useSpatialIndex: false,
                    wrapX: !!opt_options.wrapX,
                }),
                style: opt_options.pointerStyle
                    ? opt_options.pointerStyle
                    : getDefaultPointerStyleFunction(),
                updateWhileAnimating: true,
                updateWhileInteracting: true,
            });
            if (opt_options.extent) {
                this.setExtent(opt_options.extent);
            }
        }
        /**
         * @param {import("../pixel.js").Pixel} pixel cursor location
         * @param {import("../PluggableMap.js").default} map map
         * @returns {import("../coordinate.js").Coordinate|null} snapped vertex on extent
         * @private
         */
        snapToVertex_(pixel, map) {
            const pixelCoordinate = map.getCoordinateFromPixelInternal(pixel);
            const sortByDistance = function (a, b) {
                return (coordinate_js_9.squaredDistanceToSegment(pixelCoordinate, a) -
                    coordinate_js_9.squaredDistanceToSegment(pixelCoordinate, b));
            };
            const extent = this.getExtentInternal();
            if (extent) {
                //convert extents to line segments and find the segment closest to pixelCoordinate
                const segments = getSegments(extent);
                segments.sort(sortByDistance);
                const closestSegment = segments[0];
                let vertex = coordinate_js_9.closestOnSegment(pixelCoordinate, closestSegment);
                const vertexPixel = map.getPixelFromCoordinateInternal(vertex);
                //if the distance is within tolerance, snap to the segment
                if (coordinate_js_9.distance(pixel, vertexPixel) <= this.pixelTolerance_) {
                    //test if we should further snap to a vertex
                    const pixel1 = map.getPixelFromCoordinateInternal(closestSegment[0]);
                    const pixel2 = map.getPixelFromCoordinateInternal(closestSegment[1]);
                    const squaredDist1 = coordinate_js_9.squaredDistance(vertexPixel, pixel1);
                    const squaredDist2 = coordinate_js_9.squaredDistance(vertexPixel, pixel2);
                    const dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));
                    this.snappedToVertex_ = dist <= this.pixelTolerance_;
                    if (this.snappedToVertex_) {
                        vertex =
                            squaredDist1 > squaredDist2 ? closestSegment[1] : closestSegment[0];
                    }
                    return vertex;
                }
            }
            return null;
        }
        /**
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent pointer move event
         * @private
         */
        handlePointerMove_(mapBrowserEvent) {
            const pixel = mapBrowserEvent.pixel;
            const map = mapBrowserEvent.map;
            let vertex = this.snapToVertex_(pixel, map);
            if (!vertex) {
                vertex = map.getCoordinateFromPixelInternal(pixel);
            }
            this.createOrUpdatePointerFeature_(vertex);
        }
        /**
         * @param {import("../extent.js").Extent} extent extent
         * @returns {Feature} extent as featrue
         * @private
         */
        createOrUpdateExtentFeature_(extent) {
            let extentFeature = this.extentFeature_;
            if (!extentFeature) {
                if (!extent) {
                    extentFeature = new Feature_js_2.default({});
                }
                else {
                    extentFeature = new Feature_js_2.default(Polygon_js_7.fromExtent(extent));
                }
                this.extentFeature_ = extentFeature;
                this.extentOverlay_.getSource().addFeature(extentFeature);
            }
            else {
                if (!extent) {
                    extentFeature.setGeometry(undefined);
                }
                else {
                    extentFeature.setGeometry(Polygon_js_7.fromExtent(extent));
                }
            }
            return extentFeature;
        }
        /**
         * @param {import("../coordinate.js").Coordinate} vertex location of feature
         * @returns {Feature} vertex as feature
         * @private
         */
        createOrUpdatePointerFeature_(vertex) {
            let vertexFeature = this.vertexFeature_;
            if (!vertexFeature) {
                vertexFeature = new Feature_js_2.default(new Point_js_4.default(vertex));
                this.vertexFeature_ = vertexFeature;
                this.vertexOverlay_.getSource().addFeature(vertexFeature);
            }
            else {
                const geometry = vertexFeature.getGeometry();
                geometry.setCoordinates(vertex);
            }
            return vertexFeature;
        }
        /**
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
         * @return {boolean} `false` to stop event propagation.
         */
        handleEvent(mapBrowserEvent) {
            if (!mapBrowserEvent.originalEvent || !this.condition_(mapBrowserEvent)) {
                return true;
            }
            //display pointer (if not dragging)
            if (mapBrowserEvent.type == MapBrowserEventType_js_7.default.POINTERMOVE &&
                !this.handlingDownUpSequence) {
                this.handlePointerMove_(mapBrowserEvent);
            }
            //call pointer to determine up/down/drag
            super.handleEvent(mapBrowserEvent);
            //return false to stop propagation
            return false;
        }
        /**
         * Handle pointer down events.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
         * @return {boolean} If the event was consumed.
         */
        handleDownEvent(mapBrowserEvent) {
            const pixel = mapBrowserEvent.pixel;
            const map = mapBrowserEvent.map;
            const extent = this.getExtentInternal();
            let vertex = this.snapToVertex_(pixel, map);
            //find the extent corner opposite the passed corner
            const getOpposingPoint = function (point) {
                let x_ = null;
                let y_ = null;
                if (point[0] == extent[0]) {
                    x_ = extent[2];
                }
                else if (point[0] == extent[2]) {
                    x_ = extent[0];
                }
                if (point[1] == extent[1]) {
                    y_ = extent[3];
                }
                else if (point[1] == extent[3]) {
                    y_ = extent[1];
                }
                if (x_ !== null && y_ !== null) {
                    return [x_, y_];
                }
                return null;
            };
            if (vertex && extent) {
                const x = vertex[0] == extent[0] || vertex[0] == extent[2] ? vertex[0] : null;
                const y = vertex[1] == extent[1] || vertex[1] == extent[3] ? vertex[1] : null;
                //snap to point
                if (x !== null && y !== null) {
                    this.pointerHandler_ = getPointHandler(getOpposingPoint(vertex));
                    //snap to edge
                }
                else if (x !== null) {
                    this.pointerHandler_ = getEdgeHandler(getOpposingPoint([x, extent[1]]), getOpposingPoint([x, extent[3]]));
                }
                else if (y !== null) {
                    this.pointerHandler_ = getEdgeHandler(getOpposingPoint([extent[0], y]), getOpposingPoint([extent[2], y]));
                }
                //no snap - new bbox
            }
            else {
                vertex = map.getCoordinateFromPixelInternal(pixel);
                this.setExtent([vertex[0], vertex[1], vertex[0], vertex[1]]);
                this.pointerHandler_ = getPointHandler(vertex);
            }
            return true; //event handled; start downup sequence
        }
        /**
         * Handle pointer drag events.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
         */
        handleDragEvent(mapBrowserEvent) {
            if (this.pointerHandler_) {
                const pixelCoordinate = mapBrowserEvent.coordinate;
                this.setExtent(this.pointerHandler_(pixelCoordinate));
                this.createOrUpdatePointerFeature_(pixelCoordinate);
            }
        }
        /**
         * Handle pointer up events.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Event.
         * @return {boolean} If the event was consumed.
         */
        handleUpEvent(mapBrowserEvent) {
            this.pointerHandler_ = null;
            //If bbox is zero area, set to null;
            const extent = this.getExtentInternal();
            if (!extent || extent_js_41.getArea(extent) === 0) {
                this.setExtent(null);
            }
            return false; //Stop handling downup sequence
        }
        /**
         * Remove the interaction from its current map and attach it to the new map.
         * Subclasses may set up event handlers to get notified about changes to
         * the map here.
         * @param {import("../PluggableMap.js").default} map Map.
         */
        setMap(map) {
            this.extentOverlay_.setMap(map);
            this.vertexOverlay_.setMap(map);
            super.setMap(map);
        }
        /**
         * Returns the current drawn extent in the view projection (or user projection if set)
         *
         * @return {import("../extent.js").Extent} Drawn extent in the view projection.
         * @api
         */
        getExtent() {
            return proj_js_15.toUserExtent(this.getExtentInternal(), this.getMap().getView().getProjection());
        }
        /**
         * Returns the current drawn extent in the view projection
         *
         * @return {import("../extent.js").Extent} Drawn extent in the view projection.
         * @api
         */
        getExtentInternal() {
            return this.extent_;
        }
        /**
         * Manually sets the drawn extent, using the view projection.
         *
         * @param {import("../extent.js").Extent} extent Extent
         * @api
         */
        setExtent(extent) {
            //Null extent means no bbox
            this.extent_ = extent ? extent : null;
            this.createOrUpdateExtentFeature_(extent);
            this.dispatchEvent(new ExtentEvent(this.extent_));
        }
    }
    /**
     * Returns the default style for the drawn bbox
     *
     * @return {import("../style/Style.js").StyleFunction} Default Extent style
     */
    function getDefaultExtentStyleFunction() {
        const style = Style_js_4.createEditingStyle();
        return function (feature, resolution) {
            return style[GeometryType_js_20.default.POLYGON];
        };
    }
    /**
     * Returns the default style for the pointer
     *
     * @return {import("../style/Style.js").StyleFunction} Default pointer style
     */
    function getDefaultPointerStyleFunction() {
        const style = Style_js_4.createEditingStyle();
        return function (feature, resolution) {
            return style[GeometryType_js_20.default.POINT];
        };
    }
    /**
     * @param {import("../coordinate.js").Coordinate} fixedPoint corner that will be unchanged in the new extent
     * @returns {function (import("../coordinate.js").Coordinate): import("../extent.js").Extent} event handler
     */
    function getPointHandler(fixedPoint) {
        return function (point) {
            return extent_js_41.boundingExtent([fixedPoint, point]);
        };
    }
    /**
     * @param {import("../coordinate.js").Coordinate} fixedP1 first corner that will be unchanged in the new extent
     * @param {import("../coordinate.js").Coordinate} fixedP2 second corner that will be unchanged in the new extent
     * @returns {function (import("../coordinate.js").Coordinate): import("../extent.js").Extent|null} event handler
     */
    function getEdgeHandler(fixedP1, fixedP2) {
        if (fixedP1[0] == fixedP2[0]) {
            return function (point) {
                return extent_js_41.boundingExtent([fixedP1, [point[0], fixedP2[1]]]);
            };
        }
        else if (fixedP1[1] == fixedP2[1]) {
            return function (point) {
                return extent_js_41.boundingExtent([fixedP1, [fixedP2[0], point[1]]]);
            };
        }
        else {
            return null;
        }
    }
    /**
     * @param {import("../extent.js").Extent} extent extent
     * @returns {Array<Array<import("../coordinate.js").Coordinate>>} extent line segments
     */
    function getSegments(extent) {
        return [
            [
                [extent[0], extent[1]],
                [extent[0], extent[3]],
            ],
            [
                [extent[0], extent[3]],
                [extent[2], extent[3]],
            ],
            [
                [extent[2], extent[3]],
                [extent[2], extent[1]],
            ],
            [
                [extent[2], extent[1]],
                [extent[0], extent[1]],
            ],
        ];
    }
    exports.default = Extent;
});
define("node_modules/ol/src/interaction/Modify", ["require", "exports", "node_modules/ol/src/Collection", "node_modules/ol/src/CollectionEventType", "node_modules/ol/src/events/Event", "node_modules/ol/src/events/EventType", "node_modules/ol/src/Feature", "node_modules/ol/src/geom/GeometryType", "node_modules/ol/src/MapBrowserEventType", "node_modules/ol/src/geom/Point", "node_modules/ol/src/interaction/Pointer", "node_modules/ol/src/structs/RBush", "node_modules/ol/src/source/VectorEventType", "node_modules/ol/src/layer/Vector", "node_modules/ol/src/source/Vector", "node_modules/ol/src/events/condition", "node_modules/ol/src/extent", "node_modules/ol/src/coordinate", "node_modules/ol/src/style/Style", "node_modules/ol/src/array", "node_modules/ol/src/geom/Polygon", "node_modules/ol/src/proj", "node_modules/ol/src/util"], function (require, exports, Collection_js_5, CollectionEventType_js_5, Event_js_15, EventType_js_38, Feature_js_3, GeometryType_js_21, MapBrowserEventType_js_8, Point_js_5, Pointer_js_9, RBush_js_2, VectorEventType_js_2, Vector_js_5, Vector_js_6, condition_js_11, extent_js_42, coordinate_js_10, Style_js_5, array_js_21, Polygon_js_8, proj_js_16, util_js_23) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ModifyEvent = void 0;
    /**
     * The segment index assigned to a circle's center when
     * breaking up a circle into ModifySegmentDataType segments.
     * @type {number}
     */
    const CIRCLE_CENTER_INDEX = 0;
    /**
     * The segment index assigned to a circle's circumference when
     * breaking up a circle into ModifySegmentDataType segments.
     * @type {number}
     */
    const CIRCLE_CIRCUMFERENCE_INDEX = 1;
    const tempExtent = [0, 0, 0, 0];
    const tempSegment = [];
    /**
     * @enum {string}
     */
    const ModifyEventType = {
        /**
         * Triggered upon feature modification start
         * @event ModifyEvent#modifystart
         * @api
         */
        MODIFYSTART: 'modifystart',
        /**
         * Triggered upon feature modification end
         * @event ModifyEvent#modifyend
         * @api
         */
        MODIFYEND: 'modifyend',
    };
    /**
     * @typedef {Object} SegmentData
     * @property {Array<number>} [depth]
     * @property {Feature} feature
     * @property {import("../geom/SimpleGeometry.js").default} geometry
     * @property {number} [index]
     * @property {Array<import("../extent.js").Extent>} segment
     * @property {Array<SegmentData>} [featureSegments]
     */
    /**
     * @typedef {Object} Options
     * @property {import("../events/condition.js").Condition} [condition] A function that
     * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
     * boolean to indicate whether that event will be considered to add or move a
     * vertex to the sketch. Default is
     * {@link module:ol/events/condition~primaryAction}.
     * @property {import("../events/condition.js").Condition} [deleteCondition] A function
     * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
     * boolean to indicate whether that event should be handled. By default,
     * {@link module:ol/events/condition~singleClick} with
     * {@link module:ol/events/condition~altKeyOnly} results in a vertex deletion.
     * @property {import("../events/condition.js").Condition} [insertVertexCondition] A
     * function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and
     * returns a boolean to indicate whether a new vertex should be added to the sketch
     * features. Default is {@link module:ol/events/condition~always}.
     * @property {number} [pixelTolerance=10] Pixel tolerance for considering the
     * pointer close enough to a segment or vertex for editing.
     * @property {import("../style/Style.js").StyleLike} [style]
     * Style used for the features being modified. By default the default edit
     * style is used (see {@link module:ol/style}).
     * @property {VectorSource} [source] The vector source with
     * features to modify.  If a vector source is not provided, a feature collection
     * must be provided with the features option.
     * @property {Collection<Feature>} [features]
     * The features the interaction works on.  If a feature collection is not
     * provided, a vector source must be provided with the source option.
     * @property {boolean} [wrapX=false] Wrap the world horizontally on the sketch
     * overlay.
     */
    /**
     * @classdesc
     * Events emitted by {@link module:ol/interaction/Modify~Modify} instances are
     * instances of this type.
     */
    class ModifyEvent extends Event_js_15.default {
        /**
         * @param {ModifyEventType} type Type.
         * @param {Collection<Feature>} features
         * The features modified.
         * @param {import("../MapBrowserEvent.js").default} MapBrowserEvent
         * Associated {@link module:ol/MapBrowserEvent}.
         */
        constructor(type, features, MapBrowserEvent) {
            super(type);
            /**
             * The features being modified.
             * @type {Collection<Feature>}
             * @api
             */
            this.features = features;
            /**
             * Associated {@link module:ol/MapBrowserEvent}.
             * @type {import("../MapBrowserEvent.js").default}
             * @api
             */
            this.mapBrowserEvent = MapBrowserEvent;
        }
    }
    exports.ModifyEvent = ModifyEvent;
    /**
     * @classdesc
     * Interaction for modifying feature geometries.  To modify features that have
     * been added to an existing source, construct the modify interaction with the
     * `source` option.  If you want to modify features in a collection (for example,
     * the collection used by a select interaction), construct the interaction with
     * the `features` option.  The interaction must be constructed with either a
     * `source` or `features` option.
     *
     * By default, the interaction will allow deletion of vertices when the `alt`
     * key is pressed.  To configure the interaction with a different condition
     * for deletion, use the `deleteCondition` option.
     * @fires ModifyEvent
     * @api
     */
    class Modify extends Pointer_js_9.default {
        /**
         * @param {Options} options Options.
         */
        constructor(options) {
            super(/** @type {import("./Pointer.js").Options} */ (options));
            /** @private */
            this.boundHandleFeatureChange_ = this.handleFeatureChange_.bind(this);
            /**
             * @private
             * @type {import("../events/condition.js").Condition}
             */
            this.condition_ = options.condition ? options.condition : condition_js_11.primaryAction;
            /**
             * @private
             * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Browser event.
             * @return {boolean} Combined condition result.
             */
            this.defaultDeleteCondition_ = function (mapBrowserEvent) {
                return condition_js_11.altKeyOnly(mapBrowserEvent) && condition_js_11.singleClick(mapBrowserEvent);
            };
            /**
             * @type {import("../events/condition.js").Condition}
             * @private
             */
            this.deleteCondition_ = options.deleteCondition
                ? options.deleteCondition
                : this.defaultDeleteCondition_;
            /**
             * @type {import("../events/condition.js").Condition}
             * @private
             */
            this.insertVertexCondition_ = options.insertVertexCondition
                ? options.insertVertexCondition
                : condition_js_11.always;
            /**
             * Editing vertex.
             * @type {Feature}
             * @private
             */
            this.vertexFeature_ = null;
            /**
             * Segments intersecting {@link this.vertexFeature_} by segment uid.
             * @type {Object<string, boolean>}
             * @private
             */
            this.vertexSegments_ = null;
            /**
             * @type {import("../pixel.js").Pixel}
             * @private
             */
            this.lastPixel_ = [0, 0];
            /**
             * Tracks if the next `singleclick` event should be ignored to prevent
             * accidental deletion right after vertex creation.
             * @type {boolean}
             * @private
             */
            this.ignoreNextSingleClick_ = false;
            /**
             * @type {boolean}
             * @private
             */
            this.modified_ = false;
            /**
             * Segment RTree for each layer
             * @type {RBush<SegmentData>}
             * @private
             */
            this.rBush_ = new RBush_js_2.default();
            /**
             * @type {number}
             * @private
             */
            this.pixelTolerance_ =
                options.pixelTolerance !== undefined ? options.pixelTolerance : 10;
            /**
             * @type {boolean}
             * @private
             */
            this.snappedToVertex_ = false;
            /**
             * Indicate whether the interaction is currently changing a feature's
             * coordinates.
             * @type {boolean}
             * @private
             */
            this.changingFeature_ = false;
            /**
             * @type {Array}
             * @private
             */
            this.dragSegments_ = [];
            /**
             * Draw overlay where sketch features are drawn.
             * @type {VectorLayer}
             * @private
             */
            this.overlay_ = new Vector_js_5.default({
                source: new Vector_js_6.default({
                    useSpatialIndex: false,
                    wrapX: !!options.wrapX,
                }),
                style: options.style ? options.style : getDefaultStyleFunction(),
                updateWhileAnimating: true,
                updateWhileInteracting: true,
            });
            /**
             * @const
             * @private
             * @type {!Object<string, function(Feature, import("../geom/Geometry.js").default): void>}
             */
            this.SEGMENT_WRITERS_ = {
                'Point': this.writePointGeometry_.bind(this),
                'LineString': this.writeLineStringGeometry_.bind(this),
                'LinearRing': this.writeLineStringGeometry_.bind(this),
                'Polygon': this.writePolygonGeometry_.bind(this),
                'MultiPoint': this.writeMultiPointGeometry_.bind(this),
                'MultiLineString': this.writeMultiLineStringGeometry_.bind(this),
                'MultiPolygon': this.writeMultiPolygonGeometry_.bind(this),
                'Circle': this.writeCircleGeometry_.bind(this),
                'GeometryCollection': this.writeGeometryCollectionGeometry_.bind(this),
            };
            /**
             * @type {VectorSource}
             * @private
             */
            this.source_ = null;
            let features;
            if (options.source) {
                this.source_ = options.source;
                features = new Collection_js_5.default(this.source_.getFeatures());
                this.source_.addEventListener(VectorEventType_js_2.default.ADDFEATURE, this.handleSourceAdd_.bind(this));
                this.source_.addEventListener(VectorEventType_js_2.default.REMOVEFEATURE, this.handleSourceRemove_.bind(this));
            }
            else {
                features = options.features;
            }
            if (!features) {
                throw new Error('The modify interaction requires features or a source');
            }
            /**
             * @type {Collection<Feature>}
             * @private
             */
            this.features_ = features;
            this.features_.forEach(this.addFeature_.bind(this));
            this.features_.addEventListener(CollectionEventType_js_5.default.ADD, this.handleFeatureAdd_.bind(this));
            this.features_.addEventListener(CollectionEventType_js_5.default.REMOVE, this.handleFeatureRemove_.bind(this));
            /**
             * @type {import("../MapBrowserEvent.js").default}
             * @private
             */
            this.lastPointerEvent_ = null;
        }
        /**
         * @param {Feature} feature Feature.
         * @private
         */
        addFeature_(feature) {
            const geometry = feature.getGeometry();
            if (geometry) {
                const writer = this.SEGMENT_WRITERS_[geometry.getType()];
                if (writer) {
                    writer(feature, geometry);
                }
            }
            const map = this.getMap();
            if (map && map.isRendered() && this.getActive()) {
                this.handlePointerAtPixel_(this.lastPixel_, map);
            }
            feature.addEventListener(EventType_js_38.default.CHANGE, this.boundHandleFeatureChange_);
        }
        /**
         * @param {import("../MapBrowserEvent.js").default} evt Map browser event
         * @private
         */
        willModifyFeatures_(evt) {
            if (!this.modified_) {
                this.modified_ = true;
                this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYSTART, this.features_, evt));
            }
        }
        /**
         * @param {Feature} feature Feature.
         * @private
         */
        removeFeature_(feature) {
            this.removeFeatureSegmentData_(feature);
            // Remove the vertex feature if the collection of canditate features is empty.
            if (this.vertexFeature_ && this.features_.getLength() === 0) {
                this.overlay_.getSource().removeFeature(this.vertexFeature_);
                this.vertexFeature_ = null;
            }
            feature.removeEventListener(EventType_js_38.default.CHANGE, this.boundHandleFeatureChange_);
        }
        /**
         * @param {Feature} feature Feature.
         * @private
         */
        removeFeatureSegmentData_(feature) {
            const rBush = this.rBush_;
            /** @type {Array<SegmentData>} */
            const nodesToRemove = [];
            rBush.forEach(
            /**
             * @param {SegmentData} node RTree node.
             */
            function (node) {
                if (feature === node.feature) {
                    nodesToRemove.push(node);
                }
            });
            for (let i = nodesToRemove.length - 1; i >= 0; --i) {
                const nodeToRemove = nodesToRemove[i];
                for (let j = this.dragSegments_.length - 1; j >= 0; --j) {
                    if (this.dragSegments_[j][0] === nodeToRemove) {
                        this.dragSegments_.splice(j, 1);
                    }
                }
                rBush.remove(nodeToRemove);
            }
        }
        /**
         * Activate or deactivate the interaction.
         * @param {boolean} active Active.
         * @observable
         * @api
         */
        setActive(active) {
            if (this.vertexFeature_ && !active) {
                this.overlay_.getSource().removeFeature(this.vertexFeature_);
                this.vertexFeature_ = null;
            }
            super.setActive(active);
        }
        /**
         * Remove the interaction from its current map and attach it to the new map.
         * Subclasses may set up event handlers to get notified about changes to
         * the map here.
         * @param {import("../PluggableMap.js").default} map Map.
         */
        setMap(map) {
            this.overlay_.setMap(map);
            super.setMap(map);
        }
        /**
         * Get the overlay layer that this interaction renders sketch features to.
         * @return {VectorLayer} Overlay layer.
         * @api
         */
        getOverlay() {
            return this.overlay_;
        }
        /**
         * @param {import("../source/Vector.js").VectorSourceEvent} event Event.
         * @private
         */
        handleSourceAdd_(event) {
            if (event.feature) {
                this.features_.push(event.feature);
            }
        }
        /**
         * @param {import("../source/Vector.js").VectorSourceEvent} event Event.
         * @private
         */
        handleSourceRemove_(event) {
            if (event.feature) {
                this.features_.remove(event.feature);
            }
        }
        /**
         * @param {import("../Collection.js").CollectionEvent} evt Event.
         * @private
         */
        handleFeatureAdd_(evt) {
            this.addFeature_(/** @type {Feature} */ (evt.element));
        }
        /**
         * @param {import("../events/Event.js").default} evt Event.
         * @private
         */
        handleFeatureChange_(evt) {
            if (!this.changingFeature_) {
                const feature = /** @type {Feature} */ (evt.target);
                this.removeFeature_(feature);
                this.addFeature_(feature);
            }
        }
        /**
         * @param {import("../Collection.js").CollectionEvent} evt Event.
         * @private
         */
        handleFeatureRemove_(evt) {
            const feature = /** @type {Feature} */ (evt.element);
            this.removeFeature_(feature);
        }
        /**
         * @param {Feature} feature Feature
         * @param {Point} geometry Geometry.
         * @private
         */
        writePointGeometry_(feature, geometry) {
            const coordinates = geometry.getCoordinates();
            /** @type {SegmentData} */
            const segmentData = {
                feature: feature,
                geometry: geometry,
                segment: [coordinates, coordinates],
            };
            this.rBush_.insert(geometry.getExtent(), segmentData);
        }
        /**
         * @param {Feature} feature Feature
         * @param {import("../geom/MultiPoint.js").default} geometry Geometry.
         * @private
         */
        writeMultiPointGeometry_(feature, geometry) {
            const points = geometry.getCoordinates();
            for (let i = 0, ii = points.length; i < ii; ++i) {
                const coordinates = points[i];
                /** @type {SegmentData} */
                const segmentData = {
                    feature: feature,
                    geometry: geometry,
                    depth: [i],
                    index: i,
                    segment: [coordinates, coordinates],
                };
                this.rBush_.insert(geometry.getExtent(), segmentData);
            }
        }
        /**
         * @param {Feature} feature Feature
         * @param {import("../geom/LineString.js").default} geometry Geometry.
         * @private
         */
        writeLineStringGeometry_(feature, geometry) {
            const coordinates = geometry.getCoordinates();
            for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {
                const segment = coordinates.slice(i, i + 2);
                /** @type {SegmentData} */
                const segmentData = {
                    feature: feature,
                    geometry: geometry,
                    index: i,
                    segment: segment,
                };
                this.rBush_.insert(extent_js_42.boundingExtent(segment), segmentData);
            }
        }
        /**
         * @param {Feature} feature Feature
         * @param {import("../geom/MultiLineString.js").default} geometry Geometry.
         * @private
         */
        writeMultiLineStringGeometry_(feature, geometry) {
            const lines = geometry.getCoordinates();
            for (let j = 0, jj = lines.length; j < jj; ++j) {
                const coordinates = lines[j];
                for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {
                    const segment = coordinates.slice(i, i + 2);
                    /** @type {SegmentData} */
                    const segmentData = {
                        feature: feature,
                        geometry: geometry,
                        depth: [j],
                        index: i,
                        segment: segment,
                    };
                    this.rBush_.insert(extent_js_42.boundingExtent(segment), segmentData);
                }
            }
        }
        /**
         * @param {Feature} feature Feature
         * @param {import("../geom/Polygon.js").default} geometry Geometry.
         * @private
         */
        writePolygonGeometry_(feature, geometry) {
            const rings = geometry.getCoordinates();
            for (let j = 0, jj = rings.length; j < jj; ++j) {
                const coordinates = rings[j];
                for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {
                    const segment = coordinates.slice(i, i + 2);
                    /** @type {SegmentData} */
                    const segmentData = {
                        feature: feature,
                        geometry: geometry,
                        depth: [j],
                        index: i,
                        segment: segment,
                    };
                    this.rBush_.insert(extent_js_42.boundingExtent(segment), segmentData);
                }
            }
        }
        /**
         * @param {Feature} feature Feature
         * @param {import("../geom/MultiPolygon.js").default} geometry Geometry.
         * @private
         */
        writeMultiPolygonGeometry_(feature, geometry) {
            const polygons = geometry.getCoordinates();
            for (let k = 0, kk = polygons.length; k < kk; ++k) {
                const rings = polygons[k];
                for (let j = 0, jj = rings.length; j < jj; ++j) {
                    const coordinates = rings[j];
                    for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {
                        const segment = coordinates.slice(i, i + 2);
                        /** @type {SegmentData} */
                        const segmentData = {
                            feature: feature,
                            geometry: geometry,
                            depth: [j, k],
                            index: i,
                            segment: segment,
                        };
                        this.rBush_.insert(extent_js_42.boundingExtent(segment), segmentData);
                    }
                }
            }
        }
        /**
         * We convert a circle into two segments.  The segment at index
         * {@link CIRCLE_CENTER_INDEX} is the
         * circle's center (a point).  The segment at index
         * {@link CIRCLE_CIRCUMFERENCE_INDEX} is
         * the circumference, and is not a line segment.
         *
         * @param {Feature} feature Feature.
         * @param {import("../geom/Circle.js").default} geometry Geometry.
         * @private
         */
        writeCircleGeometry_(feature, geometry) {
            const coordinates = geometry.getCenter();
            /** @type {SegmentData} */
            const centerSegmentData = {
                feature: feature,
                geometry: geometry,
                index: CIRCLE_CENTER_INDEX,
                segment: [coordinates, coordinates],
            };
            /** @type {SegmentData} */
            const circumferenceSegmentData = {
                feature: feature,
                geometry: geometry,
                index: CIRCLE_CIRCUMFERENCE_INDEX,
                segment: [coordinates, coordinates],
            };
            const featureSegments = [centerSegmentData, circumferenceSegmentData];
            centerSegmentData.featureSegments = featureSegments;
            circumferenceSegmentData.featureSegments = featureSegments;
            this.rBush_.insert(extent_js_42.createOrUpdateFromCoordinate(coordinates), centerSegmentData);
            let circleGeometry = /** @type {import("../geom/Geometry.js").default} */ (geometry);
            const userProjection = proj_js_16.getUserProjection();
            if (userProjection && this.getMap()) {
                const projection = this.getMap().getView().getProjection();
                circleGeometry = circleGeometry
                    .clone()
                    .transform(userProjection, projection);
                circleGeometry = Polygon_js_8.fromCircle(
                /** @type {import("../geom/Circle.js").default} */ (circleGeometry)).transform(projection, userProjection);
            }
            this.rBush_.insert(circleGeometry.getExtent(), circumferenceSegmentData);
        }
        /**
         * @param {Feature} feature Feature
         * @param {import("../geom/GeometryCollection.js").default} geometry Geometry.
         * @private
         */
        writeGeometryCollectionGeometry_(feature, geometry) {
            const geometries = geometry.getGeometriesArray();
            for (let i = 0; i < geometries.length; ++i) {
                const geometry = geometries[i];
                const writer = this.SEGMENT_WRITERS_[geometry.getType()];
                writer(feature, geometry);
            }
        }
        /**
         * @param {import("../coordinate.js").Coordinate} coordinates Coordinates.
         * @return {Feature} Vertex feature.
         * @private
         */
        createOrUpdateVertexFeature_(coordinates) {
            let vertexFeature = this.vertexFeature_;
            if (!vertexFeature) {
                vertexFeature = new Feature_js_3.default(new Point_js_5.default(coordinates));
                this.vertexFeature_ = vertexFeature;
                this.overlay_.getSource().addFeature(vertexFeature);
            }
            else {
                const geometry = vertexFeature.getGeometry();
                geometry.setCoordinates(coordinates);
            }
            return vertexFeature;
        }
        /**
         * Handles the {@link module:ol/MapBrowserEvent map browser event} and may modify the geometry.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
         * @return {boolean} `false` to stop event propagation.
         */
        handleEvent(mapBrowserEvent) {
            if (!mapBrowserEvent.originalEvent) {
                return true;
            }
            this.lastPointerEvent_ = mapBrowserEvent;
            let handled;
            if (!mapBrowserEvent.map.getView().getInteracting() &&
                mapBrowserEvent.type == MapBrowserEventType_js_8.default.POINTERMOVE &&
                !this.handlingDownUpSequence) {
                this.handlePointerMove_(mapBrowserEvent);
            }
            if (this.vertexFeature_ && this.deleteCondition_(mapBrowserEvent)) {
                if (mapBrowserEvent.type != MapBrowserEventType_js_8.default.SINGLECLICK ||
                    !this.ignoreNextSingleClick_) {
                    handled = this.removePoint();
                }
                else {
                    handled = true;
                }
            }
            if (mapBrowserEvent.type == MapBrowserEventType_js_8.default.SINGLECLICK) {
                this.ignoreNextSingleClick_ = false;
            }
            return super.handleEvent(mapBrowserEvent) && !handled;
        }
        /**
         * Handle pointer drag events.
         * @param {import("../MapBrowserEvent.js").default} evt Event.
         */
        handleDragEvent(evt) {
            this.ignoreNextSingleClick_ = false;
            this.willModifyFeatures_(evt);
            const vertex = evt.coordinate;
            for (let i = 0, ii = this.dragSegments_.length; i < ii; ++i) {
                const dragSegment = this.dragSegments_[i];
                const segmentData = dragSegment[0];
                const depth = segmentData.depth;
                const geometry = segmentData.geometry;
                let coordinates;
                const segment = segmentData.segment;
                const index = dragSegment[1];
                while (vertex.length < geometry.getStride()) {
                    vertex.push(segment[index][vertex.length]);
                }
                switch (geometry.getType()) {
                    case GeometryType_js_21.default.POINT:
                        coordinates = vertex;
                        segment[0] = vertex;
                        segment[1] = vertex;
                        break;
                    case GeometryType_js_21.default.MULTI_POINT:
                        coordinates = geometry.getCoordinates();
                        coordinates[segmentData.index] = vertex;
                        segment[0] = vertex;
                        segment[1] = vertex;
                        break;
                    case GeometryType_js_21.default.LINE_STRING:
                        coordinates = geometry.getCoordinates();
                        coordinates[segmentData.index + index] = vertex;
                        segment[index] = vertex;
                        break;
                    case GeometryType_js_21.default.MULTI_LINE_STRING:
                        coordinates = geometry.getCoordinates();
                        coordinates[depth[0]][segmentData.index + index] = vertex;
                        segment[index] = vertex;
                        break;
                    case GeometryType_js_21.default.POLYGON:
                        coordinates = geometry.getCoordinates();
                        coordinates[depth[0]][segmentData.index + index] = vertex;
                        segment[index] = vertex;
                        break;
                    case GeometryType_js_21.default.MULTI_POLYGON:
                        coordinates = geometry.getCoordinates();
                        coordinates[depth[1]][depth[0]][segmentData.index + index] = vertex;
                        segment[index] = vertex;
                        break;
                    case GeometryType_js_21.default.CIRCLE:
                        segment[0] = vertex;
                        segment[1] = vertex;
                        if (segmentData.index === CIRCLE_CENTER_INDEX) {
                            this.changingFeature_ = true;
                            geometry.setCenter(vertex);
                            this.changingFeature_ = false;
                        }
                        else {
                            // We're dragging the circle's circumference:
                            this.changingFeature_ = true;
                            const projection = evt.map.getView().getProjection();
                            let radius = coordinate_js_10.distance(proj_js_16.fromUserCoordinate(geometry.getCenter(), projection), proj_js_16.fromUserCoordinate(vertex, projection));
                            const userProjection = proj_js_16.getUserProjection();
                            if (userProjection) {
                                const circleGeometry = geometry
                                    .clone()
                                    .transform(userProjection, projection);
                                circleGeometry.setRadius(radius);
                                radius = circleGeometry
                                    .transform(projection, userProjection)
                                    .getRadius();
                            }
                            geometry.setRadius(radius);
                            this.changingFeature_ = false;
                        }
                        break;
                    default:
                    // pass
                }
                if (coordinates) {
                    this.setGeometryCoordinates_(geometry, coordinates);
                }
            }
            this.createOrUpdateVertexFeature_(vertex);
        }
        /**
         * Handle pointer down events.
         * @param {import("../MapBrowserEvent.js").default} evt Event.
         * @return {boolean} If the event was consumed.
         */
        handleDownEvent(evt) {
            if (!this.condition_(evt)) {
                return false;
            }
            const pixelCoordinate = evt.coordinate;
            this.handlePointerAtPixel_(evt.pixel, evt.map, pixelCoordinate);
            this.dragSegments_.length = 0;
            this.modified_ = false;
            const vertexFeature = this.vertexFeature_;
            if (vertexFeature) {
                const projection = evt.map.getView().getProjection();
                const insertVertices = [];
                const vertex = vertexFeature.getGeometry().getCoordinates();
                const vertexExtent = extent_js_42.boundingExtent([vertex]);
                const segmentDataMatches = this.rBush_.getInExtent(vertexExtent);
                const componentSegments = {};
                segmentDataMatches.sort(compareIndexes);
                for (let i = 0, ii = segmentDataMatches.length; i < ii; ++i) {
                    const segmentDataMatch = segmentDataMatches[i];
                    const segment = segmentDataMatch.segment;
                    let uid = util_js_23.getUid(segmentDataMatch.geometry);
                    const depth = segmentDataMatch.depth;
                    if (depth) {
                        uid += '-' + depth.join('-'); // separate feature components
                    }
                    if (!componentSegments[uid]) {
                        componentSegments[uid] = new Array(2);
                    }
                    if (segmentDataMatch.geometry.getType() === GeometryType_js_21.default.CIRCLE &&
                        segmentDataMatch.index === CIRCLE_CIRCUMFERENCE_INDEX) {
                        const closestVertex = closestOnSegmentData(pixelCoordinate, segmentDataMatch, projection);
                        if (coordinate_js_10.equals(closestVertex, vertex) &&
                            !componentSegments[uid][0]) {
                            this.dragSegments_.push([segmentDataMatch, 0]);
                            componentSegments[uid][0] = segmentDataMatch;
                        }
                        continue;
                    }
                    if (coordinate_js_10.equals(segment[0], vertex) &&
                        !componentSegments[uid][0]) {
                        this.dragSegments_.push([segmentDataMatch, 0]);
                        componentSegments[uid][0] = segmentDataMatch;
                        continue;
                    }
                    if (coordinate_js_10.equals(segment[1], vertex) &&
                        !componentSegments[uid][1]) {
                        // prevent dragging closed linestrings by the connecting node
                        if ((segmentDataMatch.geometry.getType() === GeometryType_js_21.default.LINE_STRING ||
                            segmentDataMatch.geometry.getType() ===
                                GeometryType_js_21.default.MULTI_LINE_STRING) &&
                            componentSegments[uid][0] &&
                            componentSegments[uid][0].index === 0) {
                            continue;
                        }
                        this.dragSegments_.push([segmentDataMatch, 1]);
                        componentSegments[uid][1] = segmentDataMatch;
                        continue;
                    }
                    if (util_js_23.getUid(segment) in this.vertexSegments_ &&
                        !componentSegments[uid][0] &&
                        !componentSegments[uid][1] &&
                        this.insertVertexCondition_(evt)) {
                        insertVertices.push([segmentDataMatch, vertex]);
                    }
                }
                if (insertVertices.length) {
                    this.willModifyFeatures_(evt);
                }
                for (let j = insertVertices.length - 1; j >= 0; --j) {
                    this.insertVertex_.apply(this, insertVertices[j]);
                }
            }
            return !!this.vertexFeature_;
        }
        /**
         * Handle pointer up events.
         * @param {import("../MapBrowserEvent.js").default} evt Event.
         * @return {boolean} If the event was consumed.
         */
        handleUpEvent(evt) {
            for (let i = this.dragSegments_.length - 1; i >= 0; --i) {
                const segmentData = this.dragSegments_[i][0];
                const geometry = segmentData.geometry;
                if (geometry.getType() === GeometryType_js_21.default.CIRCLE) {
                    // Update a circle object in the R* bush:
                    const coordinates = geometry.getCenter();
                    const centerSegmentData = segmentData.featureSegments[0];
                    const circumferenceSegmentData = segmentData.featureSegments[1];
                    centerSegmentData.segment[0] = coordinates;
                    centerSegmentData.segment[1] = coordinates;
                    circumferenceSegmentData.segment[0] = coordinates;
                    circumferenceSegmentData.segment[1] = coordinates;
                    this.rBush_.update(extent_js_42.createOrUpdateFromCoordinate(coordinates), centerSegmentData);
                    let circleGeometry = geometry;
                    const userProjection = proj_js_16.getUserProjection();
                    if (userProjection) {
                        const projection = evt.map.getView().getProjection();
                        circleGeometry = circleGeometry
                            .clone()
                            .transform(userProjection, projection);
                        circleGeometry = Polygon_js_8.fromCircle(circleGeometry).transform(projection, userProjection);
                    }
                    this.rBush_.update(circleGeometry.getExtent(), circumferenceSegmentData);
                }
                else {
                    this.rBush_.update(extent_js_42.boundingExtent(segmentData.segment), segmentData);
                }
            }
            if (this.modified_) {
                this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYEND, this.features_, evt));
                this.modified_ = false;
            }
            return false;
        }
        /**
         * @param {import("../MapBrowserEvent.js").default} evt Event.
         * @private
         */
        handlePointerMove_(evt) {
            this.lastPixel_ = evt.pixel;
            this.handlePointerAtPixel_(evt.pixel, evt.map, evt.coordinate);
        }
        /**
         * @param {import("../pixel.js").Pixel} pixel Pixel
         * @param {import("../PluggableMap.js").default} map Map.
         * @param {import("../coordinate.js").Coordinate=} opt_coordinate The pixel Coordinate.
         * @private
         */
        handlePointerAtPixel_(pixel, map, opt_coordinate) {
            const pixelCoordinate = opt_coordinate || map.getCoordinateFromPixel(pixel);
            const projection = map.getView().getProjection();
            const sortByDistance = function (a, b) {
                return (projectedDistanceToSegmentDataSquared(pixelCoordinate, a, projection) -
                    projectedDistanceToSegmentDataSquared(pixelCoordinate, b, projection));
            };
            const viewExtent = proj_js_16.fromUserExtent(extent_js_42.createOrUpdateFromCoordinate(pixelCoordinate, tempExtent), projection);
            const buffer = map.getView().getResolution() * this.pixelTolerance_;
            const box = proj_js_16.toUserExtent(extent_js_42.buffer(viewExtent, buffer, tempExtent), projection);
            const rBush = this.rBush_;
            const nodes = rBush.getInExtent(box);
            if (nodes.length > 0) {
                nodes.sort(sortByDistance);
                const node = nodes[0];
                const closestSegment = node.segment;
                let vertex = closestOnSegmentData(pixelCoordinate, node, projection);
                const vertexPixel = map.getPixelFromCoordinate(vertex);
                let dist = coordinate_js_10.distance(pixel, vertexPixel);
                if (dist <= this.pixelTolerance_) {
                    /** @type {Object<string, boolean>} */
                    const vertexSegments = {};
                    if (node.geometry.getType() === GeometryType_js_21.default.CIRCLE &&
                        node.index === CIRCLE_CIRCUMFERENCE_INDEX) {
                        this.snappedToVertex_ = true;
                        this.createOrUpdateVertexFeature_(vertex);
                    }
                    else {
                        const pixel1 = map.getPixelFromCoordinate(closestSegment[0]);
                        const pixel2 = map.getPixelFromCoordinate(closestSegment[1]);
                        const squaredDist1 = coordinate_js_10.squaredDistance(vertexPixel, pixel1);
                        const squaredDist2 = coordinate_js_10.squaredDistance(vertexPixel, pixel2);
                        dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));
                        this.snappedToVertex_ = dist <= this.pixelTolerance_;
                        if (this.snappedToVertex_) {
                            vertex =
                                squaredDist1 > squaredDist2
                                    ? closestSegment[1]
                                    : closestSegment[0];
                        }
                        this.createOrUpdateVertexFeature_(vertex);
                        for (let i = 1, ii = nodes.length; i < ii; ++i) {
                            const segment = nodes[i].segment;
                            if ((coordinate_js_10.equals(closestSegment[0], segment[0]) &&
                                coordinate_js_10.equals(closestSegment[1], segment[1])) ||
                                (coordinate_js_10.equals(closestSegment[0], segment[1]) &&
                                    coordinate_js_10.equals(closestSegment[1], segment[0]))) {
                                vertexSegments[util_js_23.getUid(segment)] = true;
                            }
                            else {
                                break;
                            }
                        }
                    }
                    vertexSegments[util_js_23.getUid(closestSegment)] = true;
                    this.vertexSegments_ = vertexSegments;
                    return;
                }
            }
            if (this.vertexFeature_) {
                this.overlay_.getSource().removeFeature(this.vertexFeature_);
                this.vertexFeature_ = null;
            }
        }
        /**
         * @param {SegmentData} segmentData Segment data.
         * @param {import("../coordinate.js").Coordinate} vertex Vertex.
         * @private
         */
        insertVertex_(segmentData, vertex) {
            const segment = segmentData.segment;
            const feature = segmentData.feature;
            const geometry = segmentData.geometry;
            const depth = segmentData.depth;
            const index = segmentData.index;
            let coordinates;
            while (vertex.length < geometry.getStride()) {
                vertex.push(0);
            }
            switch (geometry.getType()) {
                case GeometryType_js_21.default.MULTI_LINE_STRING:
                    coordinates = geometry.getCoordinates();
                    coordinates[depth[0]].splice(index + 1, 0, vertex);
                    break;
                case GeometryType_js_21.default.POLYGON:
                    coordinates = geometry.getCoordinates();
                    coordinates[depth[0]].splice(index + 1, 0, vertex);
                    break;
                case GeometryType_js_21.default.MULTI_POLYGON:
                    coordinates = geometry.getCoordinates();
                    coordinates[depth[1]][depth[0]].splice(index + 1, 0, vertex);
                    break;
                case GeometryType_js_21.default.LINE_STRING:
                    coordinates = geometry.getCoordinates();
                    coordinates.splice(index + 1, 0, vertex);
                    break;
                default:
                    return;
            }
            this.setGeometryCoordinates_(geometry, coordinates);
            const rTree = this.rBush_;
            rTree.remove(segmentData);
            this.updateSegmentIndices_(geometry, index, depth, 1);
            /** @type {SegmentData} */
            const newSegmentData = {
                segment: [segment[0], vertex],
                feature: feature,
                geometry: geometry,
                depth: depth,
                index: index,
            };
            rTree.insert(extent_js_42.boundingExtent(newSegmentData.segment), newSegmentData);
            this.dragSegments_.push([newSegmentData, 1]);
            /** @type {SegmentData} */
            const newSegmentData2 = {
                segment: [vertex, segment[1]],
                feature: feature,
                geometry: geometry,
                depth: depth,
                index: index + 1,
            };
            rTree.insert(extent_js_42.boundingExtent(newSegmentData2.segment), newSegmentData2);
            this.dragSegments_.push([newSegmentData2, 0]);
            this.ignoreNextSingleClick_ = true;
        }
        /**
         * Removes the vertex currently being pointed.
         * @return {boolean} True when a vertex was removed.
         * @api
         */
        removePoint() {
            if (this.lastPointerEvent_ &&
                this.lastPointerEvent_.type != MapBrowserEventType_js_8.default.POINTERDRAG) {
                const evt = this.lastPointerEvent_;
                this.willModifyFeatures_(evt);
                const removed = this.removeVertex_();
                this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYEND, this.features_, evt));
                this.modified_ = false;
                return removed;
            }
            return false;
        }
        /**
         * Removes a vertex from all matching features.
         * @return {boolean} True when a vertex was removed.
         * @private
         */
        removeVertex_() {
            const dragSegments = this.dragSegments_;
            const segmentsByFeature = {};
            let deleted = false;
            let component, coordinates, dragSegment, geometry, i, index, left;
            let newIndex, right, segmentData, uid;
            for (i = dragSegments.length - 1; i >= 0; --i) {
                dragSegment = dragSegments[i];
                segmentData = dragSegment[0];
                uid = util_js_23.getUid(segmentData.feature);
                if (segmentData.depth) {
                    // separate feature components
                    uid += '-' + segmentData.depth.join('-');
                }
                if (!(uid in segmentsByFeature)) {
                    segmentsByFeature[uid] = {};
                }
                if (dragSegment[1] === 0) {
                    segmentsByFeature[uid].right = segmentData;
                    segmentsByFeature[uid].index = segmentData.index;
                }
                else if (dragSegment[1] == 1) {
                    segmentsByFeature[uid].left = segmentData;
                    segmentsByFeature[uid].index = segmentData.index + 1;
                }
            }
            for (uid in segmentsByFeature) {
                right = segmentsByFeature[uid].right;
                left = segmentsByFeature[uid].left;
                index = segmentsByFeature[uid].index;
                newIndex = index - 1;
                if (left !== undefined) {
                    segmentData = left;
                }
                else {
                    segmentData = right;
                }
                if (newIndex < 0) {
                    newIndex = 0;
                }
                geometry = segmentData.geometry;
                coordinates = geometry.getCoordinates();
                component = coordinates;
                deleted = false;
                switch (geometry.getType()) {
                    case GeometryType_js_21.default.MULTI_LINE_STRING:
                        if (coordinates[segmentData.depth[0]].length > 2) {
                            coordinates[segmentData.depth[0]].splice(index, 1);
                            deleted = true;
                        }
                        break;
                    case GeometryType_js_21.default.LINE_STRING:
                        if (coordinates.length > 2) {
                            coordinates.splice(index, 1);
                            deleted = true;
                        }
                        break;
                    case GeometryType_js_21.default.MULTI_POLYGON:
                        component = component[segmentData.depth[1]];
                    /* falls through */
                    case GeometryType_js_21.default.POLYGON:
                        component = component[segmentData.depth[0]];
                        if (component.length > 4) {
                            if (index == component.length - 1) {
                                index = 0;
                            }
                            component.splice(index, 1);
                            deleted = true;
                            if (index === 0) {
                                // close the ring again
                                component.pop();
                                component.push(component[0]);
                                newIndex = component.length - 1;
                            }
                        }
                        break;
                    default:
                    // pass
                }
                if (deleted) {
                    this.setGeometryCoordinates_(geometry, coordinates);
                    const segments = [];
                    if (left !== undefined) {
                        this.rBush_.remove(left);
                        segments.push(left.segment[0]);
                    }
                    if (right !== undefined) {
                        this.rBush_.remove(right);
                        segments.push(right.segment[1]);
                    }
                    if (left !== undefined && right !== undefined) {
                        /** @type {SegmentData} */
                        const newSegmentData = {
                            depth: segmentData.depth,
                            feature: segmentData.feature,
                            geometry: segmentData.geometry,
                            index: newIndex,
                            segment: segments,
                        };
                        this.rBush_.insert(extent_js_42.boundingExtent(newSegmentData.segment), newSegmentData);
                    }
                    this.updateSegmentIndices_(geometry, index, segmentData.depth, -1);
                    if (this.vertexFeature_) {
                        this.overlay_.getSource().removeFeature(this.vertexFeature_);
                        this.vertexFeature_ = null;
                    }
                    dragSegments.length = 0;
                }
            }
            return deleted;
        }
        /**
         * @param {import("../geom/SimpleGeometry.js").default} geometry Geometry.
         * @param {Array} coordinates Coordinates.
         * @private
         */
        setGeometryCoordinates_(geometry, coordinates) {
            this.changingFeature_ = true;
            geometry.setCoordinates(coordinates);
            this.changingFeature_ = false;
        }
        /**
         * @param {import("../geom/SimpleGeometry.js").default} geometry Geometry.
         * @param {number} index Index.
         * @param {Array<number>|undefined} depth Depth.
         * @param {number} delta Delta (1 or -1).
         * @private
         */
        updateSegmentIndices_(geometry, index, depth, delta) {
            this.rBush_.forEachInExtent(geometry.getExtent(), function (segmentDataMatch) {
                if (segmentDataMatch.geometry === geometry &&
                    (depth === undefined ||
                        segmentDataMatch.depth === undefined ||
                        array_js_21.equals(segmentDataMatch.depth, depth)) &&
                    segmentDataMatch.index > index) {
                    segmentDataMatch.index += delta;
                }
            });
        }
    }
    /**
     * @param {SegmentData} a The first segment data.
     * @param {SegmentData} b The second segment data.
     * @return {number} The difference in indexes.
     */
    function compareIndexes(a, b) {
        return a.index - b.index;
    }
    /**
     * Returns the distance from a point to a line segment.
     *
     * @param {import("../coordinate.js").Coordinate} pointCoordinates The coordinates of the point from
     *        which to calculate the distance.
     * @param {SegmentData} segmentData The object describing the line
     *        segment we are calculating the distance to.
     * @param {import("../proj/Projection.js").default} projection The view projection.
     * @return {number} The square of the distance between a point and a line segment.
     */
    function projectedDistanceToSegmentDataSquared(pointCoordinates, segmentData, projection) {
        const geometry = segmentData.geometry;
        if (geometry.getType() === GeometryType_js_21.default.CIRCLE) {
            let circleGeometry = /** @type {import("../geom/Circle.js").default} */ (geometry);
            if (segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX) {
                const userProjection = proj_js_16.getUserProjection();
                if (userProjection) {
                    circleGeometry = /** @type {import("../geom/Circle.js").default} */ (circleGeometry
                        .clone()
                        .transform(userProjection, projection));
                }
                const distanceToCenterSquared = coordinate_js_10.squaredDistance(circleGeometry.getCenter(), proj_js_16.fromUserCoordinate(pointCoordinates, projection));
                const distanceToCircumference = Math.sqrt(distanceToCenterSquared) - circleGeometry.getRadius();
                return distanceToCircumference * distanceToCircumference;
            }
        }
        const coordinate = proj_js_16.fromUserCoordinate(pointCoordinates, projection);
        tempSegment[0] = proj_js_16.fromUserCoordinate(segmentData.segment[0], projection);
        tempSegment[1] = proj_js_16.fromUserCoordinate(segmentData.segment[1], projection);
        return coordinate_js_10.squaredDistanceToSegment(coordinate, tempSegment);
    }
    /**
     * Returns the point closest to a given line segment.
     *
     * @param {import("../coordinate.js").Coordinate} pointCoordinates The point to which a closest point
     *        should be found.
     * @param {SegmentData} segmentData The object describing the line
     *        segment which should contain the closest point.
     * @param {import("../proj/Projection.js").default} projection The view projection.
     * @return {import("../coordinate.js").Coordinate} The point closest to the specified line segment.
     */
    function closestOnSegmentData(pointCoordinates, segmentData, projection) {
        const geometry = segmentData.geometry;
        if (geometry.getType() === GeometryType_js_21.default.CIRCLE &&
            segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX) {
            let circleGeometry = /** @type {import("../geom/Circle.js").default} */ (geometry);
            const userProjection = proj_js_16.getUserProjection();
            if (userProjection) {
                circleGeometry = /** @type {import("../geom/Circle.js").default} */ (circleGeometry
                    .clone()
                    .transform(userProjection, projection));
            }
            return proj_js_16.toUserCoordinate(circleGeometry.getClosestPoint(proj_js_16.fromUserCoordinate(pointCoordinates, projection)), projection);
        }
        const coordinate = proj_js_16.fromUserCoordinate(pointCoordinates, projection);
        tempSegment[0] = proj_js_16.fromUserCoordinate(segmentData.segment[0], projection);
        tempSegment[1] = proj_js_16.fromUserCoordinate(segmentData.segment[1], projection);
        return proj_js_16.toUserCoordinate(coordinate_js_10.closestOnSegment(coordinate, tempSegment), projection);
    }
    /**
     * @return {import("../style/Style.js").StyleFunction} Styles.
     */
    function getDefaultStyleFunction() {
        const style = Style_js_5.createEditingStyle();
        return function (feature, resolution) {
            return style[GeometryType_js_21.default.POINT];
        };
    }
    exports.default = Modify;
});
define("node_modules/ol/src/interaction/Select", ["require", "exports", "node_modules/ol/src/Collection", "node_modules/ol/src/CollectionEventType", "node_modules/ol/src/events/Event", "node_modules/ol/src/geom/GeometryType", "node_modules/ol/src/interaction/Interaction", "node_modules/ol/src/functions", "node_modules/ol/src/obj", "node_modules/ol/src/style/Style", "node_modules/ol/src/array", "node_modules/ol/src/util", "node_modules/ol/src/events/condition"], function (require, exports, Collection_js_6, CollectionEventType_js_6, Event_js_16, GeometryType_js_22, Interaction_js_7, functions_js_16, obj_js_17, Style_js_6, array_js_22, util_js_24, condition_js_12) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @enum {string}
     */
    const SelectEventType = {
        /**
         * Triggered when feature(s) has been (de)selected.
         * @event SelectEvent#select
         * @api
         */
        SELECT: 'select',
    };
    /**
     * A function that takes an {@link module:ol/Feature} or
     * {@link module:ol/render/Feature} and an
     * {@link module:ol/layer/Layer} and returns `true` if the feature may be
     * selected or `false` otherwise.
     * @typedef {function(import("../Feature.js").FeatureLike, import("../layer/Layer.js").default):boolean} FilterFunction
     */
    /**
     * @typedef {Object} Options
     * @property {import("../events/condition.js").Condition} [addCondition] A function
     * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
     * boolean to indicate whether that event should be handled.
     * By default, this is {@link module:ol/events/condition~never}. Use this if you
     * want to use different events for add and remove instead of `toggle`.
     * @property {import("../events/condition.js").Condition} [condition] A function that
     * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
     * boolean to indicate whether that event should be handled. This is the event
     * for the selected features as a whole. By default, this is
     * {@link module:ol/events/condition~singleClick}. Clicking on a feature selects that
     * feature and removes any that were in the selection. Clicking outside any
     * feature removes all from the selection.
     * See `toggle`, `add`, `remove` options for adding/removing extra features to/
     * from the selection.
     * @property {Array<import("../layer/Layer.js").default>|function(import("../layer/Layer.js").default): boolean} [layers]
     * A list of layers from which features should be selected. Alternatively, a
     * filter function can be provided. The function will be called for each layer
     * in the map and should return `true` for layers that you want to be
     * selectable. If the option is absent, all visible layers will be considered
     * selectable.
     * @property {import("../style/Style.js").StyleLike|null} [style]
     * Style for the selected features. By default the default edit style is used
     * (see {@link module:ol/style}). Set to `null` if this interaction should not apply
     * any style changes for selected features.
     * If set to a falsey value, the selected feature's style will not change.
     * @property {import("../events/condition.js").Condition} [removeCondition] A function
     * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
     * boolean to indicate whether that event should be handled.
     * By default, this is {@link module:ol/events/condition~never}. Use this if you
     * want to use different events for add and remove instead of `toggle`.
     * @property {import("../events/condition.js").Condition} [toggleCondition] A function
     * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a
     * boolean to indicate whether that event should be handled. This is in addition
     * to the `condition` event. By default,
     * {@link module:ol/events/condition~shiftKeyOnly}, i.e. pressing `shift` as
     * well as the `condition` event, adds that feature to the current selection if
     * it is not currently selected, and removes it if it is. See `add` and `remove`
     * if you want to use different events instead of a toggle.
     * @property {boolean} [multi=false] A boolean that determines if the default
     * behaviour should select only single features or all (overlapping) features at
     * the clicked map position. The default of `false` means single select.
     * @property {import("../Collection.js").default<import("../Feature.js").default>} [features]
     * Collection where the interaction will place selected features. Optional. If
     * not set the interaction will create a collection. In any case the collection
     * used by the interaction is returned by
     * {@link module:ol/interaction/Select~Select#getFeatures}.
     * @property {FilterFunction} [filter] A function
     * that takes an {@link module:ol/Feature} and an
     * {@link module:ol/layer/Layer} and returns `true` if the feature may be
     * selected or `false` otherwise.
     * @property {number} [hitTolerance=0] Hit-detection tolerance. Pixels inside
     * the radius around the given position will be checked for features.
     */
    /**
     * @classdesc
     * Events emitted by {@link module:ol/interaction/Select~Select} instances are instances of
     * this type.
     */
    class SelectEvent extends Event_js_16.default {
        /**
         * @param {SelectEventType} type The event type.
         * @param {Array<import("../Feature.js").default>} selected Selected features.
         * @param {Array<import("../Feature.js").default>} deselected Deselected features.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Associated
         *     {@link module:ol/MapBrowserEvent}.
         */
        constructor(type, selected, deselected, mapBrowserEvent) {
            super(type);
            /**
             * Selected features array.
             * @type {Array<import("../Feature.js").default>}
             * @api
             */
            this.selected = selected;
            /**
             * Deselected features array.
             * @type {Array<import("../Feature.js").default>}
             * @api
             */
            this.deselected = deselected;
            /**
             * Associated {@link module:ol/MapBrowserEvent}.
             * @type {import("../MapBrowserEvent.js").default}
             * @api
             */
            this.mapBrowserEvent = mapBrowserEvent;
        }
    }
    /**
     * Original feature styles to reset to when features are no longer selected.
     * @type {Object.<number, import("../style/Style.js").default|Array.<import("../style/Style.js").default>|import("../style/Style.js").StyleFunction>}
     */
    const originalFeatureStyles = {};
    /**
     * @classdesc
     * Interaction for selecting vector features. By default, selected features are
     * styled differently, so this interaction can be used for visual highlighting,
     * as well as selecting features for other actions, such as modification or
     * output. There are three ways of controlling which features are selected:
     * using the browser event as defined by the `condition` and optionally the
     * `toggle`, `add`/`remove`, and `multi` options; a `layers` filter; and a
     * further feature filter using the `filter` option.
     *
     * Selected features are added to an internal unmanaged layer.
     *
     * @fires SelectEvent
     * @api
     */
    class Select extends Interaction_js_7.default {
        /**
         * @param {Options=} opt_options Options.
         */
        constructor(opt_options) {
            super();
            const options = opt_options ? opt_options : {};
            /**
             * @private
             */
            this.boundAddFeature_ = this.addFeature_.bind(this);
            /**
             * @private
             */
            this.boundRemoveFeature_ = this.removeFeature_.bind(this);
            /**
             * @private
             * @type {import("../events/condition.js").Condition}
             */
            this.condition_ = options.condition ? options.condition : condition_js_12.singleClick;
            /**
             * @private
             * @type {import("../events/condition.js").Condition}
             */
            this.addCondition_ = options.addCondition ? options.addCondition : condition_js_12.never;
            /**
             * @private
             * @type {import("../events/condition.js").Condition}
             */
            this.removeCondition_ = options.removeCondition
                ? options.removeCondition
                : condition_js_12.never;
            /**
             * @private
             * @type {import("../events/condition.js").Condition}
             */
            this.toggleCondition_ = options.toggleCondition
                ? options.toggleCondition
                : condition_js_12.shiftKeyOnly;
            /**
             * @private
             * @type {boolean}
             */
            this.multi_ = options.multi ? options.multi : false;
            /**
             * @private
             * @type {FilterFunction}
             */
            this.filter_ = options.filter ? options.filter : functions_js_16.TRUE;
            /**
             * @private
             * @type {number}
             */
            this.hitTolerance_ = options.hitTolerance ? options.hitTolerance : 0;
            /**
             * @private
             * @type {import("../style/Style.js").default|Array.<import("../style/Style.js").default>|import("../style/Style.js").StyleFunction|null}
             */
            this.style_ =
                options.style !== undefined ? options.style : getDefaultStyleFunction();
            /**
             * @private
             * @type {import("../Collection.js").default}
             */
            this.features_ = options.features || new Collection_js_6.default();
            /** @type {function(import("../layer/Layer.js").default): boolean} */
            let layerFilter;
            if (options.layers) {
                if (typeof options.layers === 'function') {
                    layerFilter = options.layers;
                }
                else {
                    const layers = options.layers;
                    layerFilter = function (layer) {
                        return array_js_22.includes(layers, layer);
                    };
                }
            }
            else {
                layerFilter = functions_js_16.TRUE;
            }
            /**
             * @private
             * @type {function(import("../layer/Layer.js").default): boolean}
             */
            this.layerFilter_ = layerFilter;
            /**
             * An association between selected feature (key)
             * and layer (value)
             * @private
             * @type {Object<string, import("../layer/Layer.js").default>}
             */
            this.featureLayerAssociation_ = {};
        }
        /**
         * @param {import("../Feature.js").FeatureLike} feature Feature.
         * @param {import("../layer/Layer.js").default} layer Layer.
         * @private
         */
        addFeatureLayerAssociation_(feature, layer) {
            this.featureLayerAssociation_[util_js_24.getUid(feature)] = layer;
        }
        /**
         * Get the selected features.
         * @return {import("../Collection.js").default<import("../Feature.js").default>} Features collection.
         * @api
         */
        getFeatures() {
            return this.features_;
        }
        /**
         * Returns the Hit-detection tolerance.
         * @returns {number} Hit tolerance in pixels.
         * @api
         */
        getHitTolerance() {
            return this.hitTolerance_;
        }
        /**
         * Returns the associated {@link module:ol/layer/Vector~Vector vectorlayer} of
         * the (last) selected feature. Note that this will not work with any
         * programmatic method like pushing features to
         * {@link module:ol/interaction/Select~Select#getFeatures collection}.
         * @param {import("../Feature.js").FeatureLike} feature Feature
         * @return {import('../layer/Vector.js').default} Layer.
         * @api
         */
        getLayer(feature) {
            return /** @type {import('../layer/Vector.js').default} */ (this
                .featureLayerAssociation_[util_js_24.getUid(feature)]);
        }
        /**
         * Hit-detection tolerance. Pixels inside the radius around the given position
         * will be checked for features.
         * @param {number} hitTolerance Hit tolerance in pixels.
         * @api
         */
        setHitTolerance(hitTolerance) {
            this.hitTolerance_ = hitTolerance;
        }
        /**
         * Remove the interaction from its current map, if any,  and attach it to a new
         * map, if any. Pass `null` to just remove the interaction from the current map.
         * @param {import("../PluggableMap.js").default} map Map.
         * @api
         */
        setMap(map) {
            const currentMap = this.getMap();
            if (currentMap && this.style_) {
                this.features_.forEach(this.restorePreviousStyle_.bind(this));
            }
            super.setMap(map);
            if (map) {
                this.features_.addEventListener(CollectionEventType_js_6.default.ADD, this.boundAddFeature_);
                this.features_.addEventListener(CollectionEventType_js_6.default.REMOVE, this.boundRemoveFeature_);
                if (this.style_) {
                    this.features_.forEach(this.applySelectedStyle_.bind(this));
                }
            }
            else {
                this.features_.removeEventListener(CollectionEventType_js_6.default.ADD, this.boundAddFeature_);
                this.features_.removeEventListener(CollectionEventType_js_6.default.REMOVE, this.boundRemoveFeature_);
            }
        }
        /**
         * @param {import("../Collection.js").CollectionEvent} evt Event.
         * @private
         */
        addFeature_(evt) {
            const feature = evt.element;
            if (this.style_) {
                this.applySelectedStyle_(feature);
            }
        }
        /**
         * @param {import("../Collection.js").CollectionEvent} evt Event.
         * @private
         */
        removeFeature_(evt) {
            const feature = evt.element;
            if (this.style_) {
                this.restorePreviousStyle_(feature);
            }
        }
        /**
         * @return {import("../style/Style.js").StyleLike|null} Select style.
         */
        getStyle() {
            return this.style_;
        }
        /**
         * @param {import("../Feature.js").default} feature Feature
         * @private
         */
        applySelectedStyle_(feature) {
            const key = util_js_24.getUid(feature);
            if (!(key in originalFeatureStyles)) {
                originalFeatureStyles[key] = feature.getStyle();
            }
            feature.setStyle(this.style_);
        }
        /**
         * @param {import("../Feature.js").default} feature Feature
         * @private
         */
        restorePreviousStyle_(feature) {
            const key = util_js_24.getUid(feature);
            const selectInteractions = /** @type {Array<Select>} */ (this.getMap()
                .getInteractions()
                .getArray()
                .filter(function (interaction) {
                return (interaction instanceof Select &&
                    interaction.getStyle() &&
                    interaction.getFeatures().getArray().indexOf(feature) !== -1);
            }));
            if (selectInteractions.length > 0) {
                feature.setStyle(selectInteractions[selectInteractions.length - 1].getStyle());
            }
            else {
                feature.setStyle(originalFeatureStyles[key]);
                delete originalFeatureStyles[key];
            }
        }
        /**
         * @param {import("../Feature.js").FeatureLike} feature Feature.
         * @private
         */
        removeFeatureLayerAssociation_(feature) {
            delete this.featureLayerAssociation_[util_js_24.getUid(feature)];
        }
        /**
         * Handles the {@link module:ol/MapBrowserEvent map browser event} and may change the
         * selected state of features.
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
         * @return {boolean} `false` to stop event propagation.
         * @this {Select}
         */
        handleEvent(mapBrowserEvent) {
            if (!this.condition_(mapBrowserEvent)) {
                return true;
            }
            const add = this.addCondition_(mapBrowserEvent);
            const remove = this.removeCondition_(mapBrowserEvent);
            const toggle = this.toggleCondition_(mapBrowserEvent);
            const set = !add && !remove && !toggle;
            const map = mapBrowserEvent.map;
            const features = this.getFeatures();
            const deselected = [];
            const selected = [];
            if (set) {
                // Replace the currently selected feature(s) with the feature(s) at the
                // pixel, or clear the selected feature(s) if there is no feature at
                // the pixel.
                obj_js_17.clear(this.featureLayerAssociation_);
                map.forEachFeatureAtPixel(mapBrowserEvent.pixel, 
                /**
                 * @param {import("../Feature.js").FeatureLike} feature Feature.
                 * @param {import("../layer/Layer.js").default} layer Layer.
                 * @return {boolean|undefined} Continue to iterate over the features.
                 */
                function (feature, layer) {
                    if (this.filter_(feature, layer)) {
                        selected.push(feature);
                        this.addFeatureLayerAssociation_(feature, layer);
                        return !this.multi_;
                    }
                }.bind(this), {
                    layerFilter: this.layerFilter_,
                    hitTolerance: this.hitTolerance_,
                });
                for (let i = features.getLength() - 1; i >= 0; --i) {
                    const feature = features.item(i);
                    const index = selected.indexOf(feature);
                    if (index > -1) {
                        // feature is already selected
                        selected.splice(index, 1);
                    }
                    else {
                        features.remove(feature);
                        deselected.push(feature);
                    }
                }
                if (selected.length !== 0) {
                    features.extend(selected);
                }
            }
            else {
                // Modify the currently selected feature(s).
                map.forEachFeatureAtPixel(mapBrowserEvent.pixel, 
                /**
                 * @param {import("../Feature.js").FeatureLike} feature Feature.
                 * @param {import("../layer/Layer.js").default} layer Layer.
                 * @return {boolean|undefined} Continue to iterate over the features.
                 */
                function (feature, layer) {
                    if (this.filter_(feature, layer)) {
                        if ((add || toggle) && !array_js_22.includes(features.getArray(), feature)) {
                            selected.push(feature);
                            this.addFeatureLayerAssociation_(feature, layer);
                        }
                        else if ((remove || toggle) &&
                            array_js_22.includes(features.getArray(), feature)) {
                            deselected.push(feature);
                            this.removeFeatureLayerAssociation_(feature);
                        }
                        return !this.multi_;
                    }
                }.bind(this), {
                    layerFilter: this.layerFilter_,
                    hitTolerance: this.hitTolerance_,
                });
                for (let j = deselected.length - 1; j >= 0; --j) {
                    features.remove(deselected[j]);
                }
                features.extend(selected);
            }
            if (selected.length > 0 || deselected.length > 0) {
                this.dispatchEvent(new SelectEvent(SelectEventType.SELECT, selected, deselected, mapBrowserEvent));
            }
            return true;
        }
    }
    /**
     * @return {import("../style/Style.js").StyleFunction} Styles.
     */
    function getDefaultStyleFunction() {
        const styles = Style_js_6.createEditingStyle();
        array_js_22.extend(styles[GeometryType_js_22.default.POLYGON], styles[GeometryType_js_22.default.LINE_STRING]);
        array_js_22.extend(styles[GeometryType_js_22.default.GEOMETRY_COLLECTION], styles[GeometryType_js_22.default.LINE_STRING]);
        return function (feature) {
            if (!feature.getGeometry()) {
                return null;
            }
            return styles[feature.getGeometry().getType()];
        };
    }
    exports.default = Select;
});
define("node_modules/ol/src/interaction/Snap", ["require", "exports", "node_modules/ol/src/CollectionEventType", "node_modules/ol/src/events/EventType", "node_modules/ol/src/geom/GeometryType", "node_modules/ol/src/interaction/Pointer", "node_modules/ol/src/structs/RBush", "node_modules/ol/src/source/VectorEventType", "node_modules/ol/src/functions", "node_modules/ol/src/extent", "node_modules/ol/src/coordinate", "node_modules/ol/src/geom/Polygon", "node_modules/ol/src/proj", "node_modules/ol/src/util", "node_modules/ol/src/obj", "node_modules/ol/src/events"], function (require, exports, CollectionEventType_js_7, EventType_js_39, GeometryType_js_23, Pointer_js_10, RBush_js_3, VectorEventType_js_3, functions_js_17, extent_js_43, coordinate_js_11, Polygon_js_9, proj_js_17, util_js_25, obj_js_18, events_js_18) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @typedef {Object} Result
     * @property {boolean} snapped
     * @property {import("../coordinate.js").Coordinate|null} vertex
     * @property {import("../pixel.js").Pixel|null} vertexPixel
     */
    /**
     * @typedef {Object} SegmentData
     * @property {import("../Feature.js").default} feature
     * @property {Array<import("../coordinate.js").Coordinate>} segment
     */
    /**
     * @typedef {Object} Options
     * @property {import("../Collection.js").default<import("../Feature.js").default>} [features] Snap to these features. Either this option or source should be provided.
     * @property {boolean} [edge=true] Snap to edges.
     * @property {boolean} [vertex=true] Snap to vertices.
     * @property {number} [pixelTolerance=10] Pixel tolerance for considering the pointer close enough to a segment or
     * vertex for snapping.
     * @property {import("../source/Vector.js").default} [source] Snap to features from this source. Either this option or features should be provided
     */
    /**
     * @param  {import("../source/Vector.js").VectorSourceEvent|import("../Collection.js").CollectionEvent} evt Event.
     * @return {import("../Feature.js").default} Feature.
     */
    function getFeatureFromEvent(evt) {
        if (
        /** @type {import("../source/Vector.js").VectorSourceEvent} */ (evt).feature) {
            return /** @type {import("../source/Vector.js").VectorSourceEvent} */ (evt)
                .feature;
        }
        else if (
        /** @type {import("../Collection.js").CollectionEvent} */ (evt).element) {
            return /** @type {import("../Feature.js").default} */ (
            /** @type {import("../Collection.js").CollectionEvent} */ (evt).element);
        }
    }
    const tempSegment = [];
    /**
     * @classdesc
     * Handles snapping of vector features while modifying or drawing them.  The
     * features can come from a {@link module:ol/source/Vector} or {@link module:ol/Collection~Collection}
     * Any interaction object that allows the user to interact
     * with the features using the mouse can benefit from the snapping, as long
     * as it is added before.
     *
     * The snap interaction modifies map browser event `coordinate` and `pixel`
     * properties to force the snap to occur to any interaction that them.
     *
     * Example:
     *
     *     import Snap from 'ol/interaction/Snap';
     *
     *     const snap = new Snap({
     *       source: source
     *     });
     *
     *     map.addInteraction(snap);
     *
     * @api
     */
    class Snap extends Pointer_js_10.default {
        /**
         * @param {Options=} opt_options Options.
         */
        constructor(opt_options) {
            const options = opt_options ? opt_options : {};
            const pointerOptions = /** @type {import("./Pointer.js").Options} */ (options);
            if (!pointerOptions.handleDownEvent) {
                pointerOptions.handleDownEvent = functions_js_17.TRUE;
            }
            if (!pointerOptions.stopDown) {
                pointerOptions.stopDown = functions_js_17.FALSE;
            }
            super(pointerOptions);
            /**
             * @type {import("../source/Vector.js").default}
             * @private
             */
            this.source_ = options.source ? options.source : null;
            /**
             * @private
             * @type {boolean}
             */
            this.vertex_ = options.vertex !== undefined ? options.vertex : true;
            /**
             * @private
             * @type {boolean}
             */
            this.edge_ = options.edge !== undefined ? options.edge : true;
            /**
             * @type {import("../Collection.js").default<import("../Feature.js").default>}
             * @private
             */
            this.features_ = options.features ? options.features : null;
            /**
             * @type {Array<import("../events.js").EventsKey>}
             * @private
             */
            this.featuresListenerKeys_ = [];
            /**
             * @type {Object<string, import("../events.js").EventsKey>}
             * @private
             */
            this.featureChangeListenerKeys_ = {};
            /**
             * Extents are preserved so indexed segment can be quickly removed
             * when its feature geometry changes
             * @type {Object<string, import("../extent.js").Extent>}
             * @private
             */
            this.indexedFeaturesExtents_ = {};
            /**
             * If a feature geometry changes while a pointer drag|move event occurs, the
             * feature doesn't get updated right away.  It will be at the next 'pointerup'
             * event fired.
             * @type {!Object<string, import("../Feature.js").default>}
             * @private
             */
            this.pendingFeatures_ = {};
            /**
             * @type {number}
             * @private
             */
            this.pixelTolerance_ =
                options.pixelTolerance !== undefined ? options.pixelTolerance : 10;
            /**
             * Segment RTree for each layer
             * @type {import("../structs/RBush.js").default<SegmentData>}
             * @private
             */
            this.rBush_ = new RBush_js_3.default();
            /**
             * @const
             * @private
             * @type {Object<string, function(import("../Feature.js").default, import("../geom/Geometry.js").default): void>}
             */
            this.SEGMENT_WRITERS_ = {
                'Point': this.writePointGeometry_.bind(this),
                'LineString': this.writeLineStringGeometry_.bind(this),
                'LinearRing': this.writeLineStringGeometry_.bind(this),
                'Polygon': this.writePolygonGeometry_.bind(this),
                'MultiPoint': this.writeMultiPointGeometry_.bind(this),
                'MultiLineString': this.writeMultiLineStringGeometry_.bind(this),
                'MultiPolygon': this.writeMultiPolygonGeometry_.bind(this),
                'GeometryCollection': this.writeGeometryCollectionGeometry_.bind(this),
                'Circle': this.writeCircleGeometry_.bind(this),
            };
        }
        /**
         * Add a feature to the collection of features that we may snap to.
         * @param {import("../Feature.js").default} feature Feature.
         * @param {boolean=} opt_listen Whether to listen to the feature change or not
         *     Defaults to `true`.
         * @api
         */
        addFeature(feature, opt_listen) {
            const register = opt_listen !== undefined ? opt_listen : true;
            const feature_uid = util_js_25.getUid(feature);
            const geometry = feature.getGeometry();
            if (geometry) {
                const segmentWriter = this.SEGMENT_WRITERS_[geometry.getType()];
                if (segmentWriter) {
                    this.indexedFeaturesExtents_[feature_uid] = geometry.getExtent(extent_js_43.createEmpty());
                    segmentWriter(feature, geometry);
                }
            }
            if (register) {
                this.featureChangeListenerKeys_[feature_uid] = events_js_18.listen(feature, EventType_js_39.default.CHANGE, this.handleFeatureChange_, this);
            }
        }
        /**
         * @param {import("../Feature.js").default} feature Feature.
         * @private
         */
        forEachFeatureAdd_(feature) {
            this.addFeature(feature);
        }
        /**
         * @param {import("../Feature.js").default} feature Feature.
         * @private
         */
        forEachFeatureRemove_(feature) {
            this.removeFeature(feature);
        }
        /**
         * @return {import("../Collection.js").default<import("../Feature.js").default>|Array<import("../Feature.js").default>} Features.
         * @private
         */
        getFeatures_() {
            let features;
            if (this.features_) {
                features = this.features_;
            }
            else if (this.source_) {
                features = this.source_.getFeatures();
            }
            return features;
        }
        /**
         * @param {import("../MapBrowserEvent.js").default} evt Map browser event.
         * @return {boolean} `false` to stop event propagation.
         */
        handleEvent(evt) {
            const result = this.snapTo(evt.pixel, evt.coordinate, evt.map);
            if (result.snapped) {
                evt.coordinate = result.vertex.slice(0, 2);
                evt.pixel = result.vertexPixel;
            }
            return super.handleEvent(evt);
        }
        /**
         * @param {import("../source/Vector.js").VectorSourceEvent|import("../Collection.js").CollectionEvent} evt Event.
         * @private
         */
        handleFeatureAdd_(evt) {
            const feature = getFeatureFromEvent(evt);
            this.addFeature(feature);
        }
        /**
         * @param {import("../source/Vector.js").VectorSourceEvent|import("../Collection.js").CollectionEvent} evt Event.
         * @private
         */
        handleFeatureRemove_(evt) {
            const feature = getFeatureFromEvent(evt);
            this.removeFeature(feature);
        }
        /**
         * @param {import("../events/Event.js").default} evt Event.
         * @private
         */
        handleFeatureChange_(evt) {
            const feature = /** @type {import("../Feature.js").default} */ (evt.target);
            if (this.handlingDownUpSequence) {
                const uid = util_js_25.getUid(feature);
                if (!(uid in this.pendingFeatures_)) {
                    this.pendingFeatures_[uid] = feature;
                }
            }
            else {
                this.updateFeature_(feature);
            }
        }
        /**
         * Handle pointer up events.
         * @param {import("../MapBrowserEvent.js").default} evt Event.
         * @return {boolean} If the event was consumed.
         */
        handleUpEvent(evt) {
            const featuresToUpdate = obj_js_18.getValues(this.pendingFeatures_);
            if (featuresToUpdate.length) {
                featuresToUpdate.forEach(this.updateFeature_.bind(this));
                this.pendingFeatures_ = {};
            }
            return false;
        }
        /**
         * Remove a feature from the collection of features that we may snap to.
         * @param {import("../Feature.js").default} feature Feature
         * @param {boolean=} opt_unlisten Whether to unlisten to the feature change
         *     or not. Defaults to `true`.
         * @api
         */
        removeFeature(feature, opt_unlisten) {
            const unregister = opt_unlisten !== undefined ? opt_unlisten : true;
            const feature_uid = util_js_25.getUid(feature);
            const extent = this.indexedFeaturesExtents_[feature_uid];
            if (extent) {
                const rBush = this.rBush_;
                const nodesToRemove = [];
                rBush.forEachInExtent(extent, function (node) {
                    if (feature === node.feature) {
                        nodesToRemove.push(node);
                    }
                });
                for (let i = nodesToRemove.length - 1; i >= 0; --i) {
                    rBush.remove(nodesToRemove[i]);
                }
            }
            if (unregister) {
                events_js_18.unlistenByKey(this.featureChangeListenerKeys_[feature_uid]);
                delete this.featureChangeListenerKeys_[feature_uid];
            }
        }
        /**
         * Remove the interaction from its current map and attach it to the new map.
         * Subclasses may set up event handlers to get notified about changes to
         * the map here.
         * @param {import("../PluggableMap.js").default} map Map.
         */
        setMap(map) {
            const currentMap = this.getMap();
            const keys = this.featuresListenerKeys_;
            const features = /** @type {Array<import("../Feature.js").default>} */ (this.getFeatures_());
            if (currentMap) {
                keys.forEach(events_js_18.unlistenByKey);
                keys.length = 0;
                features.forEach(this.forEachFeatureRemove_.bind(this));
            }
            super.setMap(map);
            if (map) {
                if (this.features_) {
                    keys.push(events_js_18.listen(this.features_, CollectionEventType_js_7.default.ADD, this.handleFeatureAdd_, this), events_js_18.listen(this.features_, CollectionEventType_js_7.default.REMOVE, this.handleFeatureRemove_, this));
                }
                else if (this.source_) {
                    keys.push(events_js_18.listen(this.source_, VectorEventType_js_3.default.ADDFEATURE, this.handleFeatureAdd_, this), events_js_18.listen(this.source_, VectorEventType_js_3.default.REMOVEFEATURE, this.handleFeatureRemove_, this));
                }
                features.forEach(this.forEachFeatureAdd_.bind(this));
            }
        }
        /**
         * @param {import("../pixel.js").Pixel} pixel Pixel
         * @param {import("../coordinate.js").Coordinate} pixelCoordinate Coordinate
         * @param {import("../PluggableMap.js").default} map Map.
         * @return {Result} Snap result
         */
        snapTo(pixel, pixelCoordinate, map) {
            const lowerLeft = map.getCoordinateFromPixel([
                pixel[0] - this.pixelTolerance_,
                pixel[1] + this.pixelTolerance_,
            ]);
            const upperRight = map.getCoordinateFromPixel([
                pixel[0] + this.pixelTolerance_,
                pixel[1] - this.pixelTolerance_,
            ]);
            const box = extent_js_43.boundingExtent([lowerLeft, upperRight]);
            let segments = this.rBush_.getInExtent(box);
            // If snapping on vertices only, don't consider circles
            if (this.vertex_ && !this.edge_) {
                segments = segments.filter(function (segment) {
                    return segment.feature.getGeometry().getType() !== GeometryType_js_23.default.CIRCLE;
                });
            }
            let snapped = false;
            let vertex = null;
            let vertexPixel = null;
            if (segments.length === 0) {
                return {
                    snapped: snapped,
                    vertex: vertex,
                    vertexPixel: vertexPixel,
                };
            }
            const projection = map.getView().getProjection();
            const projectedCoordinate = proj_js_17.fromUserCoordinate(pixelCoordinate, projection);
            let closestSegmentData;
            let minSquaredDistance = Infinity;
            for (let i = 0; i < segments.length; ++i) {
                const segmentData = segments[i];
                tempSegment[0] = proj_js_17.fromUserCoordinate(segmentData.segment[0], projection);
                tempSegment[1] = proj_js_17.fromUserCoordinate(segmentData.segment[1], projection);
                const delta = coordinate_js_11.squaredDistanceToSegment(projectedCoordinate, tempSegment);
                if (delta < minSquaredDistance) {
                    closestSegmentData = segmentData;
                    minSquaredDistance = delta;
                }
            }
            const closestSegment = closestSegmentData.segment;
            if (this.vertex_ && !this.edge_) {
                const pixel1 = map.getPixelFromCoordinate(closestSegment[0]);
                const pixel2 = map.getPixelFromCoordinate(closestSegment[1]);
                const squaredDist1 = coordinate_js_11.squaredDistance(pixel, pixel1);
                const squaredDist2 = coordinate_js_11.squaredDistance(pixel, pixel2);
                const dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));
                if (dist <= this.pixelTolerance_) {
                    snapped = true;
                    vertex =
                        squaredDist1 > squaredDist2 ? closestSegment[1] : closestSegment[0];
                    vertexPixel = map.getPixelFromCoordinate(vertex);
                }
            }
            else if (this.edge_) {
                const isCircle = closestSegmentData.feature.getGeometry().getType() ===
                    GeometryType_js_23.default.CIRCLE;
                if (isCircle) {
                    let circleGeometry = closestSegmentData.feature.getGeometry();
                    const userProjection = proj_js_17.getUserProjection();
                    if (userProjection) {
                        circleGeometry = circleGeometry
                            .clone()
                            .transform(userProjection, projection);
                    }
                    vertex = proj_js_17.toUserCoordinate(coordinate_js_11.closestOnCircle(projectedCoordinate, 
                    /** @type {import("../geom/Circle.js").default} */ (circleGeometry)), projection);
                }
                else {
                    tempSegment[0] = proj_js_17.fromUserCoordinate(closestSegment[0], projection);
                    tempSegment[1] = proj_js_17.fromUserCoordinate(closestSegment[1], projection);
                    vertex = proj_js_17.toUserCoordinate(coordinate_js_11.closestOnSegment(projectedCoordinate, tempSegment), projection);
                }
                vertexPixel = map.getPixelFromCoordinate(vertex);
                if (coordinate_js_11.distance(pixel, vertexPixel) <= this.pixelTolerance_) {
                    snapped = true;
                    if (this.vertex_ && !isCircle) {
                        const pixel1 = map.getPixelFromCoordinate(closestSegment[0]);
                        const pixel2 = map.getPixelFromCoordinate(closestSegment[1]);
                        const squaredDist1 = coordinate_js_11.squaredDistance(vertexPixel, pixel1);
                        const squaredDist2 = coordinate_js_11.squaredDistance(vertexPixel, pixel2);
                        const dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));
                        if (dist <= this.pixelTolerance_) {
                            vertex =
                                squaredDist1 > squaredDist2
                                    ? closestSegment[1]
                                    : closestSegment[0];
                            vertexPixel = map.getPixelFromCoordinate(vertex);
                        }
                    }
                }
            }
            if (snapped) {
                vertexPixel = [Math.round(vertexPixel[0]), Math.round(vertexPixel[1])];
            }
            return {
                snapped: snapped,
                vertex: vertex,
                vertexPixel: vertexPixel,
            };
        }
        /**
         * @param {import("../Feature.js").default} feature Feature
         * @private
         */
        updateFeature_(feature) {
            this.removeFeature(feature, false);
            this.addFeature(feature, false);
        }
        /**
         * @param {import("../Feature.js").default} feature Feature
         * @param {import("../geom/Circle.js").default} geometry Geometry.
         * @private
         */
        writeCircleGeometry_(feature, geometry) {
            const projection = this.getMap().getView().getProjection();
            let circleGeometry = geometry;
            const userProjection = proj_js_17.getUserProjection();
            if (userProjection) {
                circleGeometry = /** @type {import("../geom/Circle.js").default} */ (circleGeometry
                    .clone()
                    .transform(userProjection, projection));
            }
            const polygon = Polygon_js_9.fromCircle(circleGeometry);
            if (userProjection) {
                polygon.transform(projection, userProjection);
            }
            const coordinates = polygon.getCoordinates()[0];
            for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {
                const segment = coordinates.slice(i, i + 2);
                const segmentData = {
                    feature: feature,
                    segment: segment,
                };
                this.rBush_.insert(extent_js_43.boundingExtent(segment), segmentData);
            }
        }
        /**
         * @param {import("../Feature.js").default} feature Feature
         * @param {import("../geom/GeometryCollection.js").default} geometry Geometry.
         * @private
         */
        writeGeometryCollectionGeometry_(feature, geometry) {
            const geometries = geometry.getGeometriesArray();
            for (let i = 0; i < geometries.length; ++i) {
                const segmentWriter = this.SEGMENT_WRITERS_[geometries[i].getType()];
                if (segmentWriter) {
                    segmentWriter(feature, geometries[i]);
                }
            }
        }
        /**
         * @param {import("../Feature.js").default} feature Feature
         * @param {import("../geom/LineString.js").default} geometry Geometry.
         * @private
         */
        writeLineStringGeometry_(feature, geometry) {
            const coordinates = geometry.getCoordinates();
            for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {
                const segment = coordinates.slice(i, i + 2);
                const segmentData = {
                    feature: feature,
                    segment: segment,
                };
                this.rBush_.insert(extent_js_43.boundingExtent(segment), segmentData);
            }
        }
        /**
         * @param {import("../Feature.js").default} feature Feature
         * @param {import("../geom/MultiLineString.js").default} geometry Geometry.
         * @private
         */
        writeMultiLineStringGeometry_(feature, geometry) {
            const lines = geometry.getCoordinates();
            for (let j = 0, jj = lines.length; j < jj; ++j) {
                const coordinates = lines[j];
                for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {
                    const segment = coordinates.slice(i, i + 2);
                    const segmentData = {
                        feature: feature,
                        segment: segment,
                    };
                    this.rBush_.insert(extent_js_43.boundingExtent(segment), segmentData);
                }
            }
        }
        /**
         * @param {import("../Feature.js").default} feature Feature
         * @param {import("../geom/MultiPoint.js").default} geometry Geometry.
         * @private
         */
        writeMultiPointGeometry_(feature, geometry) {
            const points = geometry.getCoordinates();
            for (let i = 0, ii = points.length; i < ii; ++i) {
                const coordinates = points[i];
                const segmentData = {
                    feature: feature,
                    segment: [coordinates, coordinates],
                };
                this.rBush_.insert(geometry.getExtent(), segmentData);
            }
        }
        /**
         * @param {import("../Feature.js").default} feature Feature
         * @param {import("../geom/MultiPolygon.js").default} geometry Geometry.
         * @private
         */
        writeMultiPolygonGeometry_(feature, geometry) {
            const polygons = geometry.getCoordinates();
            for (let k = 0, kk = polygons.length; k < kk; ++k) {
                const rings = polygons[k];
                for (let j = 0, jj = rings.length; j < jj; ++j) {
                    const coordinates = rings[j];
                    for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {
                        const segment = coordinates.slice(i, i + 2);
                        const segmentData = {
                            feature: feature,
                            segment: segment,
                        };
                        this.rBush_.insert(extent_js_43.boundingExtent(segment), segmentData);
                    }
                }
            }
        }
        /**
         * @param {import("../Feature.js").default} feature Feature
         * @param {import("../geom/Point.js").default} geometry Geometry.
         * @private
         */
        writePointGeometry_(feature, geometry) {
            const coordinates = geometry.getCoordinates();
            const segmentData = {
                feature: feature,
                segment: [coordinates, coordinates],
            };
            this.rBush_.insert(geometry.getExtent(), segmentData);
        }
        /**
         * @param {import("../Feature.js").default} feature Feature
         * @param {import("../geom/Polygon.js").default} geometry Geometry.
         * @private
         */
        writePolygonGeometry_(feature, geometry) {
            const rings = geometry.getCoordinates();
            for (let j = 0, jj = rings.length; j < jj; ++j) {
                const coordinates = rings[j];
                for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {
                    const segment = coordinates.slice(i, i + 2);
                    const segmentData = {
                        feature: feature,
                        segment: segment,
                    };
                    this.rBush_.insert(extent_js_43.boundingExtent(segment), segmentData);
                }
            }
        }
    }
    exports.default = Snap;
});
define("node_modules/ol/src/interaction/Translate", ["require", "exports", "node_modules/ol/src/Collection", "node_modules/ol/src/events/Event", "node_modules/ol/src/interaction/Property", "node_modules/ol/src/interaction/Pointer", "node_modules/ol/src/functions", "node_modules/ol/src/Object", "node_modules/ol/src/array"], function (require, exports, Collection_js_7, Event_js_17, Property_js_5, Pointer_js_11, functions_js_18, Object_js_18, array_js_23) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TranslateEvent = void 0;
    /**
     * @enum {string}
     */
    const TranslateEventType = {
        /**
         * Triggered upon feature translation start.
         * @event TranslateEvent#translatestart
         * @api
         */
        TRANSLATESTART: 'translatestart',
        /**
         * Triggered upon feature translation.
         * @event TranslateEvent#translating
         * @api
         */
        TRANSLATING: 'translating',
        /**
         * Triggered upon feature translation end.
         * @event TranslateEvent#translateend
         * @api
         */
        TRANSLATEEND: 'translateend',
    };
    /**
     * A function that takes an {@link module:ol/Feature} or
     * {@link module:ol/render/Feature} and an
     * {@link module:ol/layer/Layer} and returns `true` if the feature may be
     * translated or `false` otherwise.
     * @typedef {function(import("../Feature.js").FeatureLike, import("../layer/Layer.js").default):boolean} FilterFunction
     */
    /**
     * @typedef {Object} Options
     * @property {Collection<import("../Feature.js").default>} [features] Only features contained in this collection will be able to be translated. If
     * not specified, all features on the map will be able to be translated.
     * @property {Array<import("../layer/Layer.js").default>|function(import("../layer/Layer.js").default): boolean} [layers] A list of layers from which features should be
     * translated. Alternatively, a filter function can be provided. The
     * function will be called for each layer in the map and should return
     * `true` for layers that you want to be translatable. If the option is
     * absent, all visible layers will be considered translatable.
     * @property {FilterFunction} [filter] A function
     * that takes an {@link module:ol/Feature} and an
     * {@link module:ol/layer/Layer} and returns `true` if the feature may be
     * translated or `false` otherwise.
     * @property {number} [hitTolerance=0] Hit-detection tolerance. Pixels inside the radius around the given position
     * will be checked for features.
     */
    /**
     * @classdesc
     * Events emitted by {@link module:ol/interaction/Translate~Translate} instances
     * are instances of this type.
     */
    class TranslateEvent extends Event_js_17.default {
        /**
         * @param {TranslateEventType} type Type.
         * @param {Collection<import("../Feature.js").default>} features The features translated.
         * @param {import("../coordinate.js").Coordinate} coordinate The event coordinate.
         * @param {import("../coordinate.js").Coordinate} startCoordinate The original coordinates before.translation started
         * @param {import("../MapBrowserEvent.js").default} mapBrowserEvent Map browser event.
         */
        constructor(type, features, coordinate, startCoordinate, mapBrowserEvent) {
            super(type);
            /**
             * The features being translated.
             * @type {Collection<import("../Feature.js").default>}
             * @api
             */
            this.features = features;
            /**
             * The coordinate of the drag event.
             * @const
             * @type {import("../coordinate.js").Coordinate}
             * @api
             */
            this.coordinate = coordinate;
            /**
             * The coordinate of the start position before translation started.
             * @const
             * @type {import("../coordinate.js").Coordinate}
             * @api
             */
            this.startCoordinate = startCoordinate;
            /**
             * Associated {@link module:ol/MapBrowserEvent}.
             * @type {import("../MapBrowserEvent.js").default}
             * @api
             */
            this.mapBrowserEvent = mapBrowserEvent;
        }
    }
    exports.TranslateEvent = TranslateEvent;
    /**
     * @classdesc
     * Interaction for translating (moving) features.
     *
     * @fires TranslateEvent
     * @api
     */
    class Translate extends Pointer_js_11.default {
        /**
         * @param {Options=} opt_options Options.
         */
        constructor(opt_options) {
            const options = opt_options ? opt_options : {};
            super(/** @type {import("./Pointer.js").Options} */ (options));
            /**
             * The last position we translated to.
             * @type {import("../coordinate.js").Coordinate}
             * @private
             */
            this.lastCoordinate_ = null;
            /**
             * The start position before translation started.
             * @type {import("../coordinate.js").Coordinate}
             * @private
             */
            this.startCoordinate_ = null;
            /**
             * @type {Collection<import("../Feature.js").default>}
             * @private
             */
            this.features_ = options.features !== undefined ? options.features : null;
            /** @type {function(import("../layer/Layer.js").default): boolean} */
            let layerFilter;
            if (options.layers) {
                if (typeof options.layers === 'function') {
                    layerFilter = options.layers;
                }
                else {
                    const layers = options.layers;
                    layerFilter = function (layer) {
                        return array_js_23.includes(layers, layer);
                    };
                }
            }
            else {
                layerFilter = functions_js_18.TRUE;
            }
            /**
             * @private
             * @type {function(import("../layer/Layer.js").default): boolean}
             */
            this.layerFilter_ = layerFilter;
            /**
             * @private
             * @type {FilterFunction}
             */
            this.filter_ = options.filter ? options.filter : functions_js_18.TRUE;
            /**
             * @private
             * @type {number}
             */
            this.hitTolerance_ = options.hitTolerance ? options.hitTolerance : 0;
            /**
             * @type {import("../Feature.js").default}
             * @private
             */
            this.lastFeature_ = null;
            this.addEventListener(Object_js_18.getChangeEventType(Property_js_5.default.ACTIVE), this.handleActiveChanged_);
        }
        /**
         * Handle pointer down events.
         * @param {import("../MapBrowserEvent.js").default} event Event.
         * @return {boolean} If the event was consumed.
         */
        handleDownEvent(event) {
            this.lastFeature_ = this.featuresAtPixel_(event.pixel, event.map);
            if (!this.lastCoordinate_ && this.lastFeature_) {
                this.startCoordinate_ = event.coordinate;
                this.lastCoordinate_ = event.coordinate;
                this.handleMoveEvent(event);
                const features = this.features_ || new Collection_js_7.default([this.lastFeature_]);
                this.dispatchEvent(new TranslateEvent(TranslateEventType.TRANSLATESTART, features, event.coordinate, this.startCoordinate_, event));
                return true;
            }
            return false;
        }
        /**
         * Handle pointer up events.
         * @param {import("../MapBrowserEvent.js").default} event Event.
         * @return {boolean} If the event was consumed.
         */
        handleUpEvent(event) {
            if (this.lastCoordinate_) {
                this.lastCoordinate_ = null;
                this.handleMoveEvent(event);
                const features = this.features_ || new Collection_js_7.default([this.lastFeature_]);
                this.dispatchEvent(new TranslateEvent(TranslateEventType.TRANSLATEEND, features, event.coordinate, this.startCoordinate_, event));
                // cleanup
                this.startCoordinate_ = null;
                return true;
            }
            return false;
        }
        /**
         * Handle pointer drag events.
         * @param {import("../MapBrowserEvent.js").default} event Event.
         */
        handleDragEvent(event) {
            if (this.lastCoordinate_) {
                const newCoordinate = event.coordinate;
                const deltaX = newCoordinate[0] - this.lastCoordinate_[0];
                const deltaY = newCoordinate[1] - this.lastCoordinate_[1];
                const features = this.features_ || new Collection_js_7.default([this.lastFeature_]);
                features.forEach(function (feature) {
                    const geom = feature.getGeometry();
                    geom.translate(deltaX, deltaY);
                    feature.setGeometry(geom);
                });
                this.lastCoordinate_ = newCoordinate;
                this.dispatchEvent(new TranslateEvent(TranslateEventType.TRANSLATING, features, newCoordinate, this.startCoordinate_, event));
            }
        }
        /**
         * Handle pointer move events.
         * @param {import("../MapBrowserEvent.js").default} event Event.
         */
        handleMoveEvent(event) {
            const elem = event.map.getViewport();
            // Change the cursor to grab/grabbing if hovering any of the features managed
            // by the interaction
            if (this.featuresAtPixel_(event.pixel, event.map)) {
                elem.classList.remove(this.lastCoordinate_ ? 'ol-grab' : 'ol-grabbing');
                elem.classList.add(this.lastCoordinate_ ? 'ol-grabbing' : 'ol-grab');
            }
            else {
                elem.classList.remove('ol-grab', 'ol-grabbing');
            }
        }
        /**
         * Tests to see if the given coordinates intersects any of our selected
         * features.
         * @param {import("../pixel.js").Pixel} pixel Pixel coordinate to test for intersection.
         * @param {import("../PluggableMap.js").default} map Map to test the intersection on.
         * @return {import("../Feature.js").default} Returns the feature found at the specified pixel
         * coordinates.
         * @private
         */
        featuresAtPixel_(pixel, map) {
            return map.forEachFeatureAtPixel(pixel, function (feature, layer) {
                if (this.filter_(feature, layer)) {
                    if (!this.features_ || array_js_23.includes(this.features_.getArray(), feature)) {
                        return feature;
                    }
                }
            }.bind(this), {
                layerFilter: this.layerFilter_,
                hitTolerance: this.hitTolerance_,
            });
        }
        /**
         * Returns the Hit-detection tolerance.
         * @returns {number} Hit tolerance in pixels.
         * @api
         */
        getHitTolerance() {
            return this.hitTolerance_;
        }
        /**
         * Hit-detection tolerance. Pixels inside the radius around the given position
         * will be checked for features.
         * @param {number} hitTolerance Hit tolerance in pixels.
         * @api
         */
        setHitTolerance(hitTolerance) {
            this.hitTolerance_ = hitTolerance;
        }
        /**
         * Remove the interaction from its current map and attach it to the new map.
         * Subclasses may set up event handlers to get notified about changes to
         * the map here.
         * @param {import("../PluggableMap.js").default} map Map.
         */
        setMap(map) {
            const oldMap = this.getMap();
            super.setMap(map);
            this.updateState_(oldMap);
        }
        /**
         * @private
         */
        handleActiveChanged_() {
            this.updateState_(null);
        }
        /**
         * @param {import("../PluggableMap.js").default} oldMap Old map.
         * @private
         */
        updateState_(oldMap) {
            let map = this.getMap();
            const active = this.getActive();
            if (!map || !active) {
                map = map || oldMap;
                if (map) {
                    const elem = map.getViewport();
                    elem.classList.remove('ol-grab', 'ol-grabbing');
                }
            }
        }
    }
    exports.default = Translate;
});
define("node_modules/ol/src/interaction", ["require", "exports", "node_modules/ol/src/Collection", "node_modules/ol/src/interaction/DoubleClickZoom", "node_modules/ol/src/interaction/DragPan", "node_modules/ol/src/interaction/DragRotate", "node_modules/ol/src/interaction/DragZoom", "node_modules/ol/src/interaction/KeyboardPan", "node_modules/ol/src/interaction/KeyboardZoom", "node_modules/ol/src/Kinetic", "node_modules/ol/src/interaction/MouseWheelZoom", "node_modules/ol/src/interaction/PinchRotate", "node_modules/ol/src/interaction/PinchZoom", "node_modules/ol/src/interaction/DoubleClickZoom", "node_modules/ol/src/interaction/DragAndDrop", "node_modules/ol/src/interaction/DragBox", "node_modules/ol/src/interaction/DragPan", "node_modules/ol/src/interaction/DragRotate", "node_modules/ol/src/interaction/DragRotateAndZoom", "node_modules/ol/src/interaction/DragZoom", "node_modules/ol/src/interaction/Draw", "node_modules/ol/src/interaction/Extent", "node_modules/ol/src/interaction/Interaction", "node_modules/ol/src/interaction/KeyboardPan", "node_modules/ol/src/interaction/KeyboardZoom", "node_modules/ol/src/interaction/Modify", "node_modules/ol/src/interaction/MouseWheelZoom", "node_modules/ol/src/interaction/PinchRotate", "node_modules/ol/src/interaction/PinchZoom", "node_modules/ol/src/interaction/Pointer", "node_modules/ol/src/interaction/Select", "node_modules/ol/src/interaction/Snap", "node_modules/ol/src/interaction/Translate"], function (require, exports, Collection_js_8, DoubleClickZoom_js_1, DragPan_js_1, DragRotate_js_1, DragZoom_js_1, KeyboardPan_js_1, KeyboardZoom_js_1, Kinetic_js_1, MouseWheelZoom_js_1, PinchRotate_js_1, PinchZoom_js_1, DoubleClickZoom_js_2, DragAndDrop_js_1, DragBox_js_2, DragPan_js_2, DragRotate_js_2, DragRotateAndZoom_js_1, DragZoom_js_2, Draw_js_1, Extent_js_1, Interaction_js_8, KeyboardPan_js_2, KeyboardZoom_js_2, Modify_js_1, MouseWheelZoom_js_2, PinchRotate_js_2, PinchZoom_js_2, Pointer_js_12, Select_js_1, Snap_js_1, Translate_js_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaults = exports.Translate = exports.Snap = exports.Select = exports.Pointer = exports.PinchZoom = exports.PinchRotate = exports.MouseWheelZoom = exports.Modify = exports.KeyboardZoom = exports.KeyboardPan = exports.Interaction = exports.Extent = exports.Draw = exports.DragZoom = exports.DragRotateAndZoom = exports.DragRotate = exports.DragPan = exports.DragBox = exports.DragAndDrop = exports.DoubleClickZoom = void 0;
    Object.defineProperty(exports, "DoubleClickZoom", { enumerable: true, get: function () { return DoubleClickZoom_js_2.default; } });
    Object.defineProperty(exports, "DragAndDrop", { enumerable: true, get: function () { return DragAndDrop_js_1.default; } });
    Object.defineProperty(exports, "DragBox", { enumerable: true, get: function () { return DragBox_js_2.default; } });
    Object.defineProperty(exports, "DragPan", { enumerable: true, get: function () { return DragPan_js_2.default; } });
    Object.defineProperty(exports, "DragRotate", { enumerable: true, get: function () { return DragRotate_js_2.default; } });
    Object.defineProperty(exports, "DragRotateAndZoom", { enumerable: true, get: function () { return DragRotateAndZoom_js_1.default; } });
    Object.defineProperty(exports, "DragZoom", { enumerable: true, get: function () { return DragZoom_js_2.default; } });
    Object.defineProperty(exports, "Draw", { enumerable: true, get: function () { return Draw_js_1.default; } });
    Object.defineProperty(exports, "Extent", { enumerable: true, get: function () { return Extent_js_1.default; } });
    Object.defineProperty(exports, "Interaction", { enumerable: true, get: function () { return Interaction_js_8.default; } });
    Object.defineProperty(exports, "KeyboardPan", { enumerable: true, get: function () { return KeyboardPan_js_2.default; } });
    Object.defineProperty(exports, "KeyboardZoom", { enumerable: true, get: function () { return KeyboardZoom_js_2.default; } });
    Object.defineProperty(exports, "Modify", { enumerable: true, get: function () { return Modify_js_1.default; } });
    Object.defineProperty(exports, "MouseWheelZoom", { enumerable: true, get: function () { return MouseWheelZoom_js_2.default; } });
    Object.defineProperty(exports, "PinchRotate", { enumerable: true, get: function () { return PinchRotate_js_2.default; } });
    Object.defineProperty(exports, "PinchZoom", { enumerable: true, get: function () { return PinchZoom_js_2.default; } });
    Object.defineProperty(exports, "Pointer", { enumerable: true, get: function () { return Pointer_js_12.default; } });
    Object.defineProperty(exports, "Select", { enumerable: true, get: function () { return Select_js_1.default; } });
    Object.defineProperty(exports, "Snap", { enumerable: true, get: function () { return Snap_js_1.default; } });
    Object.defineProperty(exports, "Translate", { enumerable: true, get: function () { return Translate_js_1.default; } });
    /**
     * @typedef {Object} DefaultsOptions
     * @property {boolean} [altShiftDragRotate=true] Whether Alt-Shift-drag rotate is
     * desired.
     * @property {boolean} [onFocusOnly=false] Interact only when the map has the
     * focus. This affects the `MouseWheelZoom` and `DragPan` interactions and is
     * useful when page scroll is desired for maps that do not have the browser's
     * focus.
     * @property {boolean} [doubleClickZoom=true] Whether double click zoom is
     * desired.
     * @property {boolean} [keyboard=true] Whether keyboard interaction is desired.
     * @property {boolean} [mouseWheelZoom=true] Whether mousewheel zoom is desired.
     * @property {boolean} [shiftDragZoom=true] Whether Shift-drag zoom is desired.
     * @property {boolean} [dragPan=true] Whether drag pan is desired.
     * @property {boolean} [pinchRotate=true] Whether pinch rotate is desired.
     * @property {boolean} [pinchZoom=true] Whether pinch zoom is desired.
     * @property {number} [zoomDelta] Zoom level delta when using keyboard or double click zoom.
     * @property {number} [zoomDuration] Duration of the zoom animation in
     * milliseconds.
     */
    /**
     * Set of interactions included in maps by default. Specific interactions can be
     * excluded by setting the appropriate option to false in the constructor
     * options, but the order of the interactions is fixed.  If you want to specify
     * a different order for interactions, you will need to create your own
     * {@link module:ol/interaction/Interaction} instances and insert
     * them into a {@link module:ol/Collection} in the order you want
     * before creating your {@link module:ol/Map~Map} instance. Changing the order can
     * be of interest if the event propagation needs to be stopped at a point.
     * The default set of interactions, in sequence, is:
     * * {@link module:ol/interaction/DragRotate~DragRotate}
     * * {@link module:ol/interaction/DoubleClickZoom~DoubleClickZoom}
     * * {@link module:ol/interaction/DragPan~DragPan}
     * * {@link module:ol/interaction/PinchRotate~PinchRotate}
     * * {@link module:ol/interaction/PinchZoom~PinchZoom}
     * * {@link module:ol/interaction/KeyboardPan~KeyboardPan}
     * * {@link module:ol/interaction/KeyboardZoom~KeyboardZoom}
     * * {@link module:ol/interaction/MouseWheelZoom~MouseWheelZoom}
     * * {@link module:ol/interaction/DragZoom~DragZoom}
     *
     * @param {DefaultsOptions=} opt_options Defaults options.
     * @return {import("./Collection.js").default<import("./interaction/Interaction.js").default>}
     * A collection of interactions to be used with the {@link module:ol/Map~Map}
     * constructor's `interactions` option.
     * @api
     */
    function defaults(opt_options) {
        const options = opt_options ? opt_options : {};
        const interactions = new Collection_js_8.default();
        const kinetic = new Kinetic_js_1.default(-0.005, 0.05, 100);
        const altShiftDragRotate = options.altShiftDragRotate !== undefined
            ? options.altShiftDragRotate
            : true;
        if (altShiftDragRotate) {
            interactions.push(new DragRotate_js_1.default());
        }
        const doubleClickZoom = options.doubleClickZoom !== undefined ? options.doubleClickZoom : true;
        if (doubleClickZoom) {
            interactions.push(new DoubleClickZoom_js_1.default({
                delta: options.zoomDelta,
                duration: options.zoomDuration,
            }));
        }
        const dragPan = options.dragPan !== undefined ? options.dragPan : true;
        if (dragPan) {
            interactions.push(new DragPan_js_1.default({
                onFocusOnly: options.onFocusOnly,
                kinetic: kinetic,
            }));
        }
        const pinchRotate = options.pinchRotate !== undefined ? options.pinchRotate : true;
        if (pinchRotate) {
            interactions.push(new PinchRotate_js_1.default());
        }
        const pinchZoom = options.pinchZoom !== undefined ? options.pinchZoom : true;
        if (pinchZoom) {
            interactions.push(new PinchZoom_js_1.default({
                duration: options.zoomDuration,
            }));
        }
        const keyboard = options.keyboard !== undefined ? options.keyboard : true;
        if (keyboard) {
            interactions.push(new KeyboardPan_js_1.default());
            interactions.push(new KeyboardZoom_js_1.default({
                delta: options.zoomDelta,
                duration: options.zoomDuration,
            }));
        }
        const mouseWheelZoom = options.mouseWheelZoom !== undefined ? options.mouseWheelZoom : true;
        if (mouseWheelZoom) {
            interactions.push(new MouseWheelZoom_js_1.default({
                onFocusOnly: options.onFocusOnly,
                duration: options.zoomDuration,
            }));
        }
        const shiftDragZoom = options.shiftDragZoom !== undefined ? options.shiftDragZoom : true;
        if (shiftDragZoom) {
            interactions.push(new DragZoom_js_1.default({
                duration: options.zoomDuration,
            }));
        }
        return interactions;
    }
    exports.defaults = defaults;
});
define("node_modules/ol/src/Map", ["require", "exports", "node_modules/ol/src/renderer/Composite", "node_modules/ol/src/PluggableMap", "node_modules/ol/src/obj", "node_modules/ol/src/control", "node_modules/ol/src/interaction"], function (require, exports, Composite_js_2, PluggableMap_js_2, obj_js_19, control_js_1, interaction_js_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @classdesc
     * The map is the core component of OpenLayers. For a map to render, a view,
     * one or more layers, and a target container are needed:
     *
     *     import Map from 'ol/Map';
     *     import View from 'ol/View';
     *     import TileLayer from 'ol/layer/Tile';
     *     import OSM from 'ol/source/OSM';
     *
     *     var map = new Map({
     *       view: new View({
     *         center: [0, 0],
     *         zoom: 1
     *       }),
     *       layers: [
     *         new TileLayer({
     *           source: new OSM()
     *         })
     *       ],
     *       target: 'map'
     *     });
     *
     * The above snippet creates a map using a {@link module:ol/layer/Tile} to
     * display {@link module:ol/source/OSM~OSM} OSM data and render it to a DOM
     * element with the id `map`.
     *
     * The constructor places a viewport container (with CSS class name
     * `ol-viewport`) in the target element (see `getViewport()`), and then two
     * further elements within the viewport: one with CSS class name
     * `ol-overlaycontainer-stopevent` for controls and some overlays, and one with
     * CSS class name `ol-overlaycontainer` for other overlays (see the `stopEvent`
     * option of {@link module:ol/Overlay~Overlay} for the difference). The map
     * itself is placed in a further element within the viewport.
     *
     * Layers are stored as a {@link module:ol/Collection~Collection} in
     * layerGroups. A top-level group is provided by the library. This is what is
     * accessed by `getLayerGroup` and `setLayerGroup`. Layers entered in the
     * options are added to this group, and `addLayer` and `removeLayer` change the
     * layer collection in the group. `getLayers` is a convenience function for
     * `getLayerGroup().getLayers()`. Note that {@link module:ol/layer/Group~Group}
     * is a subclass of {@link module:ol/layer/Base}, so layers entered in the
     * options or added with `addLayer` can be groups, which can contain further
     * groups, and so on.
     *
     * @api
     */
    class Map extends PluggableMap_js_2.default {
        /**
         * @param {import("./PluggableMap.js").MapOptions} options Map options.
         */
        constructor(options) {
            options = obj_js_19.assign({}, options);
            if (!options.controls) {
                options.controls = control_js_1.defaults();
            }
            if (!options.interactions) {
                options.interactions = interaction_js_1.defaults({
                    onFocusOnly: true,
                });
            }
            super(options);
        }
        createRenderer() {
            return new Composite_js_2.default(this);
        }
    }
    exports.default = Map;
});
define("node_modules/ol/src/format/JSONFeature", ["require", "exports", "node_modules/ol/src/format/Feature", "node_modules/ol/src/format/FormatType", "node_modules/ol/src/util"], function (require, exports, Feature_js_4, FormatType_js_2, util_js_26) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @classdesc
     * Abstract base class; normally only used for creating subclasses and not
     * instantiated in apps.
     * Base class for JSON feature formats.
     *
     * @abstract
     */
    class JSONFeature extends Feature_js_4.default {
        constructor() {
            super();
        }
        /**
         * @return {import("./FormatType.js").default} Format.
         */
        getType() {
            return FormatType_js_2.default.JSON;
        }
        /**
         * Read a feature.  Only works for a single feature. Use `readFeatures` to
         * read a feature collection.
         *
         * @param {ArrayBuffer|Document|Element|Object|string} source Source.
         * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
         * @return {import("../Feature.js").default} Feature.
         * @api
         */
        readFeature(source, opt_options) {
            return this.readFeatureFromObject(getObject(source), this.getReadOptions(source, opt_options));
        }
        /**
         * Read all features.  Works with both a single feature and a feature
         * collection.
         *
         * @param {ArrayBuffer|Document|Element|Object|string} source Source.
         * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
         * @return {Array<import("../Feature.js").default>} Features.
         * @api
         */
        readFeatures(source, opt_options) {
            return this.readFeaturesFromObject(getObject(source), this.getReadOptions(source, opt_options));
        }
        /**
         * @abstract
         * @param {Object} object Object.
         * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
         * @protected
         * @return {import("../Feature.js").default} Feature.
         */
        readFeatureFromObject(object, opt_options) {
            return util_js_26.abstract();
        }
        /**
         * @abstract
         * @param {Object} object Object.
         * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
         * @protected
         * @return {Array<import("../Feature.js").default>} Features.
         */
        readFeaturesFromObject(object, opt_options) {
            return util_js_26.abstract();
        }
        /**
         * Read a geometry.
         *
         * @param {ArrayBuffer|Document|Element|Object|string} source Source.
         * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
         * @return {import("../geom/Geometry.js").default} Geometry.
         * @api
         */
        readGeometry(source, opt_options) {
            return this.readGeometryFromObject(getObject(source), this.getReadOptions(source, opt_options));
        }
        /**
         * @abstract
         * @param {Object} object Object.
         * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
         * @protected
         * @return {import("../geom/Geometry.js").default} Geometry.
         */
        readGeometryFromObject(object, opt_options) {
            return util_js_26.abstract();
        }
        /**
         * Read the projection.
         *
         * @param {ArrayBuffer|Document|Element|Object|string} source Source.
         * @return {import("../proj/Projection.js").default} Projection.
         * @api
         */
        readProjection(source) {
            return this.readProjectionFromObject(getObject(source));
        }
        /**
         * @abstract
         * @param {Object} object Object.
         * @protected
         * @return {import("../proj/Projection.js").default} Projection.
         */
        readProjectionFromObject(object) {
            return util_js_26.abstract();
        }
        /**
         * Encode a feature as string.
         *
         * @param {import("../Feature.js").default} feature Feature.
         * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
         * @return {string} Encoded feature.
         * @api
         */
        writeFeature(feature, opt_options) {
            return JSON.stringify(this.writeFeatureObject(feature, opt_options));
        }
        /**
         * @abstract
         * @param {import("../Feature.js").default} feature Feature.
         * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
         * @return {Object} Object.
         */
        writeFeatureObject(feature, opt_options) {
            return util_js_26.abstract();
        }
        /**
         * Encode an array of features as string.
         *
         * @param {Array<import("../Feature.js").default>} features Features.
         * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
         * @return {string} Encoded features.
         * @api
         */
        writeFeatures(features, opt_options) {
            return JSON.stringify(this.writeFeaturesObject(features, opt_options));
        }
        /**
         * @abstract
         * @param {Array<import("../Feature.js").default>} features Features.
         * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
         * @return {Object} Object.
         */
        writeFeaturesObject(features, opt_options) {
            return util_js_26.abstract();
        }
        /**
         * Encode a geometry as string.
         *
         * @param {import("../geom/Geometry.js").default} geometry Geometry.
         * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
         * @return {string} Encoded geometry.
         * @api
         */
        writeGeometry(geometry, opt_options) {
            return JSON.stringify(this.writeGeometryObject(geometry, opt_options));
        }
        /**
         * @abstract
         * @param {import("../geom/Geometry.js").default} geometry Geometry.
         * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
         * @return {Object} Object.
         */
        writeGeometryObject(geometry, opt_options) {
            return util_js_26.abstract();
        }
    }
    /**
     * @param {Document|Element|Object|string} source Source.
     * @return {Object} Object.
     */
    function getObject(source) {
        if (typeof source === 'string') {
            const object = JSON.parse(source);
            return object ? /** @type {Object} */ (object) : null;
        }
        else if (source !== null) {
            return source;
        }
        else {
            return null;
        }
    }
    exports.default = JSONFeature;
});
define("node_modules/ol/src/format/EsriJSON", ["require", "exports", "node_modules/ol/src/Feature", "node_modules/ol/src/geom/GeometryLayout", "node_modules/ol/src/geom/GeometryType", "node_modules/ol/src/format/JSONFeature", "node_modules/ol/src/geom/LineString", "node_modules/ol/src/geom/LinearRing", "node_modules/ol/src/geom/MultiLineString", "node_modules/ol/src/geom/MultiPoint", "node_modules/ol/src/geom/MultiPolygon", "node_modules/ol/src/geom/Point", "node_modules/ol/src/geom/Polygon", "node_modules/ol/src/asserts", "node_modules/ol/src/obj", "node_modules/ol/src/extent", "node_modules/ol/src/geom/flat/deflate", "node_modules/ol/src/proj", "node_modules/ol/src/geom/flat/orient", "node_modules/ol/src/format/Feature"], function (require, exports, Feature_js_5, GeometryLayout_js_7, GeometryType_js_24, JSONFeature_js_1, LineString_js_3, LinearRing_js_2, MultiLineString_js_2, MultiPoint_js_3, MultiPolygon_js_2, Point_js_6, Polygon_js_10, asserts_js_19, obj_js_20, extent_js_44, deflate_js_9, proj_js_18, orient_js_3, Feature_js_6) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @typedef {import("arcgis-rest-api").Feature} EsriJSONFeature
     * @typedef {import("arcgis-rest-api").FeatureSet} EsriJSONFeatureSet
     * @typedef {import("arcgis-rest-api").Geometry} EsriJSONGeometry
     * @typedef {import("arcgis-rest-api").Point} EsriJSONPoint
     * @typedef {import("arcgis-rest-api").Polyline} EsriJSONPolyline
     * @typedef {import("arcgis-rest-api").Polygon} EsriJSONPolygon
     * @typedef {import("arcgis-rest-api").Multipoint} EsriJSONMultipoint
     * @typedef {import("arcgis-rest-api").HasZM} EsriJSONHasZM
     * @typedef {import("arcgis-rest-api").Position} EsriJSONPosition
     * @typedef {import("arcgis-rest-api").SpatialReferenceWkid} EsriJSONSpatialReferenceWkid
     */
    /**
     * @typedef {Object} EsriJSONMultiPolygon
     * @property {Array<Array<Array<Array<number>>>>} rings Rings for the MultiPolygon.
     * @property {boolean} [hasM] If the polygon coordinates have an M value.
     * @property {boolean} [hasZ] If the polygon coordinates have a Z value.
     * @property {EsriJSONSpatialReferenceWkid} [spatialReference] The coordinate reference system.
     */
    /**
     * @const
     * @type {Object<import("../geom/GeometryType.js").default, function(EsriJSONGeometry): import("../geom/Geometry.js").default>}
     */
    const GEOMETRY_READERS = {};
    GEOMETRY_READERS[GeometryType_js_24.default.POINT] = readPointGeometry;
    GEOMETRY_READERS[GeometryType_js_24.default.LINE_STRING] = readLineStringGeometry;
    GEOMETRY_READERS[GeometryType_js_24.default.POLYGON] = readPolygonGeometry;
    GEOMETRY_READERS[GeometryType_js_24.default.MULTI_POINT] = readMultiPointGeometry;
    GEOMETRY_READERS[GeometryType_js_24.default.MULTI_LINE_STRING] = readMultiLineStringGeometry;
    GEOMETRY_READERS[GeometryType_js_24.default.MULTI_POLYGON] = readMultiPolygonGeometry;
    /**
     * @const
     * @type {Object<string, function(import("../geom/Geometry.js").default, import("./Feature.js").WriteOptions=): (EsriJSONGeometry)>}
     */
    const GEOMETRY_WRITERS = {};
    GEOMETRY_WRITERS[GeometryType_js_24.default.POINT] = writePointGeometry;
    GEOMETRY_WRITERS[GeometryType_js_24.default.LINE_STRING] = writeLineStringGeometry;
    GEOMETRY_WRITERS[GeometryType_js_24.default.POLYGON] = writePolygonGeometry;
    GEOMETRY_WRITERS[GeometryType_js_24.default.MULTI_POINT] = writeMultiPointGeometry;
    GEOMETRY_WRITERS[GeometryType_js_24.default.MULTI_LINE_STRING] = writeMultiLineStringGeometry;
    GEOMETRY_WRITERS[GeometryType_js_24.default.MULTI_POLYGON] = writeMultiPolygonGeometry;
    /**
     * @typedef {Object} Options
     * @property {string} [geometryName] Geometry name to use when creating features.
     */
    /**
     * @classdesc
     * Feature format for reading and writing data in the EsriJSON format.
     *
     * @api
     */
    class EsriJSON extends JSONFeature_js_1.default {
        /**
         * @param {Options=} opt_options Options.
         */
        constructor(opt_options) {
            const options = opt_options ? opt_options : {};
            super();
            /**
             * Name of the geometry attribute for features.
             * @type {string|undefined}
             * @private
             */
            this.geometryName_ = options.geometryName;
        }
        /**
         * @param {Object} object Object.
         * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
         * @param {string=} opt_idField Name of the field where to get the id from.
         * @protected
         * @return {import("../Feature.js").default} Feature.
         */
        readFeatureFromObject(object, opt_options, opt_idField) {
            const esriJSONFeature = /** @type {EsriJSONFeature} */ (object);
            const geometry = readGeometry(esriJSONFeature.geometry, opt_options);
            const feature = new Feature_js_5.default();
            if (this.geometryName_) {
                feature.setGeometryName(this.geometryName_);
            }
            feature.setGeometry(geometry);
            if (esriJSONFeature.attributes) {
                feature.setProperties(esriJSONFeature.attributes, true);
                const id = esriJSONFeature.attributes[opt_idField];
                if (id !== undefined) {
                    feature.setId(/** @type {number} */ (id));
                }
            }
            return feature;
        }
        /**
         * @param {Object} object Object.
         * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
         * @protected
         * @return {Array<Feature>} Features.
         */
        readFeaturesFromObject(object, opt_options) {
            const options = opt_options ? opt_options : {};
            if (object['features']) {
                const esriJSONFeatureSet = /** @type {EsriJSONFeatureSet} */ (object);
                /** @type {Array<import("../Feature.js").default>} */
                const features = [];
                const esriJSONFeatures = esriJSONFeatureSet.features;
                for (let i = 0, ii = esriJSONFeatures.length; i < ii; ++i) {
                    features.push(this.readFeatureFromObject(esriJSONFeatures[i], options, object.objectIdFieldName));
                }
                return features;
            }
            else {
                return [this.readFeatureFromObject(object, options)];
            }
        }
        /**
         * @param {EsriJSONGeometry} object Object.
         * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
         * @protected
         * @return {import("../geom/Geometry.js").default} Geometry.
         */
        readGeometryFromObject(object, opt_options) {
            return readGeometry(object, opt_options);
        }
        /**
         * @param {Object} object Object.
         * @protected
         * @return {import("../proj/Projection.js").default} Projection.
         */
        readProjectionFromObject(object) {
            if (object['spatialReference'] &&
                object['spatialReference']['wkid'] !== undefined) {
                const spatialReference = /** @type {EsriJSONSpatialReferenceWkid} */ (object['spatialReference']);
                const crs = spatialReference.wkid;
                return proj_js_18.get('EPSG:' + crs);
            }
            else {
                return null;
            }
        }
        /**
         * Encode a geometry as a EsriJSON object.
         *
         * @param {import("../geom/Geometry.js").default} geometry Geometry.
         * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
         * @return {EsriJSONGeometry} Object.
         * @api
         */
        writeGeometryObject(geometry, opt_options) {
            return writeGeometry(geometry, this.adaptOptions(opt_options));
        }
        /**
         * Encode a feature as a esriJSON Feature object.
         *
         * @param {import("../Feature.js").default} feature Feature.
         * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
         * @return {Object} Object.
         * @api
         */
        writeFeatureObject(feature, opt_options) {
            opt_options = this.adaptOptions(opt_options);
            const object = {};
            if (!feature.hasProperties()) {
                object['attributes'] = {};
                return object;
            }
            const properties = feature.getProperties();
            const geometry = feature.getGeometry();
            if (geometry) {
                object['geometry'] = writeGeometry(geometry, opt_options);
                if (opt_options && opt_options.featureProjection) {
                    object['geometry']['spatialReference'] = /** @type {EsriJSONSpatialReferenceWkid} */ ({
                        wkid: Number(proj_js_18.get(opt_options.featureProjection)
                            .getCode()
                            .split(':')
                            .pop()),
                    });
                }
                delete properties[feature.getGeometryName()];
            }
            if (!obj_js_20.isEmpty(properties)) {
                object['attributes'] = properties;
            }
            else {
                object['attributes'] = {};
            }
            return object;
        }
        /**
         * Encode an array of features as a EsriJSON object.
         *
         * @param {Array<import("../Feature.js").default>} features Features.
         * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
         * @return {EsriJSONFeatureSet} EsriJSON Object.
         * @api
         */
        writeFeaturesObject(features, opt_options) {
            opt_options = this.adaptOptions(opt_options);
            const objects = [];
            for (let i = 0, ii = features.length; i < ii; ++i) {
                objects.push(this.writeFeatureObject(features[i], opt_options));
            }
            return {
                'features': objects,
            };
        }
    }
    /**
     * @param {EsriJSONGeometry} object Object.
     * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
     * @return {import("../geom/Geometry.js").default} Geometry.
     */
    function readGeometry(object, opt_options) {
        if (!object) {
            return null;
        }
        /** @type {import("../geom/GeometryType.js").default} */
        let type;
        if (typeof object['x'] === 'number' && typeof object['y'] === 'number') {
            type = GeometryType_js_24.default.POINT;
        }
        else if (object['points']) {
            type = GeometryType_js_24.default.MULTI_POINT;
        }
        else if (object['paths']) {
            const esriJSONPolyline = /** @type {EsriJSONPolyline} */ (object);
            if (esriJSONPolyline.paths.length === 1) {
                type = GeometryType_js_24.default.LINE_STRING;
            }
            else {
                type = GeometryType_js_24.default.MULTI_LINE_STRING;
            }
        }
        else if (object['rings']) {
            const esriJSONPolygon = /** @type {EsriJSONPolygon} */ (object);
            const layout = getGeometryLayout(esriJSONPolygon);
            const rings = convertRings(esriJSONPolygon.rings, layout);
            if (rings.length === 1) {
                type = GeometryType_js_24.default.POLYGON;
                object = obj_js_20.assign({}, object, { ['rings']: rings[0] });
            }
            else {
                type = GeometryType_js_24.default.MULTI_POLYGON;
                object = obj_js_20.assign({}, object, { ['rings']: rings });
            }
        }
        const geometryReader = GEOMETRY_READERS[type];
        return Feature_js_6.transformGeometryWithOptions(geometryReader(object), false, opt_options);
    }
    /**
     * Determines inner and outer rings.
     * Checks if any polygons in this array contain any other polygons in this
     * array. It is used for checking for holes.
     * Logic inspired by: https://github.com/Esri/terraformer-arcgis-parser
     * @param {Array<!Array<!Array<number>>>} rings Rings.
     * @param {import("../geom/GeometryLayout.js").default} layout Geometry layout.
     * @return {Array<!Array<!Array<!Array<number>>>>} Transformed rings.
     */
    function convertRings(rings, layout) {
        const flatRing = [];
        const outerRings = [];
        const holes = [];
        let i, ii;
        for (i = 0, ii = rings.length; i < ii; ++i) {
            flatRing.length = 0;
            deflate_js_9.deflateCoordinates(flatRing, 0, rings[i], layout.length);
            // is this ring an outer ring? is it clockwise?
            const clockwise = orient_js_3.linearRingIsClockwise(flatRing, 0, flatRing.length, layout.length);
            if (clockwise) {
                outerRings.push([rings[i]]);
            }
            else {
                holes.push(rings[i]);
            }
        }
        while (holes.length) {
            const hole = holes.shift();
            let matched = false;
            // loop over all outer rings and see if they contain our hole.
            for (i = outerRings.length - 1; i >= 0; i--) {
                const outerRing = outerRings[i][0];
                const containsHole = extent_js_44.containsExtent(new LinearRing_js_2.default(outerRing).getExtent(), new LinearRing_js_2.default(hole).getExtent());
                if (containsHole) {
                    // the hole is contained push it into our polygon
                    outerRings[i].push(hole);
                    matched = true;
                    break;
                }
            }
            if (!matched) {
                // no outer rings contain this hole turn it into and outer
                // ring (reverse it)
                outerRings.push([hole.reverse()]);
            }
        }
        return outerRings;
    }
    /**
     * @param {EsriJSONPoint} object Object.
     * @return {import("../geom/Geometry.js").default} Point.
     */
    function readPointGeometry(object) {
        let point;
        if (object.m !== undefined && object.z !== undefined) {
            point = new Point_js_6.default([object.x, object.y, object.z, object.m], GeometryLayout_js_7.default.XYZM);
        }
        else if (object.z !== undefined) {
            point = new Point_js_6.default([object.x, object.y, object.z], GeometryLayout_js_7.default.XYZ);
        }
        else if (object.m !== undefined) {
            point = new Point_js_6.default([object.x, object.y, object.m], GeometryLayout_js_7.default.XYM);
        }
        else {
            point = new Point_js_6.default([object.x, object.y]);
        }
        return point;
    }
    /**
     * @param {EsriJSONPolyline} object Object.
     * @return {import("../geom/Geometry.js").default} LineString.
     */
    function readLineStringGeometry(object) {
        const layout = getGeometryLayout(object);
        return new LineString_js_3.default(object.paths[0], layout);
    }
    /**
     * @param {EsriJSONPolyline} object Object.
     * @return {import("../geom/Geometry.js").default} MultiLineString.
     */
    function readMultiLineStringGeometry(object) {
        const layout = getGeometryLayout(object);
        return new MultiLineString_js_2.default(object.paths, layout);
    }
    /**
     * @param {EsriJSONHasZM} object Object.
     * @return {import("../geom/GeometryLayout.js").default} The geometry layout to use.
     */
    function getGeometryLayout(object) {
        let layout = GeometryLayout_js_7.default.XY;
        if (object.hasZ === true && object.hasM === true) {
            layout = GeometryLayout_js_7.default.XYZM;
        }
        else if (object.hasZ === true) {
            layout = GeometryLayout_js_7.default.XYZ;
        }
        else if (object.hasM === true) {
            layout = GeometryLayout_js_7.default.XYM;
        }
        return layout;
    }
    /**
     * @param {EsriJSONMultipoint} object Object.
     * @return {import("../geom/Geometry.js").default} MultiPoint.
     */
    function readMultiPointGeometry(object) {
        const layout = getGeometryLayout(object);
        return new MultiPoint_js_3.default(object.points, layout);
    }
    /**
     * @param {EsriJSONMultiPolygon} object Object.
     * @return {import("../geom/Geometry.js").default} MultiPolygon.
     */
    function readMultiPolygonGeometry(object) {
        const layout = getGeometryLayout(object);
        return new MultiPolygon_js_2.default(object.rings, layout);
    }
    /**
     * @param {EsriJSONPolygon} object Object.
     * @return {import("../geom/Geometry.js").default} Polygon.
     */
    function readPolygonGeometry(object) {
        const layout = getGeometryLayout(object);
        return new Polygon_js_10.default(object.rings, layout);
    }
    /**
     * @param {import("../geom/Point.js").default} geometry Geometry.
     * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
     * @return {EsriJSONPoint} EsriJSON geometry.
     */
    function writePointGeometry(geometry, opt_options) {
        const coordinates = geometry.getCoordinates();
        /** @type {EsriJSONPoint} */
        let esriJSON;
        const layout = geometry.getLayout();
        if (layout === GeometryLayout_js_7.default.XYZ) {
            esriJSON = {
                x: coordinates[0],
                y: coordinates[1],
                z: coordinates[2],
            };
        }
        else if (layout === GeometryLayout_js_7.default.XYM) {
            esriJSON = {
                x: coordinates[0],
                y: coordinates[1],
                m: coordinates[2],
            };
        }
        else if (layout === GeometryLayout_js_7.default.XYZM) {
            esriJSON = {
                x: coordinates[0],
                y: coordinates[1],
                z: coordinates[2],
                m: coordinates[3],
            };
        }
        else if (layout === GeometryLayout_js_7.default.XY) {
            esriJSON = {
                x: coordinates[0],
                y: coordinates[1],
            };
        }
        else {
            asserts_js_19.assert(false, 34); // Invalid geometry layout
        }
        return esriJSON;
    }
    /**
     * @param {import("../geom/SimpleGeometry.js").default} geometry Geometry.
     * @return {Object} Object with boolean hasZ and hasM keys.
     */
    function getHasZM(geometry) {
        const layout = geometry.getLayout();
        return {
            hasZ: layout === GeometryLayout_js_7.default.XYZ || layout === GeometryLayout_js_7.default.XYZM,
            hasM: layout === GeometryLayout_js_7.default.XYM || layout === GeometryLayout_js_7.default.XYZM,
        };
    }
    /**
     * @param {import("../geom/LineString.js").default} lineString Geometry.
     * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
     * @return {EsriJSONPolyline} EsriJSON geometry.
     */
    function writeLineStringGeometry(lineString, opt_options) {
        const hasZM = getHasZM(lineString);
        return {
            hasZ: hasZM.hasZ,
            hasM: hasZM.hasM,
            paths: [
                /** @type {Array<EsriJSONPosition>} */ (lineString.getCoordinates()),
            ],
        };
    }
    /**
     * @param {import("../geom/Polygon.js").default} polygon Geometry.
     * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
     * @return {EsriJSONPolygon} EsriJSON geometry.
     */
    function writePolygonGeometry(polygon, opt_options) {
        // Esri geometries use the left-hand rule
        const hasZM = getHasZM(polygon);
        return {
            hasZ: hasZM.hasZ,
            hasM: hasZM.hasM,
            rings: /** @type {Array<Array<EsriJSONPosition>>} */ (polygon.getCoordinates(false)),
        };
    }
    /**
     * @param {import("../geom/MultiLineString.js").default} multiLineString Geometry.
     * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
     * @return {EsriJSONPolyline} EsriJSON geometry.
     */
    function writeMultiLineStringGeometry(multiLineString, opt_options) {
        const hasZM = getHasZM(multiLineString);
        return {
            hasZ: hasZM.hasZ,
            hasM: hasZM.hasM,
            paths: /** @type {Array<Array<EsriJSONPosition>>} */ (multiLineString.getCoordinates()),
        };
    }
    /**
     * @param {import("../geom/MultiPoint.js").default} multiPoint Geometry.
     * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
     * @return {EsriJSONMultipoint} EsriJSON geometry.
     */
    function writeMultiPointGeometry(multiPoint, opt_options) {
        const hasZM = getHasZM(multiPoint);
        return {
            hasZ: hasZM.hasZ,
            hasM: hasZM.hasM,
            points: /** @type {Array<EsriJSONPosition>} */ (multiPoint.getCoordinates()),
        };
    }
    /**
     * @param {import("../geom/MultiPolygon.js").default} geometry Geometry.
     * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
     * @return {EsriJSONPolygon} EsriJSON geometry.
     */
    function writeMultiPolygonGeometry(geometry, opt_options) {
        const hasZM = getHasZM(geometry);
        const coordinates = geometry.getCoordinates(false);
        const output = [];
        for (let i = 0; i < coordinates.length; i++) {
            for (let x = coordinates[i].length - 1; x >= 0; x--) {
                output.push(coordinates[i][x]);
            }
        }
        return {
            hasZ: hasZM.hasZ,
            hasM: hasZM.hasM,
            rings: /** @type {Array<Array<EsriJSONPosition>>} */ (output),
        };
    }
    /**
     * @param {import("../geom/Geometry.js").default} geometry Geometry.
     * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
     * @return {EsriJSONGeometry} EsriJSON geometry.
     */
    function writeGeometry(geometry, opt_options) {
        const geometryWriter = GEOMETRY_WRITERS[geometry.getType()];
        return geometryWriter(Feature_js_6.transformGeometryWithOptions(geometry, true, opt_options), opt_options);
    }
    exports.default = EsriJSON;
});
/**
 * @module ol/format/GeoJSON
 */
define("node_modules/ol/src/format/GeoJSON", ["require", "exports", "node_modules/ol/src/Feature", "node_modules/ol/src/geom/GeometryCollection", "node_modules/ol/src/geom/GeometryType", "node_modules/ol/src/format/JSONFeature", "node_modules/ol/src/geom/LineString", "node_modules/ol/src/geom/MultiLineString", "node_modules/ol/src/geom/MultiPoint", "node_modules/ol/src/geom/MultiPolygon", "node_modules/ol/src/geom/Point", "node_modules/ol/src/geom/Polygon", "node_modules/ol/src/asserts", "node_modules/ol/src/obj", "node_modules/ol/src/proj", "node_modules/ol/src/format/Feature"], function (require, exports, Feature_js_7, GeometryCollection_js_1, GeometryType_js_25, JSONFeature_js_2, LineString_js_4, MultiLineString_js_3, MultiPoint_js_4, MultiPolygon_js_3, Point_js_7, Polygon_js_11, asserts_js_20, obj_js_21, proj_js_19, Feature_js_8) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @typedef {import("geojson").GeoJSON} GeoJSONObject
     * @typedef {import("geojson").Feature} GeoJSONFeature
     * @typedef {import("geojson").FeatureCollection} GeoJSONFeatureCollection
     * @typedef {import("geojson").Geometry} GeoJSONGeometry
     * @typedef {import("geojson").Point} GeoJSONPoint
     * @typedef {import("geojson").LineString} GeoJSONLineString
     * @typedef {import("geojson").Polygon} GeoJSONPolygon
     * @typedef {import("geojson").MultiPoint} GeoJSONMultiPoint
     * @typedef {import("geojson").MultiLineString} GeoJSONMultiLineString
     * @typedef {import("geojson").MultiPolygon} GeoJSONMultiPolygon
     * @typedef {import("geojson").GeometryCollection} GeoJSONGeometryCollection
     */
    /**
     * @typedef {Object} Options
     * @property {import("../proj.js").ProjectionLike} [dataProjection='EPSG:4326'] Default data projection.
     * @property {import("../proj.js").ProjectionLike} [featureProjection] Projection for features read or
     * written by the format.  Options passed to read or write methods will take precedence.
     * @property {string} [geometryName] Geometry name to use when creating features.
     * @property {boolean} [extractGeometryName=false] Certain GeoJSON providers include
     * the geometry_name field in the feature GeoJSON. If set to `true` the GeoJSON reader
     * will look for that field to set the geometry name. If both this field is set to `true`
     * and a `geometryName` is provided, the `geometryName` will take precedence.
     */
    /**
     * @classdesc
     * Feature format for reading and writing data in the GeoJSON format.
     *
     * @api
     */
    class GeoJSON extends JSONFeature_js_2.default {
        /**
         * @param {Options=} opt_options Options.
         */
        constructor(opt_options) {
            const options = opt_options ? opt_options : {};
            super();
            /**
             * @type {import("../proj/Projection.js").default}
             */
            this.dataProjection = proj_js_19.get(options.dataProjection ? options.dataProjection : 'EPSG:4326');
            if (options.featureProjection) {
                this.defaultFeatureProjection = proj_js_19.get(options.featureProjection);
            }
            /**
             * Name of the geometry attribute for features.
             * @type {string|undefined}
             * @private
             */
            this.geometryName_ = options.geometryName;
            /**
             * Look for the geometry name in the feature GeoJSON
             * @type {boolean|undefined}
             * @private
             */
            this.extractGeometryName_ = options.extractGeometryName;
        }
        /**
         * @param {Object} object Object.
         * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
         * @protected
         * @return {import("../Feature.js").default} Feature.
         */
        readFeatureFromObject(object, opt_options) {
            /**
             * @type {GeoJSONFeature}
             */
            let geoJSONFeature = null;
            if (object['type'] === 'Feature') {
                geoJSONFeature = /** @type {GeoJSONFeature} */ (object);
            }
            else {
                geoJSONFeature = {
                    'type': 'Feature',
                    'geometry': /** @type {GeoJSONGeometry} */ (object),
                    'properties': null,
                };
            }
            const geometry = readGeometry(geoJSONFeature['geometry'], opt_options);
            const feature = new Feature_js_7.default();
            if (this.geometryName_) {
                feature.setGeometryName(this.geometryName_);
            }
            else if (this.extractGeometryName_ &&
                'geometry_name' in geoJSONFeature !== undefined) {
                feature.setGeometryName(geoJSONFeature['geometry_name']);
            }
            feature.setGeometry(geometry);
            if ('id' in geoJSONFeature) {
                feature.setId(geoJSONFeature['id']);
            }
            if (geoJSONFeature['properties']) {
                feature.setProperties(geoJSONFeature['properties'], true);
            }
            return feature;
        }
        /**
         * @param {Object} object Object.
         * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
         * @protected
         * @return {Array<Feature>} Features.
         */
        readFeaturesFromObject(object, opt_options) {
            const geoJSONObject = /** @type {GeoJSONObject} */ (object);
            /** @type {Array<import("../Feature.js").default>} */
            let features = null;
            if (geoJSONObject['type'] === 'FeatureCollection') {
                const geoJSONFeatureCollection = /** @type {GeoJSONFeatureCollection} */ (object);
                features = [];
                const geoJSONFeatures = geoJSONFeatureCollection['features'];
                for (let i = 0, ii = geoJSONFeatures.length; i < ii; ++i) {
                    features.push(this.readFeatureFromObject(geoJSONFeatures[i], opt_options));
                }
            }
            else {
                features = [this.readFeatureFromObject(object, opt_options)];
            }
            return features;
        }
        /**
         * @param {GeoJSONGeometry} object Object.
         * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
         * @protected
         * @return {import("../geom/Geometry.js").default} Geometry.
         */
        readGeometryFromObject(object, opt_options) {
            return readGeometry(object, opt_options);
        }
        /**
         * @param {Object} object Object.
         * @protected
         * @return {import("../proj/Projection.js").default} Projection.
         */
        readProjectionFromObject(object) {
            const crs = object['crs'];
            let projection;
            if (crs) {
                if (crs['type'] == 'name') {
                    projection = proj_js_19.get(crs['properties']['name']);
                }
                else if (crs['type'] === 'EPSG') {
                    projection = proj_js_19.get('EPSG:' + crs['properties']['code']);
                }
                else {
                    asserts_js_20.assert(false, 36); // Unknown SRS type
                }
            }
            else {
                projection = this.dataProjection;
            }
            return /** @type {import("../proj/Projection.js").default} */ (projection);
        }
        /**
         * Encode a feature as a GeoJSON Feature object.
         *
         * @param {import("../Feature.js").default} feature Feature.
         * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
         * @return {GeoJSONFeature} Object.
         * @api
         */
        writeFeatureObject(feature, opt_options) {
            opt_options = this.adaptOptions(opt_options);
            /** @type {GeoJSONFeature} */
            const object = {
                'type': 'Feature',
                geometry: null,
                properties: null,
            };
            const id = feature.getId();
            if (id !== undefined) {
                object.id = id;
            }
            if (!feature.hasProperties()) {
                return object;
            }
            const properties = feature.getProperties();
            const geometry = feature.getGeometry();
            if (geometry) {
                object.geometry = writeGeometry(geometry, opt_options);
                delete properties[feature.getGeometryName()];
            }
            if (!obj_js_21.isEmpty(properties)) {
                object.properties = properties;
            }
            return object;
        }
        /**
         * Encode an array of features as a GeoJSON object.
         *
         * @param {Array<import("../Feature.js").default>} features Features.
         * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
         * @return {GeoJSONFeatureCollection} GeoJSON Object.
         * @api
         */
        writeFeaturesObject(features, opt_options) {
            opt_options = this.adaptOptions(opt_options);
            const objects = [];
            for (let i = 0, ii = features.length; i < ii; ++i) {
                objects.push(this.writeFeatureObject(features[i], opt_options));
            }
            return {
                type: 'FeatureCollection',
                features: objects,
            };
        }
        /**
         * Encode a geometry as a GeoJSON object.
         *
         * @param {import("../geom/Geometry.js").default} geometry Geometry.
         * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
         * @return {GeoJSONGeometry|GeoJSONGeometryCollection} Object.
         * @api
         */
        writeGeometryObject(geometry, opt_options) {
            return writeGeometry(geometry, this.adaptOptions(opt_options));
        }
    }
    /**
     * @param {GeoJSONGeometry|GeoJSONGeometryCollection} object Object.
     * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
     * @return {import("../geom/Geometry.js").default} Geometry.
     */
    function readGeometry(object, opt_options) {
        if (!object) {
            return null;
        }
        /**
         * @type {import("../geom/Geometry.js").default}
         */
        let geometry;
        switch (object['type']) {
            case GeometryType_js_25.default.POINT: {
                geometry = readPointGeometry(/** @type {GeoJSONPoint} */ (object));
                break;
            }
            case GeometryType_js_25.default.LINE_STRING: {
                geometry = readLineStringGeometry(
                /** @type {GeoJSONLineString} */ (object));
                break;
            }
            case GeometryType_js_25.default.POLYGON: {
                geometry = readPolygonGeometry(/** @type {GeoJSONPolygon} */ (object));
                break;
            }
            case GeometryType_js_25.default.MULTI_POINT: {
                geometry = readMultiPointGeometry(
                /** @type {GeoJSONMultiPoint} */ (object));
                break;
            }
            case GeometryType_js_25.default.MULTI_LINE_STRING: {
                geometry = readMultiLineStringGeometry(
                /** @type {GeoJSONMultiLineString} */ (object));
                break;
            }
            case GeometryType_js_25.default.MULTI_POLYGON: {
                geometry = readMultiPolygonGeometry(
                /** @type {GeoJSONMultiPolygon} */ (object));
                break;
            }
            case GeometryType_js_25.default.GEOMETRY_COLLECTION: {
                geometry = readGeometryCollectionGeometry(
                /** @type {GeoJSONGeometryCollection} */ (object));
                break;
            }
            default: {
                throw new Error('Unsupported GeoJSON type: ' + object.type);
            }
        }
        return Feature_js_8.transformGeometryWithOptions(geometry, false, opt_options);
    }
    /**
     * @param {GeoJSONGeometryCollection} object Object.
     * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
     * @return {GeometryCollection} Geometry collection.
     */
    function readGeometryCollectionGeometry(object, opt_options) {
        const geometries = object['geometries'].map(
        /**
         * @param {GeoJSONGeometry} geometry Geometry.
         * @return {import("../geom/Geometry.js").default} geometry Geometry.
         */
        function (geometry) {
            return readGeometry(geometry, opt_options);
        });
        return new GeometryCollection_js_1.default(geometries);
    }
    /**
     * @param {GeoJSONPoint} object Object.
     * @return {Point} Point.
     */
    function readPointGeometry(object) {
        return new Point_js_7.default(object['coordinates']);
    }
    /**
     * @param {GeoJSONLineString} object Object.
     * @return {LineString} LineString.
     */
    function readLineStringGeometry(object) {
        return new LineString_js_4.default(object['coordinates']);
    }
    /**
     * @param {GeoJSONMultiLineString} object Object.
     * @return {MultiLineString} MultiLineString.
     */
    function readMultiLineStringGeometry(object) {
        return new MultiLineString_js_3.default(object['coordinates']);
    }
    /**
     * @param {GeoJSONMultiPoint} object Object.
     * @return {MultiPoint} MultiPoint.
     */
    function readMultiPointGeometry(object) {
        return new MultiPoint_js_4.default(object['coordinates']);
    }
    /**
     * @param {GeoJSONMultiPolygon} object Object.
     * @return {MultiPolygon} MultiPolygon.
     */
    function readMultiPolygonGeometry(object) {
        return new MultiPolygon_js_3.default(object['coordinates']);
    }
    /**
     * @param {GeoJSONPolygon} object Object.
     * @return {Polygon} Polygon.
     */
    function readPolygonGeometry(object) {
        return new Polygon_js_11.default(object['coordinates']);
    }
    /**
     * @param {import("../geom/Geometry.js").default} geometry Geometry.
     * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
     * @return {GeoJSONGeometry} GeoJSON geometry.
     */
    function writeGeometry(geometry, opt_options) {
        geometry = Feature_js_8.transformGeometryWithOptions(geometry, true, opt_options);
        const type = geometry.getType();
        /** @type {GeoJSONGeometry} */
        let geoJSON;
        switch (type) {
            case GeometryType_js_25.default.POINT: {
                geoJSON = writePointGeometry(
                /** @type {Point} */ (geometry), opt_options);
                break;
            }
            case GeometryType_js_25.default.LINE_STRING: {
                geoJSON = writeLineStringGeometry(
                /** @type {LineString} */ (geometry), opt_options);
                break;
            }
            case GeometryType_js_25.default.POLYGON: {
                geoJSON = writePolygonGeometry(
                /** @type {Polygon} */ (geometry), opt_options);
                break;
            }
            case GeometryType_js_25.default.MULTI_POINT: {
                geoJSON = writeMultiPointGeometry(
                /** @type {MultiPoint} */ (geometry), opt_options);
                break;
            }
            case GeometryType_js_25.default.MULTI_LINE_STRING: {
                geoJSON = writeMultiLineStringGeometry(
                /** @type {MultiLineString} */ (geometry), opt_options);
                break;
            }
            case GeometryType_js_25.default.MULTI_POLYGON: {
                geoJSON = writeMultiPolygonGeometry(
                /** @type {MultiPolygon} */ (geometry), opt_options);
                break;
            }
            case GeometryType_js_25.default.GEOMETRY_COLLECTION: {
                geoJSON = writeGeometryCollectionGeometry(
                /** @type {GeometryCollection} */ (geometry), opt_options);
                break;
            }
            case GeometryType_js_25.default.CIRCLE: {
                geoJSON = {
                    type: 'GeometryCollection',
                    geometries: [],
                };
                break;
            }
            default: {
                throw new Error('Unsupported geometry type: ' + type);
            }
        }
        return geoJSON;
    }
    /**
     * @param {GeometryCollection} geometry Geometry.
     * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
     * @return {GeoJSONGeometryCollection} GeoJSON geometry collection.
     */
    function writeGeometryCollectionGeometry(geometry, opt_options) {
        const geometries = geometry.getGeometriesArray().map(function (geometry) {
            const options = obj_js_21.assign({}, opt_options);
            delete options.featureProjection;
            return writeGeometry(geometry, options);
        });
        return {
            type: 'GeometryCollection',
            geometries: geometries,
        };
    }
    /**
     * @param {LineString} geometry Geometry.
     * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
     * @return {GeoJSONGeometry} GeoJSON geometry.
     */
    function writeLineStringGeometry(geometry, opt_options) {
        return {
            type: 'LineString',
            coordinates: geometry.getCoordinates(),
        };
    }
    /**
     * @param {MultiLineString} geometry Geometry.
     * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
     * @return {GeoJSONGeometry} GeoJSON geometry.
     */
    function writeMultiLineStringGeometry(geometry, opt_options) {
        return {
            type: 'MultiLineString',
            coordinates: geometry.getCoordinates(),
        };
    }
    /**
     * @param {MultiPoint} geometry Geometry.
     * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
     * @return {GeoJSONGeometry} GeoJSON geometry.
     */
    function writeMultiPointGeometry(geometry, opt_options) {
        return {
            type: 'MultiPoint',
            coordinates: geometry.getCoordinates(),
        };
    }
    /**
     * @param {MultiPolygon} geometry Geometry.
     * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
     * @return {GeoJSONGeometry} GeoJSON geometry.
     */
    function writeMultiPolygonGeometry(geometry, opt_options) {
        let right;
        if (opt_options) {
            right = opt_options.rightHanded;
        }
        return {
            type: 'MultiPolygon',
            coordinates: geometry.getCoordinates(right),
        };
    }
    /**
     * @param {Point} geometry Geometry.
     * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
     * @return {GeoJSONGeometry} GeoJSON geometry.
     */
    function writePointGeometry(geometry, opt_options) {
        return {
            type: 'Point',
            coordinates: geometry.getCoordinates(),
        };
    }
    /**
     * @param {Polygon} geometry Geometry.
     * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
     * @return {GeoJSONGeometry} GeoJSON geometry.
     */
    function writePolygonGeometry(geometry, opt_options) {
        let right;
        if (opt_options) {
            right = opt_options.rightHanded;
        }
        return {
            type: 'Polygon',
            coordinates: geometry.getCoordinates(right),
        };
    }
    exports.default = GeoJSON;
});
define("node_modules/ol/src/xml", ["require", "exports", "node_modules/ol/src/array"], function (require, exports, array_js_24) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getDocument = exports.registerDocument = exports.getXMLSerializer = exports.registerXMLSerializer = exports.pushSerializeAndPop = exports.serialize = exports.pushParseAndPop = exports.parseNode = exports.makeStructureNS = exports.makeSequence = exports.OBJECT_PROPERTY_NODE_FACTORY = exports.makeSimpleNodeFactory = exports.makeArraySerializer = exports.makeChildAppender = exports.makeObjectPropertySetter = exports.makeObjectPropertyPusher = exports.makeReplacer = exports.makeArrayPusher = exports.makeArrayExtender = exports.parse = exports.getAttributeNS = exports.isDocument = exports.getAllTextContent_ = exports.getAllTextContent = exports.createElementNS = exports.XML_SCHEMA_INSTANCE_URI = void 0;
    /**
     * When using {@link module:ol/xml~makeChildAppender} or
     * {@link module:ol/xml~makeSimpleNodeFactory}, the top `objectStack` item needs
     * to have this structure.
     * @typedef {Object} NodeStackItem
     * @property {Node} node
     */
    /**
     * @typedef {function(Element, Array<*>): void} Parser
     */
    /**
     * @typedef {function(Element, *, Array<*>): void} Serializer
     */
    /**
     * @type {string}
     */
    exports.XML_SCHEMA_INSTANCE_URI = 'http://www.w3.org/2001/XMLSchema-instance';
    /**
     * @param {string} namespaceURI Namespace URI.
     * @param {string} qualifiedName Qualified name.
     * @return {Element} Node.
     */
    function createElementNS(namespaceURI, qualifiedName) {
        return getDocument().createElementNS(namespaceURI, qualifiedName);
    }
    exports.createElementNS = createElementNS;
    /**
     * Recursively grab all text content of child nodes into a single string.
     * @param {Node} node Node.
     * @param {boolean} normalizeWhitespace Normalize whitespace: remove all line
     * breaks.
     * @return {string} All text content.
     * @api
     */
    function getAllTextContent(node, normalizeWhitespace) {
        return getAllTextContent_(node, normalizeWhitespace, []).join('');
    }
    exports.getAllTextContent = getAllTextContent;
    /**
     * Recursively grab all text content of child nodes into a single string.
     * @param {Node} node Node.
     * @param {boolean} normalizeWhitespace Normalize whitespace: remove all line
     * breaks.
     * @param {Array<string>} accumulator Accumulator.
     * @private
     * @return {Array<string>} Accumulator.
     */
    function getAllTextContent_(node, normalizeWhitespace, accumulator) {
        if (node.nodeType == Node.CDATA_SECTION_NODE ||
            node.nodeType == Node.TEXT_NODE) {
            if (normalizeWhitespace) {
                accumulator.push(String(node.nodeValue).replace(/(\r\n|\r|\n)/g, ''));
            }
            else {
                accumulator.push(node.nodeValue);
            }
        }
        else {
            let n;
            for (n = node.firstChild; n; n = n.nextSibling) {
                getAllTextContent_(n, normalizeWhitespace, accumulator);
            }
        }
        return accumulator;
    }
    exports.getAllTextContent_ = getAllTextContent_;
    /**
     * @param {Object} object Object.
     * @return {boolean} Is a document.
     */
    function isDocument(object) {
        return 'documentElement' in object;
    }
    exports.isDocument = isDocument;
    /**
     * @param {Element} node Node.
     * @param {?string} namespaceURI Namespace URI.
     * @param {string} name Attribute name.
     * @return {string} Value
     */
    function getAttributeNS(node, namespaceURI, name) {
        return node.getAttributeNS(namespaceURI, name) || '';
    }
    exports.getAttributeNS = getAttributeNS;
    /**
     * Parse an XML string to an XML Document.
     * @param {string} xml XML.
     * @return {Document} Document.
     * @api
     */
    function parse(xml) {
        return new DOMParser().parseFromString(xml, 'application/xml');
    }
    exports.parse = parse;
    /**
     * Make an array extender function for extending the array at the top of the
     * object stack.
     * @param {function(this: T, Node, Array<*>): (Array<*>|undefined)} valueReader Value reader.
     * @param {T=} opt_this The object to use as `this` in `valueReader`.
     * @return {Parser} Parser.
     * @template T
     */
    function makeArrayExtender(valueReader, opt_this) {
        return (
        /**
         * @param {Node} node Node.
         * @param {Array<*>} objectStack Object stack.
         */
        function (node, objectStack) {
            const value = valueReader.call(opt_this !== undefined ? opt_this : this, node, objectStack);
            if (value !== undefined) {
                const array = /** @type {Array<*>} */ (objectStack[objectStack.length - 1]);
                array_js_24.extend(array, value);
            }
        });
    }
    exports.makeArrayExtender = makeArrayExtender;
    /**
     * Make an array pusher function for pushing to the array at the top of the
     * object stack.
     * @param {function(this: T, Element, Array<*>): *} valueReader Value reader.
     * @param {T=} opt_this The object to use as `this` in `valueReader`.
     * @return {Parser} Parser.
     * @template T
     */
    function makeArrayPusher(valueReader, opt_this) {
        return (
        /**
         * @param {Element} node Node.
         * @param {Array<*>} objectStack Object stack.
         */
        function (node, objectStack) {
            const value = valueReader.call(opt_this !== undefined ? opt_this : this, node, objectStack);
            if (value !== undefined) {
                const array = /** @type {Array<*>} */ (objectStack[objectStack.length - 1]);
                array.push(value);
            }
        });
    }
    exports.makeArrayPusher = makeArrayPusher;
    /**
     * Make an object stack replacer function for replacing the object at the
     * top of the stack.
     * @param {function(this: T, Node, Array<*>): *} valueReader Value reader.
     * @param {T=} opt_this The object to use as `this` in `valueReader`.
     * @return {Parser} Parser.
     * @template T
     */
    function makeReplacer(valueReader, opt_this) {
        return (
        /**
         * @param {Node} node Node.
         * @param {Array<*>} objectStack Object stack.
         */
        function (node, objectStack) {
            const value = valueReader.call(opt_this !== undefined ? opt_this : this, node, objectStack);
            if (value !== undefined) {
                objectStack[objectStack.length - 1] = value;
            }
        });
    }
    exports.makeReplacer = makeReplacer;
    /**
     * Make an object property pusher function for adding a property to the
     * object at the top of the stack.
     * @param {function(this: T, Element, Array<*>): *} valueReader Value reader.
     * @param {string=} opt_property Property.
     * @param {T=} opt_this The object to use as `this` in `valueReader`.
     * @return {Parser} Parser.
     * @template T
     */
    function makeObjectPropertyPusher(valueReader, opt_property, opt_this) {
        return (
        /**
         * @param {Element} node Node.
         * @param {Array<*>} objectStack Object stack.
         */
        function (node, objectStack) {
            const value = valueReader.call(opt_this !== undefined ? opt_this : this, node, objectStack);
            if (value !== undefined) {
                const object = /** @type {!Object} */ (objectStack[objectStack.length - 1]);
                const property = opt_property !== undefined ? opt_property : node.localName;
                let array;
                if (property in object) {
                    array = object[property];
                }
                else {
                    array = [];
                    object[property] = array;
                }
                array.push(value);
            }
        });
    }
    exports.makeObjectPropertyPusher = makeObjectPropertyPusher;
    /**
     * Make an object property setter function.
     * @param {function(this: T, Element, Array<*>): *} valueReader Value reader.
     * @param {string=} opt_property Property.
     * @param {T=} opt_this The object to use as `this` in `valueReader`.
     * @return {Parser} Parser.
     * @template T
     */
    function makeObjectPropertySetter(valueReader, opt_property, opt_this) {
        return (
        /**
         * @param {Element} node Node.
         * @param {Array<*>} objectStack Object stack.
         */
        function (node, objectStack) {
            const value = valueReader.call(opt_this !== undefined ? opt_this : this, node, objectStack);
            if (value !== undefined) {
                const object = /** @type {!Object} */ (objectStack[objectStack.length - 1]);
                const property = opt_property !== undefined ? opt_property : node.localName;
                object[property] = value;
            }
        });
    }
    exports.makeObjectPropertySetter = makeObjectPropertySetter;
    /**
     * Create a serializer that appends nodes written by its `nodeWriter` to its
     * designated parent. The parent is the `node` of the
     * {@link module:ol/xml~NodeStackItem} at the top of the `objectStack`.
     * @param {function(this: T, Node, V, Array<*>): void} nodeWriter Node writer.
     * @param {T=} opt_this The object to use as `this` in `nodeWriter`.
     * @return {Serializer} Serializer.
     * @template T, V
     */
    function makeChildAppender(nodeWriter, opt_this) {
        return function (node, value, objectStack) {
            nodeWriter.call(opt_this !== undefined ? opt_this : this, node, value, objectStack);
            const parent = /** @type {NodeStackItem} */ (objectStack[objectStack.length - 1]);
            const parentNode = parent.node;
            parentNode.appendChild(node);
        };
    }
    exports.makeChildAppender = makeChildAppender;
    /**
     * Create a serializer that calls the provided `nodeWriter` from
     * {@link module:ol/xml~serialize}. This can be used by the parent writer to have the
     * 'nodeWriter' called with an array of values when the `nodeWriter` was
     * designed to serialize a single item. An example would be a LineString
     * geometry writer, which could be reused for writing MultiLineString
     * geometries.
     * @param {function(this: T, Element, V, Array<*>): void} nodeWriter Node writer.
     * @param {T=} opt_this The object to use as `this` in `nodeWriter`.
     * @return {Serializer} Serializer.
     * @template T, V
     */
    function makeArraySerializer(nodeWriter, opt_this) {
        let serializersNS, nodeFactory;
        return function (node, value, objectStack) {
            if (serializersNS === undefined) {
                serializersNS = {};
                const serializers = {};
                serializers[node.localName] = nodeWriter;
                serializersNS[node.namespaceURI] = serializers;
                nodeFactory = makeSimpleNodeFactory(node.localName);
            }
            serialize(serializersNS, nodeFactory, value, objectStack);
        };
    }
    exports.makeArraySerializer = makeArraySerializer;
    /**
     * Create a node factory which can use the `opt_keys` passed to
     * {@link module:ol/xml~serialize} or {@link module:ol/xml~pushSerializeAndPop} as node names,
     * or a fixed node name. The namespace of the created nodes can either be fixed,
     * or the parent namespace will be used.
     * @param {string=} opt_nodeName Fixed node name which will be used for all
     *     created nodes. If not provided, the 3rd argument to the resulting node
     *     factory needs to be provided and will be the nodeName.
     * @param {string=} opt_namespaceURI Fixed namespace URI which will be used for
     *     all created nodes. If not provided, the namespace of the parent node will
     *     be used.
     * @return {function(*, Array<*>, string=): (Node|undefined)} Node factory.
     */
    function makeSimpleNodeFactory(opt_nodeName, opt_namespaceURI) {
        const fixedNodeName = opt_nodeName;
        return (
        /**
         * @param {*} value Value.
         * @param {Array<*>} objectStack Object stack.
         * @param {string=} opt_nodeName Node name.
         * @return {Node} Node.
         */
        function (value, objectStack, opt_nodeName) {
            const context = /** @type {NodeStackItem} */ (objectStack[objectStack.length - 1]);
            const node = context.node;
            let nodeName = fixedNodeName;
            if (nodeName === undefined) {
                nodeName = opt_nodeName;
            }
            const namespaceURI = opt_namespaceURI !== undefined ? opt_namespaceURI : node.namespaceURI;
            return createElementNS(namespaceURI, /** @type {string} */ (nodeName));
        });
    }
    exports.makeSimpleNodeFactory = makeSimpleNodeFactory;
    /**
     * A node factory that creates a node using the parent's `namespaceURI` and the
     * `nodeName` passed by {@link module:ol/xml~serialize} or
     * {@link module:ol/xml~pushSerializeAndPop} to the node factory.
     * @const
     * @type {function(*, Array<*>, string=): (Node|undefined)}
     */
    exports.OBJECT_PROPERTY_NODE_FACTORY = makeSimpleNodeFactory();
    /**
     * Create an array of `values` to be used with {@link module:ol/xml~serialize} or
     * {@link module:ol/xml~pushSerializeAndPop}, where `orderedKeys` has to be provided as
     * `opt_key` argument.
     * @param {Object<string, *>} object Key-value pairs for the sequence. Keys can
     *     be a subset of the `orderedKeys`.
     * @param {Array<string>} orderedKeys Keys in the order of the sequence.
     * @return {Array<*>} Values in the order of the sequence. The resulting array
     *     has the same length as the `orderedKeys` array. Values that are not
     *     present in `object` will be `undefined` in the resulting array.
     */
    function makeSequence(object, orderedKeys) {
        const length = orderedKeys.length;
        const sequence = new Array(length);
        for (let i = 0; i < length; ++i) {
            sequence[i] = object[orderedKeys[i]];
        }
        return sequence;
    }
    exports.makeSequence = makeSequence;
    /**
     * Create a namespaced structure, using the same values for each namespace.
     * This can be used as a starting point for versioned parsers, when only a few
     * values are version specific.
     * @param {Array<string>} namespaceURIs Namespace URIs.
     * @param {T} structure Structure.
     * @param {Object<string, T>=} opt_structureNS Namespaced structure to add to.
     * @return {Object<string, T>} Namespaced structure.
     * @template T
     */
    function makeStructureNS(namespaceURIs, structure, opt_structureNS) {
        /**
         * @type {Object<string, T>}
         */
        const structureNS = opt_structureNS !== undefined ? opt_structureNS : {};
        let i, ii;
        for (i = 0, ii = namespaceURIs.length; i < ii; ++i) {
            structureNS[namespaceURIs[i]] = structure;
        }
        return structureNS;
    }
    exports.makeStructureNS = makeStructureNS;
    /**
     * Parse a node using the parsers and object stack.
     * @param {Object<string, Object<string, Parser>>} parsersNS
     *     Parsers by namespace.
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @param {*=} opt_this The object to use as `this`.
     */
    function parseNode(parsersNS, node, objectStack, opt_this) {
        let n;
        for (n = node.firstElementChild; n; n = n.nextElementSibling) {
            const parsers = parsersNS[n.namespaceURI];
            if (parsers !== undefined) {
                const parser = parsers[n.localName];
                if (parser !== undefined) {
                    parser.call(opt_this, n, objectStack);
                }
            }
        }
    }
    exports.parseNode = parseNode;
    /**
     * Push an object on top of the stack, parse and return the popped object.
     * @param {T} object Object.
     * @param {Object<string, Object<string, Parser>>} parsersNS
     *     Parsers by namespace.
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @param {*=} opt_this The object to use as `this`.
     * @return {T} Object.
     * @template T
     */
    function pushParseAndPop(object, parsersNS, node, objectStack, opt_this) {
        objectStack.push(object);
        parseNode(parsersNS, node, objectStack, opt_this);
        return /** @type {T} */ (objectStack.pop());
    }
    exports.pushParseAndPop = pushParseAndPop;
    /**
     * Walk through an array of `values` and call a serializer for each value.
     * @param {Object<string, Object<string, Serializer>>} serializersNS
     *     Namespaced serializers.
     * @param {function(this: T, *, Array<*>, (string|undefined)): (Node|undefined)} nodeFactory
     *     Node factory. The `nodeFactory` creates the node whose namespace and name
     *     will be used to choose a node writer from `serializersNS`. This
     *     separation allows us to decide what kind of node to create, depending on
     *     the value we want to serialize. An example for this would be different
     *     geometry writers based on the geometry type.
     * @param {Array<*>} values Values to serialize. An example would be an array
     *     of {@link module:ol/Feature~Feature} instances.
     * @param {Array<*>} objectStack Node stack.
     * @param {Array<string>=} opt_keys Keys of the `values`. Will be passed to the
     *     `nodeFactory`. This is used for serializing object literals where the
     *     node name relates to the property key. The array length of `opt_keys` has
     *     to match the length of `values`. For serializing a sequence, `opt_keys`
     *     determines the order of the sequence.
     * @param {T=} opt_this The object to use as `this` for the node factory and
     *     serializers.
     * @template T
     */
    function serialize(serializersNS, nodeFactory, values, objectStack, opt_keys, opt_this) {
        const length = (opt_keys !== undefined ? opt_keys : values).length;
        let value, node;
        for (let i = 0; i < length; ++i) {
            value = values[i];
            if (value !== undefined) {
                node = nodeFactory.call(opt_this !== undefined ? opt_this : this, value, objectStack, opt_keys !== undefined ? opt_keys[i] : undefined);
                if (node !== undefined) {
                    serializersNS[node.namespaceURI][node.localName].call(opt_this, node, value, objectStack);
                }
            }
        }
    }
    exports.serialize = serialize;
    /**
     * @param {O} object Object.
     * @param {Object<string, Object<string, Serializer>>} serializersNS
     *     Namespaced serializers.
     * @param {function(this: T, *, Array<*>, (string|undefined)): (Node|undefined)} nodeFactory
     *     Node factory. The `nodeFactory` creates the node whose namespace and name
     *     will be used to choose a node writer from `serializersNS`. This
     *     separation allows us to decide what kind of node to create, depending on
     *     the value we want to serialize. An example for this would be different
     *     geometry writers based on the geometry type.
     * @param {Array<*>} values Values to serialize. An example would be an array
     *     of {@link module:ol/Feature~Feature} instances.
     * @param {Array<*>} objectStack Node stack.
     * @param {Array<string>=} opt_keys Keys of the `values`. Will be passed to the
     *     `nodeFactory`. This is used for serializing object literals where the
     *     node name relates to the property key. The array length of `opt_keys` has
     *     to match the length of `values`. For serializing a sequence, `opt_keys`
     *     determines the order of the sequence.
     * @param {T=} opt_this The object to use as `this` for the node factory and
     *     serializers.
     * @return {O|undefined} Object.
     * @template O, T
     */
    function pushSerializeAndPop(object, serializersNS, nodeFactory, values, objectStack, opt_keys, opt_this) {
        objectStack.push(object);
        serialize(serializersNS, nodeFactory, values, objectStack, opt_keys, opt_this);
        return /** @type {O|undefined} */ (objectStack.pop());
    }
    exports.pushSerializeAndPop = pushSerializeAndPop;
    let xmlSerializer_ = undefined;
    /**
     * Register a XMLSerializer. Can be used  to inject a XMLSerializer
     * where there is no globally available implementation.
     *
     * @param {XMLSerializer} xmlSerializer A XMLSerializer.
     * @api
     */
    function registerXMLSerializer(xmlSerializer) {
        xmlSerializer_ = xmlSerializer;
    }
    exports.registerXMLSerializer = registerXMLSerializer;
    /**
     * @return {XMLSerializer} The XMLSerializer.
     */
    function getXMLSerializer() {
        if (xmlSerializer_ === undefined && typeof XMLSerializer !== 'undefined') {
            xmlSerializer_ = new XMLSerializer();
        }
        return xmlSerializer_;
    }
    exports.getXMLSerializer = getXMLSerializer;
    let document_ = undefined;
    /**
     * Register a Document to use when creating nodes for XML serializations. Can be used
     * to inject a Document where there is no globally available implementation.
     *
     * @param {Document} document A Document.
     * @api
     */
    function registerDocument(document) {
        document_ = document;
    }
    exports.registerDocument = registerDocument;
    /**
     * Get a document that should be used when creating nodes for XML serializations.
     * @return {Document} The document.
     */
    function getDocument() {
        if (document_ === undefined && typeof document !== 'undefined') {
            document_ = document.implementation.createDocument('', '', null);
        }
        return document_;
    }
    exports.getDocument = getDocument;
});
define("node_modules/ol/src/format/XMLFeature", ["require", "exports", "node_modules/ol/src/format/Feature", "node_modules/ol/src/format/FormatType", "node_modules/ol/src/util", "node_modules/ol/src/array", "node_modules/ol/src/xml"], function (require, exports, Feature_js_9, FormatType_js_3, util_js_27, array_js_25, xml_js_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @classdesc
     * Abstract base class; normally only used for creating subclasses and not
     * instantiated in apps.
     * Base class for XML feature formats.
     *
     * @abstract
     */
    class XMLFeature extends Feature_js_9.default {
        constructor() {
            super();
            /**
             * @type {XMLSerializer}
             * @private
             */
            this.xmlSerializer_ = xml_js_1.getXMLSerializer();
        }
        /**
         * @return {import("./FormatType.js").default} Format.
         */
        getType() {
            return FormatType_js_3.default.XML;
        }
        /**
         * Read a single feature.
         *
         * @param {Document|Element|Object|string} source Source.
         * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
         * @return {import("../Feature.js").default} Feature.
         * @api
         */
        readFeature(source, opt_options) {
            if (!source) {
                return null;
            }
            else if (typeof source === 'string') {
                const doc = xml_js_1.parse(source);
                return this.readFeatureFromDocument(doc, opt_options);
            }
            else if (xml_js_1.isDocument(source)) {
                return this.readFeatureFromDocument(
                /** @type {Document} */ (source), opt_options);
            }
            else {
                return this.readFeatureFromNode(
                /** @type {Element} */ (source), opt_options);
            }
        }
        /**
         * @param {Document} doc Document.
         * @param {import("./Feature.js").ReadOptions=} opt_options Options.
         * @return {import("../Feature.js").default} Feature.
         */
        readFeatureFromDocument(doc, opt_options) {
            const features = this.readFeaturesFromDocument(doc, opt_options);
            if (features.length > 0) {
                return features[0];
            }
            else {
                return null;
            }
        }
        /**
         * @param {Element} node Node.
         * @param {import("./Feature.js").ReadOptions=} opt_options Options.
         * @return {import("../Feature.js").default} Feature.
         */
        readFeatureFromNode(node, opt_options) {
            return null; // not implemented
        }
        /**
         * Read all features from a feature collection.
         *
         * @param {Document|Element|Object|string} source Source.
         * @param {import("./Feature.js").ReadOptions=} opt_options Options.
         * @return {Array<import("../Feature.js").default>} Features.
         * @api
         */
        readFeatures(source, opt_options) {
            if (!source) {
                return [];
            }
            else if (typeof source === 'string') {
                const doc = xml_js_1.parse(source);
                return this.readFeaturesFromDocument(doc, opt_options);
            }
            else if (xml_js_1.isDocument(source)) {
                return this.readFeaturesFromDocument(
                /** @type {Document} */ (source), opt_options);
            }
            else {
                return this.readFeaturesFromNode(
                /** @type {Element} */ (source), opt_options);
            }
        }
        /**
         * @param {Document} doc Document.
         * @param {import("./Feature.js").ReadOptions=} opt_options Options.
         * @protected
         * @return {Array<import("../Feature.js").default>} Features.
         */
        readFeaturesFromDocument(doc, opt_options) {
            /** @type {Array<import("../Feature.js").default>} */
            const features = [];
            for (let n = doc.firstChild; n; n = n.nextSibling) {
                if (n.nodeType == Node.ELEMENT_NODE) {
                    array_js_25.extend(features, this.readFeaturesFromNode(/** @type {Element} */ (n), opt_options));
                }
            }
            return features;
        }
        /**
         * @abstract
         * @param {Element} node Node.
         * @param {import("./Feature.js").ReadOptions=} opt_options Options.
         * @protected
         * @return {Array<import("../Feature.js").default>} Features.
         */
        readFeaturesFromNode(node, opt_options) {
            return util_js_27.abstract();
        }
        /**
         * Read a single geometry from a source.
         *
         * @param {Document|Element|Object|string} source Source.
         * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
         * @return {import("../geom/Geometry.js").default} Geometry.
         */
        readGeometry(source, opt_options) {
            if (!source) {
                return null;
            }
            else if (typeof source === 'string') {
                const doc = xml_js_1.parse(source);
                return this.readGeometryFromDocument(doc, opt_options);
            }
            else if (xml_js_1.isDocument(source)) {
                return this.readGeometryFromDocument(
                /** @type {Document} */ (source), opt_options);
            }
            else {
                return this.readGeometryFromNode(
                /** @type {Element} */ (source), opt_options);
            }
        }
        /**
         * @param {Document} doc Document.
         * @param {import("./Feature.js").ReadOptions=} opt_options Options.
         * @protected
         * @return {import("../geom/Geometry.js").default} Geometry.
         */
        readGeometryFromDocument(doc, opt_options) {
            return null; // not implemented
        }
        /**
         * @param {Element} node Node.
         * @param {import("./Feature.js").ReadOptions=} opt_options Options.
         * @protected
         * @return {import("../geom/Geometry.js").default} Geometry.
         */
        readGeometryFromNode(node, opt_options) {
            return null; // not implemented
        }
        /**
         * Read the projection from the source.
         *
         * @param {Document|Element|Object|string} source Source.
         * @return {import("../proj/Projection.js").default} Projection.
         * @api
         */
        readProjection(source) {
            if (!source) {
                return null;
            }
            else if (typeof source === 'string') {
                const doc = xml_js_1.parse(source);
                return this.readProjectionFromDocument(doc);
            }
            else if (xml_js_1.isDocument(source)) {
                return this.readProjectionFromDocument(/** @type {Document} */ (source));
            }
            else {
                return this.readProjectionFromNode(/** @type {Element} */ (source));
            }
        }
        /**
         * @param {Document} doc Document.
         * @protected
         * @return {import("../proj/Projection.js").default} Projection.
         */
        readProjectionFromDocument(doc) {
            return this.dataProjection;
        }
        /**
         * @param {Element} node Node.
         * @protected
         * @return {import("../proj/Projection.js").default} Projection.
         */
        readProjectionFromNode(node) {
            return this.dataProjection;
        }
        /**
         * Encode a feature as string.
         *
         * @param {import("../Feature.js").default} feature Feature.
         * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
         * @return {string} Encoded feature.
         */
        writeFeature(feature, opt_options) {
            const node = this.writeFeatureNode(feature, opt_options);
            return this.xmlSerializer_.serializeToString(node);
        }
        /**
         * @param {import("../Feature.js").default} feature Feature.
         * @param {import("./Feature.js").WriteOptions=} opt_options Options.
         * @protected
         * @return {Node} Node.
         */
        writeFeatureNode(feature, opt_options) {
            return null; // not implemented
        }
        /**
         * Encode an array of features as string.
         *
         * @param {Array<import("../Feature.js").default>} features Features.
         * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
         * @return {string} Result.
         * @api
         */
        writeFeatures(features, opt_options) {
            const node = this.writeFeaturesNode(features, opt_options);
            return this.xmlSerializer_.serializeToString(node);
        }
        /**
         * @param {Array<import("../Feature.js").default>} features Features.
         * @param {import("./Feature.js").WriteOptions=} opt_options Options.
         * @return {Node} Node.
         */
        writeFeaturesNode(features, opt_options) {
            return null; // not implemented
        }
        /**
         * Encode a geometry as string.
         *
         * @param {import("../geom/Geometry.js").default} geometry Geometry.
         * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
         * @return {string} Encoded geometry.
         */
        writeGeometry(geometry, opt_options) {
            const node = this.writeGeometryNode(geometry, opt_options);
            return this.xmlSerializer_.serializeToString(node);
        }
        /**
         * @param {import("../geom/Geometry.js").default} geometry Geometry.
         * @param {import("./Feature.js").WriteOptions=} opt_options Options.
         * @return {Node} Node.
         */
        writeGeometryNode(geometry, opt_options) {
            return null; // not implemented
        }
    }
    exports.default = XMLFeature;
});
define("node_modules/ol/src/format/GMLBase", ["require", "exports", "node_modules/ol/src/Feature", "node_modules/ol/src/geom/GeometryLayout", "node_modules/ol/src/geom/LineString", "node_modules/ol/src/geom/LinearRing", "node_modules/ol/src/geom/MultiLineString", "node_modules/ol/src/geom/MultiPoint", "node_modules/ol/src/geom/MultiPolygon", "node_modules/ol/src/geom/Point", "node_modules/ol/src/geom/Polygon", "node_modules/ol/src/format/XMLFeature", "node_modules/ol/src/obj", "node_modules/ol/src/array", "node_modules/ol/src/xml", "node_modules/ol/src/proj", "node_modules/ol/src/format/Feature"], function (require, exports, Feature_js_10, GeometryLayout_js_8, LineString_js_5, LinearRing_js_3, MultiLineString_js_4, MultiPoint_js_5, MultiPolygon_js_4, Point_js_8, Polygon_js_12, XMLFeature_js_1, obj_js_22, array_js_26, xml_js_2, proj_js_20, Feature_js_11) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GMLNS = void 0;
    /**
     * @const
     * @type {string}
     */
    exports.GMLNS = 'http://www.opengis.net/gml';
    /**
     * A regular expression that matches if a string only contains whitespace
     * characters. It will e.g. match `''`, `' '`, `'\n'` etc. The non-breaking
     * space (0xa0) is explicitly included as IE doesn't include it in its
     * definition of `\s`.
     *
     * Information from `goog.string.isEmptyOrWhitespace`: https://github.com/google/closure-library/blob/e877b1e/closure/goog/string/string.js#L156-L160
     *
     * @const
     * @type {RegExp}
     */
    const ONLY_WHITESPACE_RE = /^[\s\xa0]*$/;
    /**
     * @typedef {Object} Options
     * @property {Object<string, string>|string} [featureNS] Feature
     * namespace. If not defined will be derived from GML. If multiple
     * feature types have been configured which come from different feature
     * namespaces, this will be an object with the keys being the prefixes used
     * in the entries of featureType array. The values of the object will be the
     * feature namespaces themselves. So for instance there might be a featureType
     * item `topp:states` in the `featureType` array and then there will be a key
     * `topp` in the featureNS object with value `http://www.openplans.org/topp`.
     * @property {Array<string>|string} [featureType] Feature type(s) to parse.
     * If multiple feature types need to be configured
     * which come from different feature namespaces, `featureNS` will be an object
     * with the keys being the prefixes used in the entries of featureType array.
     * The values of the object will be the feature namespaces themselves.
     * So for instance there might be a featureType item `topp:states` and then
     * there will be a key named `topp` in the featureNS object with value
     * `http://www.openplans.org/topp`.
     * @property {string} srsName srsName to use when writing geometries.
     * @property {boolean} [surface=false] Write gml:Surface instead of gml:Polygon
     * elements. This also affects the elements in multi-part geometries.
     * @property {boolean} [curve=false] Write gml:Curve instead of gml:LineString
     * elements. This also affects the elements in multi-part geometries.
     * @property {boolean} [multiCurve=true] Write gml:MultiCurve instead of gml:MultiLineString.
     * Since the latter is deprecated in GML 3.
     * @property {boolean} [multiSurface=true] Write gml:multiSurface instead of
     * gml:MultiPolygon. Since the latter is deprecated in GML 3.
     * @property {string} [schemaLocation] Optional schemaLocation to use when
     * writing out the GML, this will override the default provided.
     * @property {boolean} [hasZ=false] If coordinates have a Z value.
     */
    /**
     * @classdesc
     * Abstract base class; normally only used for creating subclasses and not
     * instantiated in apps.
     * Feature base format for reading and writing data in the GML format.
     * This class cannot be instantiated, it contains only base content that
     * is shared with versioned format classes GML2 and GML3.
     *
     * @abstract
     */
    class GMLBase extends XMLFeature_js_1.default {
        /**
         * @param {Options=} opt_options Optional configuration object.
         */
        constructor(opt_options) {
            super();
            const options = /** @type {Options} */ (opt_options ? opt_options : {});
            /**
             * @protected
             * @type {Array<string>|string|undefined}
             */
            this.featureType = options.featureType;
            /**
             * @protected
             * @type {Object<string, string>|string|undefined}
             */
            this.featureNS = options.featureNS;
            /**
             * @protected
             * @type {string}
             */
            this.srsName = options.srsName;
            /**
             * @protected
             * @type {string}
             */
            this.schemaLocation = '';
            /**
             * @type {Object<string, Object<string, Object>>}
             */
            this.FEATURE_COLLECTION_PARSERS = {};
            this.FEATURE_COLLECTION_PARSERS[this.namespace] = {
                'featureMember': xml_js_2.makeArrayPusher(this.readFeaturesInternal),
                'featureMembers': xml_js_2.makeReplacer(this.readFeaturesInternal),
            };
        }
        /**
         * @param {Element} node Node.
         * @param {Array<*>} objectStack Object stack.
         * @return {Array<Feature> | undefined} Features.
         */
        readFeaturesInternal(node, objectStack) {
            const localName = node.localName;
            let features = null;
            if (localName == 'FeatureCollection') {
                features = xml_js_2.pushParseAndPop([], this.FEATURE_COLLECTION_PARSERS, node, objectStack, this);
            }
            else if (localName == 'featureMembers' || localName == 'featureMember') {
                const context = objectStack[0];
                let featureType = context['featureType'];
                let featureNS = context['featureNS'];
                const prefix = 'p';
                const defaultPrefix = 'p0';
                if (!featureType && node.childNodes) {
                    (featureType = []), (featureNS = {});
                    for (let i = 0, ii = node.childNodes.length; i < ii; ++i) {
                        const child = node.childNodes[i];
                        if (child.nodeType === 1) {
                            const ft = child.nodeName.split(':').pop();
                            if (featureType.indexOf(ft) === -1) {
                                let key = '';
                                let count = 0;
                                const uri = child.namespaceURI;
                                for (const candidate in featureNS) {
                                    if (featureNS[candidate] === uri) {
                                        key = candidate;
                                        break;
                                    }
                                    ++count;
                                }
                                if (!key) {
                                    key = prefix + count;
                                    featureNS[key] = uri;
                                }
                                featureType.push(key + ':' + ft);
                            }
                        }
                    }
                    if (localName != 'featureMember') {
                        // recheck featureType for each featureMember
                        context['featureType'] = featureType;
                        context['featureNS'] = featureNS;
                    }
                }
                if (typeof featureNS === 'string') {
                    const ns = featureNS;
                    featureNS = {};
                    featureNS[defaultPrefix] = ns;
                }
                /** @type {Object<string, Object<string, import("../xml.js").Parser>>} */
                const parsersNS = {};
                const featureTypes = Array.isArray(featureType)
                    ? featureType
                    : [featureType];
                for (const p in featureNS) {
                    /** @type {Object<string, import("../xml.js").Parser>} */
                    const parsers = {};
                    for (let i = 0, ii = featureTypes.length; i < ii; ++i) {
                        const featurePrefix = featureTypes[i].indexOf(':') === -1
                            ? defaultPrefix
                            : featureTypes[i].split(':')[0];
                        if (featurePrefix === p) {
                            parsers[featureTypes[i].split(':').pop()] =
                                localName == 'featureMembers'
                                    ? xml_js_2.makeArrayPusher(this.readFeatureElement, this)
                                    : xml_js_2.makeReplacer(this.readFeatureElement, this);
                        }
                    }
                    parsersNS[featureNS[p]] = parsers;
                }
                if (localName == 'featureMember') {
                    features = xml_js_2.pushParseAndPop(undefined, parsersNS, node, objectStack);
                }
                else {
                    features = xml_js_2.pushParseAndPop([], parsersNS, node, objectStack);
                }
            }
            if (features === null) {
                features = [];
            }
            return features;
        }
        /**
         * @param {Element} node Node.
         * @param {Array<*>} objectStack Object stack.
         * @return {import("../geom/Geometry.js").default|import("../extent.js").Extent|undefined} Geometry.
         */
        readGeometryElement(node, objectStack) {
            const context = /** @type {Object} */ (objectStack[0]);
            context['srsName'] = node.firstElementChild.getAttribute('srsName');
            context['srsDimension'] = node.firstElementChild.getAttribute('srsDimension');
            const geometry = xml_js_2.pushParseAndPop(null, this.GEOMETRY_PARSERS, node, objectStack, this);
            if (geometry) {
                if (Array.isArray(geometry)) {
                    return Feature_js_11.transformExtentWithOptions(
                    /** @type {import("../extent.js").Extent} */ (geometry), context);
                }
                else {
                    return Feature_js_11.transformGeometryWithOptions(
                    /** @type {import("../geom/Geometry.js").default} */ (geometry), false, context);
                }
            }
            else {
                return undefined;
            }
        }
        /**
         * @param {Element} node Node.
         * @param {Array<*>} objectStack Object stack.
         * @param {boolean} asFeature whether result should be wrapped as a feature.
         * @return {Feature|Object} Feature
         */
        readFeatureElementInternal(node, objectStack, asFeature) {
            let geometryName;
            const values = {};
            for (let n = node.firstElementChild; n; n = n.nextElementSibling) {
                let value;
                const localName = n.localName;
                // first, check if it is simple attribute
                if (n.childNodes.length === 0 ||
                    (n.childNodes.length === 1 &&
                        (n.firstChild.nodeType === 3 || n.firstChild.nodeType === 4))) {
                    value = xml_js_2.getAllTextContent(n, false);
                    if (ONLY_WHITESPACE_RE.test(value)) {
                        value = undefined;
                    }
                }
                else {
                    if (asFeature) {
                        //if feature, try it as a geometry
                        value = this.readGeometryElement(n, objectStack);
                    }
                    if (!value) {
                        //if not a geometry or not a feature, treat it as a complex attribute
                        value = this.readFeatureElementInternal(n, objectStack, false);
                    }
                    else if (localName !== 'boundedBy') {
                        // boundedBy is an extent and must not be considered as a geometry
                        geometryName = localName;
                    }
                }
                if (values[localName]) {
                    if (!(values[localName] instanceof Array)) {
                        values[localName] = [values[localName]];
                    }
                    values[localName].push(value);
                }
                else {
                    values[localName] = value;
                }
                const len = n.attributes.length;
                if (len > 0) {
                    values[localName] = { _content_: values[localName] };
                    for (let i = 0; i < len; i++) {
                        const attName = n.attributes[i].name;
                        values[localName][attName] = n.attributes[i].value;
                    }
                }
            }
            if (!asFeature) {
                return values;
            }
            else {
                const feature = new Feature_js_10.default(values);
                if (geometryName) {
                    feature.setGeometryName(geometryName);
                }
                const fid = node.getAttribute('fid') || xml_js_2.getAttributeNS(node, this.namespace, 'id');
                if (fid) {
                    feature.setId(fid);
                }
                return feature;
            }
        }
        /**
         * @param {Element} node Node.
         * @param {Array<*>} objectStack Object stack.
         * @return {Feature} Feature.
         */
        readFeatureElement(node, objectStack) {
            return this.readFeatureElementInternal(node, objectStack, true);
        }
        /**
         * @param {Element} node Node.
         * @param {Array<*>} objectStack Object stack.
         * @return {Point|undefined} Point.
         */
        readPoint(node, objectStack) {
            const flatCoordinates = this.readFlatCoordinatesFromNode(node, objectStack);
            if (flatCoordinates) {
                return new Point_js_8.default(flatCoordinates, GeometryLayout_js_8.default.XYZ);
            }
        }
        /**
         * @param {Element} node Node.
         * @param {Array<*>} objectStack Object stack.
         * @return {MultiPoint|undefined} MultiPoint.
         */
        readMultiPoint(node, objectStack) {
            /** @type {Array<Array<number>>} */
            const coordinates = xml_js_2.pushParseAndPop([], this.MULTIPOINT_PARSERS, node, objectStack, this);
            if (coordinates) {
                return new MultiPoint_js_5.default(coordinates);
            }
            else {
                return undefined;
            }
        }
        /**
         * @param {Element} node Node.
         * @param {Array<*>} objectStack Object stack.
         * @return {MultiLineString|undefined} MultiLineString.
         */
        readMultiLineString(node, objectStack) {
            /** @type {Array<LineString>} */
            const lineStrings = xml_js_2.pushParseAndPop([], this.MULTILINESTRING_PARSERS, node, objectStack, this);
            if (lineStrings) {
                return new MultiLineString_js_4.default(lineStrings);
            }
        }
        /**
         * @param {Element} node Node.
         * @param {Array<*>} objectStack Object stack.
         * @return {MultiPolygon|undefined} MultiPolygon.
         */
        readMultiPolygon(node, objectStack) {
            /** @type {Array<Polygon>} */
            const polygons = xml_js_2.pushParseAndPop([], this.MULTIPOLYGON_PARSERS, node, objectStack, this);
            if (polygons) {
                return new MultiPolygon_js_4.default(polygons);
            }
        }
        /**
         * @param {Element} node Node.
         * @param {Array<*>} objectStack Object stack.
         */
        pointMemberParser(node, objectStack) {
            xml_js_2.parseNode(this.POINTMEMBER_PARSERS, node, objectStack, this);
        }
        /**
         * @param {Element} node Node.
         * @param {Array<*>} objectStack Object stack.
         */
        lineStringMemberParser(node, objectStack) {
            xml_js_2.parseNode(this.LINESTRINGMEMBER_PARSERS, node, objectStack, this);
        }
        /**
         * @param {Element} node Node.
         * @param {Array<*>} objectStack Object stack.
         */
        polygonMemberParser(node, objectStack) {
            xml_js_2.parseNode(this.POLYGONMEMBER_PARSERS, node, objectStack, this);
        }
        /**
         * @param {Element} node Node.
         * @param {Array<*>} objectStack Object stack.
         * @return {LineString|undefined} LineString.
         */
        readLineString(node, objectStack) {
            const flatCoordinates = this.readFlatCoordinatesFromNode(node, objectStack);
            if (flatCoordinates) {
                const lineString = new LineString_js_5.default(flatCoordinates, GeometryLayout_js_8.default.XYZ);
                return lineString;
            }
            else {
                return undefined;
            }
        }
        /**
         * @param {Element} node Node.
         * @param {Array<*>} objectStack Object stack.
         * @return {Array<number>|undefined} LinearRing flat coordinates.
         */
        readFlatLinearRing(node, objectStack) {
            const ring = xml_js_2.pushParseAndPop(null, this.GEOMETRY_FLAT_COORDINATES_PARSERS, node, objectStack, this);
            if (ring) {
                return ring;
            }
            else {
                return undefined;
            }
        }
        /**
         * @param {Element} node Node.
         * @param {Array<*>} objectStack Object stack.
         * @return {LinearRing|undefined} LinearRing.
         */
        readLinearRing(node, objectStack) {
            const flatCoordinates = this.readFlatCoordinatesFromNode(node, objectStack);
            if (flatCoordinates) {
                return new LinearRing_js_3.default(flatCoordinates, GeometryLayout_js_8.default.XYZ);
            }
        }
        /**
         * @param {Element} node Node.
         * @param {Array<*>} objectStack Object stack.
         * @return {Polygon|undefined} Polygon.
         */
        readPolygon(node, objectStack) {
            /** @type {Array<Array<number>>} */
            const flatLinearRings = xml_js_2.pushParseAndPop([null], this.FLAT_LINEAR_RINGS_PARSERS, node, objectStack, this);
            if (flatLinearRings && flatLinearRings[0]) {
                const flatCoordinates = flatLinearRings[0];
                const ends = [flatCoordinates.length];
                let i, ii;
                for (i = 1, ii = flatLinearRings.length; i < ii; ++i) {
                    array_js_26.extend(flatCoordinates, flatLinearRings[i]);
                    ends.push(flatCoordinates.length);
                }
                return new Polygon_js_12.default(flatCoordinates, GeometryLayout_js_8.default.XYZ, ends);
            }
            else {
                return undefined;
            }
        }
        /**
         * @param {Element} node Node.
         * @param {Array<*>} objectStack Object stack.
         * @return {Array<number>} Flat coordinates.
         */
        readFlatCoordinatesFromNode(node, objectStack) {
            return xml_js_2.pushParseAndPop(null, this.GEOMETRY_FLAT_COORDINATES_PARSERS, node, objectStack, this);
        }
        /**
         * @param {Element} node Node.
         * @param {import("./Feature.js").ReadOptions=} opt_options Options.
         * @protected
         * @return {import("../geom/Geometry.js").default|import("../extent.js").Extent} Geometry.
         */
        //@ts-ignore
        readGeometryFromNode(node, opt_options) {
            const geometry = this.readGeometryElement(node, [
                this.getReadOptions(node, opt_options ? opt_options : {}),
            ]);
            return geometry ? geometry : null;
        }
        /**
         * @param {Element} node Node.
         * @param {import("./Feature.js").ReadOptions=} opt_options Options.
         * @return {Array<import("../Feature.js").default>} Features.
         */
        readFeaturesFromNode(node, opt_options) {
            const options = {
                featureType: this.featureType,
                featureNS: this.featureNS,
            };
            if (opt_options) {
                obj_js_22.assign(options, this.getReadOptions(node, opt_options));
            }
            const features = this.readFeaturesInternal(node, [options]);
            return features || [];
        }
        /**
         * @param {Element} node Node.
         * @return {import("../proj/Projection.js").default} Projection.
         */
        readProjectionFromNode(node) {
            return proj_js_20.get(this.srsName
                ? this.srsName
                : node.firstElementChild.getAttribute('srsName'));
        }
    }
    GMLBase.prototype.namespace = exports.GMLNS;
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    GMLBase.prototype.FLAT_LINEAR_RINGS_PARSERS = {
        'http://www.opengis.net/gml': {},
    };
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    GMLBase.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS = {
        'http://www.opengis.net/gml': {},
    };
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    GMLBase.prototype.GEOMETRY_PARSERS = {
        'http://www.opengis.net/gml': {},
    };
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    GMLBase.prototype.MULTIPOINT_PARSERS = {
        'http://www.opengis.net/gml': {
            'pointMember': xml_js_2.makeArrayPusher(GMLBase.prototype.pointMemberParser),
            'pointMembers': xml_js_2.makeArrayPusher(GMLBase.prototype.pointMemberParser),
        },
    };
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    GMLBase.prototype.MULTILINESTRING_PARSERS = {
        'http://www.opengis.net/gml': {
            'lineStringMember': xml_js_2.makeArrayPusher(GMLBase.prototype.lineStringMemberParser),
            'lineStringMembers': xml_js_2.makeArrayPusher(GMLBase.prototype.lineStringMemberParser),
        },
    };
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    GMLBase.prototype.MULTIPOLYGON_PARSERS = {
        'http://www.opengis.net/gml': {
            'polygonMember': xml_js_2.makeArrayPusher(GMLBase.prototype.polygonMemberParser),
            'polygonMembers': xml_js_2.makeArrayPusher(GMLBase.prototype.polygonMemberParser),
        },
    };
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    GMLBase.prototype.POINTMEMBER_PARSERS = {
        'http://www.opengis.net/gml': {
            'Point': xml_js_2.makeArrayPusher(GMLBase.prototype.readFlatCoordinatesFromNode),
        },
    };
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    GMLBase.prototype.LINESTRINGMEMBER_PARSERS = {
        'http://www.opengis.net/gml': {
            'LineString': xml_js_2.makeArrayPusher(GMLBase.prototype.readLineString),
        },
    };
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    GMLBase.prototype.POLYGONMEMBER_PARSERS = {
        'http://www.opengis.net/gml': {
            'Polygon': xml_js_2.makeArrayPusher(GMLBase.prototype.readPolygon),
        },
    };
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    GMLBase.prototype.RING_PARSERS = {
        'http://www.opengis.net/gml': {
            'LinearRing': xml_js_2.makeReplacer(GMLBase.prototype.readFlatLinearRing),
        },
    };
    exports.default = GMLBase;
});
define("node_modules/ol/src/format/xsd", ["require", "exports", "node_modules/ol/src/xml", "node_modules/ol/src/string"], function (require, exports, xml_js_3, string_js_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.writeStringTextNode = exports.writeNonNegativeIntegerTextNode = exports.writeDecimalTextNode = exports.writeDateTimeTextNode = exports.writeCDATASection = exports.writeBooleanTextNode = exports.readString = exports.readNonNegativeIntegerString = exports.readNonNegativeInteger = exports.readDecimalString = exports.readDecimal = exports.readDateTime = exports.readBooleanString = exports.readBoolean = void 0;
    /**
     * @param {Node} node Node.
     * @return {boolean|undefined} Boolean.
     */
    function readBoolean(node) {
        const s = xml_js_3.getAllTextContent(node, false);
        return readBooleanString(s);
    }
    exports.readBoolean = readBoolean;
    /**
     * @param {string} string String.
     * @return {boolean|undefined} Boolean.
     */
    function readBooleanString(string) {
        const m = /^\s*(true|1)|(false|0)\s*$/.exec(string);
        if (m) {
            return m[1] !== undefined || false;
        }
        else {
            return undefined;
        }
    }
    exports.readBooleanString = readBooleanString;
    /**
     * @param {Node} node Node.
     * @return {number|undefined} DateTime in seconds.
     */
    function readDateTime(node) {
        const s = xml_js_3.getAllTextContent(node, false);
        const dateTime = Date.parse(s);
        return isNaN(dateTime) ? undefined : dateTime / 1000;
    }
    exports.readDateTime = readDateTime;
    /**
     * @param {Node} node Node.
     * @return {number|undefined} Decimal.
     */
    function readDecimal(node) {
        const s = xml_js_3.getAllTextContent(node, false);
        return readDecimalString(s);
    }
    exports.readDecimal = readDecimal;
    /**
     * @param {string} string String.
     * @return {number|undefined} Decimal.
     */
    function readDecimalString(string) {
        // FIXME check spec
        const m = /^\s*([+\-]?\d*\.?\d+(?:e[+\-]?\d+)?)\s*$/i.exec(string);
        if (m) {
            return parseFloat(m[1]);
        }
        else {
            return undefined;
        }
    }
    exports.readDecimalString = readDecimalString;
    /**
     * @param {Node} node Node.
     * @return {number|undefined} Non negative integer.
     */
    function readNonNegativeInteger(node) {
        const s = xml_js_3.getAllTextContent(node, false);
        return readNonNegativeIntegerString(s);
    }
    exports.readNonNegativeInteger = readNonNegativeInteger;
    /**
     * @param {string} string String.
     * @return {number|undefined} Non negative integer.
     */
    function readNonNegativeIntegerString(string) {
        const m = /^\s*(\d+)\s*$/.exec(string);
        if (m) {
            return parseInt(m[1], 10);
        }
        else {
            return undefined;
        }
    }
    exports.readNonNegativeIntegerString = readNonNegativeIntegerString;
    /**
     * @param {Node} node Node.
     * @return {string|undefined} String.
     */
    function readString(node) {
        return xml_js_3.getAllTextContent(node, false).trim();
    }
    exports.readString = readString;
    /**
     * @param {Node} node Node to append a TextNode with the boolean to.
     * @param {boolean} bool Boolean.
     */
    function writeBooleanTextNode(node, bool) {
        writeStringTextNode(node, bool ? '1' : '0');
    }
    exports.writeBooleanTextNode = writeBooleanTextNode;
    /**
     * @param {Node} node Node to append a CDATA Section with the string to.
     * @param {string} string String.
     */
    function writeCDATASection(node, string) {
        node.appendChild(xml_js_3.getDocument().createCDATASection(string));
    }
    exports.writeCDATASection = writeCDATASection;
    /**
     * @param {Node} node Node to append a TextNode with the dateTime to.
     * @param {number} dateTime DateTime in seconds.
     */
    function writeDateTimeTextNode(node, dateTime) {
        const date = new Date(dateTime * 1000);
        const string = date.getUTCFullYear() +
            '-' +
            string_js_2.padNumber(date.getUTCMonth() + 1, 2) +
            '-' +
            string_js_2.padNumber(date.getUTCDate(), 2) +
            'T' +
            string_js_2.padNumber(date.getUTCHours(), 2) +
            ':' +
            string_js_2.padNumber(date.getUTCMinutes(), 2) +
            ':' +
            string_js_2.padNumber(date.getUTCSeconds(), 2) +
            'Z';
        node.appendChild(xml_js_3.getDocument().createTextNode(string));
    }
    exports.writeDateTimeTextNode = writeDateTimeTextNode;
    /**
     * @param {Node} node Node to append a TextNode with the decimal to.
     * @param {number} decimal Decimal.
     */
    function writeDecimalTextNode(node, decimal) {
        const string = decimal.toPrecision();
        node.appendChild(xml_js_3.getDocument().createTextNode(string));
    }
    exports.writeDecimalTextNode = writeDecimalTextNode;
    /**
     * @param {Node} node Node to append a TextNode with the decimal to.
     * @param {number} nonNegativeInteger Non negative integer.
     */
    function writeNonNegativeIntegerTextNode(node, nonNegativeInteger) {
        const string = nonNegativeInteger.toString();
        node.appendChild(xml_js_3.getDocument().createTextNode(string));
    }
    exports.writeNonNegativeIntegerTextNode = writeNonNegativeIntegerTextNode;
    /**
     * @param {Node} node Node to append a TextNode with the string to.
     * @param {string} string String.
     */
    function writeStringTextNode(node, string) {
        node.appendChild(xml_js_3.getDocument().createTextNode(string));
    }
    exports.writeStringTextNode = writeStringTextNode;
});
define("node_modules/ol/src/format/GML3", ["require", "exports", "node_modules/ol/src/format/GMLBase", "node_modules/ol/src/geom/GeometryLayout", "node_modules/ol/src/geom/LineString", "node_modules/ol/src/geom/MultiLineString", "node_modules/ol/src/geom/MultiPolygon", "node_modules/ol/src/geom/Polygon", "node_modules/ol/src/xml", "node_modules/ol/src/obj", "node_modules/ol/src/extent", "node_modules/ol/src/array", "node_modules/ol/src/proj", "node_modules/ol/src/format/xsd", "node_modules/ol/src/format/Feature"], function (require, exports, GMLBase_js_1, GeometryLayout_js_9, LineString_js_6, MultiLineString_js_5, MultiPolygon_js_5, Polygon_js_13, xml_js_4, obj_js_23, extent_js_45, array_js_27, proj_js_21, xsd_js_1, Feature_js_12) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @const
     * @type {string}
     * @private
     */
    const schemaLocation = GMLBase_js_1.GMLNS +
        ' http://schemas.opengis.net/gml/3.1.1/profiles/gmlsfProfile/' +
        '1.0.0/gmlsf.xsd';
    /**
     * @const
     * @type {Object<string, string>}
     */
    const MULTIGEOMETRY_TO_MEMBER_NODENAME = {
        'MultiLineString': 'lineStringMember',
        'MultiCurve': 'curveMember',
        'MultiPolygon': 'polygonMember',
        'MultiSurface': 'surfaceMember',
    };
    /**
     * @classdesc
     * Feature format for reading and writing data in the GML format
     * version 3.1.1.
     * Currently only supports GML 3.1.1 Simple Features profile.
     *
     * @api
     */
    class GML3 extends GMLBase_js_1.default {
        /**
         * @param {import("./GMLBase.js").Options=} opt_options Optional configuration object.
         */
        constructor(opt_options) {
            const options = 
            /** @type {import("./GMLBase.js").Options} */
            (opt_options ? opt_options : {});
            super(options);
            /**
             * @private
             * @type {boolean}
             */
            this.surface_ = options.surface !== undefined ? options.surface : false;
            /**
             * @private
             * @type {boolean}
             */
            this.curve_ = options.curve !== undefined ? options.curve : false;
            /**
             * @private
             * @type {boolean}
             */
            this.multiCurve_ =
                options.multiCurve !== undefined ? options.multiCurve : true;
            /**
             * @private
             * @type {boolean}
             */
            this.multiSurface_ =
                options.multiSurface !== undefined ? options.multiSurface : true;
            /**
             * @type {string}
             */
            this.schemaLocation = options.schemaLocation
                ? options.schemaLocation
                : schemaLocation;
            /**
             * @private
             * @type {boolean}
             */
            this.hasZ = options.hasZ !== undefined ? options.hasZ : false;
        }
        /**
         * @param {Element} node Node.
         * @param {Array<*>} objectStack Object stack.
         * @return {MultiLineString|undefined} MultiLineString.
         */
        readMultiCurve(node, objectStack) {
            /** @type {Array<LineString>} */
            const lineStrings = xml_js_4.pushParseAndPop([], this.MULTICURVE_PARSERS, node, objectStack, this);
            if (lineStrings) {
                const multiLineString = new MultiLineString_js_5.default(lineStrings);
                return multiLineString;
            }
            else {
                return undefined;
            }
        }
        /**
         * @param {Element} node Node.
         * @param {Array<*>} objectStack Object stack.
         * @return {MultiPolygon|undefined} MultiPolygon.
         */
        readMultiSurface(node, objectStack) {
            /** @type {Array<Polygon>} */
            const polygons = xml_js_4.pushParseAndPop([], this.MULTISURFACE_PARSERS, node, objectStack, this);
            if (polygons) {
                return new MultiPolygon_js_5.default(polygons);
            }
        }
        /**
         * @param {Element} node Node.
         * @param {Array<*>} objectStack Object stack.
         */
        curveMemberParser(node, objectStack) {
            xml_js_4.parseNode(this.CURVEMEMBER_PARSERS, node, objectStack, this);
        }
        /**
         * @param {Element} node Node.
         * @param {Array<*>} objectStack Object stack.
         */
        surfaceMemberParser(node, objectStack) {
            xml_js_4.parseNode(this.SURFACEMEMBER_PARSERS, node, objectStack, this);
        }
        /**
         * @param {Element} node Node.
         * @param {Array<*>} objectStack Object stack.
         * @return {Array<(Array<number>)>|undefined} flat coordinates.
         */
        readPatch(node, objectStack) {
            return xml_js_4.pushParseAndPop([null], this.PATCHES_PARSERS, node, objectStack, this);
        }
        /**
         * @param {Element} node Node.
         * @param {Array<*>} objectStack Object stack.
         * @return {Array<number>|undefined} flat coordinates.
         */
        readSegment(node, objectStack) {
            return xml_js_4.pushParseAndPop([null], this.SEGMENTS_PARSERS, node, objectStack, this);
        }
        /**
         * @param {Element} node Node.
         * @param {Array<*>} objectStack Object stack.
         * @return {Array<(Array<number>)>|undefined} flat coordinates.
         */
        readPolygonPatch(node, objectStack) {
            return xml_js_4.pushParseAndPop([null], this.FLAT_LINEAR_RINGS_PARSERS, node, objectStack, this);
        }
        /**
         * @param {Element} node Node.
         * @param {Array<*>} objectStack Object stack.
         * @return {Array<number>|undefined} flat coordinates.
         */
        readLineStringSegment(node, objectStack) {
            return xml_js_4.pushParseAndPop([null], this.GEOMETRY_FLAT_COORDINATES_PARSERS, node, objectStack, this);
        }
        /**
         * @param {Element} node Node.
         * @param {Array<*>} objectStack Object stack.
         */
        interiorParser(node, objectStack) {
            /** @type {Array<number>|undefined} */
            const flatLinearRing = xml_js_4.pushParseAndPop(undefined, this.RING_PARSERS, node, objectStack, this);
            if (flatLinearRing) {
                const flatLinearRings = 
                /** @type {Array<Array<number>>} */
                (objectStack[objectStack.length - 1]);
                flatLinearRings.push(flatLinearRing);
            }
        }
        /**
         * @param {Element} node Node.
         * @param {Array<*>} objectStack Object stack.
         */
        exteriorParser(node, objectStack) {
            /** @type {Array<number>|undefined} */
            const flatLinearRing = xml_js_4.pushParseAndPop(undefined, this.RING_PARSERS, node, objectStack, this);
            if (flatLinearRing) {
                const flatLinearRings = 
                /** @type {Array<Array<number>>} */
                (objectStack[objectStack.length - 1]);
                flatLinearRings[0] = flatLinearRing;
            }
        }
        /**
         * @param {Element} node Node.
         * @param {Array<*>} objectStack Object stack.
         * @return {Polygon|undefined} Polygon.
         */
        readSurface(node, objectStack) {
            /** @type {Array<Array<number>>} */
            const flatLinearRings = xml_js_4.pushParseAndPop([null], this.SURFACE_PARSERS, node, objectStack, this);
            if (flatLinearRings && flatLinearRings[0]) {
                const flatCoordinates = flatLinearRings[0];
                const ends = [flatCoordinates.length];
                let i, ii;
                for (i = 1, ii = flatLinearRings.length; i < ii; ++i) {
                    array_js_27.extend(flatCoordinates, flatLinearRings[i]);
                    ends.push(flatCoordinates.length);
                }
                return new Polygon_js_13.default(flatCoordinates, GeometryLayout_js_9.default.XYZ, ends);
            }
            else {
                return undefined;
            }
        }
        /**
         * @param {Element} node Node.
         * @param {Array<*>} objectStack Object stack.
         * @return {LineString|undefined} LineString.
         */
        readCurve(node, objectStack) {
            /** @type {Array<number>} */
            const flatCoordinates = xml_js_4.pushParseAndPop([null], this.CURVE_PARSERS, node, objectStack, this);
            if (flatCoordinates) {
                const lineString = new LineString_js_6.default(flatCoordinates, GeometryLayout_js_9.default.XYZ);
                return lineString;
            }
            else {
                return undefined;
            }
        }
        /**
         * @param {Element} node Node.
         * @param {Array<*>} objectStack Object stack.
         * @return {import("../extent.js").Extent|undefined} Envelope.
         */
        readEnvelope(node, objectStack) {
            /** @type {Array<number>} */
            const flatCoordinates = xml_js_4.pushParseAndPop([null], this.ENVELOPE_PARSERS, node, objectStack, this);
            return extent_js_45.createOrUpdate(flatCoordinates[1][0], flatCoordinates[1][1], flatCoordinates[2][0], flatCoordinates[2][1]);
        }
        /**
         * @param {Node} node Node.
         * @param {Array<*>} objectStack Object stack.
         * @return {Array<number>|undefined} Flat coordinates.
         */
        readFlatPos(node, objectStack) {
            let s = xml_js_4.getAllTextContent(node, false);
            const re = /^\s*([+\-]?\d*\.?\d+(?:[eE][+\-]?\d+)?)\s*/;
            /** @type {Array<number>} */
            const flatCoordinates = [];
            let m;
            while ((m = re.exec(s))) {
                flatCoordinates.push(parseFloat(m[1]));
                s = s.substr(m[0].length);
            }
            if (s !== '') {
                return undefined;
            }
            const context = objectStack[0];
            const containerSrs = context['srsName'];
            let axisOrientation = 'enu';
            if (containerSrs) {
                const proj = proj_js_21.get(containerSrs);
                axisOrientation = proj.getAxisOrientation();
            }
            if (axisOrientation === 'neu') {
                let i, ii;
                for (i = 0, ii = flatCoordinates.length; i < ii; i += 3) {
                    const y = flatCoordinates[i];
                    const x = flatCoordinates[i + 1];
                    flatCoordinates[i] = x;
                    flatCoordinates[i + 1] = y;
                }
            }
            const len = flatCoordinates.length;
            if (len == 2) {
                flatCoordinates.push(0);
            }
            if (len === 0) {
                return undefined;
            }
            return flatCoordinates;
        }
        /**
         * @param {Element} node Node.
         * @param {Array<*>} objectStack Object stack.
         * @return {Array<number>|undefined} Flat coordinates.
         */
        readFlatPosList(node, objectStack) {
            const s = xml_js_4.getAllTextContent(node, false).replace(/^\s*|\s*$/g, '');
            const context = objectStack[0];
            const containerSrs = context['srsName'];
            const contextDimension = context['srsDimension'];
            let axisOrientation = 'enu';
            if (containerSrs) {
                const proj = proj_js_21.get(containerSrs);
                axisOrientation = proj.getAxisOrientation();
            }
            const coords = s.split(/\s+/);
            // The "dimension" attribute is from the GML 3.0.1 spec.
            let dim = 2;
            if (node.getAttribute('srsDimension')) {
                dim = xsd_js_1.readNonNegativeIntegerString(node.getAttribute('srsDimension'));
            }
            else if (node.getAttribute('dimension')) {
                dim = xsd_js_1.readNonNegativeIntegerString(node.getAttribute('dimension'));
            }
            else if (
            /** @type {Element} */ (node.parentNode).getAttribute('srsDimension')) {
                dim = xsd_js_1.readNonNegativeIntegerString(
                /** @type {Element} */ (node.parentNode).getAttribute('srsDimension'));
            }
            else if (contextDimension) {
                dim = xsd_js_1.readNonNegativeIntegerString(contextDimension);
            }
            let x, y, z;
            const flatCoordinates = [];
            for (let i = 0, ii = coords.length; i < ii; i += dim) {
                x = parseFloat(coords[i]);
                y = parseFloat(coords[i + 1]);
                z = dim === 3 ? parseFloat(coords[i + 2]) : 0;
                if (axisOrientation.substr(0, 2) === 'en') {
                    flatCoordinates.push(x, y, z);
                }
                else {
                    flatCoordinates.push(y, x, z);
                }
            }
            return flatCoordinates;
        }
        /**
         * @param {Element} node Node.
         * @param {import("../geom/Point.js").default} value Point geometry.
         * @param {Array<*>} objectStack Node stack.
         * @private
         */
        writePos_(node, value, objectStack) {
            const context = objectStack[objectStack.length - 1];
            const hasZ = context['hasZ'];
            const srsDimension = hasZ ? '3' : '2';
            node.setAttribute('srsDimension', srsDimension);
            const srsName = context['srsName'];
            let axisOrientation = 'enu';
            if (srsName) {
                axisOrientation = proj_js_21.get(srsName).getAxisOrientation();
            }
            const point = value.getCoordinates();
            let coords;
            // only 2d for simple features profile
            if (axisOrientation.substr(0, 2) === 'en') {
                coords = point[0] + ' ' + point[1];
            }
            else {
                coords = point[1] + ' ' + point[0];
            }
            if (hasZ) {
                // For newly created points, Z can be undefined.
                const z = point[2] || 0;
                coords += ' ' + z;
            }
            xsd_js_1.writeStringTextNode(node, coords);
        }
        /**
         * @param {Array<number>} point Point geometry.
         * @param {string=} opt_srsName Optional srsName
         * @param {boolean=} opt_hasZ whether the geometry has a Z coordinate (is 3D) or not.
         * @return {string} The coords string.
         * @private
         */
        getCoords_(point, opt_srsName, opt_hasZ) {
            let axisOrientation = 'enu';
            if (opt_srsName) {
                axisOrientation = proj_js_21.get(opt_srsName).getAxisOrientation();
            }
            let coords = axisOrientation.substr(0, 2) === 'en'
                ? point[0] + ' ' + point[1]
                : point[1] + ' ' + point[0];
            if (opt_hasZ) {
                // For newly created points, Z can be undefined.
                const z = point[2] || 0;
                coords += ' ' + z;
            }
            return coords;
        }
        /**
         * @param {Element} node Node.
         * @param {LineString|import("../geom/LinearRing.js").default} value Geometry.
         * @param {Array<*>} objectStack Node stack.
         * @private
         */
        writePosList_(node, value, objectStack) {
            const context = objectStack[objectStack.length - 1];
            const hasZ = context['hasZ'];
            const srsDimension = hasZ ? '3' : '2';
            node.setAttribute('srsDimension', srsDimension);
            const srsName = context['srsName'];
            // only 2d for simple features profile
            const points = value.getCoordinates();
            const len = points.length;
            const parts = new Array(len);
            let point;
            for (let i = 0; i < len; ++i) {
                point = points[i];
                parts[i] = this.getCoords_(point, srsName, hasZ);
            }
            xsd_js_1.writeStringTextNode(node, parts.join(' '));
        }
        /**
         * @param {Element} node Node.
         * @param {import("../geom/Point.js").default} geometry Point geometry.
         * @param {Array<*>} objectStack Node stack.
         */
        writePoint(node, geometry, objectStack) {
            const context = objectStack[objectStack.length - 1];
            const srsName = context['srsName'];
            if (srsName) {
                node.setAttribute('srsName', srsName);
            }
            const pos = xml_js_4.createElementNS(node.namespaceURI, 'pos');
            node.appendChild(pos);
            this.writePos_(pos, geometry, objectStack);
        }
        /**
         * @param {Element} node Node.
         * @param {import("../extent.js").Extent} extent Extent.
         * @param {Array<*>} objectStack Node stack.
         */
        writeEnvelope(node, extent, objectStack) {
            const context = objectStack[objectStack.length - 1];
            const srsName = context['srsName'];
            if (srsName) {
                node.setAttribute('srsName', srsName);
            }
            const keys = ['lowerCorner', 'upperCorner'];
            const values = [extent[0] + ' ' + extent[1], extent[2] + ' ' + extent[3]];
            xml_js_4.pushSerializeAndPop(
            /** @type {import("../xml.js").NodeStackItem} */
            ({ node: node }), this.ENVELOPE_SERIALIZERS, xml_js_4.OBJECT_PROPERTY_NODE_FACTORY, values, objectStack, keys, this);
        }
        /**
         * @param {Element} node Node.
         * @param {import("../geom/LinearRing.js").default} geometry LinearRing geometry.
         * @param {Array<*>} objectStack Node stack.
         */
        writeLinearRing(node, geometry, objectStack) {
            const context = objectStack[objectStack.length - 1];
            const srsName = context['srsName'];
            if (srsName) {
                node.setAttribute('srsName', srsName);
            }
            const posList = xml_js_4.createElementNS(node.namespaceURI, 'posList');
            node.appendChild(posList);
            this.writePosList_(posList, geometry, objectStack);
        }
        /**
         * @param {*} value Value.
         * @param {Array<*>} objectStack Object stack.
         * @param {string=} opt_nodeName Node name.
         * @return {Node} Node.
         * @private
         */
        RING_NODE_FACTORY_(value, objectStack, opt_nodeName) {
            const context = objectStack[objectStack.length - 1];
            const parentNode = context.node;
            const exteriorWritten = context['exteriorWritten'];
            if (exteriorWritten === undefined) {
                context['exteriorWritten'] = true;
            }
            return xml_js_4.createElementNS(parentNode.namespaceURI, exteriorWritten !== undefined ? 'interior' : 'exterior');
        }
        /**
         * @param {Element} node Node.
         * @param {Polygon} geometry Polygon geometry.
         * @param {Array<*>} objectStack Node stack.
         */
        writeSurfaceOrPolygon(node, geometry, objectStack) {
            const context = objectStack[objectStack.length - 1];
            const hasZ = context['hasZ'];
            const srsName = context['srsName'];
            if (node.nodeName !== 'PolygonPatch' && srsName) {
                node.setAttribute('srsName', srsName);
            }
            if (node.nodeName === 'Polygon' || node.nodeName === 'PolygonPatch') {
                const rings = geometry.getLinearRings();
                xml_js_4.pushSerializeAndPop({ node: node, hasZ: hasZ, srsName: srsName }, this.RING_SERIALIZERS, this.RING_NODE_FACTORY_, rings, objectStack, undefined, this);
            }
            else if (node.nodeName === 'Surface') {
                const patches = xml_js_4.createElementNS(node.namespaceURI, 'patches');
                node.appendChild(patches);
                this.writeSurfacePatches_(patches, geometry, objectStack);
            }
        }
        /**
         * @param {Element} node Node.
         * @param {LineString} geometry LineString geometry.
         * @param {Array<*>} objectStack Node stack.
         */
        writeCurveOrLineString(node, geometry, objectStack) {
            const context = objectStack[objectStack.length - 1];
            const srsName = context['srsName'];
            if (node.nodeName !== 'LineStringSegment' && srsName) {
                node.setAttribute('srsName', srsName);
            }
            if (node.nodeName === 'LineString' ||
                node.nodeName === 'LineStringSegment') {
                const posList = xml_js_4.createElementNS(node.namespaceURI, 'posList');
                node.appendChild(posList);
                this.writePosList_(posList, geometry, objectStack);
            }
            else if (node.nodeName === 'Curve') {
                const segments = xml_js_4.createElementNS(node.namespaceURI, 'segments');
                node.appendChild(segments);
                this.writeCurveSegments_(segments, geometry, objectStack);
            }
        }
        /**
         * @param {Element} node Node.
         * @param {MultiPolygon} geometry MultiPolygon geometry.
         * @param {Array<*>} objectStack Node stack.
         */
        writeMultiSurfaceOrPolygon(node, geometry, objectStack) {
            const context = objectStack[objectStack.length - 1];
            const hasZ = context['hasZ'];
            const srsName = context['srsName'];
            const surface = context['surface'];
            if (srsName) {
                node.setAttribute('srsName', srsName);
            }
            const polygons = geometry.getPolygons();
            xml_js_4.pushSerializeAndPop({ node: node, hasZ: hasZ, srsName: srsName, surface: surface }, this.SURFACEORPOLYGONMEMBER_SERIALIZERS, this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_, polygons, objectStack, undefined, this);
        }
        /**
         * @param {Element} node Node.
         * @param {import("../geom/MultiPoint.js").default} geometry MultiPoint geometry.
         * @param {Array<*>} objectStack Node stack.
         */
        writeMultiPoint(node, geometry, objectStack) {
            const context = objectStack[objectStack.length - 1];
            const srsName = context['srsName'];
            const hasZ = context['hasZ'];
            if (srsName) {
                node.setAttribute('srsName', srsName);
            }
            const points = geometry.getPoints();
            xml_js_4.pushSerializeAndPop({ node: node, hasZ: hasZ, srsName: srsName }, this.POINTMEMBER_SERIALIZERS, xml_js_4.makeSimpleNodeFactory('pointMember'), points, objectStack, undefined, this);
        }
        /**
         * @param {Element} node Node.
         * @param {MultiLineString} geometry MultiLineString geometry.
         * @param {Array<*>} objectStack Node stack.
         */
        writeMultiCurveOrLineString(node, geometry, objectStack) {
            const context = objectStack[objectStack.length - 1];
            const hasZ = context['hasZ'];
            const srsName = context['srsName'];
            const curve = context['curve'];
            if (srsName) {
                node.setAttribute('srsName', srsName);
            }
            const lines = geometry.getLineStrings();
            xml_js_4.pushSerializeAndPop({ node: node, hasZ: hasZ, srsName: srsName, curve: curve }, this.LINESTRINGORCURVEMEMBER_SERIALIZERS, this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_, lines, objectStack, undefined, this);
        }
        /**
         * @param {Node} node Node.
         * @param {import("../geom/LinearRing.js").default} ring LinearRing geometry.
         * @param {Array<*>} objectStack Node stack.
         */
        writeRing(node, ring, objectStack) {
            const linearRing = xml_js_4.createElementNS(node.namespaceURI, 'LinearRing');
            node.appendChild(linearRing);
            this.writeLinearRing(linearRing, ring, objectStack);
        }
        /**
         * @param {Node} node Node.
         * @param {Polygon} polygon Polygon geometry.
         * @param {Array<*>} objectStack Node stack.
         */
        writeSurfaceOrPolygonMember(node, polygon, objectStack) {
            const child = this.GEOMETRY_NODE_FACTORY_(polygon, objectStack);
            if (child) {
                node.appendChild(child);
                this.writeSurfaceOrPolygon(child, polygon, objectStack);
            }
        }
        /**
         * @param {Node} node Node.
         * @param {import("../geom/Point.js").default} point Point geometry.
         * @param {Array<*>} objectStack Node stack.
         */
        writePointMember(node, point, objectStack) {
            const child = xml_js_4.createElementNS(node.namespaceURI, 'Point');
            node.appendChild(child);
            this.writePoint(child, point, objectStack);
        }
        /**
         * @param {Node} node Node.
         * @param {LineString} line LineString geometry.
         * @param {Array<*>} objectStack Node stack.
         */
        writeLineStringOrCurveMember(node, line, objectStack) {
            const child = this.GEOMETRY_NODE_FACTORY_(line, objectStack);
            if (child) {
                node.appendChild(child);
                this.writeCurveOrLineString(child, line, objectStack);
            }
        }
        /**
         * @param {Node} node Node.
         * @param {Polygon} polygon Polygon geometry.
         * @param {Array<*>} objectStack Node stack.
         * @private
         */
        writeSurfacePatches_(node, polygon, objectStack) {
            const child = xml_js_4.createElementNS(node.namespaceURI, 'PolygonPatch');
            node.appendChild(child);
            this.writeSurfaceOrPolygon(child, polygon, objectStack);
        }
        /**
         * @param {Node} node Node.
         * @param {LineString} line LineString geometry.
         * @param {Array<*>} objectStack Node stack.
         * @private
         */
        writeCurveSegments_(node, line, objectStack) {
            const child = xml_js_4.createElementNS(node.namespaceURI, 'LineStringSegment');
            node.appendChild(child);
            this.writeCurveOrLineString(child, line, objectStack);
        }
        /**
         * @param {Node} node Node.
         * @param {import("../geom/Geometry.js").default|import("../extent.js").Extent} geometry Geometry.
         * @param {Array<*>} objectStack Node stack.
         */
        writeGeometryElement(node, geometry, objectStack) {
            const context = /** @type {import("./Feature.js").WriteOptions} */ (objectStack[objectStack.length - 1]);
            const item = obj_js_23.assign({}, context);
            item['node'] = node;
            let value;
            if (Array.isArray(geometry)) {
                value = Feature_js_12.transformExtentWithOptions(
                /** @type {import("../extent.js").Extent} */ (geometry), context);
            }
            else {
                value = Feature_js_12.transformGeometryWithOptions(
                /** @type {import("../geom/Geometry.js").default} */ (geometry), true, context);
            }
            xml_js_4.pushSerializeAndPop(
            /** @type {import("../xml.js").NodeStackItem} */
            (item), this.GEOMETRY_SERIALIZERS, this.GEOMETRY_NODE_FACTORY_, [value], objectStack, undefined, this);
        }
        /**
         * @param {Element} node Node.
         * @param {import("../Feature.js").default} feature Feature.
         * @param {Array<*>} objectStack Node stack.
         */
        writeFeatureElement(node, feature, objectStack) {
            const fid = feature.getId();
            if (fid) {
                node.setAttribute('fid', /** @type {string} */ (fid));
            }
            const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);
            const featureNS = context['featureNS'];
            const geometryName = feature.getGeometryName();
            if (!context.serializers) {
                context.serializers = {};
                context.serializers[featureNS] = {};
            }
            const keys = [];
            const values = [];
            if (feature.hasProperties()) {
                const properties = feature.getProperties();
                for (const key in properties) {
                    const value = properties[key];
                    if (value !== null) {
                        keys.push(key);
                        values.push(value);
                        if (key == geometryName ||
                            typeof ( /** @type {?} */(value).getSimplifiedGeometry) ===
                                'function') {
                            if (!(key in context.serializers[featureNS])) {
                                context.serializers[featureNS][key] = xml_js_4.makeChildAppender(this.writeGeometryElement, this);
                            }
                        }
                        else {
                            if (!(key in context.serializers[featureNS])) {
                                context.serializers[featureNS][key] = xml_js_4.makeChildAppender(xsd_js_1.writeStringTextNode);
                            }
                        }
                    }
                }
            }
            const item = obj_js_23.assign({}, context);
            item.node = node;
            xml_js_4.pushSerializeAndPop(
            /** @type {import("../xml.js").NodeStackItem} */
            (item), context.serializers, xml_js_4.makeSimpleNodeFactory(undefined, featureNS), values, objectStack, keys);
        }
        /**
         * @param {Node} node Node.
         * @param {Array<import("../Feature.js").default>} features Features.
         * @param {Array<*>} objectStack Node stack.
         * @private
         */
        writeFeatureMembers_(node, features, objectStack) {
            const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);
            const featureType = context['featureType'];
            const featureNS = context['featureNS'];
            /** @type {Object<string, Object<string, import("../xml.js").Serializer>>} */
            const serializers = {};
            serializers[featureNS] = {};
            serializers[featureNS][featureType] = xml_js_4.makeChildAppender(this.writeFeatureElement, this);
            const item = obj_js_23.assign({}, context);
            item.node = node;
            xml_js_4.pushSerializeAndPop(
            /** @type {import("../xml.js").NodeStackItem} */
            (item), serializers, xml_js_4.makeSimpleNodeFactory(featureType, featureNS), features, objectStack);
        }
        /**
         * @const
         * @param {*} value Value.
         * @param {Array<*>} objectStack Object stack.
         * @param {string=} opt_nodeName Node name.
         * @return {Node|undefined} Node.
         * @private
         */
        MULTIGEOMETRY_MEMBER_NODE_FACTORY_(value, objectStack, opt_nodeName) {
            const parentNode = objectStack[objectStack.length - 1].node;
            return xml_js_4.createElementNS(this.namespace, MULTIGEOMETRY_TO_MEMBER_NODENAME[parentNode.nodeName]);
        }
        /**
         * @const
         * @param {*} value Value.
         * @param {Array<*>} objectStack Object stack.
         * @param {string=} opt_nodeName Node name.
         * @return {Element|undefined} Node.
         * @private
         */
        GEOMETRY_NODE_FACTORY_(value, objectStack, opt_nodeName) {
            const context = objectStack[objectStack.length - 1];
            const multiSurface = context['multiSurface'];
            const surface = context['surface'];
            const curve = context['curve'];
            const multiCurve = context['multiCurve'];
            let nodeName;
            if (!Array.isArray(value)) {
                nodeName = /** @type {import("../geom/Geometry.js").default} */ (value).getType();
                if (nodeName === 'MultiPolygon' && multiSurface === true) {
                    nodeName = 'MultiSurface';
                }
                else if (nodeName === 'Polygon' && surface === true) {
                    nodeName = 'Surface';
                }
                else if (nodeName === 'LineString' && curve === true) {
                    nodeName = 'Curve';
                }
                else if (nodeName === 'MultiLineString' && multiCurve === true) {
                    nodeName = 'MultiCurve';
                }
            }
            else {
                nodeName = 'Envelope';
            }
            return xml_js_4.createElementNS(this.namespace, nodeName);
        }
        /**
         * Encode a geometry in GML 3.1.1 Simple Features.
         *
         * @param {import("../geom/Geometry.js").default} geometry Geometry.
         * @param {import("./Feature.js").WriteOptions=} opt_options Options.
         * @return {Node} Node.
         * @api
         */
        writeGeometryNode(geometry, opt_options) {
            opt_options = this.adaptOptions(opt_options);
            const geom = xml_js_4.createElementNS(this.namespace, 'geom');
            const context = {
                node: geom,
                hasZ: this.hasZ,
                srsName: this.srsName,
                curve: this.curve_,
                surface: this.surface_,
                multiSurface: this.multiSurface_,
                multiCurve: this.multiCurve_,
            };
            if (opt_options) {
                obj_js_23.assign(context, opt_options);
            }
            this.writeGeometryElement(geom, geometry, [context]);
            return geom;
        }
        /**
         * Encode an array of features in the GML 3.1.1 format as an XML node.
         *
         * @param {Array<import("../Feature.js").default>} features Features.
         * @param {import("./Feature.js").WriteOptions=} opt_options Options.
         * @return {Element} Node.
         * @api
         */
        writeFeaturesNode(features, opt_options) {
            opt_options = this.adaptOptions(opt_options);
            const node = xml_js_4.createElementNS(this.namespace, 'featureMembers');
            node.setAttributeNS(xml_js_4.XML_SCHEMA_INSTANCE_URI, 'xsi:schemaLocation', this.schemaLocation);
            const context = {
                srsName: this.srsName,
                hasZ: this.hasZ,
                curve: this.curve_,
                surface: this.surface_,
                multiSurface: this.multiSurface_,
                multiCurve: this.multiCurve_,
                featureNS: this.featureNS,
                featureType: this.featureType,
            };
            if (opt_options) {
                obj_js_23.assign(context, opt_options);
            }
            this.writeFeatureMembers_(node, features, [context]);
            return node;
        }
    }
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    GML3.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS = {
        'http://www.opengis.net/gml': {
            'pos': xml_js_4.makeReplacer(GML3.prototype.readFlatPos),
            'posList': xml_js_4.makeReplacer(GML3.prototype.readFlatPosList),
        },
    };
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    GML3.prototype.FLAT_LINEAR_RINGS_PARSERS = {
        'http://www.opengis.net/gml': {
            'interior': GML3.prototype.interiorParser,
            'exterior': GML3.prototype.exteriorParser,
        },
    };
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    GML3.prototype.GEOMETRY_PARSERS = {
        'http://www.opengis.net/gml': {
            'Point': xml_js_4.makeReplacer(GMLBase_js_1.default.prototype.readPoint),
            'MultiPoint': xml_js_4.makeReplacer(GMLBase_js_1.default.prototype.readMultiPoint),
            'LineString': xml_js_4.makeReplacer(GMLBase_js_1.default.prototype.readLineString),
            'MultiLineString': xml_js_4.makeReplacer(GMLBase_js_1.default.prototype.readMultiLineString),
            'LinearRing': xml_js_4.makeReplacer(GMLBase_js_1.default.prototype.readLinearRing),
            'Polygon': xml_js_4.makeReplacer(GMLBase_js_1.default.prototype.readPolygon),
            'MultiPolygon': xml_js_4.makeReplacer(GMLBase_js_1.default.prototype.readMultiPolygon),
            'Surface': xml_js_4.makeReplacer(GML3.prototype.readSurface),
            'MultiSurface': xml_js_4.makeReplacer(GML3.prototype.readMultiSurface),
            'Curve': xml_js_4.makeReplacer(GML3.prototype.readCurve),
            'MultiCurve': xml_js_4.makeReplacer(GML3.prototype.readMultiCurve),
            'Envelope': xml_js_4.makeReplacer(GML3.prototype.readEnvelope),
        },
    };
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    GML3.prototype.MULTICURVE_PARSERS = {
        'http://www.opengis.net/gml': {
            'curveMember': xml_js_4.makeArrayPusher(GML3.prototype.curveMemberParser),
            'curveMembers': xml_js_4.makeArrayPusher(GML3.prototype.curveMemberParser),
        },
    };
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    GML3.prototype.MULTISURFACE_PARSERS = {
        'http://www.opengis.net/gml': {
            'surfaceMember': xml_js_4.makeArrayPusher(GML3.prototype.surfaceMemberParser),
            'surfaceMembers': xml_js_4.makeArrayPusher(GML3.prototype.surfaceMemberParser),
        },
    };
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    GML3.prototype.CURVEMEMBER_PARSERS = {
        'http://www.opengis.net/gml': {
            'LineString': xml_js_4.makeArrayPusher(GMLBase_js_1.default.prototype.readLineString),
            'Curve': xml_js_4.makeArrayPusher(GML3.prototype.readCurve),
        },
    };
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    GML3.prototype.SURFACEMEMBER_PARSERS = {
        'http://www.opengis.net/gml': {
            'Polygon': xml_js_4.makeArrayPusher(GMLBase_js_1.default.prototype.readPolygon),
            'Surface': xml_js_4.makeArrayPusher(GML3.prototype.readSurface),
        },
    };
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    GML3.prototype.SURFACE_PARSERS = {
        'http://www.opengis.net/gml': {
            'patches': xml_js_4.makeReplacer(GML3.prototype.readPatch),
        },
    };
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    GML3.prototype.CURVE_PARSERS = {
        'http://www.opengis.net/gml': {
            'segments': xml_js_4.makeReplacer(GML3.prototype.readSegment),
        },
    };
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    GML3.prototype.ENVELOPE_PARSERS = {
        'http://www.opengis.net/gml': {
            'lowerCorner': xml_js_4.makeArrayPusher(GML3.prototype.readFlatPosList),
            'upperCorner': xml_js_4.makeArrayPusher(GML3.prototype.readFlatPosList),
        },
    };
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    GML3.prototype.PATCHES_PARSERS = {
        'http://www.opengis.net/gml': {
            'PolygonPatch': xml_js_4.makeReplacer(GML3.prototype.readPolygonPatch),
        },
    };
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    GML3.prototype.SEGMENTS_PARSERS = {
        'http://www.opengis.net/gml': {
            'LineStringSegment': xml_js_4.makeReplacer(GML3.prototype.readLineStringSegment),
        },
    };
    /**
     * Encode an array of features in GML 3.1.1 Simple Features.
     *
     * @function
     * @param {Array<import("../Feature.js").default>} features Features.
     * @param {import("./Feature.js").WriteOptions=} opt_options Options.
     * @return {string} Result.
     * @api
     */
    GML3.prototype.writeFeatures;
    /**
     * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
     */
    GML3.prototype.RING_SERIALIZERS = {
        'http://www.opengis.net/gml': {
            'exterior': xml_js_4.makeChildAppender(GML3.prototype.writeRing),
            'interior': xml_js_4.makeChildAppender(GML3.prototype.writeRing),
        },
    };
    /**
     * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
     */
    GML3.prototype.ENVELOPE_SERIALIZERS = {
        'http://www.opengis.net/gml': {
            'lowerCorner': xml_js_4.makeChildAppender(xsd_js_1.writeStringTextNode),
            'upperCorner': xml_js_4.makeChildAppender(xsd_js_1.writeStringTextNode),
        },
    };
    /**
     * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
     */
    GML3.prototype.SURFACEORPOLYGONMEMBER_SERIALIZERS = {
        'http://www.opengis.net/gml': {
            'surfaceMember': xml_js_4.makeChildAppender(GML3.prototype.writeSurfaceOrPolygonMember),
            'polygonMember': xml_js_4.makeChildAppender(GML3.prototype.writeSurfaceOrPolygonMember),
        },
    };
    /**
     * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
     */
    GML3.prototype.POINTMEMBER_SERIALIZERS = {
        'http://www.opengis.net/gml': {
            'pointMember': xml_js_4.makeChildAppender(GML3.prototype.writePointMember),
        },
    };
    /**
     * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
     */
    GML3.prototype.LINESTRINGORCURVEMEMBER_SERIALIZERS = {
        'http://www.opengis.net/gml': {
            'lineStringMember': xml_js_4.makeChildAppender(GML3.prototype.writeLineStringOrCurveMember),
            'curveMember': xml_js_4.makeChildAppender(GML3.prototype.writeLineStringOrCurveMember),
        },
    };
    /**
     * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
     */
    GML3.prototype.GEOMETRY_SERIALIZERS = {
        'http://www.opengis.net/gml': {
            'Curve': xml_js_4.makeChildAppender(GML3.prototype.writeCurveOrLineString),
            'MultiCurve': xml_js_4.makeChildAppender(GML3.prototype.writeMultiCurveOrLineString),
            'Point': xml_js_4.makeChildAppender(GML3.prototype.writePoint),
            'MultiPoint': xml_js_4.makeChildAppender(GML3.prototype.writeMultiPoint),
            'LineString': xml_js_4.makeChildAppender(GML3.prototype.writeCurveOrLineString),
            'MultiLineString': xml_js_4.makeChildAppender(GML3.prototype.writeMultiCurveOrLineString),
            'LinearRing': xml_js_4.makeChildAppender(GML3.prototype.writeLinearRing),
            'Polygon': xml_js_4.makeChildAppender(GML3.prototype.writeSurfaceOrPolygon),
            'MultiPolygon': xml_js_4.makeChildAppender(GML3.prototype.writeMultiSurfaceOrPolygon),
            'Surface': xml_js_4.makeChildAppender(GML3.prototype.writeSurfaceOrPolygon),
            'MultiSurface': xml_js_4.makeChildAppender(GML3.prototype.writeMultiSurfaceOrPolygon),
            'Envelope': xml_js_4.makeChildAppender(GML3.prototype.writeEnvelope),
        },
    };
    exports.default = GML3;
});
define("node_modules/ol/src/format/GML", ["require", "exports", "node_modules/ol/src/format/GML3"], function (require, exports, GML3_js_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @classdesc
     * Feature format for reading and writing data in the GML format
     * version 3.1.1.
     * Currently only supports GML 3.1.1 Simple Features profile.
     *
     * @param {import("./GMLBase.js").Options=} opt_options
     *     Optional configuration object.
     * @api
     */
    const GML = GML3_js_1.default;
    /**
     * Encode an array of features in GML 3.1.1 Simple Features.
     *
     * @function
     * @param {Array<import("../Feature.js").default>} features Features.
     * @param {import("./Feature.js").WriteOptions=} opt_options Options.
     * @return {string} Result.
     * @api
     */
    GML.prototype.writeFeatures;
    /**
     * Encode an array of features in the GML 3.1.1 format as an XML node.
     *
     * @function
     * @param {Array<import("../Feature.js").default>} features Features.
     * @param {import("./Feature.js").WriteOptions=} opt_options Options.
     * @return {Node} Node.
     * @api
     */
    GML.prototype.writeFeaturesNode;
    exports.default = GML;
});
define("node_modules/ol/src/format/GPX", ["require", "exports", "node_modules/ol/src/Feature", "node_modules/ol/src/geom/GeometryLayout", "node_modules/ol/src/geom/GeometryType", "node_modules/ol/src/geom/LineString", "node_modules/ol/src/geom/MultiLineString", "node_modules/ol/src/geom/Point", "node_modules/ol/src/format/XMLFeature", "node_modules/ol/src/xml", "node_modules/ol/src/proj", "node_modules/ol/src/array", "node_modules/ol/src/format/xsd", "node_modules/ol/src/format/Feature"], function (require, exports, Feature_js_13, GeometryLayout_js_10, GeometryType_js_26, LineString_js_7, MultiLineString_js_6, Point_js_9, XMLFeature_js_2, xml_js_5, proj_js_22, array_js_28, xsd_js_2, Feature_js_14) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @const
     * @type {Array<null|string>}
     */
    const NAMESPACE_URIS = [
        null,
        'http://www.topografix.com/GPX/1/0',
        'http://www.topografix.com/GPX/1/1',
    ];
    /**
     * @const
     * @type {string}
     */
    const SCHEMA_LOCATION = 'http://www.topografix.com/GPX/1/1 ' +
        'http://www.topografix.com/GPX/1/1/gpx.xsd';
    /**
     * @const
     * @type {Object<string, function(Node, Array<*>): (Feature|undefined)>}
     */
    const FEATURE_READER = {
        'rte': readRte,
        'trk': readTrk,
        'wpt': readWpt,
    };
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const GPX_PARSERS = xml_js_5.makeStructureNS(NAMESPACE_URIS, {
        'rte': xml_js_5.makeArrayPusher(readRte),
        'trk': xml_js_5.makeArrayPusher(readTrk),
        'wpt': xml_js_5.makeArrayPusher(readWpt),
    });
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const LINK_PARSERS = xml_js_5.makeStructureNS(NAMESPACE_URIS, {
        'text': xml_js_5.makeObjectPropertySetter(xsd_js_2.readString, 'linkText'),
        'type': xml_js_5.makeObjectPropertySetter(xsd_js_2.readString, 'linkType'),
    });
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
     */
    // @ts-ignore
    const GPX_SERIALIZERS = xml_js_5.makeStructureNS(NAMESPACE_URIS, {
        'rte': xml_js_5.makeChildAppender(writeRte),
        'trk': xml_js_5.makeChildAppender(writeTrk),
        'wpt': xml_js_5.makeChildAppender(writeWpt),
    });
    /**
     * @typedef {Object} Options
     * @property {function(Feature, Node):void} [readExtensions] Callback function
     * to process `extensions` nodes. To prevent memory leaks, this callback function must
     * not store any references to the node. Note that the `extensions`
     * node is not allowed in GPX 1.0. Moreover, only `extensions`
     * nodes from `wpt`, `rte` and `trk` can be processed, as those are
     * directly mapped to a feature.
     */
    /**
     * @typedef {Object} LayoutOptions
     * @property {boolean} [hasZ]
     * @property {boolean} [hasM]
     */
    /**
     * @classdesc
     * Feature format for reading and writing data in the GPX format.
     *
     * Note that {@link module:ol/format/GPX~GPX#readFeature} only reads the first
     * feature of the source.
     *
     * When reading, routes (`<rte>`) are converted into LineString geometries, and
     * tracks (`<trk>`) into MultiLineString. Any properties on route and track
     * waypoints are ignored.
     *
     * When writing, LineString geometries are output as routes (`<rte>`), and
     * MultiLineString as tracks (`<trk>`).
     *
     * @api
     */
    class GPX extends XMLFeature_js_2.default {
        /**
         * @param {Options=} opt_options Options.
         */
        constructor(opt_options) {
            super();
            const options = opt_options ? opt_options : {};
            /**
             * @type {import("../proj/Projection.js").default}
             */
            this.dataProjection = proj_js_22.get('EPSG:4326');
            /**
             * @type {function(Feature, Node): void|undefined}
             * @private
             */
            this.readExtensions_ = options.readExtensions;
        }
        /**
         * @param {Array<Feature>} features List of features.
         * @private
         */
        handleReadExtensions_(features) {
            if (!features) {
                features = [];
            }
            for (let i = 0, ii = features.length; i < ii; ++i) {
                const feature = features[i];
                if (this.readExtensions_) {
                    const extensionsNode = feature.get('extensionsNode_') || null;
                    this.readExtensions_(feature, extensionsNode);
                }
                feature.set('extensionsNode_', undefined);
            }
        }
        /**
         * @param {Element} node Node.
         * @param {import("./Feature.js").ReadOptions=} opt_options Options.
         * @return {import("../Feature.js").default} Feature.
         */
        readFeatureFromNode(node, opt_options) {
            if (!array_js_28.includes(NAMESPACE_URIS, node.namespaceURI)) {
                return null;
            }
            const featureReader = FEATURE_READER[node.localName];
            if (!featureReader) {
                return null;
            }
            const feature = featureReader(node, [
                this.getReadOptions(node, opt_options),
            ]);
            if (!feature) {
                return null;
            }
            this.handleReadExtensions_([feature]);
            return feature;
        }
        /**
         * @param {Element} node Node.
         * @param {import("./Feature.js").ReadOptions=} opt_options Options.
         * @return {Array<import("../Feature.js").default>} Features.
         */
        readFeaturesFromNode(node, opt_options) {
            if (!array_js_28.includes(NAMESPACE_URIS, node.namespaceURI)) {
                return [];
            }
            if (node.localName == 'gpx') {
                /** @type {Array<Feature>} */
                const features = xml_js_5.pushParseAndPop([], GPX_PARSERS, node, [
                    this.getReadOptions(node, opt_options),
                ]);
                if (features) {
                    this.handleReadExtensions_(features);
                    return features;
                }
                else {
                    return [];
                }
            }
            return [];
        }
        /**
         * Encode an array of features in the GPX format as an XML node.
         * LineString geometries are output as routes (`<rte>`), and MultiLineString
         * as tracks (`<trk>`).
         *
         * @param {Array<Feature>} features Features.
         * @param {import("./Feature.js").WriteOptions=} opt_options Options.
         * @return {Node} Node.
         * @api
         */
        writeFeaturesNode(features, opt_options) {
            opt_options = this.adaptOptions(opt_options);
            //FIXME Serialize metadata
            const gpx = xml_js_5.createElementNS('http://www.topografix.com/GPX/1/1', 'gpx');
            const xmlnsUri = 'http://www.w3.org/2000/xmlns/';
            gpx.setAttributeNS(xmlnsUri, 'xmlns:xsi', xml_js_5.XML_SCHEMA_INSTANCE_URI);
            gpx.setAttributeNS(xml_js_5.XML_SCHEMA_INSTANCE_URI, 'xsi:schemaLocation', SCHEMA_LOCATION);
            gpx.setAttribute('version', '1.1');
            gpx.setAttribute('creator', 'OpenLayers');
            xml_js_5.pushSerializeAndPop(
            /** @type {import("../xml.js").NodeStackItem} */
            ({ node: gpx }), GPX_SERIALIZERS, GPX_NODE_FACTORY, features, [opt_options]);
            return gpx;
        }
    }
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const RTE_PARSERS = xml_js_5.makeStructureNS(NAMESPACE_URIS, {
        'name': xml_js_5.makeObjectPropertySetter(xsd_js_2.readString),
        'cmt': xml_js_5.makeObjectPropertySetter(xsd_js_2.readString),
        'desc': xml_js_5.makeObjectPropertySetter(xsd_js_2.readString),
        'src': xml_js_5.makeObjectPropertySetter(xsd_js_2.readString),
        'link': parseLink,
        'number': xml_js_5.makeObjectPropertySetter(xsd_js_2.readNonNegativeInteger),
        'extensions': parseExtensions,
        'type': xml_js_5.makeObjectPropertySetter(xsd_js_2.readString),
        'rtept': parseRtePt,
    });
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const RTEPT_PARSERS = xml_js_5.makeStructureNS(NAMESPACE_URIS, {
        'ele': xml_js_5.makeObjectPropertySetter(xsd_js_2.readDecimal),
        'time': xml_js_5.makeObjectPropertySetter(xsd_js_2.readDateTime),
    });
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const TRK_PARSERS = xml_js_5.makeStructureNS(NAMESPACE_URIS, {
        'name': xml_js_5.makeObjectPropertySetter(xsd_js_2.readString),
        'cmt': xml_js_5.makeObjectPropertySetter(xsd_js_2.readString),
        'desc': xml_js_5.makeObjectPropertySetter(xsd_js_2.readString),
        'src': xml_js_5.makeObjectPropertySetter(xsd_js_2.readString),
        'link': parseLink,
        'number': xml_js_5.makeObjectPropertySetter(xsd_js_2.readNonNegativeInteger),
        'type': xml_js_5.makeObjectPropertySetter(xsd_js_2.readString),
        'extensions': parseExtensions,
        'trkseg': parseTrkSeg,
    });
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const TRKSEG_PARSERS = xml_js_5.makeStructureNS(NAMESPACE_URIS, {
        'trkpt': parseTrkPt,
    });
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const TRKPT_PARSERS = xml_js_5.makeStructureNS(NAMESPACE_URIS, {
        'ele': xml_js_5.makeObjectPropertySetter(xsd_js_2.readDecimal),
        'time': xml_js_5.makeObjectPropertySetter(xsd_js_2.readDateTime),
    });
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const WPT_PARSERS = xml_js_5.makeStructureNS(NAMESPACE_URIS, {
        'ele': xml_js_5.makeObjectPropertySetter(xsd_js_2.readDecimal),
        'time': xml_js_5.makeObjectPropertySetter(xsd_js_2.readDateTime),
        'magvar': xml_js_5.makeObjectPropertySetter(xsd_js_2.readDecimal),
        'geoidheight': xml_js_5.makeObjectPropertySetter(xsd_js_2.readDecimal),
        'name': xml_js_5.makeObjectPropertySetter(xsd_js_2.readString),
        'cmt': xml_js_5.makeObjectPropertySetter(xsd_js_2.readString),
        'desc': xml_js_5.makeObjectPropertySetter(xsd_js_2.readString),
        'src': xml_js_5.makeObjectPropertySetter(xsd_js_2.readString),
        'link': parseLink,
        'sym': xml_js_5.makeObjectPropertySetter(xsd_js_2.readString),
        'type': xml_js_5.makeObjectPropertySetter(xsd_js_2.readString),
        'fix': xml_js_5.makeObjectPropertySetter(xsd_js_2.readString),
        'sat': xml_js_5.makeObjectPropertySetter(xsd_js_2.readNonNegativeInteger),
        'hdop': xml_js_5.makeObjectPropertySetter(xsd_js_2.readDecimal),
        'vdop': xml_js_5.makeObjectPropertySetter(xsd_js_2.readDecimal),
        'pdop': xml_js_5.makeObjectPropertySetter(xsd_js_2.readDecimal),
        'ageofdgpsdata': xml_js_5.makeObjectPropertySetter(xsd_js_2.readDecimal),
        'dgpsid': xml_js_5.makeObjectPropertySetter(xsd_js_2.readNonNegativeInteger),
        'extensions': parseExtensions,
    });
    /**
     * @const
     * @type {Array<string>}
     */
    const LINK_SEQUENCE = ['text', 'type'];
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
     */
    // @ts-ignore
    const LINK_SERIALIZERS = xml_js_5.makeStructureNS(NAMESPACE_URIS, {
        'text': xml_js_5.makeChildAppender(xsd_js_2.writeStringTextNode),
        'type': xml_js_5.makeChildAppender(xsd_js_2.writeStringTextNode),
    });
    /**
     * @const
     * @type {Object<string, Array<string>>}
     */
    // @ts-ignore
    const RTE_SEQUENCE = xml_js_5.makeStructureNS(NAMESPACE_URIS, [
        'name',
        'cmt',
        'desc',
        'src',
        'link',
        'number',
        'type',
        'rtept',
    ]);
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
     */
    // @ts-ignore
    const RTE_SERIALIZERS = xml_js_5.makeStructureNS(NAMESPACE_URIS, {
        'name': xml_js_5.makeChildAppender(xsd_js_2.writeStringTextNode),
        'cmt': xml_js_5.makeChildAppender(xsd_js_2.writeStringTextNode),
        'desc': xml_js_5.makeChildAppender(xsd_js_2.writeStringTextNode),
        'src': xml_js_5.makeChildAppender(xsd_js_2.writeStringTextNode),
        'link': xml_js_5.makeChildAppender(writeLink),
        'number': xml_js_5.makeChildAppender(xsd_js_2.writeNonNegativeIntegerTextNode),
        'type': xml_js_5.makeChildAppender(xsd_js_2.writeStringTextNode),
        'rtept': xml_js_5.makeArraySerializer(xml_js_5.makeChildAppender(writeWptType)),
    });
    /**
     * @const
     * @type {Object<string, Array<string>>}
     */
    // @ts-ignore
    const RTEPT_TYPE_SEQUENCE = xml_js_5.makeStructureNS(NAMESPACE_URIS, ['ele', 'time']);
    /**
     * @const
     * @type {Object<string, Array<string>>}
     */
    // @ts-ignore
    const TRK_SEQUENCE = xml_js_5.makeStructureNS(NAMESPACE_URIS, [
        'name',
        'cmt',
        'desc',
        'src',
        'link',
        'number',
        'type',
        'trkseg',
    ]);
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
     */
    // @ts-ignore
    const TRK_SERIALIZERS = xml_js_5.makeStructureNS(NAMESPACE_URIS, {
        'name': xml_js_5.makeChildAppender(xsd_js_2.writeStringTextNode),
        'cmt': xml_js_5.makeChildAppender(xsd_js_2.writeStringTextNode),
        'desc': xml_js_5.makeChildAppender(xsd_js_2.writeStringTextNode),
        'src': xml_js_5.makeChildAppender(xsd_js_2.writeStringTextNode),
        'link': xml_js_5.makeChildAppender(writeLink),
        'number': xml_js_5.makeChildAppender(xsd_js_2.writeNonNegativeIntegerTextNode),
        'type': xml_js_5.makeChildAppender(xsd_js_2.writeStringTextNode),
        'trkseg': xml_js_5.makeArraySerializer(xml_js_5.makeChildAppender(writeTrkSeg)),
    });
    /**
     * @const
     * @type {function(*, Array<*>, string=): (Node|undefined)}
     */
    const TRKSEG_NODE_FACTORY = xml_js_5.makeSimpleNodeFactory('trkpt');
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
     */
    // @ts-ignore
    const TRKSEG_SERIALIZERS = xml_js_5.makeStructureNS(NAMESPACE_URIS, {
        'trkpt': xml_js_5.makeChildAppender(writeWptType),
    });
    /**
     * @const
     * @type {Object<string, Array<string>>}
     */
    // @ts-ignore
    const WPT_TYPE_SEQUENCE = xml_js_5.makeStructureNS(NAMESPACE_URIS, [
        'ele',
        'time',
        'magvar',
        'geoidheight',
        'name',
        'cmt',
        'desc',
        'src',
        'link',
        'sym',
        'type',
        'fix',
        'sat',
        'hdop',
        'vdop',
        'pdop',
        'ageofdgpsdata',
        'dgpsid',
    ]);
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
     */
    // @ts-ignore
    const WPT_TYPE_SERIALIZERS = xml_js_5.makeStructureNS(NAMESPACE_URIS, {
        'ele': xml_js_5.makeChildAppender(xsd_js_2.writeDecimalTextNode),
        'time': xml_js_5.makeChildAppender(xsd_js_2.writeDateTimeTextNode),
        'magvar': xml_js_5.makeChildAppender(xsd_js_2.writeDecimalTextNode),
        'geoidheight': xml_js_5.makeChildAppender(xsd_js_2.writeDecimalTextNode),
        'name': xml_js_5.makeChildAppender(xsd_js_2.writeStringTextNode),
        'cmt': xml_js_5.makeChildAppender(xsd_js_2.writeStringTextNode),
        'desc': xml_js_5.makeChildAppender(xsd_js_2.writeStringTextNode),
        'src': xml_js_5.makeChildAppender(xsd_js_2.writeStringTextNode),
        'link': xml_js_5.makeChildAppender(writeLink),
        'sym': xml_js_5.makeChildAppender(xsd_js_2.writeStringTextNode),
        'type': xml_js_5.makeChildAppender(xsd_js_2.writeStringTextNode),
        'fix': xml_js_5.makeChildAppender(xsd_js_2.writeStringTextNode),
        'sat': xml_js_5.makeChildAppender(xsd_js_2.writeNonNegativeIntegerTextNode),
        'hdop': xml_js_5.makeChildAppender(xsd_js_2.writeDecimalTextNode),
        'vdop': xml_js_5.makeChildAppender(xsd_js_2.writeDecimalTextNode),
        'pdop': xml_js_5.makeChildAppender(xsd_js_2.writeDecimalTextNode),
        'ageofdgpsdata': xml_js_5.makeChildAppender(xsd_js_2.writeDecimalTextNode),
        'dgpsid': xml_js_5.makeChildAppender(xsd_js_2.writeNonNegativeIntegerTextNode),
    });
    /**
     * @const
     * @type {Object<string, string>}
     */
    const GEOMETRY_TYPE_TO_NODENAME = {
        'Point': 'wpt',
        'LineString': 'rte',
        'MultiLineString': 'trk',
    };
    /**
     * @param {*} value Value.
     * @param {Array<*>} objectStack Object stack.
     * @param {string=} opt_nodeName Node name.
     * @return {Node|undefined} Node.
     */
    function GPX_NODE_FACTORY(value, objectStack, opt_nodeName) {
        const geometry = /** @type {Feature} */ (value).getGeometry();
        if (geometry) {
            const nodeName = GEOMETRY_TYPE_TO_NODENAME[geometry.getType()];
            if (nodeName) {
                const parentNode = objectStack[objectStack.length - 1].node;
                return xml_js_5.createElementNS(parentNode.namespaceURI, nodeName);
            }
        }
    }
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {LayoutOptions} layoutOptions Layout options.
     * @param {Element} node Node.
     * @param {!Object} values Values.
     * @return {Array<number>} Flat coordinates.
     */
    function appendCoordinate(flatCoordinates, layoutOptions, node, values) {
        flatCoordinates.push(parseFloat(node.getAttribute('lon')), parseFloat(node.getAttribute('lat')));
        if ('ele' in values) {
            flatCoordinates.push(/** @type {number} */ (values['ele']));
            delete values['ele'];
            layoutOptions.hasZ = true;
        }
        else {
            flatCoordinates.push(0);
        }
        if ('time' in values) {
            flatCoordinates.push(/** @type {number} */ (values['time']));
            delete values['time'];
            layoutOptions.hasM = true;
        }
        else {
            flatCoordinates.push(0);
        }
        return flatCoordinates;
    }
    /**
     * Choose GeometryLayout based on flags in layoutOptions and adjust flatCoordinates
     * and ends arrays by shrinking them accordingly (removing unused zero entries).
     *
     * @param {LayoutOptions} layoutOptions Layout options.
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {Array<number>=} ends Ends.
     * @return {import("../geom/GeometryLayout.js").default} Layout.
     */
    function applyLayoutOptions(layoutOptions, flatCoordinates, ends) {
        let layout = GeometryLayout_js_10.default.XY;
        let stride = 2;
        if (layoutOptions.hasZ && layoutOptions.hasM) {
            layout = GeometryLayout_js_10.default.XYZM;
            stride = 4;
        }
        else if (layoutOptions.hasZ) {
            layout = GeometryLayout_js_10.default.XYZ;
            stride = 3;
        }
        else if (layoutOptions.hasM) {
            layout = GeometryLayout_js_10.default.XYM;
            stride = 3;
        }
        if (stride !== 4) {
            for (let i = 0, ii = flatCoordinates.length / 4; i < ii; i++) {
                flatCoordinates[i * stride] = flatCoordinates[i * 4];
                flatCoordinates[i * stride + 1] = flatCoordinates[i * 4 + 1];
                if (layoutOptions.hasZ) {
                    flatCoordinates[i * stride + 2] = flatCoordinates[i * 4 + 2];
                }
                if (layoutOptions.hasM) {
                    flatCoordinates[i * stride + 2] = flatCoordinates[i * 4 + 3];
                }
            }
            flatCoordinates.length = (flatCoordinates.length / 4) * stride;
            if (ends) {
                for (let i = 0, ii = ends.length; i < ii; i++) {
                    ends[i] = (ends[i] / 4) * stride;
                }
            }
        }
        return layout;
    }
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     */
    function parseLink(node, objectStack) {
        const values = /** @type {Object} */ (objectStack[objectStack.length - 1]);
        const href = node.getAttribute('href');
        if (href !== null) {
            values['link'] = href;
        }
        xml_js_5.parseNode(LINK_PARSERS, node, objectStack);
    }
    /**
     * @param {Node} node Node.
     * @param {Array<*>} objectStack Object stack.
     */
    function parseExtensions(node, objectStack) {
        const values = /** @type {Object} */ (objectStack[objectStack.length - 1]);
        values['extensionsNode_'] = node;
    }
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     */
    function parseRtePt(node, objectStack) {
        const values = xml_js_5.pushParseAndPop({}, RTEPT_PARSERS, node, objectStack);
        if (values) {
            const rteValues = /** @type {!Object} */ (objectStack[objectStack.length - 1]);
            const flatCoordinates = /** @type {Array<number>} */ (rteValues['flatCoordinates']);
            const layoutOptions = /** @type {LayoutOptions} */ (rteValues['layoutOptions']);
            appendCoordinate(flatCoordinates, layoutOptions, node, values);
        }
    }
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     */
    function parseTrkPt(node, objectStack) {
        const values = xml_js_5.pushParseAndPop({}, TRKPT_PARSERS, node, objectStack);
        if (values) {
            const trkValues = /** @type {!Object} */ (objectStack[objectStack.length - 1]);
            const flatCoordinates = /** @type {Array<number>} */ (trkValues['flatCoordinates']);
            const layoutOptions = /** @type {LayoutOptions} */ (trkValues['layoutOptions']);
            appendCoordinate(flatCoordinates, layoutOptions, node, values);
        }
    }
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     */
    function parseTrkSeg(node, objectStack) {
        const values = /** @type {Object} */ (objectStack[objectStack.length - 1]);
        xml_js_5.parseNode(TRKSEG_PARSERS, node, objectStack);
        const flatCoordinates = 
        /** @type {Array<number>} */
        (values['flatCoordinates']);
        const ends = /** @type {Array<number>} */ (values['ends']);
        ends.push(flatCoordinates.length);
    }
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Feature|undefined} Track.
     */
    function readRte(node, objectStack) {
        const options = /** @type {import("./Feature.js").ReadOptions} */ (objectStack[0]);
        const values = xml_js_5.pushParseAndPop({
            'flatCoordinates': [],
            'layoutOptions': {},
        }, RTE_PARSERS, node, objectStack);
        if (!values) {
            return undefined;
        }
        const flatCoordinates = 
        /** @type {Array<number>} */
        (values['flatCoordinates']);
        delete values['flatCoordinates'];
        const layoutOptions = /** @type {LayoutOptions} */ (values['layoutOptions']);
        delete values['layoutOptions'];
        const layout = applyLayoutOptions(layoutOptions, flatCoordinates);
        const geometry = new LineString_js_7.default(flatCoordinates, layout);
        Feature_js_14.transformGeometryWithOptions(geometry, false, options);
        const feature = new Feature_js_13.default(geometry);
        feature.setProperties(values, true);
        return feature;
    }
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Feature|undefined} Track.
     */
    function readTrk(node, objectStack) {
        const options = /** @type {import("./Feature.js").ReadOptions} */ (objectStack[0]);
        const values = xml_js_5.pushParseAndPop({
            'flatCoordinates': [],
            'ends': [],
            'layoutOptions': {},
        }, TRK_PARSERS, node, objectStack);
        if (!values) {
            return undefined;
        }
        const flatCoordinates = 
        /** @type {Array<number>} */
        (values['flatCoordinates']);
        delete values['flatCoordinates'];
        const ends = /** @type {Array<number>} */ (values['ends']);
        delete values['ends'];
        const layoutOptions = /** @type {LayoutOptions} */ (values['layoutOptions']);
        delete values['layoutOptions'];
        const layout = applyLayoutOptions(layoutOptions, flatCoordinates, ends);
        const geometry = new MultiLineString_js_6.default(flatCoordinates, layout, ends);
        Feature_js_14.transformGeometryWithOptions(geometry, false, options);
        const feature = new Feature_js_13.default(geometry);
        feature.setProperties(values, true);
        return feature;
    }
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Feature|undefined} Waypoint.
     */
    function readWpt(node, objectStack) {
        const options = /** @type {import("./Feature.js").ReadOptions} */ (objectStack[0]);
        const values = xml_js_5.pushParseAndPop({}, WPT_PARSERS, node, objectStack);
        if (!values) {
            return undefined;
        }
        const layoutOptions = /** @type {LayoutOptions} */ ({});
        const coordinates = appendCoordinate([], layoutOptions, node, values);
        const layout = applyLayoutOptions(layoutOptions, coordinates);
        const geometry = new Point_js_9.default(coordinates, layout);
        Feature_js_14.transformGeometryWithOptions(geometry, false, options);
        const feature = new Feature_js_13.default(geometry);
        feature.setProperties(values, true);
        return feature;
    }
    /**
     * @param {Element} node Node.
     * @param {string} value Value for the link's `href` attribute.
     * @param {Array<*>} objectStack Node stack.
     */
    function writeLink(node, value, objectStack) {
        node.setAttribute('href', value);
        const context = objectStack[objectStack.length - 1];
        const properties = context['properties'];
        const link = [properties['linkText'], properties['linkType']];
        xml_js_5.pushSerializeAndPop(
        /** @type {import("../xml.js").NodeStackItem} */ ({ node: node }), LINK_SERIALIZERS, xml_js_5.OBJECT_PROPERTY_NODE_FACTORY, link, objectStack, LINK_SEQUENCE);
    }
    /**
     * @param {Element} node Node.
     * @param {import("../coordinate.js").Coordinate} coordinate Coordinate.
     * @param {Array<*>} objectStack Object stack.
     */
    function writeWptType(node, coordinate, objectStack) {
        const context = objectStack[objectStack.length - 1];
        const parentNode = context.node;
        const namespaceURI = parentNode.namespaceURI;
        const properties = context['properties'];
        //FIXME Projection handling
        node.setAttributeNS(null, 'lat', String(coordinate[1]));
        node.setAttributeNS(null, 'lon', String(coordinate[0]));
        const geometryLayout = context['geometryLayout'];
        switch (geometryLayout) {
            case GeometryLayout_js_10.default.XYZM:
                if (coordinate[3] !== 0) {
                    properties['time'] = coordinate[3];
                }
            // fall through
            case GeometryLayout_js_10.default.XYZ:
                if (coordinate[2] !== 0) {
                    properties['ele'] = coordinate[2];
                }
                break;
            case GeometryLayout_js_10.default.XYM:
                if (coordinate[2] !== 0) {
                    properties['time'] = coordinate[2];
                }
                break;
            default:
            // pass
        }
        const orderedKeys = node.nodeName == 'rtept'
            ? RTEPT_TYPE_SEQUENCE[namespaceURI]
            : WPT_TYPE_SEQUENCE[namespaceURI];
        const values = xml_js_5.makeSequence(properties, orderedKeys);
        xml_js_5.pushSerializeAndPop(
        /** @type {import("../xml.js").NodeStackItem} */
        ({ node: node, 'properties': properties }), WPT_TYPE_SERIALIZERS, xml_js_5.OBJECT_PROPERTY_NODE_FACTORY, values, objectStack, orderedKeys);
    }
    /**
     * @param {Node} node Node.
     * @param {Feature} feature Feature.
     * @param {Array<*>} objectStack Object stack.
     */
    function writeRte(node, feature, objectStack) {
        const options = /** @type {import("./Feature.js").WriteOptions} */ (objectStack[0]);
        const properties = feature.getProperties();
        const context = { node: node };
        context['properties'] = properties;
        const geometry = feature.getGeometry();
        if (geometry.getType() == GeometryType_js_26.default.LINE_STRING) {
            const lineString = /** @type {LineString} */ (Feature_js_14.transformGeometryWithOptions(geometry, true, options));
            context['geometryLayout'] = lineString.getLayout();
            properties['rtept'] = lineString.getCoordinates();
        }
        const parentNode = objectStack[objectStack.length - 1].node;
        const orderedKeys = RTE_SEQUENCE[parentNode.namespaceURI];
        const values = xml_js_5.makeSequence(properties, orderedKeys);
        xml_js_5.pushSerializeAndPop(context, RTE_SERIALIZERS, xml_js_5.OBJECT_PROPERTY_NODE_FACTORY, values, objectStack, orderedKeys);
    }
    /**
     * @param {Node} node Node.
     * @param {Feature} feature Feature.
     * @param {Array<*>} objectStack Object stack.
     */
    function writeTrk(node, feature, objectStack) {
        const options = /** @type {import("./Feature.js").WriteOptions} */ (objectStack[0]);
        const properties = feature.getProperties();
        /** @type {import("../xml.js").NodeStackItem} */
        const context = { node: node };
        context['properties'] = properties;
        const geometry = feature.getGeometry();
        if (geometry.getType() == GeometryType_js_26.default.MULTI_LINE_STRING) {
            const multiLineString = /** @type {MultiLineString} */ (Feature_js_14.transformGeometryWithOptions(geometry, true, options));
            properties['trkseg'] = multiLineString.getLineStrings();
        }
        const parentNode = objectStack[objectStack.length - 1].node;
        const orderedKeys = TRK_SEQUENCE[parentNode.namespaceURI];
        const values = xml_js_5.makeSequence(properties, orderedKeys);
        xml_js_5.pushSerializeAndPop(context, TRK_SERIALIZERS, xml_js_5.OBJECT_PROPERTY_NODE_FACTORY, values, objectStack, orderedKeys);
    }
    /**
     * @param {Node} node Node.
     * @param {LineString} lineString LineString.
     * @param {Array<*>} objectStack Object stack.
     */
    function writeTrkSeg(node, lineString, objectStack) {
        /** @type {import("../xml.js").NodeStackItem} */
        const context = { node: node };
        context['geometryLayout'] = lineString.getLayout();
        context['properties'] = {};
        xml_js_5.pushSerializeAndPop(context, TRKSEG_SERIALIZERS, TRKSEG_NODE_FACTORY, lineString.getCoordinates(), objectStack);
    }
    /**
     * @param {Element} node Node.
     * @param {Feature} feature Feature.
     * @param {Array<*>} objectStack Object stack.
     */
    function writeWpt(node, feature, objectStack) {
        const options = /** @type {import("./Feature.js").WriteOptions} */ (objectStack[0]);
        const context = objectStack[objectStack.length - 1];
        context['properties'] = feature.getProperties();
        const geometry = feature.getGeometry();
        if (geometry.getType() == GeometryType_js_26.default.POINT) {
            const point = /** @type {Point} */ (Feature_js_14.transformGeometryWithOptions(geometry, true, options));
            context['geometryLayout'] = point.getLayout();
            writeWptType(node, point.getCoordinates(), objectStack);
        }
    }
    exports.default = GPX;
});
define("node_modules/ol/src/format/TextFeature", ["require", "exports", "node_modules/ol/src/format/Feature", "node_modules/ol/src/format/FormatType", "node_modules/ol/src/util"], function (require, exports, Feature_js_15, FormatType_js_4, util_js_28) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @classdesc
     * Abstract base class; normally only used for creating subclasses and not
     * instantiated in apps.
     * Base class for text feature formats.
     *
     * @abstract
     */
    class TextFeature extends Feature_js_15.default {
        constructor() {
            super();
        }
        /**
         * @return {import("./FormatType.js").default} Format.
         */
        getType() {
            return FormatType_js_4.default.TEXT;
        }
        /**
         * Read the feature from the source.
         *
         * @param {Document|Element|Object|string} source Source.
         * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
         * @return {import("../Feature.js").default} Feature.
         * @api
         */
        readFeature(source, opt_options) {
            return this.readFeatureFromText(getText(source), this.adaptOptions(opt_options));
        }
        /**
         * @abstract
         * @param {string} text Text.
         * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
         * @protected
         * @return {import("../Feature.js").default} Feature.
         */
        readFeatureFromText(text, opt_options) {
            return util_js_28.abstract();
        }
        /**
         * Read the features from the source.
         *
         * @param {Document|Element|Object|string} source Source.
         * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
         * @return {Array<import("../Feature.js").default>} Features.
         * @api
         */
        readFeatures(source, opt_options) {
            return this.readFeaturesFromText(getText(source), this.adaptOptions(opt_options));
        }
        /**
         * @abstract
         * @param {string} text Text.
         * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
         * @protected
         * @return {Array<import("../Feature.js").default>} Features.
         */
        readFeaturesFromText(text, opt_options) {
            return util_js_28.abstract();
        }
        /**
         * Read the geometry from the source.
         *
         * @param {Document|Element|Object|string} source Source.
         * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
         * @return {import("../geom/Geometry.js").default} Geometry.
         * @api
         */
        readGeometry(source, opt_options) {
            return this.readGeometryFromText(getText(source), this.adaptOptions(opt_options));
        }
        /**
         * @abstract
         * @param {string} text Text.
         * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
         * @protected
         * @return {import("../geom/Geometry.js").default} Geometry.
         */
        readGeometryFromText(text, opt_options) {
            return util_js_28.abstract();
        }
        /**
         * Read the projection from the source.
         *
         * @param {Document|Element|Object|string} source Source.
         * @return {import("../proj/Projection.js").default} Projection.
         * @api
         */
        readProjection(source) {
            return this.readProjectionFromText(getText(source));
        }
        /**
         * @param {string} text Text.
         * @protected
         * @return {import("../proj/Projection.js").default} Projection.
         */
        readProjectionFromText(text) {
            return this.dataProjection;
        }
        /**
         * Encode a feature as a string.
         *
         * @param {import("../Feature.js").default} feature Feature.
         * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
         * @return {string} Encoded feature.
         * @api
         */
        writeFeature(feature, opt_options) {
            return this.writeFeatureText(feature, this.adaptOptions(opt_options));
        }
        /**
         * @abstract
         * @param {import("../Feature.js").default} feature Features.
         * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
         * @protected
         * @return {string} Text.
         */
        writeFeatureText(feature, opt_options) {
            return util_js_28.abstract();
        }
        /**
         * Encode an array of features as string.
         *
         * @param {Array<import("../Feature.js").default>} features Features.
         * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
         * @return {string} Encoded features.
         * @api
         */
        writeFeatures(features, opt_options) {
            return this.writeFeaturesText(features, this.adaptOptions(opt_options));
        }
        /**
         * @abstract
         * @param {Array<import("../Feature.js").default>} features Features.
         * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
         * @protected
         * @return {string} Text.
         */
        writeFeaturesText(features, opt_options) {
            return util_js_28.abstract();
        }
        /**
         * Write a single geometry.
         *
         * @param {import("../geom/Geometry.js").default} geometry Geometry.
         * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
         * @return {string} Geometry.
         * @api
         */
        writeGeometry(geometry, opt_options) {
            return this.writeGeometryText(geometry, this.adaptOptions(opt_options));
        }
        /**
         * @abstract
         * @param {import("../geom/Geometry.js").default} geometry Geometry.
         * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
         * @protected
         * @return {string} Text.
         */
        writeGeometryText(geometry, opt_options) {
            return util_js_28.abstract();
        }
    }
    /**
     * @param {Document|Element|Object|string} source Source.
     * @return {string} Text.
     */
    function getText(source) {
        if (typeof source === 'string') {
            return source;
        }
        else {
            return '';
        }
    }
    exports.default = TextFeature;
});
define("node_modules/ol/src/format/IGC", ["require", "exports", "node_modules/ol/src/Feature", "node_modules/ol/src/geom/GeometryLayout", "node_modules/ol/src/geom/LineString", "node_modules/ol/src/format/TextFeature", "node_modules/ol/src/proj", "node_modules/ol/src/format/Feature"], function (require, exports, Feature_js_16, GeometryLayout_js_11, LineString_js_8, TextFeature_js_1, proj_js_23, Feature_js_17) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * IGC altitude/z. One of 'barometric', 'gps', 'none'.
     * @enum {string}
     */
    const IGCZ = {
        BAROMETRIC: 'barometric',
        GPS: 'gps',
        NONE: 'none',
    };
    /**
     * @const
     * @type {RegExp}
     */
    const B_RECORD_RE = /^B(\d{2})(\d{2})(\d{2})(\d{2})(\d{5})([NS])(\d{3})(\d{5})([EW])([AV])(\d{5})(\d{5})/;
    /**
     * @const
     * @type {RegExp}
     */
    const H_RECORD_RE = /^H.([A-Z]{3}).*?:(.*)/;
    /**
     * @const
     * @type {RegExp}
     */
    const HFDTE_RECORD_RE = /^HFDTE(\d{2})(\d{2})(\d{2})/;
    /**
     * A regular expression matching the newline characters `\r\n`, `\r` and `\n`.
     *
     * @const
     * @type {RegExp}
     */
    const NEWLINE_RE = /\r\n|\r|\n/;
    /**
     * @typedef {Object} Options
     * @property {IGCZ|string} [altitudeMode='none'] Altitude mode. Possible
     * values are `'barometric'`, `'gps'`, and `'none'`.
     */
    /**
     * @classdesc
     * Feature format for `*.igc` flight recording files.
     *
     * As IGC sources contain a single feature,
     * {@link module:ol/format/IGC~IGC#readFeatures} will return the feature in an
     * array
     *
     * @api
     */
    class IGC extends TextFeature_js_1.default {
        /**
         * @param {Options=} opt_options Options.
         */
        constructor(opt_options) {
            super();
            const options = opt_options ? opt_options : {};
            /**
             * @type {import("../proj/Projection.js").default}
             */
            this.dataProjection = proj_js_23.get('EPSG:4326');
            /**
             * @private
             * @type {IGCZ}
             */
            this.altitudeMode_ = options.altitudeMode
                ? options.altitudeMode
                : IGCZ.NONE;
        }
        /**
         * @protected
         * @param {string} text Text.
         * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
         * @return {import("../Feature.js").default} Feature.
         */
        readFeatureFromText(text, opt_options) {
            const altitudeMode = this.altitudeMode_;
            const lines = text.split(NEWLINE_RE);
            /** @type {Object<string, string>} */
            const properties = {};
            const flatCoordinates = [];
            let year = 2000;
            let month = 0;
            let day = 1;
            let lastDateTime = -1;
            let i, ii;
            for (i = 0, ii = lines.length; i < ii; ++i) {
                const line = lines[i];
                let m;
                if (line.charAt(0) == 'B') {
                    m = B_RECORD_RE.exec(line);
                    if (m) {
                        const hour = parseInt(m[1], 10);
                        const minute = parseInt(m[2], 10);
                        const second = parseInt(m[3], 10);
                        let y = parseInt(m[4], 10) + parseInt(m[5], 10) / 60000;
                        if (m[6] == 'S') {
                            y = -y;
                        }
                        let x = parseInt(m[7], 10) + parseInt(m[8], 10) / 60000;
                        if (m[9] == 'W') {
                            x = -x;
                        }
                        flatCoordinates.push(x, y);
                        if (altitudeMode != IGCZ.NONE) {
                            let z;
                            if (altitudeMode == IGCZ.GPS) {
                                z = parseInt(m[11], 10);
                            }
                            else if (altitudeMode == IGCZ.BAROMETRIC) {
                                z = parseInt(m[12], 10);
                            }
                            else {
                                z = 0;
                            }
                            flatCoordinates.push(z);
                        }
                        let dateTime = Date.UTC(year, month, day, hour, minute, second);
                        // Detect UTC midnight wrap around.
                        if (dateTime < lastDateTime) {
                            dateTime = Date.UTC(year, month, day + 1, hour, minute, second);
                        }
                        flatCoordinates.push(dateTime / 1000);
                        lastDateTime = dateTime;
                    }
                }
                else if (line.charAt(0) == 'H') {
                    m = HFDTE_RECORD_RE.exec(line);
                    if (m) {
                        day = parseInt(m[1], 10);
                        month = parseInt(m[2], 10) - 1;
                        year = 2000 + parseInt(m[3], 10);
                    }
                    else {
                        m = H_RECORD_RE.exec(line);
                        if (m) {
                            properties[m[1]] = m[2].trim();
                        }
                    }
                }
            }
            if (flatCoordinates.length === 0) {
                return null;
            }
            const layout = altitudeMode == IGCZ.NONE ? GeometryLayout_js_11.default.XYM : GeometryLayout_js_11.default.XYZM;
            const lineString = new LineString_js_8.default(flatCoordinates, layout);
            const feature = new Feature_js_16.default(Feature_js_17.transformGeometryWithOptions(lineString, false, opt_options));
            feature.setProperties(properties, true);
            return feature;
        }
        /**
         * @param {string} text Text.
         * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
         * @protected
         * @return {Array<Feature>} Features.
         */
        readFeaturesFromText(text, opt_options) {
            const feature = this.readFeatureFromText(text, opt_options);
            if (feature) {
                return [feature];
            }
            else {
                return [];
            }
        }
    }
    exports.default = IGC;
});
define("node_modules/ol/src/ImageTile", ["require", "exports", "node_modules/ol/src/Tile", "node_modules/ol/src/TileState", "node_modules/ol/src/dom", "node_modules/ol/src/Image"], function (require, exports, Tile_js_4, TileState_js_7, dom_js_15, Image_js_5) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    class ImageTile extends Tile_js_4.default {
        /**
         * @param {import("./tilecoord.js").TileCoord} tileCoord Tile coordinate.
         * @param {import("./TileState.js").default} state State.
         * @param {string} src Image source URI.
         * @param {?string} crossOrigin Cross origin.
         * @param {import("./Tile.js").LoadFunction} tileLoadFunction Tile load function.
         * @param {import("./Tile.js").Options=} opt_options Tile options.
         */
        constructor(tileCoord, state, src, crossOrigin, tileLoadFunction, opt_options) {
            super(tileCoord, state, opt_options);
            /**
             * @private
             * @type {?string}
             */
            this.crossOrigin_ = crossOrigin;
            /**
             * Image URI
             *
             * @private
             * @type {string}
             */
            this.src_ = src;
            /**
             * @private
             * @type {HTMLImageElement|HTMLCanvasElement}
             */
            this.image_ = new Image();
            if (crossOrigin !== null) {
                this.image_.crossOrigin = crossOrigin;
            }
            /**
             * @private
             * @type {?function():void}
             */
            this.unlisten_ = null;
            /**
             * @private
             * @type {import("./Tile.js").LoadFunction}
             */
            this.tileLoadFunction_ = tileLoadFunction;
        }
        /**
         * Get the HTML image element for this tile (may be a Canvas, Image, or Video).
         * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.
         * @api
         */
        getImage() {
            return this.image_;
        }
        /**
         * @return {string} Key.
         */
        getKey() {
            return this.src_;
        }
        /**
         * Tracks loading or read errors.
         *
         * @private
         */
        handleImageError_() {
            this.state = TileState_js_7.default.ERROR;
            this.unlistenImage_();
            this.image_ = getBlankImage();
            this.changed();
        }
        /**
         * Tracks successful image load.
         *
         * @private
         */
        handleImageLoad_() {
            const image = /** @type {HTMLImageElement} */ (this.image_);
            if (image.naturalWidth && image.naturalHeight) {
                this.state = TileState_js_7.default.LOADED;
            }
            else {
                this.state = TileState_js_7.default.EMPTY;
            }
            this.unlistenImage_();
            this.changed();
        }
        /**
         * Load not yet loaded URI.
         * @api
         */
        load() {
            if (this.state == TileState_js_7.default.ERROR) {
                this.state = TileState_js_7.default.IDLE;
                this.image_ = new Image();
                if (this.crossOrigin_ !== null) {
                    this.image_.crossOrigin = this.crossOrigin_;
                }
            }
            if (this.state == TileState_js_7.default.IDLE) {
                this.state = TileState_js_7.default.LOADING;
                this.changed();
                this.tileLoadFunction_(this, this.src_);
                this.unlisten_ = Image_js_5.listenImage(this.image_, this.handleImageLoad_.bind(this), this.handleImageError_.bind(this));
            }
        }
        /**
         * Discards event handlers which listen for load completion or errors.
         *
         * @private
         */
        unlistenImage_() {
            if (this.unlisten_) {
                this.unlisten_();
                this.unlisten_ = null;
            }
        }
    }
    /**
     * Get a 1-pixel blank image.
     * @return {HTMLCanvasElement} Blank image.
     */
    function getBlankImage() {
        const ctx = dom_js_15.createCanvasContext2D(1, 1);
        ctx.fillStyle = 'rgba(0,0,0,0)';
        ctx.fillRect(0, 0, 1, 1);
        return ctx.canvas;
    }
    exports.default = ImageTile;
});
/**
 * @module ol/reproj/common
 */
define("node_modules/ol/src/reproj/common", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ENABLE_RASTER_REPROJECTION = exports.ERROR_THRESHOLD = void 0;
    /**
     * Default maximum allowed threshold  (in pixels) for reprojection
     * triangulation.
     * @type {number}
     */
    exports.ERROR_THRESHOLD = 0.5;
    /**
     * Enable automatic reprojection of raster sources. Default is `true`.
     * TODO: decide if we want to expose this as a build flag or remove it
     * @type {boolean}
     */
    exports.ENABLE_RASTER_REPROJECTION = true;
});
define("node_modules/ol/src/reproj/Triangulation", ["require", "exports", "node_modules/ol/src/extent", "node_modules/ol/src/proj", "node_modules/ol/src/math"], function (require, exports, extent_js_46, proj_js_24, math_js_22) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Single triangle; consists of 3 source points and 3 target points.
     * @typedef {Object} Triangle
     * @property {Array<import("../coordinate.js").Coordinate>} source
     * @property {Array<import("../coordinate.js").Coordinate>} target
     */
    /**
     * Maximum number of subdivision steps during raster reprojection triangulation.
     * Prevents high memory usage and large number of proj4 calls (for certain
     * transformations and areas). At most `2*(2^this)` triangles are created for
     * each triangulated extent (tile/image).
     * @type {number}
     */
    const MAX_SUBDIVISION = 10;
    /**
     * Maximum allowed size of triangle relative to world width. When transforming
     * corners of world extent between certain projections, the resulting
     * triangulation seems to have zero error and no subdivision is performed. If
     * the triangle width is more than this (relative to world width; 0-1),
     * subdivison is forced (up to `MAX_SUBDIVISION`). Default is `0.25`.
     * @type {number}
     */
    const MAX_TRIANGLE_WIDTH = 0.25;
    /**
     * @classdesc
     * Class containing triangulation of the given target extent.
     * Used for determining source data and the reprojection itself.
     */
    class Triangulation {
        /**
         * @param {import("../proj/Projection.js").default} sourceProj Source projection.
         * @param {import("../proj/Projection.js").default} targetProj Target projection.
         * @param {import("../extent.js").Extent} targetExtent Target extent to triangulate.
         * @param {import("../extent.js").Extent} maxSourceExtent Maximal source extent that can be used.
         * @param {number} errorThreshold Acceptable error (in source units).
         * @param {?number} opt_destinationResolution The (optional) resolution of the destination.
         */
        constructor(sourceProj, targetProj, targetExtent, maxSourceExtent, errorThreshold, opt_destinationResolution) {
            /**
             * @type {import("../proj/Projection.js").default}
             * @private
             */
            this.sourceProj_ = sourceProj;
            /**
             * @type {import("../proj/Projection.js").default}
             * @private
             */
            this.targetProj_ = targetProj;
            /** @type {!Object<string, import("../coordinate.js").Coordinate>} */
            let transformInvCache = {};
            const transformInv = proj_js_24.getTransform(this.targetProj_, this.sourceProj_);
            /**
             * @param {import("../coordinate.js").Coordinate} c A coordinate.
             * @return {import("../coordinate.js").Coordinate} Transformed coordinate.
             * @private
             */
            this.transformInv_ = function (c) {
                const key = c[0] + '/' + c[1];
                if (!transformInvCache[key]) {
                    transformInvCache[key] = transformInv(c);
                }
                return transformInvCache[key];
            };
            /**
             * @type {import("../extent.js").Extent}
             * @private
             */
            this.maxSourceExtent_ = maxSourceExtent;
            /**
             * @type {number}
             * @private
             */
            this.errorThresholdSquared_ = errorThreshold * errorThreshold;
            /**
             * @type {Array<Triangle>}
             * @private
             */
            this.triangles_ = [];
            /**
             * Indicates that the triangulation crosses edge of the source projection.
             * @type {boolean}
             * @private
             */
            this.wrapsXInSource_ = false;
            /**
             * @type {boolean}
             * @private
             */
            this.canWrapXInSource_ =
                this.sourceProj_.canWrapX() &&
                    !!maxSourceExtent &&
                    !!this.sourceProj_.getExtent() &&
                    extent_js_46.getWidth(maxSourceExtent) == extent_js_46.getWidth(this.sourceProj_.getExtent());
            /**
             * @type {?number}
             * @private
             */
            this.sourceWorldWidth_ = this.sourceProj_.getExtent()
                ? extent_js_46.getWidth(this.sourceProj_.getExtent())
                : null;
            /**
             * @type {?number}
             * @private
             */
            this.targetWorldWidth_ = this.targetProj_.getExtent()
                ? extent_js_46.getWidth(this.targetProj_.getExtent())
                : null;
            const destinationTopLeft = extent_js_46.getTopLeft(targetExtent);
            const destinationTopRight = extent_js_46.getTopRight(targetExtent);
            const destinationBottomRight = extent_js_46.getBottomRight(targetExtent);
            const destinationBottomLeft = extent_js_46.getBottomLeft(targetExtent);
            const sourceTopLeft = this.transformInv_(destinationTopLeft);
            const sourceTopRight = this.transformInv_(destinationTopRight);
            const sourceBottomRight = this.transformInv_(destinationBottomRight);
            const sourceBottomLeft = this.transformInv_(destinationBottomLeft);
            /*
             * The maxSubdivision controls how many splittings of the target area can
             * be done. The idea here is to do a linear mapping of the target areas
             * but the actual overal reprojection (can be) extremely non-linear. The
             * default value of MAX_SUBDIVISION was chosen based on mapping a 256x256
             * tile size. However this function is also called to remap canvas rendered
             * layers which can be much larger. This calculation increases the maxSubdivision
             * value by the right factor so that each 256x256 pixel area has
             * MAX_SUBDIVISION divisions.
             */
            const maxSubdivision = MAX_SUBDIVISION +
                (opt_destinationResolution
                    ? Math.max(0, Math.ceil(math_js_22.log2(extent_js_46.getArea(targetExtent) /
                        (opt_destinationResolution *
                            opt_destinationResolution *
                            256 *
                            256))))
                    : 0);
            this.addQuad_(destinationTopLeft, destinationTopRight, destinationBottomRight, destinationBottomLeft, sourceTopLeft, sourceTopRight, sourceBottomRight, sourceBottomLeft, maxSubdivision);
            if (this.wrapsXInSource_) {
                let leftBound = Infinity;
                this.triangles_.forEach(function (triangle, i, arr) {
                    leftBound = Math.min(leftBound, triangle.source[0][0], triangle.source[1][0], triangle.source[2][0]);
                });
                // Shift triangles to be as close to `leftBound` as possible
                // (if the distance is more than `worldWidth / 2` it can be closer.
                this.triangles_.forEach(function (triangle) {
                    if (Math.max(triangle.source[0][0], triangle.source[1][0], triangle.source[2][0]) -
                        leftBound >
                        this.sourceWorldWidth_ / 2) {
                        const newTriangle = [
                            [triangle.source[0][0], triangle.source[0][1]],
                            [triangle.source[1][0], triangle.source[1][1]],
                            [triangle.source[2][0], triangle.source[2][1]],
                        ];
                        if (newTriangle[0][0] - leftBound > this.sourceWorldWidth_ / 2) {
                            newTriangle[0][0] -= this.sourceWorldWidth_;
                        }
                        if (newTriangle[1][0] - leftBound > this.sourceWorldWidth_ / 2) {
                            newTriangle[1][0] -= this.sourceWorldWidth_;
                        }
                        if (newTriangle[2][0] - leftBound > this.sourceWorldWidth_ / 2) {
                            newTriangle[2][0] -= this.sourceWorldWidth_;
                        }
                        // Rarely (if the extent contains both the dateline and prime meridian)
                        // the shift can in turn break some triangles.
                        // Detect this here and don't shift in such cases.
                        const minX = Math.min(newTriangle[0][0], newTriangle[1][0], newTriangle[2][0]);
                        const maxX = Math.max(newTriangle[0][0], newTriangle[1][0], newTriangle[2][0]);
                        if (maxX - minX < this.sourceWorldWidth_ / 2) {
                            triangle.source = newTriangle;
                        }
                    }
                }.bind(this));
            }
            transformInvCache = {};
        }
        /**
         * Adds triangle to the triangulation.
         * @param {import("../coordinate.js").Coordinate} a The target a coordinate.
         * @param {import("../coordinate.js").Coordinate} b The target b coordinate.
         * @param {import("../coordinate.js").Coordinate} c The target c coordinate.
         * @param {import("../coordinate.js").Coordinate} aSrc The source a coordinate.
         * @param {import("../coordinate.js").Coordinate} bSrc The source b coordinate.
         * @param {import("../coordinate.js").Coordinate} cSrc The source c coordinate.
         * @private
         */
        addTriangle_(a, b, c, aSrc, bSrc, cSrc) {
            this.triangles_.push({
                source: [aSrc, bSrc, cSrc],
                target: [a, b, c],
            });
        }
        /**
         * Adds quad (points in clock-wise order) to the triangulation
         * (and reprojects the vertices) if valid.
         * Performs quad subdivision if needed to increase precision.
         *
         * @param {import("../coordinate.js").Coordinate} a The target a coordinate.
         * @param {import("../coordinate.js").Coordinate} b The target b coordinate.
         * @param {import("../coordinate.js").Coordinate} c The target c coordinate.
         * @param {import("../coordinate.js").Coordinate} d The target d coordinate.
         * @param {import("../coordinate.js").Coordinate} aSrc The source a coordinate.
         * @param {import("../coordinate.js").Coordinate} bSrc The source b coordinate.
         * @param {import("../coordinate.js").Coordinate} cSrc The source c coordinate.
         * @param {import("../coordinate.js").Coordinate} dSrc The source d coordinate.
         * @param {number} maxSubdivision Maximal allowed subdivision of the quad.
         * @private
         */
        addQuad_(a, b, c, d, aSrc, bSrc, cSrc, dSrc, maxSubdivision) {
            const sourceQuadExtent = extent_js_46.boundingExtent([aSrc, bSrc, cSrc, dSrc]);
            const sourceCoverageX = this.sourceWorldWidth_
                ? extent_js_46.getWidth(sourceQuadExtent) / this.sourceWorldWidth_
                : null;
            const sourceWorldWidth = /** @type {number} */ (this.sourceWorldWidth_);
            // when the quad is wrapped in the source projection
            // it covers most of the projection extent, but not fully
            const wrapsX = this.sourceProj_.canWrapX() &&
                sourceCoverageX > 0.5 &&
                sourceCoverageX < 1;
            let needsSubdivision = false;
            if (maxSubdivision > 0) {
                if (this.targetProj_.isGlobal() && this.targetWorldWidth_) {
                    const targetQuadExtent = extent_js_46.boundingExtent([a, b, c, d]);
                    const targetCoverageX = extent_js_46.getWidth(targetQuadExtent) / this.targetWorldWidth_;
                    needsSubdivision =
                        targetCoverageX > MAX_TRIANGLE_WIDTH || needsSubdivision;
                }
                if (!wrapsX && this.sourceProj_.isGlobal() && sourceCoverageX) {
                    needsSubdivision =
                        sourceCoverageX > MAX_TRIANGLE_WIDTH || needsSubdivision;
                }
            }
            if (!needsSubdivision && this.maxSourceExtent_) {
                if (isFinite(sourceQuadExtent[0]) &&
                    isFinite(sourceQuadExtent[1]) &&
                    isFinite(sourceQuadExtent[2]) &&
                    isFinite(sourceQuadExtent[3])) {
                    if (!extent_js_46.intersects(sourceQuadExtent, this.maxSourceExtent_)) {
                        // whole quad outside source projection extent -> ignore
                        return;
                    }
                }
            }
            let isNotFinite = 0;
            if (!needsSubdivision) {
                if (!isFinite(aSrc[0]) ||
                    !isFinite(aSrc[1]) ||
                    !isFinite(bSrc[0]) ||
                    !isFinite(bSrc[1]) ||
                    !isFinite(cSrc[0]) ||
                    !isFinite(cSrc[1]) ||
                    !isFinite(dSrc[0]) ||
                    !isFinite(dSrc[1])) {
                    if (maxSubdivision > 0) {
                        needsSubdivision = true;
                    }
                    else {
                        // It might be the case that only 1 of the points is infinite. In this case
                        // we can draw a single triangle with the other three points
                        isNotFinite =
                            (!isFinite(aSrc[0]) || !isFinite(aSrc[1]) ? 8 : 0) +
                                (!isFinite(bSrc[0]) || !isFinite(bSrc[1]) ? 4 : 0) +
                                (!isFinite(cSrc[0]) || !isFinite(cSrc[1]) ? 2 : 0) +
                                (!isFinite(dSrc[0]) || !isFinite(dSrc[1]) ? 1 : 0);
                        if (isNotFinite != 1 &&
                            isNotFinite != 2 &&
                            isNotFinite != 4 &&
                            isNotFinite != 8) {
                            return;
                        }
                    }
                }
            }
            if (maxSubdivision > 0) {
                if (!needsSubdivision) {
                    const center = [(a[0] + c[0]) / 2, (a[1] + c[1]) / 2];
                    const centerSrc = this.transformInv_(center);
                    let dx;
                    if (wrapsX) {
                        const centerSrcEstimX = (math_js_22.modulo(aSrc[0], sourceWorldWidth) +
                            math_js_22.modulo(cSrc[0], sourceWorldWidth)) /
                            2;
                        dx = centerSrcEstimX - math_js_22.modulo(centerSrc[0], sourceWorldWidth);
                    }
                    else {
                        dx = (aSrc[0] + cSrc[0]) / 2 - centerSrc[0];
                    }
                    const dy = (aSrc[1] + cSrc[1]) / 2 - centerSrc[1];
                    const centerSrcErrorSquared = dx * dx + dy * dy;
                    needsSubdivision = centerSrcErrorSquared > this.errorThresholdSquared_;
                }
                if (needsSubdivision) {
                    if (Math.abs(a[0] - c[0]) <= Math.abs(a[1] - c[1])) {
                        // split horizontally (top & bottom)
                        const bc = [(b[0] + c[0]) / 2, (b[1] + c[1]) / 2];
                        const bcSrc = this.transformInv_(bc);
                        const da = [(d[0] + a[0]) / 2, (d[1] + a[1]) / 2];
                        const daSrc = this.transformInv_(da);
                        this.addQuad_(a, b, bc, da, aSrc, bSrc, bcSrc, daSrc, maxSubdivision - 1);
                        this.addQuad_(da, bc, c, d, daSrc, bcSrc, cSrc, dSrc, maxSubdivision - 1);
                    }
                    else {
                        // split vertically (left & right)
                        const ab = [(a[0] + b[0]) / 2, (a[1] + b[1]) / 2];
                        const abSrc = this.transformInv_(ab);
                        const cd = [(c[0] + d[0]) / 2, (c[1] + d[1]) / 2];
                        const cdSrc = this.transformInv_(cd);
                        this.addQuad_(a, ab, cd, d, aSrc, abSrc, cdSrc, dSrc, maxSubdivision - 1);
                        this.addQuad_(ab, b, c, cd, abSrc, bSrc, cSrc, cdSrc, maxSubdivision - 1);
                    }
                    return;
                }
            }
            if (wrapsX) {
                if (!this.canWrapXInSource_) {
                    return;
                }
                this.wrapsXInSource_ = true;
            }
            // Exactly zero or one of *Src is not finite
            // The triangles must have the diagonal line as the first side
            // This is to allow easy code in reproj.s to make it straight for broken
            // browsers that can't handle diagonal clipping
            if ((isNotFinite & 0xb) == 0) {
                this.addTriangle_(a, c, d, aSrc, cSrc, dSrc);
            }
            if ((isNotFinite & 0xe) == 0) {
                this.addTriangle_(a, c, b, aSrc, cSrc, bSrc);
            }
            if (isNotFinite) {
                // Try the other two triangles
                if ((isNotFinite & 0xd) == 0) {
                    this.addTriangle_(b, d, a, bSrc, dSrc, aSrc);
                }
                if ((isNotFinite & 0x7) == 0) {
                    this.addTriangle_(b, d, c, bSrc, dSrc, cSrc);
                }
            }
        }
        /**
         * Calculates extent of the 'source' coordinates from all the triangles.
         *
         * @return {import("../extent.js").Extent} Calculated extent.
         */
        calculateSourceExtent() {
            const extent = extent_js_46.createEmpty();
            this.triangles_.forEach(function (triangle, i, arr) {
                const src = triangle.source;
                extent_js_46.extendCoordinate(extent, src[0]);
                extent_js_46.extendCoordinate(extent, src[1]);
                extent_js_46.extendCoordinate(extent, src[2]);
            });
            return extent;
        }
        /**
         * @return {Array<Triangle>} Array of the calculated triangles.
         */
        getTriangles() {
            return this.triangles_;
        }
    }
    exports.default = Triangulation;
});
/**
 * @module ol/source/common
 */
define("node_modules/ol/src/source/common", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IMAGE_SMOOTHING_DISABLED = exports.DEFAULT_WMS_VERSION = void 0;
    /**
     * Default WMS version.
     * @type {string}
     */
    exports.DEFAULT_WMS_VERSION = '1.3.0';
    /**
     * Context options to disable image smoothing.
     * @type {Object}
     */
    exports.IMAGE_SMOOTHING_DISABLED = {
        imageSmoothingEnabled: false,
        msImageSmoothingEnabled: false,
    };
});
define("node_modules/ol/src/reproj", ["require", "exports", "node_modules/ol/src/source/common", "node_modules/ol/src/obj", "node_modules/ol/src/extent", "node_modules/ol/src/dom", "node_modules/ol/src/proj", "node_modules/ol/src/math"], function (require, exports, common_js_4, obj_js_24, extent_js_47, dom_js_16, proj_js_25, math_js_23) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.render = exports.calculateSourceExtentResolution = exports.calculateSourceResolution = void 0;
    let brokenDiagonalRendering_;
    /**
     * This draws a small triangle into a canvas by setting the triangle as the clip region
     * and then drawing a (too large) rectangle
     *
     * @param {CanvasRenderingContext2D} ctx The context in which to draw the triangle
     * @param {number} u1 The x-coordinate of the second point. The first point is 0,0.
     * @param {number} v1 The y-coordinate of the second point.
     * @param {number} u2 The x-coordinate of the third point.
     * @param {number} v2 The y-coordinate of the third point.
     */
    function drawTestTriangle(ctx, u1, v1, u2, v2) {
        ctx.beginPath();
        ctx.moveTo(0, 0);
        ctx.lineTo(u1, v1);
        ctx.lineTo(u2, v2);
        ctx.closePath();
        ctx.save();
        ctx.clip();
        ctx.fillRect(0, 0, Math.max(u1, u2) + 1, Math.max(v1, v2));
        ctx.restore();
    }
    /**
     * Given the data from getImageData, see if the right values appear at the provided offset.
     * Returns true if either the color or transparency is off
     *
     * @param {Uint8ClampedArray} data The data returned from getImageData
     * @param {number} offset The pixel offset from the start of data.
     * @return {boolean} true if the diagonal rendering is broken
     */
    function verifyBrokenDiagonalRendering(data, offset) {
        // the values ought to be close to the rgba(210, 0, 0, 0.75)
        return (Math.abs(data[offset * 4] - 210) > 2 ||
            Math.abs(data[offset * 4 + 3] - 0.75 * 255) > 2);
    }
    /**
     * Determines if the current browser configuration can render triangular clip regions correctly.
     * This value is cached so the function is only expensive the first time called.
     * Firefox on Windows (as of now) does not if HWA is enabled. See https://bugzilla.mozilla.org/show_bug.cgi?id=1606976
     * IE also doesn't. Chrome works, and everything seems to work on OSX and Android. This function caches the
     * result. I suppose that it is conceivably possible that a browser might flip modes while the app is
     * running, but lets hope not.
     *
     * @return {boolean} true if the Diagonal Rendering is broken.
     */
    function isBrokenDiagonalRendering() {
        if (brokenDiagonalRendering_ === undefined) {
            const ctx = document.createElement('canvas').getContext('2d');
            ctx.globalCompositeOperation = 'lighter';
            ctx.fillStyle = 'rgba(210, 0, 0, 0.75)';
            drawTestTriangle(ctx, 4, 5, 4, 0);
            drawTestTriangle(ctx, 4, 5, 0, 5);
            const data = ctx.getImageData(0, 0, 3, 3).data;
            brokenDiagonalRendering_ =
                verifyBrokenDiagonalRendering(data, 0) ||
                    verifyBrokenDiagonalRendering(data, 4) ||
                    verifyBrokenDiagonalRendering(data, 8);
        }
        return brokenDiagonalRendering_;
    }
    /**
     * Calculates ideal resolution to use from the source in order to achieve
     * pixel mapping as close as possible to 1:1 during reprojection.
     * The resolution is calculated regardless of what resolutions
     * are actually available in the dataset (TileGrid, Image, ...).
     *
     * @param {import("./proj/Projection.js").default} sourceProj Source projection.
     * @param {import("./proj/Projection.js").default} targetProj Target projection.
     * @param {import("./coordinate.js").Coordinate} targetCenter Target center.
     * @param {number} targetResolution Target resolution.
     * @return {number} The best resolution to use. Can be +-Infinity, NaN or 0.
     */
    function calculateSourceResolution(sourceProj, targetProj, targetCenter, targetResolution) {
        const sourceCenter = proj_js_25.transform(targetCenter, targetProj, sourceProj);
        // calculate the ideal resolution of the source data
        let sourceResolution = proj_js_25.getPointResolution(targetProj, targetResolution, targetCenter);
        const targetMetersPerUnit = targetProj.getMetersPerUnit();
        if (targetMetersPerUnit !== undefined) {
            sourceResolution *= targetMetersPerUnit;
        }
        const sourceMetersPerUnit = sourceProj.getMetersPerUnit();
        if (sourceMetersPerUnit !== undefined) {
            sourceResolution /= sourceMetersPerUnit;
        }
        // Based on the projection properties, the point resolution at the specified
        // coordinates may be slightly different. We need to reverse-compensate this
        // in order to achieve optimal results.
        const sourceExtent = sourceProj.getExtent();
        if (!sourceExtent || extent_js_47.containsCoordinate(sourceExtent, sourceCenter)) {
            const compensationFactor = proj_js_25.getPointResolution(sourceProj, sourceResolution, sourceCenter) /
                sourceResolution;
            if (isFinite(compensationFactor) && compensationFactor > 0) {
                sourceResolution /= compensationFactor;
            }
        }
        return sourceResolution;
    }
    exports.calculateSourceResolution = calculateSourceResolution;
    /**
     * Calculates ideal resolution to use from the source in order to achieve
     * pixel mapping as close as possible to 1:1 during reprojection.
     * The resolution is calculated regardless of what resolutions
     * are actually available in the dataset (TileGrid, Image, ...).
     *
     * @param {import("./proj/Projection.js").default} sourceProj Source projection.
     * @param {import("./proj/Projection.js").default} targetProj Target projection.
     * @param {import("./extent.js").Extent} targetExtent Target extent
     * @param {number} targetResolution Target resolution.
     * @return {number} The best resolution to use. Can be +-Infinity, NaN or 0.
     */
    function calculateSourceExtentResolution(sourceProj, targetProj, targetExtent, targetResolution) {
        const targetCenter = extent_js_47.getCenter(targetExtent);
        let sourceResolution = calculateSourceResolution(sourceProj, targetProj, targetCenter, targetResolution);
        if (!isFinite(sourceResolution) || sourceResolution <= 0) {
            extent_js_47.forEachCorner(targetExtent, function (corner) {
                sourceResolution = calculateSourceResolution(sourceProj, targetProj, corner, targetResolution);
                return isFinite(sourceResolution) && sourceResolution > 0;
            });
        }
        return sourceResolution;
    }
    exports.calculateSourceExtentResolution = calculateSourceExtentResolution;
    /**
     * Renders the source data into new canvas based on the triangulation.
     *
     * @param {number} width Width of the canvas.
     * @param {number} height Height of the canvas.
     * @param {number} pixelRatio Pixel ratio.
     * @param {number} sourceResolution Source resolution.
     * @param {import("./extent.js").Extent} sourceExtent Extent of the data source.
     * @param {number} targetResolution Target resolution.
     * @param {import("./extent.js").Extent} targetExtent Target extent.
     * @param {import("./reproj/Triangulation.js").default} triangulation
     * Calculated triangulation.
     * @param {Array<{extent: import("./extent.js").Extent,
     *                 image: (HTMLCanvasElement|HTMLImageElement|HTMLVideoElement)}>} sources
     * Array of sources.
     * @param {number} gutter Gutter of the sources.
     * @param {boolean=} opt_renderEdges Render reprojection edges.
     * @param {object=} opt_contextOptions Properties to set on the canvas context.
     * @return {HTMLCanvasElement} Canvas with reprojected data.
     */
    function render(width, height, pixelRatio, sourceResolution, sourceExtent, targetResolution, targetExtent, triangulation, sources, gutter, opt_renderEdges, opt_contextOptions) {
        const context = dom_js_16.createCanvasContext2D(Math.round(pixelRatio * width), Math.round(pixelRatio * height));
        obj_js_24.assign(context, opt_contextOptions);
        if (sources.length === 0) {
            return context.canvas;
        }
        context.scale(pixelRatio, pixelRatio);
        function pixelRound(value) {
            return Math.round(value * pixelRatio) / pixelRatio;
        }
        context.globalCompositeOperation = 'lighter';
        const sourceDataExtent = extent_js_47.createEmpty();
        sources.forEach(function (src, i, arr) {
            extent_js_47.extend(sourceDataExtent, src.extent);
        });
        const canvasWidthInUnits = extent_js_47.getWidth(sourceDataExtent);
        const canvasHeightInUnits = extent_js_47.getHeight(sourceDataExtent);
        const stitchContext = dom_js_16.createCanvasContext2D(Math.round((pixelRatio * canvasWidthInUnits) / sourceResolution), Math.round((pixelRatio * canvasHeightInUnits) / sourceResolution));
        obj_js_24.assign(stitchContext, opt_contextOptions);
        const stitchScale = pixelRatio / sourceResolution;
        sources.forEach(function (src, i, arr) {
            const xPos = src.extent[0] - sourceDataExtent[0];
            const yPos = -(src.extent[3] - sourceDataExtent[3]);
            const srcWidth = extent_js_47.getWidth(src.extent);
            const srcHeight = extent_js_47.getHeight(src.extent);
            // This test should never fail -- but it does. Need to find a fix the upstream condition
            if (src.image.width > 0 && src.image.height > 0) {
                stitchContext.drawImage(src.image, gutter, gutter, src.image.width - 2 * gutter, src.image.height - 2 * gutter, xPos * stitchScale, yPos * stitchScale, srcWidth * stitchScale, srcHeight * stitchScale);
            }
        });
        const targetTopLeft = extent_js_47.getTopLeft(targetExtent);
        triangulation.getTriangles().forEach(function (triangle, i, arr) {
            /* Calculate affine transform (src -> dst)
             * Resulting matrix can be used to transform coordinate
             * from `sourceProjection` to destination pixels.
             *
             * To optimize number of context calls and increase numerical stability,
             * we also do the following operations:
             * trans(-topLeftExtentCorner), scale(1 / targetResolution), scale(1, -1)
             * here before solving the linear system so [ui, vi] are pixel coordinates.
             *
             * Src points: xi, yi
             * Dst points: ui, vi
             * Affine coefficients: aij
             *
             * | x0 y0 1  0  0 0 |   |a00|   |u0|
             * | x1 y1 1  0  0 0 |   |a01|   |u1|
             * | x2 y2 1  0  0 0 | x |a02| = |u2|
             * |  0  0 0 x0 y0 1 |   |a10|   |v0|
             * |  0  0 0 x1 y1 1 |   |a11|   |v1|
             * |  0  0 0 x2 y2 1 |   |a12|   |v2|
             */
            const source = triangle.source;
            const target = triangle.target;
            let x0 = source[0][0], y0 = source[0][1];
            let x1 = source[1][0], y1 = source[1][1];
            let x2 = source[2][0], y2 = source[2][1];
            // Make sure that everything is on pixel boundaries
            const u0 = pixelRound((target[0][0] - targetTopLeft[0]) / targetResolution);
            const v0 = pixelRound(-(target[0][1] - targetTopLeft[1]) / targetResolution);
            const u1 = pixelRound((target[1][0] - targetTopLeft[0]) / targetResolution);
            const v1 = pixelRound(-(target[1][1] - targetTopLeft[1]) / targetResolution);
            const u2 = pixelRound((target[2][0] - targetTopLeft[0]) / targetResolution);
            const v2 = pixelRound(-(target[2][1] - targetTopLeft[1]) / targetResolution);
            // Shift all the source points to improve numerical stability
            // of all the subsequent calculations. The [x0, y0] is used here.
            // This is also used to simplify the linear system.
            const sourceNumericalShiftX = x0;
            const sourceNumericalShiftY = y0;
            x0 = 0;
            y0 = 0;
            x1 -= sourceNumericalShiftX;
            y1 -= sourceNumericalShiftY;
            x2 -= sourceNumericalShiftX;
            y2 -= sourceNumericalShiftY;
            const augmentedMatrix = [
                [x1, y1, 0, 0, u1 - u0],
                [x2, y2, 0, 0, u2 - u0],
                [0, 0, x1, y1, v1 - v0],
                [0, 0, x2, y2, v2 - v0],
            ];
            const affineCoefs = math_js_23.solveLinearSystem(augmentedMatrix);
            if (!affineCoefs) {
                return;
            }
            context.save();
            context.beginPath();
            if (isBrokenDiagonalRendering() ||
                opt_contextOptions === common_js_4.IMAGE_SMOOTHING_DISABLED) {
                // Make sure that all lines are horizontal or vertical
                context.moveTo(u1, v1);
                // This is the diagonal line. Do it in 4 steps
                const steps = 4;
                const ud = u0 - u1;
                const vd = v0 - v1;
                for (let step = 0; step < steps; step++) {
                    // Go horizontally
                    context.lineTo(u1 + pixelRound(((step + 1) * ud) / steps), v1 + pixelRound((step * vd) / (steps - 1)));
                    // Go vertically
                    if (step != steps - 1) {
                        context.lineTo(u1 + pixelRound(((step + 1) * ud) / steps), v1 + pixelRound(((step + 1) * vd) / (steps - 1)));
                    }
                }
                // We are almost at u0r, v0r
                context.lineTo(u2, v2);
            }
            else {
                context.moveTo(u1, v1);
                context.lineTo(u0, v0);
                context.lineTo(u2, v2);
            }
            context.clip();
            context.transform(affineCoefs[0], affineCoefs[2], affineCoefs[1], affineCoefs[3], u0, v0);
            context.translate(sourceDataExtent[0] - sourceNumericalShiftX, sourceDataExtent[3] - sourceNumericalShiftY);
            context.scale(sourceResolution / pixelRatio, -sourceResolution / pixelRatio);
            context.drawImage(stitchContext.canvas, 0, 0);
            context.restore();
        });
        if (opt_renderEdges) {
            context.save();
            context.globalCompositeOperation = 'source-over';
            context.strokeStyle = 'black';
            context.lineWidth = 1;
            triangulation.getTriangles().forEach(function (triangle, i, arr) {
                const target = triangle.target;
                const u0 = (target[0][0] - targetTopLeft[0]) / targetResolution;
                const v0 = -(target[0][1] - targetTopLeft[1]) / targetResolution;
                const u1 = (target[1][0] - targetTopLeft[0]) / targetResolution;
                const v1 = -(target[1][1] - targetTopLeft[1]) / targetResolution;
                const u2 = (target[2][0] - targetTopLeft[0]) / targetResolution;
                const v2 = -(target[2][1] - targetTopLeft[1]) / targetResolution;
                context.beginPath();
                context.moveTo(u1, v1);
                context.lineTo(u0, v0);
                context.lineTo(u2, v2);
                context.closePath();
                context.stroke();
            });
            context.restore();
        }
        return context.canvas;
    }
    exports.render = render;
});
define("node_modules/ol/src/reproj/Tile", ["require", "exports", "node_modules/ol/src/reproj/common", "node_modules/ol/src/events/EventType", "node_modules/ol/src/Tile", "node_modules/ol/src/TileState", "node_modules/ol/src/reproj/Triangulation", "node_modules/ol/src/reproj", "node_modules/ol/src/math", "node_modules/ol/src/extent", "node_modules/ol/src/events"], function (require, exports, common_js_5, EventType_js_40, Tile_js_5, TileState_js_8, Triangulation_js_1, reproj_js_1, math_js_24, extent_js_48, events_js_19) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @typedef {function(number, number, number, number) : import("../Tile.js").default} FunctionType
     */
    /**
     * @classdesc
     * Class encapsulating single reprojected tile.
     * See {@link module:ol/source/TileImage~TileImage}.
     *
     */
    class ReprojTile extends Tile_js_5.default {
        /**
         * @param {import("../proj/Projection.js").default} sourceProj Source projection.
         * @param {import("../tilegrid/TileGrid.js").default} sourceTileGrid Source tile grid.
         * @param {import("../proj/Projection.js").default} targetProj Target projection.
         * @param {import("../tilegrid/TileGrid.js").default} targetTileGrid Target tile grid.
         * @param {import("../tilecoord.js").TileCoord} tileCoord Coordinate of the tile.
         * @param {import("../tilecoord.js").TileCoord} wrappedTileCoord Coordinate of the tile wrapped in X.
         * @param {number} pixelRatio Pixel ratio.
         * @param {number} gutter Gutter of the source tiles.
         * @param {FunctionType} getTileFunction
         *     Function returning source tiles (z, x, y, pixelRatio).
         * @param {number=} opt_errorThreshold Acceptable reprojection error (in px).
         * @param {boolean=} opt_renderEdges Render reprojection edges.
         * @param {object=} opt_contextOptions Properties to set on the canvas context.
         */
        constructor(sourceProj, sourceTileGrid, targetProj, targetTileGrid, tileCoord, wrappedTileCoord, pixelRatio, gutter, getTileFunction, opt_errorThreshold, opt_renderEdges, opt_contextOptions) {
            super(tileCoord, TileState_js_8.default.IDLE);
            /**
             * @private
             * @type {boolean}
             */
            this.renderEdges_ = opt_renderEdges !== undefined ? opt_renderEdges : false;
            /**
             * @private
             * @type {object}
             */
            this.contextOptions_ = opt_contextOptions;
            /**
             * @private
             * @type {number}
             */
            this.pixelRatio_ = pixelRatio;
            /**
             * @private
             * @type {number}
             */
            this.gutter_ = gutter;
            /**
             * @private
             * @type {HTMLCanvasElement}
             */
            this.canvas_ = null;
            /**
             * @private
             * @type {import("../tilegrid/TileGrid.js").default}
             */
            this.sourceTileGrid_ = sourceTileGrid;
            /**
             * @private
             * @type {import("../tilegrid/TileGrid.js").default}
             */
            this.targetTileGrid_ = targetTileGrid;
            /**
             * @private
             * @type {import("../tilecoord.js").TileCoord}
             */
            this.wrappedTileCoord_ = wrappedTileCoord ? wrappedTileCoord : tileCoord;
            /**
             * @private
             * @type {!Array<import("../Tile.js").default>}
             */
            this.sourceTiles_ = [];
            /**
             * @private
             * @type {?Array<import("../events.js").EventsKey>}
             */
            this.sourcesListenerKeys_ = null;
            /**
             * @private
             * @type {number}
             */
            this.sourceZ_ = 0;
            const targetExtent = targetTileGrid.getTileCoordExtent(this.wrappedTileCoord_);
            const maxTargetExtent = this.targetTileGrid_.getExtent();
            let maxSourceExtent = this.sourceTileGrid_.getExtent();
            const limitedTargetExtent = maxTargetExtent
                ? extent_js_48.getIntersection(targetExtent, maxTargetExtent)
                : targetExtent;
            if (extent_js_48.getArea(limitedTargetExtent) === 0) {
                // Tile is completely outside range -> EMPTY
                // TODO: is it actually correct that the source even creates the tile ?
                this.state = TileState_js_8.default.EMPTY;
                return;
            }
            const sourceProjExtent = sourceProj.getExtent();
            if (sourceProjExtent) {
                if (!maxSourceExtent) {
                    maxSourceExtent = sourceProjExtent;
                }
                else {
                    maxSourceExtent = extent_js_48.getIntersection(maxSourceExtent, sourceProjExtent);
                }
            }
            const targetResolution = targetTileGrid.getResolution(this.wrappedTileCoord_[0]);
            const sourceResolution = reproj_js_1.calculateSourceExtentResolution(sourceProj, targetProj, limitedTargetExtent, targetResolution);
            if (!isFinite(sourceResolution) || sourceResolution <= 0) {
                // invalid sourceResolution -> EMPTY
                // probably edges of the projections when no extent is defined
                this.state = TileState_js_8.default.EMPTY;
                return;
            }
            const errorThresholdInPixels = opt_errorThreshold !== undefined ? opt_errorThreshold : common_js_5.ERROR_THRESHOLD;
            /**
             * @private
             * @type {!import("./Triangulation.js").default}
             */
            this.triangulation_ = new Triangulation_js_1.default(sourceProj, targetProj, limitedTargetExtent, maxSourceExtent, sourceResolution * errorThresholdInPixels, targetResolution);
            if (this.triangulation_.getTriangles().length === 0) {
                // no valid triangles -> EMPTY
                this.state = TileState_js_8.default.EMPTY;
                return;
            }
            this.sourceZ_ = sourceTileGrid.getZForResolution(sourceResolution);
            let sourceExtent = this.triangulation_.calculateSourceExtent();
            if (maxSourceExtent) {
                if (sourceProj.canWrapX()) {
                    sourceExtent[1] = math_js_24.clamp(sourceExtent[1], maxSourceExtent[1], maxSourceExtent[3]);
                    sourceExtent[3] = math_js_24.clamp(sourceExtent[3], maxSourceExtent[1], maxSourceExtent[3]);
                }
                else {
                    sourceExtent = extent_js_48.getIntersection(sourceExtent, maxSourceExtent);
                }
            }
            if (!extent_js_48.getArea(sourceExtent)) {
                this.state = TileState_js_8.default.EMPTY;
            }
            else {
                const sourceRange = sourceTileGrid.getTileRangeForExtentAndZ(sourceExtent, this.sourceZ_);
                for (let srcX = sourceRange.minX; srcX <= sourceRange.maxX; srcX++) {
                    for (let srcY = sourceRange.minY; srcY <= sourceRange.maxY; srcY++) {
                        const tile = getTileFunction(this.sourceZ_, srcX, srcY, pixelRatio);
                        if (tile) {
                            this.sourceTiles_.push(tile);
                        }
                    }
                }
                if (this.sourceTiles_.length === 0) {
                    this.state = TileState_js_8.default.EMPTY;
                }
            }
        }
        /**
         * Get the HTML Canvas element for this tile.
         * @return {HTMLCanvasElement} Canvas.
         */
        getImage() {
            return this.canvas_;
        }
        /**
         * @private
         */
        reproject_() {
            const sources = [];
            this.sourceTiles_.forEach(function (tile, i, arr) {
                if (tile && tile.getState() == TileState_js_8.default.LOADED) {
                    sources.push({
                        extent: this.sourceTileGrid_.getTileCoordExtent(tile.tileCoord),
                        image: tile.getImage(),
                    });
                }
            }.bind(this));
            this.sourceTiles_.length = 0;
            if (sources.length === 0) {
                this.state = TileState_js_8.default.ERROR;
            }
            else {
                const z = this.wrappedTileCoord_[0];
                const size = this.targetTileGrid_.getTileSize(z);
                const width = typeof size === 'number' ? size : size[0];
                const height = typeof size === 'number' ? size : size[1];
                const targetResolution = this.targetTileGrid_.getResolution(z);
                const sourceResolution = this.sourceTileGrid_.getResolution(this.sourceZ_);
                const targetExtent = this.targetTileGrid_.getTileCoordExtent(this.wrappedTileCoord_);
                this.canvas_ = reproj_js_1.render(width, height, this.pixelRatio_, sourceResolution, this.sourceTileGrid_.getExtent(), targetResolution, targetExtent, this.triangulation_, sources, this.gutter_, this.renderEdges_, this.contextOptions_);
                this.state = TileState_js_8.default.LOADED;
            }
            this.changed();
        }
        /**
         * Load not yet loaded URI.
         */
        load() {
            if (this.state == TileState_js_8.default.IDLE) {
                this.state = TileState_js_8.default.LOADING;
                this.changed();
                let leftToLoad = 0;
                this.sourcesListenerKeys_ = [];
                this.sourceTiles_.forEach(function (tile, i, arr) {
                    const state = tile.getState();
                    if (state == TileState_js_8.default.IDLE || state == TileState_js_8.default.LOADING) {
                        leftToLoad++;
                        const sourceListenKey = events_js_19.listen(tile, EventType_js_40.default.CHANGE, function (e) {
                            const state = tile.getState();
                            if (state == TileState_js_8.default.LOADED ||
                                state == TileState_js_8.default.ERROR ||
                                state == TileState_js_8.default.EMPTY) {
                                events_js_19.unlistenByKey(sourceListenKey);
                                leftToLoad--;
                                if (leftToLoad === 0) {
                                    this.unlistenSources_();
                                    this.reproject_();
                                }
                            }
                        }, this);
                        this.sourcesListenerKeys_.push(sourceListenKey);
                    }
                }.bind(this));
                this.sourceTiles_.forEach(function (tile, i, arr) {
                    const state = tile.getState();
                    if (state == TileState_js_8.default.IDLE) {
                        tile.load();
                    }
                });
                if (leftToLoad === 0) {
                    setTimeout(this.reproject_.bind(this), 0);
                }
            }
        }
        /**
         * @private
         */
        unlistenSources_() {
            this.sourcesListenerKeys_.forEach(events_js_19.unlistenByKey);
            this.sourcesListenerKeys_ = null;
        }
    }
    exports.default = ReprojTile;
});
define("node_modules/ol/src/source/TileImage", ["require", "exports", "node_modules/ol/src/events/EventType", "node_modules/ol/src/ImageTile", "node_modules/ol/src/reproj/Tile", "node_modules/ol/src/TileCache", "node_modules/ol/src/TileState", "node_modules/ol/src/source/UrlTile", "node_modules/ol/src/reproj/common", "node_modules/ol/src/source/common", "node_modules/ol/src/proj", "node_modules/ol/src/tilecoord", "node_modules/ol/src/tilegrid", "node_modules/ol/src/util"], function (require, exports, EventType_js_41, ImageTile_js_1, Tile_js_6, TileCache_js_3, TileState_js_9, UrlTile_js_2, common_js_6, common_js_7, proj_js_26, tilecoord_js_7, tilegrid_js_3, util_js_29) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @typedef {Object} Options
     * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
     * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
     * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.
     * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that
     * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.
     * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.
     * @property {boolean} [imageSmoothing=true] Enable image smoothing.
     * @property {boolean} [opaque=false] Whether the layer is opaque.
     * @property {import("../proj.js").ProjectionLike} [projection] Projection. Default is the view projection.
     * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).
     * Higher values can increase reprojection performance, but decrease precision.
     * @property {import("./State.js").default} [state] Source state.
     * @property {typeof import("../ImageTile.js").default} [tileClass] Class used to instantiate image tiles.
     * Default is {@link module:ol/ImageTile~ImageTile}.
     * @property {import("../tilegrid/TileGrid.js").default} [tileGrid] Tile grid.
     * @property {import("../Tile.js").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is
     * ```js
     * function(imageTile, src) {
     *   imageTile.getImage().src = src;
     * };
     * ```
     * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service. For example, if the tile
     * service advertizes 256px by 256px tiles but actually sends 512px
     * by 512px images (for retina/hidpi devices) then `tilePixelRatio`
     * should be set to `2`.
     * @property {import("../Tile.js").UrlFunction} [tileUrlFunction] Optional function to get tile URL given a tile coordinate and the projection.
     * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.
     * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be
     * used instead of defining each one separately in the `urls` option.
     * @property {Array<string>} [urls] An array of URL templates.
     * @property {boolean} [wrapX] Whether to wrap the world horizontally. The default, is to
     * request out-of-bounds tiles from the server. When set to `false`, only one
     * world will be rendered. When set to `true`, tiles will be requested for one
     * world only, but they will be wrapped horizontally to render multiple worlds.
     * @property {number} [transition] Duration of the opacity transition for rendering.
     * To disable the opacity transition, pass `transition: 0`.
     * @property {string} [key] Optional tile key for proper cache fetching
     * @property {number} [zDirection=0] Indicate which resolution should be used
     * by a renderer if the view resolution does not match any resolution of the tile source.
     * If 0, the nearest resolution will be used. If 1, the nearest lower resolution
     * will be used. If -1, the nearest higher resolution will be used.
     */
    /**
     * @classdesc
     * Base class for sources providing images divided into a tile grid.
     *
     * @fires import("./Tile.js").TileSourceEvent
     * @api
     */
    class TileImage extends UrlTile_js_2.default {
        /**
         * @param {!Options} options Image tile options.
         */
        constructor(options) {
            super({
                attributions: options.attributions,
                cacheSize: options.cacheSize,
                opaque: options.opaque,
                projection: options.projection,
                state: options.state,
                tileGrid: options.tileGrid,
                tileLoadFunction: options.tileLoadFunction
                    ? options.tileLoadFunction
                    : defaultTileLoadFunction,
                tilePixelRatio: options.tilePixelRatio,
                tileUrlFunction: options.tileUrlFunction,
                url: options.url,
                urls: options.urls,
                wrapX: options.wrapX,
                transition: options.transition,
                key: options.key,
                attributionsCollapsible: options.attributionsCollapsible,
                zDirection: options.zDirection,
            });
            /**
             * @protected
             * @type {?string}
             */
            this.crossOrigin =
                options.crossOrigin !== undefined ? options.crossOrigin : null;
            /**
             * @protected
             * @type {typeof ImageTile}
             */
            this.tileClass =
                options.tileClass !== undefined ? options.tileClass : ImageTile_js_1.default;
            /**
             * @protected
             * @type {!Object<string, TileCache>}
             */
            this.tileCacheForProjection = {};
            /**
             * @protected
             * @type {!Object<string, import("../tilegrid/TileGrid.js").default>}
             */
            this.tileGridForProjection = {};
            /**
             * @private
             * @type {number|undefined}
             */
            this.reprojectionErrorThreshold_ = options.reprojectionErrorThreshold;
            /**
             * @private
             * @type {object|undefined}
             */
            this.contextOptions_ =
                options.imageSmoothing === false ? common_js_7.IMAGE_SMOOTHING_DISABLED : undefined;
            /**
             * @private
             * @type {boolean}
             */
            this.renderReprojectionEdges_ = false;
        }
        /**
         * @return {boolean} Can expire cache.
         */
        canExpireCache() {
            if (!common_js_6.ENABLE_RASTER_REPROJECTION) {
                return super.canExpireCache();
            }
            if (this.tileCache.canExpireCache()) {
                return true;
            }
            else {
                for (const key in this.tileCacheForProjection) {
                    if (this.tileCacheForProjection[key].canExpireCache()) {
                        return true;
                    }
                }
            }
            return false;
        }
        /**
         * @param {import("../proj/Projection.js").default} projection Projection.
         * @param {!Object<string, boolean>} usedTiles Used tiles.
         */
        expireCache(projection, usedTiles) {
            if (!common_js_6.ENABLE_RASTER_REPROJECTION) {
                super.expireCache(projection, usedTiles);
                return;
            }
            const usedTileCache = this.getTileCacheForProjection(projection);
            this.tileCache.expireCache(this.tileCache == usedTileCache ? usedTiles : {});
            for (const id in this.tileCacheForProjection) {
                const tileCache = this.tileCacheForProjection[id];
                tileCache.expireCache(tileCache == usedTileCache ? usedTiles : {});
            }
        }
        /**
         * @return {Object|undefined} Context options.
         */
        getContextOptions() {
            return this.contextOptions_;
        }
        /**
         * @param {import("../proj/Projection.js").default} projection Projection.
         * @return {number} Gutter.
         */
        getGutterForProjection(projection) {
            if (common_js_6.ENABLE_RASTER_REPROJECTION &&
                this.getProjection() &&
                projection &&
                !proj_js_26.equivalent(this.getProjection(), projection)) {
                return 0;
            }
            else {
                return this.getGutter();
            }
        }
        /**
         * @return {number} Gutter.
         */
        getGutter() {
            return 0;
        }
        /**
         * Return the key to be used for all tiles in the source.
         * @return {string} The key for all tiles.
         * @protected
         */
        getKey() {
            return (super.getKey() +
                (this.contextOptions_ ? '\n' + JSON.stringify(this.contextOptions_) : ''));
        }
        /**
         * @param {import("../proj/Projection.js").default} projection Projection.
         * @return {boolean} Opaque.
         */
        getOpaque(projection) {
            if (common_js_6.ENABLE_RASTER_REPROJECTION &&
                this.getProjection() &&
                projection &&
                !proj_js_26.equivalent(this.getProjection(), projection)) {
                return false;
            }
            else {
                return super.getOpaque(projection);
            }
        }
        /**
         * @param {import("../proj/Projection.js").default} projection Projection.
         * @return {!import("../tilegrid/TileGrid.js").default} Tile grid.
         */
        getTileGridForProjection(projection) {
            if (!common_js_6.ENABLE_RASTER_REPROJECTION) {
                return super.getTileGridForProjection(projection);
            }
            const thisProj = this.getProjection();
            if (this.tileGrid && (!thisProj || proj_js_26.equivalent(thisProj, projection))) {
                return this.tileGrid;
            }
            else {
                const projKey = util_js_29.getUid(projection);
                if (!(projKey in this.tileGridForProjection)) {
                    this.tileGridForProjection[projKey] = tilegrid_js_3.getForProjection(projection);
                }
                return this.tileGridForProjection[projKey];
            }
        }
        /**
         * @param {import("../proj/Projection.js").default} projection Projection.
         * @return {import("../TileCache.js").default} Tile cache.
         */
        getTileCacheForProjection(projection) {
            if (!common_js_6.ENABLE_RASTER_REPROJECTION) {
                return super.getTileCacheForProjection(projection);
            }
            const thisProj = this.getProjection();
            if (!thisProj || proj_js_26.equivalent(thisProj, projection)) {
                return this.tileCache;
            }
            else {
                const projKey = util_js_29.getUid(projection);
                if (!(projKey in this.tileCacheForProjection)) {
                    this.tileCacheForProjection[projKey] = new TileCache_js_3.default(this.tileCache.highWaterMark);
                }
                return this.tileCacheForProjection[projKey];
            }
        }
        /**
         * @param {number} z Tile coordinate z.
         * @param {number} x Tile coordinate x.
         * @param {number} y Tile coordinate y.
         * @param {number} pixelRatio Pixel ratio.
         * @param {import("../proj/Projection.js").default} projection Projection.
         * @param {string} key The key set on the tile.
         * @return {!import("../Tile.js").default} Tile.
         * @private
         */
        createTile_(z, x, y, pixelRatio, projection, key) {
            const tileCoord = [z, x, y];
            const urlTileCoord = this.getTileCoordForTileUrlFunction(tileCoord, projection);
            const tileUrl = urlTileCoord
                ? this.tileUrlFunction(urlTileCoord, pixelRatio, projection)
                : undefined;
            const tile = new this.tileClass(tileCoord, tileUrl !== undefined ? TileState_js_9.default.IDLE : TileState_js_9.default.EMPTY, tileUrl !== undefined ? tileUrl : '', this.crossOrigin, this.tileLoadFunction, this.tileOptions);
            tile.key = key;
            tile.addEventListener(EventType_js_41.default.CHANGE, this.handleTileChange.bind(this));
            return tile;
        }
        /**
         * @param {number} z Tile coordinate z.
         * @param {number} x Tile coordinate x.
         * @param {number} y Tile coordinate y.
         * @param {number} pixelRatio Pixel ratio.
         * @param {import("../proj/Projection.js").default} projection Projection.
         * @return {!import("../Tile.js").default} Tile.
         */
        getTile(z, x, y, pixelRatio, projection) {
            const sourceProjection = this.getProjection();
            if (!common_js_6.ENABLE_RASTER_REPROJECTION ||
                !sourceProjection ||
                !projection ||
                proj_js_26.equivalent(sourceProjection, projection)) {
                return this.getTileInternal(z, x, y, pixelRatio, sourceProjection || projection);
            }
            else {
                const cache = this.getTileCacheForProjection(projection);
                const tileCoord = [z, x, y];
                let tile;
                const tileCoordKey = tilecoord_js_7.getKey(tileCoord);
                if (cache.containsKey(tileCoordKey)) {
                    tile = cache.get(tileCoordKey);
                }
                const key = this.getKey();
                if (tile && tile.key == key) {
                    return tile;
                }
                else {
                    const sourceTileGrid = this.getTileGridForProjection(sourceProjection);
                    const targetTileGrid = this.getTileGridForProjection(projection);
                    const wrappedTileCoord = this.getTileCoordForTileUrlFunction(tileCoord, projection);
                    const newTile = new Tile_js_6.default(sourceProjection, sourceTileGrid, projection, targetTileGrid, tileCoord, wrappedTileCoord, this.getTilePixelRatio(pixelRatio), this.getGutter(), function (z, x, y, pixelRatio) {
                        return this.getTileInternal(z, x, y, pixelRatio, sourceProjection);
                    }.bind(this), this.reprojectionErrorThreshold_, this.renderReprojectionEdges_, this.contextOptions_);
                    newTile.key = key;
                    if (tile) {
                        newTile.interimTile = tile;
                        newTile.refreshInterimChain();
                        cache.replace(tileCoordKey, newTile);
                    }
                    else {
                        cache.set(tileCoordKey, newTile);
                    }
                    return newTile;
                }
            }
        }
        /**
         * @param {number} z Tile coordinate z.
         * @param {number} x Tile coordinate x.
         * @param {number} y Tile coordinate y.
         * @param {number} pixelRatio Pixel ratio.
         * @param {!import("../proj/Projection.js").default} projection Projection.
         * @return {!import("../Tile.js").default} Tile.
         * @protected
         */
        getTileInternal(z, x, y, pixelRatio, projection) {
            let tile = null;
            const tileCoordKey = tilecoord_js_7.getKeyZXY(z, x, y);
            const key = this.getKey();
            if (!this.tileCache.containsKey(tileCoordKey)) {
                tile = this.createTile_(z, x, y, pixelRatio, projection, key);
                this.tileCache.set(tileCoordKey, tile);
            }
            else {
                tile = this.tileCache.get(tileCoordKey);
                if (tile.key != key) {
                    // The source's params changed. If the tile has an interim tile and if we
                    // can use it then we use it. Otherwise we create a new tile.  In both
                    // cases we attempt to assign an interim tile to the new tile.
                    const interimTile = tile;
                    tile = this.createTile_(z, x, y, pixelRatio, projection, key);
                    //make the new tile the head of the list,
                    if (interimTile.getState() == TileState_js_9.default.IDLE) {
                        //the old tile hasn't begun loading yet, and is now outdated, so we can simply discard it
                        tile.interimTile = interimTile.interimTile;
                    }
                    else {
                        tile.interimTile = interimTile;
                    }
                    tile.refreshInterimChain();
                    this.tileCache.replace(tileCoordKey, tile);
                }
            }
            return tile;
        }
        /**
         * Sets whether to render reprojection edges or not (usually for debugging).
         * @param {boolean} render Render the edges.
         * @api
         */
        setRenderReprojectionEdges(render) {
            if (!common_js_6.ENABLE_RASTER_REPROJECTION ||
                this.renderReprojectionEdges_ == render) {
                return;
            }
            this.renderReprojectionEdges_ = render;
            for (const id in this.tileCacheForProjection) {
                this.tileCacheForProjection[id].clear();
            }
            this.changed();
        }
        /**
         * Sets the tile grid to use when reprojecting the tiles to the given
         * projection instead of the default tile grid for the projection.
         *
         * This can be useful when the default tile grid cannot be created
         * (e.g. projection has no extent defined) or
         * for optimization reasons (custom tile size, resolutions, ...).
         *
         * @param {import("../proj.js").ProjectionLike} projection Projection.
         * @param {import("../tilegrid/TileGrid.js").default} tilegrid Tile grid to use for the projection.
         * @api
         */
        setTileGridForProjection(projection, tilegrid) {
            if (common_js_6.ENABLE_RASTER_REPROJECTION) {
                const proj = proj_js_26.get(projection);
                if (proj) {
                    const projKey = util_js_29.getUid(proj);
                    if (!(projKey in this.tileGridForProjection)) {
                        this.tileGridForProjection[projKey] = tilegrid;
                    }
                }
            }
        }
    }
    /**
     * @param {ImageTile} imageTile Image tile.
     * @param {string} src Source.
     */
    function defaultTileLoadFunction(imageTile, src) {
        /** @type {HTMLImageElement|HTMLVideoElement} */ (imageTile.getImage()).src = src;
    }
    exports.default = TileImage;
});
define("node_modules/ol/src/source/Zoomify", ["require", "exports", "node_modules/ol/src/tilegrid/common", "node_modules/ol/src/ImageTile", "node_modules/ol/src/tilegrid/TileGrid", "node_modules/ol/src/source/TileImage", "node_modules/ol/src/TileState", "node_modules/ol/src/asserts", "node_modules/ol/src/dom", "node_modules/ol/src/tileurlfunction", "node_modules/ol/src/extent", "node_modules/ol/src/size"], function (require, exports, common_js_8, ImageTile_js_2, TileGrid_js_2, TileImage_js_1, TileState_js_10, asserts_js_21, dom_js_17, tileurlfunction_js_2, extent_js_49, size_js_8) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CustomTile = void 0;
    /**
     * @enum {string}
     */
    const TierSizeCalculation = {
        DEFAULT: 'default',
        TRUNCATED: 'truncated',
    };
    class CustomTile extends ImageTile_js_2.default {
        /**
         * @param {import("../size.js").Size} tileSize Full tile size.
         * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
         * @param {import("../TileState.js").default} state State.
         * @param {string} src Image source URI.
         * @param {?string} crossOrigin Cross origin.
         * @param {import("../Tile.js").LoadFunction} tileLoadFunction Tile load function.
         * @param {import("../Tile.js").Options=} opt_options Tile options.
         */
        constructor(tileSize, tileCoord, state, src, crossOrigin, tileLoadFunction, opt_options) {
            super(tileCoord, state, src, crossOrigin, tileLoadFunction, opt_options);
            /**
             * @private
             * @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement}
             */
            this.zoomifyImage_ = null;
            /**
             * @type {import("../size.js").Size}
             */
            this.tileSize_ = tileSize;
        }
        /**
         * Get the image element for this tile.
         * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.
         */
        getImage() {
            if (this.zoomifyImage_) {
                return this.zoomifyImage_;
            }
            const image = super.getImage();
            if (this.state == TileState_js_10.default.LOADED) {
                const tileSize = this.tileSize_;
                if (image.width == tileSize[0] && image.height == tileSize[1]) {
                    this.zoomifyImage_ = image;
                    return image;
                }
                else {
                    const context = dom_js_17.createCanvasContext2D(tileSize[0], tileSize[1]);
                    context.drawImage(image, 0, 0);
                    this.zoomifyImage_ = context.canvas;
                    return context.canvas;
                }
            }
            else {
                return image;
            }
        }
    }
    exports.CustomTile = CustomTile;
    /**
     * @typedef {Object} Options
     * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
     * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.
     * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that
     * you must provide a `crossOrigin` value  you want to access pixel data with the Canvas renderer.
     * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.
     * @property {boolean} [imageSmoothing=true] Enable image smoothing.
     * @property {import("../proj.js").ProjectionLike} [projection] Projection.
     * @property {number} [tilePixelRatio] The pixel ratio used by the tile service. For example, if the tile service advertizes 256px by 256px tiles but actually sends 512px by 512px images (for retina/hidpi devices) then `tilePixelRatio` should be set to `2`
     * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).
     * Higher values can increase reprojection performance, but decrease precision.
     * @property {string} url URL template or base URL of the Zoomify service.
     * A base URL is the fixed part
     * of the URL, excluding the tile group, z, x, and y folder structure, e.g.
     * `http://my.zoomify.info/IMAGE.TIF/`. A URL template must include
     * `{TileGroup}`, `{x}`, `{y}`, and `{z}` placeholders, e.g.
     * `http://my.zoomify.info/IMAGE.TIF/{TileGroup}/{z}-{x}-{y}.jpg`.
     * Internet Imaging Protocol (IIP) with JTL extension can be also used with
     * `{tileIndex}` and `{z}` placeholders, e.g.
     * `http://my.zoomify.info?FIF=IMAGE.TIF&JTL={z},{tileIndex}`.
     * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be
     * used instead of defining each one separately in the `urls` option.
     * @property {string} [tierSizeCalculation] Tier size calculation method: `default` or `truncated`.
     * @property {import("../size.js").Size} size
     * @property {import("../extent.js").Extent} [extent] Extent for the TileGrid that is created.
     * Default sets the TileGrid in the
     * fourth quadrant, meaning extent is `[0, -height, width, 0]`. To change the
     * extent to the first quadrant (the default for OpenLayers 2) set the extent
     * as `[0, 0, width, height]`.
     * @property {number} [transition] Duration of the opacity transition for rendering.
     * To disable the opacity transition, pass `transition: 0`.
     * @property {number} [tileSize=256] Tile size. Same tile size is used for all zoom levels.
     * @property {number} [zDirection] Indicate which resolution should be used
     * by a renderer if the views resolution does not match any resolution of the tile source.
     * If 0, the nearest resolution will be used. If 1, the nearest lower resolution
     * will be used. If -1, the nearest higher resolution will be used.
     */
    /**
     * @classdesc
     * Layer source for tile data in Zoomify format (both Zoomify and Internet
     * Imaging Protocol are supported).
     * @api
     */
    class Zoomify extends TileImage_js_1.default {
        /**
         * @param {Options} opt_options Options.
         */
        constructor(opt_options) {
            const options = opt_options;
            const size = options.size;
            const tierSizeCalculation = options.tierSizeCalculation !== undefined
                ? options.tierSizeCalculation
                : TierSizeCalculation.DEFAULT;
            const tilePixelRatio = options.tilePixelRatio || 1;
            const imageWidth = size[0];
            const imageHeight = size[1];
            const tierSizeInTiles = [];
            const tileSize = options.tileSize || common_js_8.DEFAULT_TILE_SIZE;
            let tileSizeForTierSizeCalculation = tileSize * tilePixelRatio;
            switch (tierSizeCalculation) {
                case TierSizeCalculation.DEFAULT:
                    while (imageWidth > tileSizeForTierSizeCalculation ||
                        imageHeight > tileSizeForTierSizeCalculation) {
                        tierSizeInTiles.push([
                            Math.ceil(imageWidth / tileSizeForTierSizeCalculation),
                            Math.ceil(imageHeight / tileSizeForTierSizeCalculation),
                        ]);
                        tileSizeForTierSizeCalculation += tileSizeForTierSizeCalculation;
                    }
                    break;
                case TierSizeCalculation.TRUNCATED:
                    let width = imageWidth;
                    let height = imageHeight;
                    while (width > tileSizeForTierSizeCalculation ||
                        height > tileSizeForTierSizeCalculation) {
                        tierSizeInTiles.push([
                            Math.ceil(width / tileSizeForTierSizeCalculation),
                            Math.ceil(height / tileSizeForTierSizeCalculation),
                        ]);
                        width >>= 1;
                        height >>= 1;
                    }
                    break;
                default:
                    asserts_js_21.assert(false, 53); // Unknown `tierSizeCalculation` configured
                    break;
            }
            tierSizeInTiles.push([1, 1]);
            tierSizeInTiles.reverse();
            const resolutions = [tilePixelRatio];
            const tileCountUpToTier = [0];
            for (let i = 1, ii = tierSizeInTiles.length; i < ii; i++) {
                resolutions.push(tilePixelRatio << i);
                tileCountUpToTier.push(tierSizeInTiles[i - 1][0] * tierSizeInTiles[i - 1][1] +
                    tileCountUpToTier[i - 1]);
            }
            resolutions.reverse();
            const tileGrid = new TileGrid_js_2.default({
                tileSize: tileSize,
                extent: options.extent || [0, -imageHeight, imageWidth, 0],
                resolutions: resolutions,
            });
            let url = options.url;
            if (url &&
                url.indexOf('{TileGroup}') == -1 &&
                url.indexOf('{tileIndex}') == -1) {
                url += '{TileGroup}/{z}-{x}-{y}.jpg';
            }
            const urls = tileurlfunction_js_2.expandUrl(url);
            let tileWidth = tileSize * tilePixelRatio;
            /**
             * @param {string} template Template.
             * @return {import("../Tile.js").UrlFunction} Tile URL function.
             */
            function createFromTemplate(template) {
                return (
                /**
                 * @param {import("../tilecoord.js").TileCoord} tileCoord Tile Coordinate.
                 * @param {number} pixelRatio Pixel ratio.
                 * @param {import("../proj/Projection.js").default} projection Projection.
                 * @return {string|undefined} Tile URL.
                 */
                function (tileCoord, pixelRatio, projection) {
                    if (!tileCoord) {
                        return undefined;
                    }
                    else {
                        const tileCoordZ = tileCoord[0];
                        const tileCoordX = tileCoord[1];
                        const tileCoordY = tileCoord[2];
                        const tileIndex = tileCoordX + tileCoordY * tierSizeInTiles[tileCoordZ][0];
                        const tileGroup = ((tileIndex + tileCountUpToTier[tileCoordZ]) / tileWidth) | 0;
                        const localContext = {
                            'z': tileCoordZ,
                            'x': tileCoordX,
                            'y': tileCoordY,
                            'tileIndex': tileIndex,
                            'TileGroup': 'TileGroup' + tileGroup,
                        };
                        return template.replace(/\{(\w+?)\}/g, function (m, p) {
                            return localContext[p];
                        });
                    }
                });
            }
            const tileUrlFunction = tileurlfunction_js_2.createFromTileUrlFunctions(urls.map(createFromTemplate));
            const ZoomifyTileClass = CustomTile.bind(null, size_js_8.toSize(tileSize * tilePixelRatio));
            super({
                attributions: options.attributions,
                cacheSize: options.cacheSize,
                crossOrigin: options.crossOrigin,
                imageSmoothing: options.imageSmoothing,
                projection: options.projection,
                tilePixelRatio: tilePixelRatio,
                reprojectionErrorThreshold: options.reprojectionErrorThreshold,
                tileClass: ZoomifyTileClass,
                tileGrid: tileGrid,
                tileUrlFunction: tileUrlFunction,
                transition: options.transition,
            });
            /**
             * @type {number}
             */
            this.zDirection = options.zDirection;
            // Server retina tile detection (non-standard):
            // Try loading the center tile for the highest resolution. If it is not
            // available, we are dealing with retina tiles, and need to adjust the
            // tile url calculation.
            const tileUrl = tileGrid.getTileCoordForCoordAndResolution(extent_js_49.getCenter(tileGrid.getExtent()), resolutions[resolutions.length - 1]);
            const testTileUrl = tileUrlFunction(tileUrl, 1, null);
            const image = new Image();
            image.addEventListener('error', function () {
                tileWidth = tileSize;
                this.changed();
            }.bind(this));
            image.src = testTileUrl;
        }
    }
    exports.default = Zoomify;
});
/**
 * @module ol/source/IIIF
 */
define("node_modules/ol/src/source/IIIF", ["require", "exports", "node_modules/ol/src/tilegrid/TileGrid", "node_modules/ol/src/source/TileImage", "node_modules/ol/src/source/Zoomify", "node_modules/ol/src/tilegrid/common", "node_modules/ol/src/format/IIIFInfo", "node_modules/ol/src/asserts", "node_modules/ol/src/extent", "node_modules/ol/src/size"], function (require, exports, TileGrid_js_3, TileImage_js_2, Zoomify_js_1, common_js_9, IIIFInfo_js_1, asserts_js_22, extent_js_50, size_js_9) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @typedef {Object} Options
     * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
     * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
     * @property {number} [cacheSize]
     * @property {null|string} [crossOrigin]
     * @property {import("../extent.js").Extent} [extent=[0, -height, width, 0]]
     * @property {string} [format='jpg'] Requested image format.
     * @property {boolean} [imageSmoothing=true] Enable image smoothing.
     * @property {import("../proj.js").ProjectionLike} [projection]
     * @property {string} [quality] Requested IIIF image quality. Default is 'native'
     * for version 1, 'default' for versions 2 and 3.
     * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).
     * Higher values can increase reprojection performance, but decrease precision.
     * @property {Array<number>} [resolutions] Supported resolutions as given in IIIF 'scaleFactors'
     * @property {import("../size.js").Size} size Size of the image [width, height].
     * @property {Array<import("../size.js").Size>} [sizes] Supported scaled image sizes.
     * Content of the IIIF info.json 'sizes' property, but as array of Size objects.
     * @property {import("./State.js").default} [state] Source state.
     * @property {Array<string>} [supports=[]] Supported IIIF region and size calculation
     * features.
     * @property {number} [tilePixelRatio]
     * @property {number|import("../size.js").Size} [tileSize] Tile size.
     * Same tile size is used for all zoom levels. If tile size is a number,
     * a square tile is assumed. If the IIIF image service supports arbitrary
     * tiling (sizeByH, sizeByW, sizeByWh or sizeByPct as well as regionByPx or regionByPct
     * are supported), the default tilesize is 256.
     * @property {number} [transition]
     * @property {string} [url] Base URL of the IIIF Image service.
     * This should be the same as the IIIF Image ID.
     * @property {import("../format/IIIFInfo.js").Versions} [version=Versions.VERSION2] Service's IIIF Image API version.
     * @property {number} [zDirection=0] Indicate which resolution should be used
     * by a renderer if the view resolution does not match any resolution of the tile source.
     * If 0, the nearest resolution will be used. If 1, the nearest lower resolution
     * will be used. If -1, the nearest higher resolution will be used.
     */
    function formatPercentage(percentage) {
        return percentage.toLocaleString('en', { maximumFractionDigits: 10 });
    }
    /**
     * @classdesc
     * Layer source for IIIF Image API services.
     * @api
     */
    class IIIF extends TileImage_js_2.default {
        /**
         * @param {Options=} opt_options Tile source options. Use {@link import("../format/IIIFInfo.js").IIIFInfo}
         * to parse Image API service information responses into constructor options.
         * @api
         */
        constructor(opt_options) {
            /**
             * @type {Partial<Options>}
             */
            const options = opt_options || {};
            let baseUrl = options.url || '';
            baseUrl =
                baseUrl +
                    (baseUrl.lastIndexOf('/') === baseUrl.length - 1 || baseUrl === ''
                        ? ''
                        : '/');
            const version = options.version || IIIFInfo_js_1.Versions.VERSION2;
            const sizes = options.sizes || [];
            const size = options.size;
            asserts_js_22.assert(size != undefined &&
                Array.isArray(size) &&
                size.length == 2 &&
                !isNaN(size[0]) &&
                size[0] > 0 &&
                !isNaN(size[1]) &&
                size[1] > 0, 60);
            const width = size[0];
            const height = size[1];
            const tileSize = options.tileSize;
            const tilePixelRatio = options.tilePixelRatio || 1;
            const format = options.format || 'jpg';
            const quality = options.quality ||
                (options.version == IIIFInfo_js_1.Versions.VERSION1 ? 'native' : 'default');
            let resolutions = options.resolutions || [];
            const supports = options.supports || [];
            const extent = options.extent || [0, -height, width, 0];
            const supportsListedSizes = sizes != undefined && Array.isArray(sizes) && sizes.length > 0;
            const supportsListedTiles = tileSize !== undefined &&
                ((typeof tileSize === 'number' &&
                    Number.isInteger(tileSize) &&
                    tileSize > 0) ||
                    (Array.isArray(tileSize) && tileSize.length > 0));
            const supportsArbitraryTiling = supports != undefined &&
                Array.isArray(supports) &&
                (supports.includes('regionByPx') || supports.includes('regionByPct')) &&
                (supports.includes('sizeByWh') ||
                    supports.includes('sizeByH') ||
                    supports.includes('sizeByW') ||
                    supports.includes('sizeByPct'));
            let tileWidth, tileHeight, maxZoom;
            resolutions.sort(function (a, b) {
                return b - a;
            });
            if (supportsListedTiles || supportsArbitraryTiling) {
                if (tileSize != undefined) {
                    if (typeof tileSize === 'number' &&
                        Number.isInteger(tileSize) &&
                        tileSize > 0) {
                        tileWidth = tileSize;
                        tileHeight = tileSize;
                    }
                    else if (Array.isArray(tileSize) && tileSize.length > 0) {
                        if (tileSize.length == 1 ||
                            (tileSize[1] == undefined && Number.isInteger(tileSize[0]))) {
                            tileWidth = tileSize[0];
                            tileHeight = tileSize[0];
                        }
                        if (tileSize.length == 2) {
                            if (Number.isInteger(tileSize[0]) &&
                                Number.isInteger(tileSize[1])) {
                                tileWidth = tileSize[0];
                                tileHeight = tileSize[1];
                            }
                            else if (tileSize[0] == undefined &&
                                Number.isInteger(tileSize[1])) {
                                tileWidth = tileSize[1];
                                tileHeight = tileSize[1];
                            }
                        }
                    }
                }
                if (tileWidth === undefined || tileHeight === undefined) {
                    tileWidth = common_js_9.DEFAULT_TILE_SIZE;
                    tileHeight = common_js_9.DEFAULT_TILE_SIZE;
                }
                if (resolutions.length == 0) {
                    maxZoom = Math.max(Math.ceil(Math.log(width / tileWidth) / Math.LN2), Math.ceil(Math.log(height / tileHeight) / Math.LN2));
                    for (let i = maxZoom; i >= 0; i--) {
                        resolutions.push(Math.pow(2, i));
                    }
                }
                else {
                    const maxScaleFactor = Math.max(...resolutions);
                    // TODO maxScaleFactor might not be a power to 2
                    maxZoom = Math.round(Math.log(maxScaleFactor) / Math.LN2);
                }
            }
            else {
                // No tile support.
                tileWidth = width;
                tileHeight = height;
                resolutions = [];
                if (supportsListedSizes) {
                    /*
                     * 'sizes' provided. Use full region in different resolutions. Every
                     * resolution has only one tile.
                     */
                    sizes.sort(function (a, b) {
                        return a[0] - b[0];
                    });
                    maxZoom = -1;
                    const ignoredSizesIndex = [];
                    for (let i = 0; i < sizes.length; i++) {
                        const resolution = width / sizes[i][0];
                        if (resolutions.length > 0 &&
                            resolutions[resolutions.length - 1] == resolution) {
                            ignoredSizesIndex.push(i);
                            continue;
                        }
                        resolutions.push(resolution);
                        maxZoom++;
                    }
                    if (ignoredSizesIndex.length > 0) {
                        for (let i = 0; i < ignoredSizesIndex.length; i++) {
                            sizes.splice(ignoredSizesIndex[i] - i, 1);
                        }
                    }
                }
                else {
                    // No useful image information at all. Try pseudo tile with full image.
                    resolutions.push(1);
                    sizes.push([width, height]);
                    maxZoom = 0;
                }
            }
            const tileGrid = new TileGrid_js_3.default({
                tileSize: [tileWidth, tileHeight],
                extent: extent,
                origin: extent_js_50.getTopLeft(extent),
                resolutions: resolutions,
            });
            const tileUrlFunction = function (tileCoord, pixelRatio, projection) {
                let regionParam, sizeParam;
                const zoom = tileCoord[0];
                if (zoom > maxZoom) {
                    return;
                }
                const tileX = tileCoord[1], tileY = tileCoord[2], scale = resolutions[zoom];
                if (tileX === undefined ||
                    tileY === undefined ||
                    scale === undefined ||
                    tileX < 0 ||
                    Math.ceil(width / scale / tileWidth) <= tileX ||
                    tileY < 0 ||
                    Math.ceil(height / scale / tileHeight) <= tileY) {
                    return;
                }
                if (supportsArbitraryTiling || supportsListedTiles) {
                    const regionX = tileX * tileWidth * scale, regionY = tileY * tileHeight * scale;
                    let regionW = tileWidth * scale, regionH = tileHeight * scale, sizeW = tileWidth, sizeH = tileHeight;
                    if (regionX + regionW > width) {
                        regionW = width - regionX;
                    }
                    if (regionY + regionH > height) {
                        regionH = height - regionY;
                    }
                    if (regionX + tileWidth * scale > width) {
                        sizeW = Math.floor((width - regionX + scale - 1) / scale);
                    }
                    if (regionY + tileHeight * scale > height) {
                        sizeH = Math.floor((height - regionY + scale - 1) / scale);
                    }
                    if (regionX == 0 &&
                        regionW == width &&
                        regionY == 0 &&
                        regionH == height) {
                        // canonical full image region parameter is 'full', not 'x,y,w,h'
                        regionParam = 'full';
                    }
                    else if (!supportsArbitraryTiling ||
                        supports.includes('regionByPx')) {
                        regionParam = regionX + ',' + regionY + ',' + regionW + ',' + regionH;
                    }
                    else if (supports.includes('regionByPct')) {
                        const pctX = formatPercentage((regionX / width) * 100), pctY = formatPercentage((regionY / height) * 100), pctW = formatPercentage((regionW / width) * 100), pctH = formatPercentage((regionH / height) * 100);
                        regionParam = 'pct:' + pctX + ',' + pctY + ',' + pctW + ',' + pctH;
                    }
                    if (version == IIIFInfo_js_1.Versions.VERSION3 &&
                        (!supportsArbitraryTiling || supports.includes('sizeByWh'))) {
                        sizeParam = sizeW + ',' + sizeH;
                    }
                    else if (!supportsArbitraryTiling || supports.includes('sizeByW')) {
                        sizeParam = sizeW + ',';
                    }
                    else if (supports.includes('sizeByH')) {
                        sizeParam = ',' + sizeH;
                    }
                    else if (supports.includes('sizeByWh')) {
                        sizeParam = sizeW + ',' + sizeH;
                    }
                    else if (supports.includes('sizeByPct')) {
                        sizeParam = 'pct:' + formatPercentage(100 / scale);
                    }
                }
                else {
                    regionParam = 'full';
                    if (supportsListedSizes) {
                        const regionWidth = sizes[zoom][0], regionHeight = sizes[zoom][1];
                        if (version == IIIFInfo_js_1.Versions.VERSION3) {
                            if (regionWidth == width && regionHeight == height) {
                                sizeParam = 'max';
                            }
                            else {
                                sizeParam = regionWidth + ',' + regionHeight;
                            }
                        }
                        else {
                            if (regionWidth == width) {
                                sizeParam = 'full';
                            }
                            else {
                                sizeParam = regionWidth + ',';
                            }
                        }
                    }
                    else {
                        sizeParam = version == IIIFInfo_js_1.Versions.VERSION3 ? 'max' : 'full';
                    }
                }
                return (baseUrl + regionParam + '/' + sizeParam + '/0/' + quality + '.' + format);
            };
            const IiifTileClass = Zoomify_js_1.CustomTile.bind(null, size_js_9.toSize(tileSize || 256).map(function (size) {
                return size * tilePixelRatio;
            }));
            super({
                attributions: options.attributions,
                attributionsCollapsible: options.attributionsCollapsible,
                cacheSize: options.cacheSize,
                crossOrigin: options.crossOrigin,
                imageSmoothing: options.imageSmoothing,
                projection: options.projection,
                reprojectionErrorThreshold: options.reprojectionErrorThreshold,
                state: options.state,
                tileClass: IiifTileClass,
                tileGrid: tileGrid,
                tilePixelRatio: options.tilePixelRatio,
                tileUrlFunction: tileUrlFunction,
                transition: options.transition,
            });
            /**
             * @type {number}
             */
            this.zDirection = options.zDirection;
        }
    }
    exports.default = IIIF;
});
/**
 * @module ol/format/IIIFInfo
 */
define("node_modules/ol/src/format/IIIFInfo", ["require", "exports", "node_modules/ol/src/asserts"], function (require, exports, asserts_js_23) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Versions = void 0;
    /**
     * @typedef {Object} PreferredOptions
     * @property {string} [format] Preferred image format. Will be used if the image information
     * indicates support for that format.
     * @property {string} [quality] IIIF image qualitiy.  Will be used if the image information
     * indicates support for that quality.
     */
    /**
     * @typedef {Object} SupportedFeatures
     * @property {Array<string>} [supports] Supported IIIF image size and region
     * calculation features.
     * @property {Array<string>} [formats] Supported image formats.
     * @property {Array<string>} [qualities] Supported IIIF image qualities.
     */
    /**
     * @typedef {Object} TileInfo
     * @property {Array<number>} scaleFactors Supported resolution scaling factors.
     * @property {number} width Tile width in pixels.
     * @property {number} [height] Tile height in pixels. Same as tile width if height is
     * not given.
     */
    /**
     * @typedef {Object} IiifProfile
     * @property {Array<string>} [formats] Supported image formats for the image service.
     * @property {Array<string>} [qualities] Supported IIIF image qualities.
     * @property {Array<string>} [supports] Supported features.
     * @property {number} [maxArea] Maximum area (pixels) available for this image service.
     * @property {number} [maxHeight] Maximum height.
     * @property {number} [maxWidth] Maximum width.
     */
    /**
     * @typedef {Object<string,string|number|Array<number|string|IiifProfile>|Object<string, number>|TileInfo>}
     *    ImageInformationResponse
     */
    /**
     * Enum representing the major IIIF Image API versions
     * @enum {string}
     */
    exports.Versions = {
        VERSION1: 'version1',
        VERSION2: 'version2',
        VERSION3: 'version3',
    };
    /**
     * Supported image formats, qualities and supported region / size calculation features
     * for different image API versions and compliance levels
     * @const
     * @type {Object<string, Object<string, SupportedFeatures>>}
     */
    const IIIF_PROFILE_VALUES = {};
    IIIF_PROFILE_VALUES[exports.Versions.VERSION1] = {
        'level0': {
            supports: [],
            formats: [],
            qualities: ['native'],
        },
        'level1': {
            supports: ['regionByPx', 'sizeByW', 'sizeByH', 'sizeByPct'],
            formats: ['jpg'],
            qualities: ['native'],
        },
        'level2': {
            supports: [
                'regionByPx',
                'regionByPct',
                'sizeByW',
                'sizeByH',
                'sizeByPct',
                'sizeByConfinedWh',
                'sizeByWh',
            ],
            formats: ['jpg', 'png'],
            qualities: ['native', 'color', 'grey', 'bitonal'],
        },
    };
    IIIF_PROFILE_VALUES[exports.Versions.VERSION2] = {
        'level0': {
            supports: [],
            formats: ['jpg'],
            qualities: ['default'],
        },
        'level1': {
            supports: ['regionByPx', 'sizeByW', 'sizeByH', 'sizeByPct'],
            formats: ['jpg'],
            qualities: ['default'],
        },
        'level2': {
            supports: [
                'regionByPx',
                'regionByPct',
                'sizeByW',
                'sizeByH',
                'sizeByPct',
                'sizeByConfinedWh',
                'sizeByDistortedWh',
                'sizeByWh',
            ],
            formats: ['jpg', 'png'],
            qualities: ['default', 'bitonal'],
        },
    };
    IIIF_PROFILE_VALUES[exports.Versions.VERSION3] = {
        'level0': {
            supports: [],
            formats: ['jpg'],
            qualities: ['default'],
        },
        'level1': {
            supports: ['regionByPx', 'regionSquare', 'sizeByW', 'sizeByH', 'sizeByWh'],
            formats: ['jpg'],
            qualities: ['default'],
        },
        'level2': {
            supports: [
                'regionByPx',
                'regionSquare',
                'regionByPct',
                'sizeByW',
                'sizeByH',
                'sizeByPct',
                'sizeByConfinedWh',
                'sizeByWh',
            ],
            formats: ['jpg', 'png'],
            qualities: ['default'],
        },
    };
    IIIF_PROFILE_VALUES['none'] = {
        'none': {
            supports: [],
            formats: [],
            qualities: [],
        },
    };
    const COMPLIANCE_VERSION1 = /^https?:\/\/library\.stanford\.edu\/iiif\/image-api\/(?:1\.1\/)?compliance\.html#level[0-2]$/;
    const COMPLIANCE_VERSION2 = /^https?:\/\/iiif\.io\/api\/image\/2\/level[0-2](?:\.json)?$/;
    const COMPLIANCE_VERSION3 = /(^https?:\/\/iiif\.io\/api\/image\/3\/level[0-2](?:\.json)?$)|(^level[0-2]$)/;
    function generateVersion1Options(iiifInfo) {
        let levelProfile = iiifInfo.getComplianceLevelSupportedFeatures();
        // Version 1.0 and 1.1 do not require a profile.
        if (levelProfile === undefined) {
            levelProfile = IIIF_PROFILE_VALUES[exports.Versions.VERSION1]['level0'];
        }
        return {
            url: iiifInfo.imageInfo['@id'] === undefined
                ? undefined
                : iiifInfo.imageInfo['@id'].replace(/\/?(?:info\.json)?$/g, ''),
            supports: levelProfile.supports,
            formats: [
                ...levelProfile.formats,
                iiifInfo.imageInfo.formats === undefined
                    ? []
                    : iiifInfo.imageInfo.formats,
            ],
            qualities: [
                ...levelProfile.qualities,
                iiifInfo.imageInfo.qualities === undefined
                    ? []
                    : iiifInfo.imageInfo.qualities,
            ],
            resolutions: iiifInfo.imageInfo.scale_factors,
            tileSize: iiifInfo.imageInfo.tile_width !== undefined
                ? iiifInfo.imageInfo.tile_height !== undefined
                    ? [iiifInfo.imageInfo.tile_width, iiifInfo.imageInfo.tile_height]
                    : [iiifInfo.imageInfo.tile_width, iiifInfo.imageInfo.tile_width]
                : iiifInfo.imageInfo.tile_height != undefined
                    ? [iiifInfo.imageInfo.tile_height, iiifInfo.imageInfo.tile_height]
                    : undefined,
        };
    }
    function generateVersion2Options(iiifInfo) {
        const levelProfile = iiifInfo.getComplianceLevelSupportedFeatures(), additionalProfile = Array.isArray(iiifInfo.imageInfo.profile) &&
            iiifInfo.imageInfo.profile.length > 1, profileSupports = additionalProfile && iiifInfo.imageInfo.profile[1].supports
            ? iiifInfo.imageInfo.profile[1].supports
            : [], profileFormats = additionalProfile && iiifInfo.imageInfo.profile[1].formats
            ? iiifInfo.imageInfo.profile[1].formats
            : [], profileQualities = additionalProfile && iiifInfo.imageInfo.profile[1].qualities
            ? iiifInfo.imageInfo.profile[1].qualities
            : [];
        return {
            url: iiifInfo.imageInfo['@id'].replace(/\/?(?:info\.json)?$/g, ''),
            sizes: iiifInfo.imageInfo.sizes === undefined
                ? undefined
                : iiifInfo.imageInfo.sizes.map(function (size) {
                    return [size.width, size.height];
                }),
            tileSize: iiifInfo.imageInfo.tiles === undefined
                ? undefined
                : [
                    iiifInfo.imageInfo.tiles.map(function (tile) {
                        return tile.width;
                    })[0],
                    iiifInfo.imageInfo.tiles.map(function (tile) {
                        return tile.height === undefined ? tile.width : tile.height;
                    })[0],
                ],
            resolutions: iiifInfo.imageInfo.tiles === undefined
                ? undefined
                : iiifInfo.imageInfo.tiles.map(function (tile) {
                    return tile.scaleFactors;
                })[0],
            supports: [...levelProfile.supports, ...profileSupports],
            formats: [...levelProfile.formats, ...profileFormats],
            qualities: [...levelProfile.qualities, ...profileQualities],
        };
    }
    function generateVersion3Options(iiifInfo) {
        const levelProfile = iiifInfo.getComplianceLevelSupportedFeatures(), formats = iiifInfo.imageInfo.extraFormats === undefined
            ? levelProfile.formats
            : [...levelProfile.formats, ...iiifInfo.imageInfo.extraFormats], preferredFormat = iiifInfo.imageInfo.preferredFormats !== undefined &&
            Array.isArray(iiifInfo.imageInfo.preferredFormats) &&
            iiifInfo.imageInfo.preferredFormats.length > 0
            ? iiifInfo.imageInfo.preferredFormats
                .filter(function (format) {
                return ['jpg', 'png', 'gif'].includes(format);
            })
                .reduce(function (acc, format) {
                return acc === undefined && formats.includes(format)
                    ? format
                    : acc;
            }, undefined)
            : undefined;
        return {
            url: iiifInfo.imageInfo['id'],
            sizes: iiifInfo.imageInfo.sizes === undefined
                ? undefined
                : iiifInfo.imageInfo.sizes.map(function (size) {
                    return [size.width, size.height];
                }),
            tileSize: iiifInfo.imageInfo.tiles === undefined
                ? undefined
                : [
                    iiifInfo.imageInfo.tiles.map(function (tile) {
                        return tile.width;
                    })[0],
                    iiifInfo.imageInfo.tiles.map(function (tile) {
                        return tile.height;
                    })[0],
                ],
            resolutions: iiifInfo.imageInfo.tiles === undefined
                ? undefined
                : iiifInfo.imageInfo.tiles.map(function (tile) {
                    return tile.scaleFactors;
                })[0],
            supports: iiifInfo.imageInfo.extraFeatures === undefined
                ? levelProfile.supports
                : [...levelProfile.supports, ...iiifInfo.imageInfo.extraFeatures],
            formats: formats,
            qualities: iiifInfo.imageInfo.extraQualities === undefined
                ? levelProfile.qualities
                : [...levelProfile.qualities, ...iiifInfo.imageInfo.extraQualities],
            preferredFormat: preferredFormat,
        };
    }
    const versionFunctions = {};
    versionFunctions[exports.Versions.VERSION1] = generateVersion1Options;
    versionFunctions[exports.Versions.VERSION2] = generateVersion2Options;
    versionFunctions[exports.Versions.VERSION3] = generateVersion3Options;
    /**
     * @classdesc
     * Format for transforming IIIF Image API image information responses into
     * IIIF tile source ready options
     *
     * @api
     */
    class IIIFInfo {
        /**
         * @param {string|ImageInformationResponse} imageInfo
         * Deserialized image information JSON response object or JSON response as string
         */
        constructor(imageInfo) {
            this.setImageInfo(imageInfo);
        }
        /**
         * @param {string|ImageInformationResponse} imageInfo
         * Deserialized image information JSON response object or JSON response as string
         * @api
         */
        setImageInfo(imageInfo) {
            if (typeof imageInfo == 'string') {
                this.imageInfo = JSON.parse(imageInfo);
            }
            else {
                this.imageInfo = imageInfo;
            }
        }
        /**
         * @returns {Versions} Major IIIF version.
         * @api
         */
        getImageApiVersion() {
            if (this.imageInfo === undefined) {
                return;
            }
            let context = this.imageInfo['@context'] || 'ol-no-context';
            if (typeof context == 'string') {
                context = [context];
            }
            for (let i = 0; i < context.length; i++) {
                switch (context[i]) {
                    case 'http://library.stanford.edu/iiif/image-api/1.1/context.json':
                    case 'http://iiif.io/api/image/1/context.json':
                        return exports.Versions.VERSION1;
                    case 'http://iiif.io/api/image/2/context.json':
                        return exports.Versions.VERSION2;
                    case 'http://iiif.io/api/image/3/context.json':
                        return exports.Versions.VERSION3;
                    case 'ol-no-context':
                        // Image API 1.0 has no '@context'
                        if (this.getComplianceLevelEntryFromProfile(exports.Versions.VERSION1) &&
                            this.imageInfo.identifier) {
                            return exports.Versions.VERSION1;
                        }
                        break;
                    default:
                }
            }
            asserts_js_23.assert(false, 61);
        }
        /**
         * @param {Versions} version Optional IIIF image API version
         * @returns {string} Compliance level as it appears in the IIIF image information
         * response.
         */
        getComplianceLevelEntryFromProfile(version) {
            if (this.imageInfo === undefined || this.imageInfo.profile === undefined) {
                return;
            }
            if (version === undefined) {
                version = this.getImageApiVersion();
            }
            switch (version) {
                case exports.Versions.VERSION1:
                    if (COMPLIANCE_VERSION1.test(this.imageInfo.profile)) {
                        return this.imageInfo.profile;
                    }
                    break;
                case exports.Versions.VERSION3:
                    if (COMPLIANCE_VERSION3.test(this.imageInfo.profile)) {
                        return this.imageInfo.profile;
                    }
                    break;
                case exports.Versions.VERSION2:
                    if (typeof this.imageInfo.profile === 'string' &&
                        COMPLIANCE_VERSION2.test(this.imageInfo.profile)) {
                        return this.imageInfo.profile;
                    }
                    if (Array.isArray(this.imageInfo.profile) &&
                        this.imageInfo.profile.length > 0 &&
                        typeof this.imageInfo.profile[0] === 'string' &&
                        COMPLIANCE_VERSION2.test(this.imageInfo.profile[0])) {
                        return this.imageInfo.profile[0];
                    }
                    break;
                default:
            }
        }
        /**
         * @param {Versions} version Optional IIIF image API version
         * @returns {string} Compliance level, on of 'level0', 'level1' or 'level2' or undefined
         */
        getComplianceLevelFromProfile(version) {
            const complianceLevel = this.getComplianceLevelEntryFromProfile(version);
            if (complianceLevel === undefined) {
                return undefined;
            }
            const level = complianceLevel.match(/level[0-2](?:\.json)?$/g);
            return Array.isArray(level) ? level[0].replace('.json', '') : undefined;
        }
        /**
         * @returns {SupportedFeatures} Image formats, qualities and region / size calculation
         * methods that are supported by the IIIF service.
         */
        getComplianceLevelSupportedFeatures() {
            if (this.imageInfo === undefined) {
                return;
            }
            const version = this.getImageApiVersion();
            const level = this.getComplianceLevelFromProfile(version);
            if (level === undefined) {
                return IIIF_PROFILE_VALUES['none']['none'];
            }
            return IIIF_PROFILE_VALUES[version][level];
        }
        /**
         * @param {PreferredOptions=} opt_preferredOptions Optional options for preferred format and quality.
         * @returns {import("../source/IIIF.js").Options} IIIF tile source ready constructor options.
         * @api
         */
        getTileSourceOptions(opt_preferredOptions) {
            const options = opt_preferredOptions || {}, version = this.getImageApiVersion();
            if (version === undefined) {
                return;
            }
            const imageOptions = version === undefined ? undefined : versionFunctions[version](this);
            if (imageOptions === undefined) {
                return;
            }
            return {
                url: imageOptions.url,
                version: version,
                size: [this.imageInfo.width, this.imageInfo.height],
                sizes: imageOptions.sizes,
                format: options.format !== undefined &&
                    imageOptions.formats.includes(options.format)
                    ? options.format
                    : imageOptions.preferredFormat !== undefined
                        ? imageOptions.preferredFormat
                        : 'jpg',
                supports: imageOptions.supports,
                quality: options.quality && imageOptions.qualities.includes(options.quality)
                    ? options.quality
                    : imageOptions.qualities.includes('native')
                        ? 'native'
                        : 'default',
                resolutions: Array.isArray(imageOptions.resolutions)
                    ? imageOptions.resolutions.sort(function (a, b) {
                        return b - a;
                    })
                    : undefined,
                tileSize: imageOptions.tileSize,
            };
        }
    }
    exports.default = IIIFInfo;
});
define("node_modules/ol/src/format/KML", ["require", "exports", "node_modules/ol/src/Feature", "node_modules/ol/src/style/Fill", "node_modules/ol/src/geom/GeometryCollection", "node_modules/ol/src/geom/GeometryLayout", "node_modules/ol/src/geom/GeometryType", "node_modules/ol/src/style/Icon", "node_modules/ol/src/style/IconAnchorUnits", "node_modules/ol/src/style/IconOrigin", "node_modules/ol/src/geom/LineString", "node_modules/ol/src/geom/MultiLineString", "node_modules/ol/src/geom/MultiPoint", "node_modules/ol/src/geom/MultiPolygon", "node_modules/ol/src/geom/Point", "node_modules/ol/src/geom/Polygon", "node_modules/ol/src/style/Stroke", "node_modules/ol/src/style/Style", "node_modules/ol/src/style/Text", "node_modules/ol/src/format/XMLFeature", "node_modules/ol/src/xml", "node_modules/ol/src/color", "node_modules/ol/src/asserts", "node_modules/ol/src/array", "node_modules/ol/src/proj", "node_modules/ol/src/format/xsd", "node_modules/ol/src/math", "node_modules/ol/src/format/Feature"], function (require, exports, Feature_js_18, Fill_js_4, GeometryCollection_js_2, GeometryLayout_js_12, GeometryType_js_27, Icon_js_2, IconAnchorUnits_js_3, IconOrigin_js_2, LineString_js_9, MultiLineString_js_7, MultiPoint_js_6, MultiPolygon_js_6, Point_js_10, Polygon_js_14, Stroke_js_3, Style_js_7, Text_js_2, XMLFeature_js_3, xml_js_6, color_js_5, asserts_js_24, array_js_29, proj_js_27, xsd_js_3, math_js_25, Feature_js_19) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.readFlatCoordinates = exports.getDefaultStyleArray = exports.getDefaultStyle = exports.getDefaultTextStyle = exports.getDefaultStrokeStyle = exports.getDefaultImageStyle = exports.getDefaultFillStyle = void 0;
    /**
     * @typedef {Object} Vec2
     * @property {number} x
     * @property {import("../style/IconAnchorUnits").default} xunits
     * @property {number} y
     * @property {import("../style/IconAnchorUnits").default} yunits
     * @property {import("../style/IconOrigin.js").default} origin
     */
    /**
     * @typedef {Object} GxTrackObject
     * @property {Array<number>} flatCoordinates
     * @property {Array<number>} whens
     */
    /**
     * @const
     * @type {Array<string>}
     */
    const GX_NAMESPACE_URIS = ['http://www.google.com/kml/ext/2.2'];
    /**
     * @const
     * @type {Array<null|string>}
     */
    const NAMESPACE_URIS = [
        null,
        'http://earth.google.com/kml/2.0',
        'http://earth.google.com/kml/2.1',
        'http://earth.google.com/kml/2.2',
        'http://www.opengis.net/kml/2.2',
    ];
    /**
     * @const
     * @type {string}
     */
    const SCHEMA_LOCATION = 'http://www.opengis.net/kml/2.2 ' +
        'https://developers.google.com/kml/schema/kml22gx.xsd';
    /**
     * @type {Object<string, import("../style/IconAnchorUnits").default>}
     */
    const ICON_ANCHOR_UNITS_MAP = {
        'fraction': IconAnchorUnits_js_3.default.FRACTION,
        'pixels': IconAnchorUnits_js_3.default.PIXELS,
        'insetPixels': IconAnchorUnits_js_3.default.PIXELS,
    };
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const PLACEMARK_PARSERS = xml_js_6.makeStructureNS(NAMESPACE_URIS, {
        'ExtendedData': extendedDataParser,
        'Region': regionParser,
        'MultiGeometry': xml_js_6.makeObjectPropertySetter(readMultiGeometry, 'geometry'),
        'LineString': xml_js_6.makeObjectPropertySetter(readLineString, 'geometry'),
        'LinearRing': xml_js_6.makeObjectPropertySetter(readLinearRing, 'geometry'),
        'Point': xml_js_6.makeObjectPropertySetter(readPoint, 'geometry'),
        'Polygon': xml_js_6.makeObjectPropertySetter(readPolygon, 'geometry'),
        'Style': xml_js_6.makeObjectPropertySetter(readStyle),
        'StyleMap': placemarkStyleMapParser,
        'address': xml_js_6.makeObjectPropertySetter(xsd_js_3.readString),
        'description': xml_js_6.makeObjectPropertySetter(xsd_js_3.readString),
        'name': xml_js_6.makeObjectPropertySetter(xsd_js_3.readString),
        'open': xml_js_6.makeObjectPropertySetter(xsd_js_3.readBoolean),
        'phoneNumber': xml_js_6.makeObjectPropertySetter(xsd_js_3.readString),
        'styleUrl': xml_js_6.makeObjectPropertySetter(readURI),
        'visibility': xml_js_6.makeObjectPropertySetter(xsd_js_3.readBoolean),
    }, xml_js_6.makeStructureNS(GX_NAMESPACE_URIS, {
        'MultiTrack': xml_js_6.makeObjectPropertySetter(readGxMultiTrack, 'geometry'),
        'Track': xml_js_6.makeObjectPropertySetter(readGxTrack, 'geometry'),
    }));
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const NETWORK_LINK_PARSERS = xml_js_6.makeStructureNS(NAMESPACE_URIS, {
        'ExtendedData': extendedDataParser,
        'Region': regionParser,
        'Link': linkParser,
        'address': xml_js_6.makeObjectPropertySetter(xsd_js_3.readString),
        'description': xml_js_6.makeObjectPropertySetter(xsd_js_3.readString),
        'name': xml_js_6.makeObjectPropertySetter(xsd_js_3.readString),
        'open': xml_js_6.makeObjectPropertySetter(xsd_js_3.readBoolean),
        'phoneNumber': xml_js_6.makeObjectPropertySetter(xsd_js_3.readString),
        'visibility': xml_js_6.makeObjectPropertySetter(xsd_js_3.readBoolean),
    });
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const LINK_PARSERS = xml_js_6.makeStructureNS(NAMESPACE_URIS, {
        'href': xml_js_6.makeObjectPropertySetter(readURI),
    });
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const REGION_PARSERS = xml_js_6.makeStructureNS(NAMESPACE_URIS, {
        'LatLonAltBox': latLonAltBoxParser,
        'Lod': lodParser,
    });
    /**
     * @const
     * @type {Object<string, Array<string>>}
     */
    // @ts-ignore
    const KML_SEQUENCE = xml_js_6.makeStructureNS(NAMESPACE_URIS, ['Document', 'Placemark']);
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
     */
    // @ts-ignore
    const KML_SERIALIZERS = xml_js_6.makeStructureNS(NAMESPACE_URIS, {
        'Document': xml_js_6.makeChildAppender(writeDocument),
        'Placemark': xml_js_6.makeChildAppender(writePlacemark),
    });
    /**
     * @type {import("../color.js").Color}
     */
    let DEFAULT_COLOR;
    /**
     * @type {Fill}
     */
    let DEFAULT_FILL_STYLE = null;
    /**
     * Get the default fill style (or null if not yet set).
     * @return {Fill} The default fill style.
     */
    function getDefaultFillStyle() {
        return DEFAULT_FILL_STYLE;
    }
    exports.getDefaultFillStyle = getDefaultFillStyle;
    /**
     * @type {import("../size.js").Size}
     */
    let DEFAULT_IMAGE_STYLE_ANCHOR;
    /**
     * @type {import("../style/IconAnchorUnits").default}
     */
    let DEFAULT_IMAGE_STYLE_ANCHOR_X_UNITS;
    /**
     * @type {import("../style/IconAnchorUnits").default}
     */
    let DEFAULT_IMAGE_STYLE_ANCHOR_Y_UNITS;
    /**
     * @type {import("../size.js").Size}
     */
    let DEFAULT_IMAGE_STYLE_SIZE;
    /**
     * @type {string}
     */
    let DEFAULT_IMAGE_STYLE_SRC;
    /**
     * @type {number}
     */
    let DEFAULT_IMAGE_SCALE_MULTIPLIER;
    /**
     * @type {import("../style/Image.js").default}
     */
    let DEFAULT_IMAGE_STYLE = null;
    /**
     * Get the default image style (or null if not yet set).
     * @return {import("../style/Image.js").default} The default image style.
     */
    function getDefaultImageStyle() {
        return DEFAULT_IMAGE_STYLE;
    }
    exports.getDefaultImageStyle = getDefaultImageStyle;
    /**
     * @type {string}
     */
    let DEFAULT_NO_IMAGE_STYLE;
    /**
     * @type {Stroke}
     */
    let DEFAULT_STROKE_STYLE = null;
    /**
     * Get the default stroke style (or null if not yet set).
     * @return {Stroke} The default stroke style.
     */
    function getDefaultStrokeStyle() {
        return DEFAULT_STROKE_STYLE;
    }
    exports.getDefaultStrokeStyle = getDefaultStrokeStyle;
    /**
     * @type {Stroke}
     */
    let DEFAULT_TEXT_STROKE_STYLE;
    /**
     * @type {Text}
     */
    let DEFAULT_TEXT_STYLE = null;
    /**
     * Get the default text style (or null if not yet set).
     * @return {Text} The default text style.
     */
    function getDefaultTextStyle() {
        return DEFAULT_TEXT_STYLE;
    }
    exports.getDefaultTextStyle = getDefaultTextStyle;
    /**
     * @type {Style}
     */
    let DEFAULT_STYLE = null;
    /**
     * Get the default style (or null if not yet set).
     * @return {Style} The default style.
     */
    function getDefaultStyle() {
        return DEFAULT_STYLE;
    }
    exports.getDefaultStyle = getDefaultStyle;
    /**
     * @type {Array<Style>}
     */
    let DEFAULT_STYLE_ARRAY = null;
    /**
     * Get the default style array (or null if not yet set).
     * @return {Array<Style>} The default style.
     */
    function getDefaultStyleArray() {
        return DEFAULT_STYLE_ARRAY;
    }
    exports.getDefaultStyleArray = getDefaultStyleArray;
    function createStyleDefaults() {
        DEFAULT_COLOR = [255, 255, 255, 1];
        DEFAULT_FILL_STYLE = new Fill_js_4.default({
            color: DEFAULT_COLOR,
        });
        DEFAULT_IMAGE_STYLE_ANCHOR = [20, 2]; // FIXME maybe [8, 32] ?
        DEFAULT_IMAGE_STYLE_ANCHOR_X_UNITS = IconAnchorUnits_js_3.default.PIXELS;
        DEFAULT_IMAGE_STYLE_ANCHOR_Y_UNITS = IconAnchorUnits_js_3.default.PIXELS;
        DEFAULT_IMAGE_STYLE_SIZE = [64, 64];
        DEFAULT_IMAGE_STYLE_SRC =
            'https://maps.google.com/mapfiles/kml/pushpin/ylw-pushpin.png';
        DEFAULT_IMAGE_SCALE_MULTIPLIER = 0.5;
        DEFAULT_IMAGE_STYLE = new Icon_js_2.default({
            anchor: DEFAULT_IMAGE_STYLE_ANCHOR,
            anchorOrigin: IconOrigin_js_2.default.BOTTOM_LEFT,
            anchorXUnits: DEFAULT_IMAGE_STYLE_ANCHOR_X_UNITS,
            anchorYUnits: DEFAULT_IMAGE_STYLE_ANCHOR_Y_UNITS,
            crossOrigin: 'anonymous',
            rotation: 0,
            scale: DEFAULT_IMAGE_SCALE_MULTIPLIER,
            size: DEFAULT_IMAGE_STYLE_SIZE,
            src: DEFAULT_IMAGE_STYLE_SRC,
        });
        DEFAULT_NO_IMAGE_STYLE = 'NO_IMAGE';
        DEFAULT_STROKE_STYLE = new Stroke_js_3.default({
            color: DEFAULT_COLOR,
            width: 1,
        });
        DEFAULT_TEXT_STROKE_STYLE = new Stroke_js_3.default({
            color: [51, 51, 51, 1],
            width: 2,
        });
        DEFAULT_TEXT_STYLE = new Text_js_2.default({
            font: 'bold 16px Helvetica',
            fill: DEFAULT_FILL_STYLE,
            stroke: DEFAULT_TEXT_STROKE_STYLE,
            scale: 0.8,
        });
        DEFAULT_STYLE = new Style_js_7.default({
            fill: DEFAULT_FILL_STYLE,
            image: DEFAULT_IMAGE_STYLE,
            text: DEFAULT_TEXT_STYLE,
            stroke: DEFAULT_STROKE_STYLE,
            zIndex: 0,
        });
        DEFAULT_STYLE_ARRAY = [DEFAULT_STYLE];
    }
    /**
     * @type {HTMLTextAreaElement}
     */
    let TEXTAREA;
    /**
     * @typedef {Object} Options
     * @property {boolean} [extractStyles=true] Extract styles from the KML.
     * @property {boolean} [showPointNames=true] Show names as labels for placemarks which contain points.
     * @property {Array<Style>} [defaultStyle] Default style. The
     * default default style is the same as Google Earth.
     * @property {boolean} [writeStyles=true] Write styles into KML.
     * @property {null|string} [crossOrigin='anonymous'] The `crossOrigin` attribute for loaded images. Note that you must provide a
     * `crossOrigin` value if you want to access pixel data with the Canvas renderer.
     */
    /**
     * @classdesc
     * Feature format for reading and writing data in the KML format.
     *
     * {@link module:ol/format/KML~KML#readFeature} will read the first feature from
     * a KML source.
     *
     * MultiGeometries are converted into GeometryCollections if they are a mix of
     * geometry types, and into MultiPoint/MultiLineString/MultiPolygon if they are
     * all of the same type.
     *
     * Note that the KML format uses the URL() constructor. Older browsers such as IE
     * which do not support this will need a URL polyfill to be loaded before use.
     *
     * @api
     */
    class KML extends XMLFeature_js_3.default {
        /**
         * @param {Options=} opt_options Options.
         */
        constructor(opt_options) {
            super();
            const options = opt_options ? opt_options : {};
            if (!DEFAULT_STYLE_ARRAY) {
                createStyleDefaults();
            }
            /**
             * @type {import("../proj/Projection.js").default}
             */
            this.dataProjection = proj_js_27.get('EPSG:4326');
            /**
             * @private
             * @type {Array<Style>}
             */
            this.defaultStyle_ = options.defaultStyle
                ? options.defaultStyle
                : DEFAULT_STYLE_ARRAY;
            /**
             * @private
             * @type {boolean}
             */
            this.extractStyles_ =
                options.extractStyles !== undefined ? options.extractStyles : true;
            /**
             * @type {boolean}
             */
            this.writeStyles_ =
                options.writeStyles !== undefined ? options.writeStyles : true;
            /**
             * @private
             * @type {!Object<string, (Array<Style>|string)>}
             */
            this.sharedStyles_ = {};
            /**
             * @private
             * @type {boolean}
             */
            this.showPointNames_ =
                options.showPointNames !== undefined ? options.showPointNames : true;
            /**
             * @type {null|string}
             */
            this.crossOrigin_ =
                options.crossOrigin !== undefined ? options.crossOrigin : 'anonymous';
        }
        /**
         * @param {Node} node Node.
         * @param {Array<*>} objectStack Object stack.
         * @private
         * @return {Array<Feature>|undefined} Features.
         */
        readDocumentOrFolder_(node, objectStack) {
            // FIXME use scope somehow
            const parsersNS = xml_js_6.makeStructureNS(NAMESPACE_URIS, {
                'Document': xml_js_6.makeArrayExtender(this.readDocumentOrFolder_, this),
                'Folder': xml_js_6.makeArrayExtender(this.readDocumentOrFolder_, this),
                'Placemark': xml_js_6.makeArrayPusher(this.readPlacemark_, this),
                'Style': this.readSharedStyle_.bind(this),
                'StyleMap': this.readSharedStyleMap_.bind(this),
            });
            /** @type {Array<Feature>} */
            // @ts-ignore
            const features = xml_js_6.pushParseAndPop([], parsersNS, node, objectStack, this);
            if (features) {
                return features;
            }
            else {
                return undefined;
            }
        }
        /**
         * @param {Element} node Node.
         * @param {Array<*>} objectStack Object stack.
         * @private
         * @return {Feature|undefined} Feature.
         */
        readPlacemark_(node, objectStack) {
            const object = xml_js_6.pushParseAndPop({ 'geometry': null }, PLACEMARK_PARSERS, node, objectStack, this);
            if (!object) {
                return undefined;
            }
            const feature = new Feature_js_18.default();
            const id = node.getAttribute('id');
            if (id !== null) {
                feature.setId(id);
            }
            const options = /** @type {import("./Feature.js").ReadOptions} */ (objectStack[0]);
            const geometry = object['geometry'];
            if (geometry) {
                Feature_js_19.transformGeometryWithOptions(geometry, false, options);
            }
            feature.setGeometry(geometry);
            delete object['geometry'];
            if (this.extractStyles_) {
                const style = object['Style'];
                const styleUrl = object['styleUrl'];
                const styleFunction = createFeatureStyleFunction(style, styleUrl, this.defaultStyle_, this.sharedStyles_, this.showPointNames_);
                feature.setStyle(styleFunction);
            }
            delete object['Style'];
            // we do not remove the styleUrl property from the object, so it
            // gets stored on feature when setProperties is called
            feature.setProperties(object, true);
            return feature;
        }
        /**
         * @param {Element} node Node.
         * @param {Array<*>} objectStack Object stack.
         * @private
         */
        readSharedStyle_(node, objectStack) {
            const id = node.getAttribute('id');
            if (id !== null) {
                const style = readStyle.call(this, node, objectStack);
                if (style) {
                    let styleUri;
                    let baseURI = node.baseURI;
                    if (!baseURI || baseURI == 'about:blank') {
                        baseURI = window.location.href;
                    }
                    if (baseURI) {
                        const url = new URL('#' + id, baseURI);
                        styleUri = url.href;
                    }
                    else {
                        styleUri = '#' + id;
                    }
                    this.sharedStyles_[styleUri] = style;
                }
            }
        }
        /**
         * @param {Element} node Node.
         * @param {Array<*>} objectStack Object stack.
         * @private
         */
        readSharedStyleMap_(node, objectStack) {
            const id = node.getAttribute('id');
            if (id === null) {
                return;
            }
            const styleMapValue = readStyleMapValue.call(this, node, objectStack);
            if (!styleMapValue) {
                return;
            }
            let styleUri;
            let baseURI = node.baseURI;
            if (!baseURI || baseURI == 'about:blank') {
                baseURI = window.location.href;
            }
            if (baseURI) {
                const url = new URL('#' + id, baseURI);
                styleUri = url.href;
            }
            else {
                styleUri = '#' + id;
            }
            this.sharedStyles_[styleUri] = styleMapValue;
        }
        /**
         * @param {Element} node Node.
         * @param {import("./Feature.js").ReadOptions=} opt_options Options.
         * @return {import("../Feature.js").default} Feature.
         */
        readFeatureFromNode(node, opt_options) {
            if (!array_js_29.includes(NAMESPACE_URIS, node.namespaceURI)) {
                return null;
            }
            const feature = this.readPlacemark_(node, [
                this.getReadOptions(node, opt_options),
            ]);
            if (feature) {
                return feature;
            }
            else {
                return null;
            }
        }
        /**
         * @protected
         * @param {Element} node Node.
         * @param {import("./Feature.js").ReadOptions=} opt_options Options.
         * @return {Array<import("../Feature.js").default>} Features.
         */
        readFeaturesFromNode(node, opt_options) {
            if (!array_js_29.includes(NAMESPACE_URIS, node.namespaceURI)) {
                return [];
            }
            let features;
            const localName = node.localName;
            if (localName == 'Document' || localName == 'Folder') {
                features = this.readDocumentOrFolder_(node, [
                    this.getReadOptions(node, opt_options),
                ]);
                if (features) {
                    return features;
                }
                else {
                    return [];
                }
            }
            else if (localName == 'Placemark') {
                const feature = this.readPlacemark_(node, [
                    this.getReadOptions(node, opt_options),
                ]);
                if (feature) {
                    return [feature];
                }
                else {
                    return [];
                }
            }
            else if (localName == 'kml') {
                features = [];
                for (let n = node.firstElementChild; n; n = n.nextElementSibling) {
                    const fs = this.readFeaturesFromNode(n, opt_options);
                    if (fs) {
                        array_js_29.extend(features, fs);
                    }
                }
                return features;
            }
            else {
                return [];
            }
        }
        /**
         * Read the name of the KML.
         *
         * @param {Document|Element|string} source Source.
         * @return {string|undefined} Name.
         * @api
         */
        readName(source) {
            if (!source) {
                return undefined;
            }
            else if (typeof source === 'string') {
                const doc = xml_js_6.parse(source);
                return this.readNameFromDocument(doc);
            }
            else if (xml_js_6.isDocument(source)) {
                return this.readNameFromDocument(/** @type {Document} */ (source));
            }
            else {
                return this.readNameFromNode(/** @type {Element} */ (source));
            }
        }
        /**
         * @param {Document} doc Document.
         * @return {string|undefined} Name.
         */
        readNameFromDocument(doc) {
            for (let n = /** @type {Node} */ (doc.firstChild); n; n = n.nextSibling) {
                if (n.nodeType == Node.ELEMENT_NODE) {
                    const name = this.readNameFromNode(/** @type {Element} */ (n));
                    if (name) {
                        return name;
                    }
                }
            }
            return undefined;
        }
        /**
         * @param {Element} node Node.
         * @return {string|undefined} Name.
         */
        readNameFromNode(node) {
            for (let n = node.firstElementChild; n; n = n.nextElementSibling) {
                if (array_js_29.includes(NAMESPACE_URIS, n.namespaceURI) && n.localName == 'name') {
                    return xsd_js_3.readString(n);
                }
            }
            for (let n = node.firstElementChild; n; n = n.nextElementSibling) {
                const localName = n.localName;
                if (array_js_29.includes(NAMESPACE_URIS, n.namespaceURI) &&
                    (localName == 'Document' ||
                        localName == 'Folder' ||
                        localName == 'Placemark' ||
                        localName == 'kml')) {
                    const name = this.readNameFromNode(n);
                    if (name) {
                        return name;
                    }
                }
            }
            return undefined;
        }
        /**
         * Read the network links of the KML.
         *
         * @param {Document|Element|string} source Source.
         * @return {Array<Object>} Network links.
         * @api
         */
        readNetworkLinks(source) {
            const networkLinks = [];
            if (typeof source === 'string') {
                const doc = xml_js_6.parse(source);
                array_js_29.extend(networkLinks, this.readNetworkLinksFromDocument(doc));
            }
            else if (xml_js_6.isDocument(source)) {
                array_js_29.extend(networkLinks, this.readNetworkLinksFromDocument(/** @type {Document} */ (source)));
            }
            else {
                array_js_29.extend(networkLinks, this.readNetworkLinksFromNode(/** @type {Element} */ (source)));
            }
            return networkLinks;
        }
        /**
         * @param {Document} doc Document.
         * @return {Array<Object>} Network links.
         */
        readNetworkLinksFromDocument(doc) {
            const networkLinks = [];
            for (let n = /** @type {Node} */ (doc.firstChild); n; n = n.nextSibling) {
                if (n.nodeType == Node.ELEMENT_NODE) {
                    array_js_29.extend(networkLinks, this.readNetworkLinksFromNode(/** @type {Element} */ (n)));
                }
            }
            return networkLinks;
        }
        /**
         * @param {Element} node Node.
         * @return {Array<Object>} Network links.
         */
        readNetworkLinksFromNode(node) {
            const networkLinks = [];
            for (let n = node.firstElementChild; n; n = n.nextElementSibling) {
                if (array_js_29.includes(NAMESPACE_URIS, n.namespaceURI) &&
                    n.localName == 'NetworkLink') {
                    const obj = xml_js_6.pushParseAndPop({}, NETWORK_LINK_PARSERS, n, []);
                    networkLinks.push(obj);
                }
            }
            for (let n = node.firstElementChild; n; n = n.nextElementSibling) {
                const localName = n.localName;
                if (array_js_29.includes(NAMESPACE_URIS, n.namespaceURI) &&
                    (localName == 'Document' || localName == 'Folder' || localName == 'kml')) {
                    array_js_29.extend(networkLinks, this.readNetworkLinksFromNode(n));
                }
            }
            return networkLinks;
        }
        /**
         * Read the regions of the KML.
         *
         * @param {Document|Element|string} source Source.
         * @return {Array<Object>} Regions.
         * @api
         */
        readRegion(source) {
            const regions = [];
            if (typeof source === 'string') {
                const doc = xml_js_6.parse(source);
                array_js_29.extend(regions, this.readRegionFromDocument(doc));
            }
            else if (xml_js_6.isDocument(source)) {
                array_js_29.extend(regions, this.readRegionFromDocument(/** @type {Document} */ (source)));
            }
            else {
                array_js_29.extend(regions, this.readRegionFromNode(/** @type {Element} */ (source)));
            }
            return regions;
        }
        /**
         * @param {Document} doc Document.
         * @return {Array<Object>} Region.
         */
        readRegionFromDocument(doc) {
            const regions = [];
            for (let n = /** @type {Node} */ (doc.firstChild); n; n = n.nextSibling) {
                if (n.nodeType == Node.ELEMENT_NODE) {
                    array_js_29.extend(regions, this.readRegionFromNode(/** @type {Element} */ (n)));
                }
            }
            return regions;
        }
        /**
         * @param {Element} node Node.
         * @return {Array<Object>} Region.
         * @api
         */
        readRegionFromNode(node) {
            const regions = [];
            for (let n = node.firstElementChild; n; n = n.nextElementSibling) {
                if (array_js_29.includes(NAMESPACE_URIS, n.namespaceURI) && n.localName == 'Region') {
                    const obj = xml_js_6.pushParseAndPop({}, REGION_PARSERS, n, []);
                    regions.push(obj);
                }
            }
            for (let n = node.firstElementChild; n; n = n.nextElementSibling) {
                const localName = n.localName;
                if (array_js_29.includes(NAMESPACE_URIS, n.namespaceURI) &&
                    (localName == 'Document' || localName == 'Folder' || localName == 'kml')) {
                    array_js_29.extend(regions, this.readRegionFromNode(n));
                }
            }
            return regions;
        }
        /**
         * Encode an array of features in the KML format as an XML node. GeometryCollections,
         * MultiPoints, MultiLineStrings, and MultiPolygons are output as MultiGeometries.
         *
         * @param {Array<Feature>} features Features.
         * @param {import("./Feature.js").WriteOptions=} opt_options Options.
         * @return {Node} Node.
         * @api
         */
        writeFeaturesNode(features, opt_options) {
            opt_options = this.adaptOptions(opt_options);
            const kml = xml_js_6.createElementNS(NAMESPACE_URIS[4], 'kml');
            const xmlnsUri = 'http://www.w3.org/2000/xmlns/';
            kml.setAttributeNS(xmlnsUri, 'xmlns:gx', GX_NAMESPACE_URIS[0]);
            kml.setAttributeNS(xmlnsUri, 'xmlns:xsi', xml_js_6.XML_SCHEMA_INSTANCE_URI);
            kml.setAttributeNS(xml_js_6.XML_SCHEMA_INSTANCE_URI, 'xsi:schemaLocation', SCHEMA_LOCATION);
            const /** @type {import("../xml.js").NodeStackItem} */ context = {
                node: kml,
            };
            /** @type {!Object<string, (Array<Feature>|Feature|undefined)>} */
            const properties = {};
            if (features.length > 1) {
                properties['Document'] = features;
            }
            else if (features.length == 1) {
                properties['Placemark'] = features[0];
            }
            const orderedKeys = KML_SEQUENCE[kml.namespaceURI];
            const values = xml_js_6.makeSequence(properties, orderedKeys);
            xml_js_6.pushSerializeAndPop(context, KML_SERIALIZERS, xml_js_6.OBJECT_PROPERTY_NODE_FACTORY, values, [opt_options], orderedKeys, this);
            return kml;
        }
    }
    /**
     * @param {Style|undefined} foundStyle Style.
     * @param {string} name Name.
     * @return {Style} style Style.
     */
    function createNameStyleFunction(foundStyle, name) {
        const textOffset = [0, 0];
        let textAlign = 'start';
        const imageStyle = foundStyle.getImage();
        if (imageStyle) {
            let imageSize = imageStyle.getImageSize();
            if (imageSize === null) {
                imageSize = DEFAULT_IMAGE_STYLE_SIZE;
            }
            if (imageSize.length == 2) {
                const imageScale = imageStyle.getScaleArray();
                // Offset the label to be centered to the right of the icon,
                // if there is one.
                textOffset[0] = (imageScale[0] * imageSize[0]) / 2;
                textOffset[1] = (-imageScale[1] * imageSize[1]) / 2;
                textAlign = 'left';
            }
        }
        let textStyle = foundStyle.getText();
        if (textStyle) {
            // clone the text style, customizing it with name, alignments and offset.
            // Note that kml does not support many text options that OpenLayers does (rotation, textBaseline).
            textStyle = textStyle.clone();
            textStyle.setFont(textStyle.getFont() || DEFAULT_TEXT_STYLE.getFont());
            textStyle.setScale(textStyle.getScale() || DEFAULT_TEXT_STYLE.getScale());
            textStyle.setFill(textStyle.getFill() || DEFAULT_TEXT_STYLE.getFill());
            textStyle.setStroke(textStyle.getStroke() || DEFAULT_TEXT_STROKE_STYLE);
        }
        else {
            textStyle = DEFAULT_TEXT_STYLE.clone();
        }
        textStyle.setText(name);
        textStyle.setOffsetX(textOffset[0]);
        textStyle.setOffsetY(textOffset[1]);
        textStyle.setTextAlign(textAlign);
        const nameStyle = new Style_js_7.default({
            image: imageStyle,
            text: textStyle,
        });
        return nameStyle;
    }
    /**
     * @param {Array<Style>|undefined} style Style.
     * @param {string} styleUrl Style URL.
     * @param {Array<Style>} defaultStyle Default style.
     * @param {!Object<string, (Array<Style>|string)>} sharedStyles Shared styles.
     * @param {boolean|undefined} showPointNames true to show names for point placemarks.
     * @return {import("../style/Style.js").StyleFunction} Feature style function.
     */
    function createFeatureStyleFunction(style, styleUrl, defaultStyle, sharedStyles, showPointNames) {
        return (
        /**
         * @param {Feature} feature feature.
         * @param {number} resolution Resolution.
         * @return {Array<Style>|Style} Style.
         */
        function (feature, resolution) {
            let drawName = showPointNames;
            let name = '';
            let multiGeometryPoints = [];
            if (drawName) {
                const geometry = feature.getGeometry();
                if (geometry) {
                    const type = geometry.getType();
                    if (type === GeometryType_js_27.default.GEOMETRY_COLLECTION) {
                        multiGeometryPoints = geometry
                            .getGeometriesArrayRecursive()
                            .filter(function (geometry) {
                            const type = geometry.getType();
                            return (type === GeometryType_js_27.default.POINT ||
                                type === GeometryType_js_27.default.MULTI_POINT);
                        });
                        drawName = multiGeometryPoints.length > 0;
                    }
                    else {
                        drawName =
                            type === GeometryType_js_27.default.POINT || type === GeometryType_js_27.default.MULTI_POINT;
                    }
                }
            }
            if (drawName) {
                name = /** @type {string} */ (feature.get('name'));
                drawName = drawName && !!name;
                // convert any html character codes
                if (drawName && name.search(/&[^&]+;/) > -1) {
                    if (!TEXTAREA) {
                        TEXTAREA = document.createElement('textarea');
                    }
                    TEXTAREA.innerHTML = name;
                    name = TEXTAREA.value;
                }
            }
            let featureStyle = defaultStyle;
            if (style) {
                featureStyle = style;
            }
            else if (styleUrl) {
                featureStyle = findStyle(styleUrl, defaultStyle, sharedStyles);
            }
            if (drawName) {
                const nameStyle = createNameStyleFunction(featureStyle[0], name);
                if (multiGeometryPoints.length > 0) {
                    // in multigeometries restrict the name style to points and create a
                    // style without image or text for geometries requiring fill or stroke
                    // including any polygon specific style if there is one
                    nameStyle.setGeometry(new GeometryCollection_js_2.default(multiGeometryPoints));
                    const baseStyle = new Style_js_7.default({
                        geometry: featureStyle[0].getGeometry(),
                        image: null,
                        fill: featureStyle[0].getFill(),
                        stroke: featureStyle[0].getStroke(),
                        text: null,
                    });
                    return [nameStyle, baseStyle].concat(featureStyle.slice(1));
                }
                return nameStyle;
            }
            return featureStyle;
        });
    }
    /**
     * @param {Array<Style>|string|undefined} styleValue Style value.
     * @param {Array<Style>} defaultStyle Default style.
     * @param {!Object<string, (Array<Style>|string)>} sharedStyles
     * Shared styles.
     * @return {Array<Style>} Style.
     */
    function findStyle(styleValue, defaultStyle, sharedStyles) {
        if (Array.isArray(styleValue)) {
            return styleValue;
        }
        else if (typeof styleValue === 'string') {
            // KML files in the wild occasionally forget the leading `#` on styleUrls
            // defined in the same document.  Add a leading `#` if it enables to find
            // a style.
            if (!(styleValue in sharedStyles) && '#' + styleValue in sharedStyles) {
                styleValue = '#' + styleValue;
            }
            return findStyle(sharedStyles[styleValue], defaultStyle, sharedStyles);
        }
        else {
            return defaultStyle;
        }
    }
    /**
     * @param {Node} node Node.
     * @return {import("../color.js").Color|undefined} Color.
     */
    function readColor(node) {
        const s = xml_js_6.getAllTextContent(node, false);
        // The KML specification states that colors should not include a leading `#`
        // but we tolerate them.
        const m = /^\s*#?\s*([0-9A-Fa-f]{8})\s*$/.exec(s);
        if (m) {
            const hexColor = m[1];
            return [
                parseInt(hexColor.substr(6, 2), 16),
                parseInt(hexColor.substr(4, 2), 16),
                parseInt(hexColor.substr(2, 2), 16),
                parseInt(hexColor.substr(0, 2), 16) / 255,
            ];
        }
        else {
            return undefined;
        }
    }
    /**
     * @param {Node} node Node.
     * @return {Array<number>|undefined} Flat coordinates.
     */
    function readFlatCoordinates(node) {
        let s = xml_js_6.getAllTextContent(node, false);
        const flatCoordinates = [];
        // The KML specification states that coordinate tuples should not include
        // spaces, but we tolerate them.
        const re = /^\s*([+\-]?\d*\.?\d+(?:e[+\-]?\d+)?)\s*,\s*([+\-]?\d*\.?\d+(?:e[+\-]?\d+)?)(?:\s*,\s*([+\-]?\d*\.?\d+(?:e[+\-]?\d+)?))?\s*/i;
        let m;
        while ((m = re.exec(s))) {
            const x = parseFloat(m[1]);
            const y = parseFloat(m[2]);
            const z = m[3] ? parseFloat(m[3]) : 0;
            flatCoordinates.push(x, y, z);
            s = s.substr(m[0].length);
        }
        if (s !== '') {
            return undefined;
        }
        return flatCoordinates;
    }
    exports.readFlatCoordinates = readFlatCoordinates;
    /**
     * @param {Node} node Node.
     * @return {string} URI.
     */
    function readURI(node) {
        const s = xml_js_6.getAllTextContent(node, false).trim();
        let baseURI = node.baseURI;
        if (!baseURI || baseURI == 'about:blank') {
            baseURI = window.location.href;
        }
        if (baseURI) {
            const url = new URL(s, baseURI);
            return url.href;
        }
        else {
            return s;
        }
    }
    /**
     * @param {Element} node Node.
     * @return {Vec2} Vec2.
     */
    function readVec2(node) {
        const xunits = node.getAttribute('xunits');
        const yunits = node.getAttribute('yunits');
        let origin;
        if (xunits !== 'insetPixels') {
            if (yunits !== 'insetPixels') {
                origin = IconOrigin_js_2.default.BOTTOM_LEFT;
            }
            else {
                origin = IconOrigin_js_2.default.TOP_LEFT;
            }
        }
        else {
            if (yunits !== 'insetPixels') {
                origin = IconOrigin_js_2.default.BOTTOM_RIGHT;
            }
            else {
                origin = IconOrigin_js_2.default.TOP_RIGHT;
            }
        }
        return {
            x: parseFloat(node.getAttribute('x')),
            xunits: ICON_ANCHOR_UNITS_MAP[xunits],
            y: parseFloat(node.getAttribute('y')),
            yunits: ICON_ANCHOR_UNITS_MAP[yunits],
            origin: origin,
        };
    }
    /**
     * @param {Node} node Node.
     * @return {number|undefined} Scale.
     */
    function readScale(node) {
        return xsd_js_3.readDecimal(node);
    }
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const STYLE_MAP_PARSERS = xml_js_6.makeStructureNS(NAMESPACE_URIS, {
        'Pair': pairDataParser,
    });
    /**
     * @this {KML}
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Array<Style>|string|undefined} StyleMap.
     */
    function readStyleMapValue(node, objectStack) {
        return xml_js_6.pushParseAndPop(undefined, STYLE_MAP_PARSERS, node, objectStack, this);
    }
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const ICON_STYLE_PARSERS = xml_js_6.makeStructureNS(NAMESPACE_URIS, {
        'Icon': xml_js_6.makeObjectPropertySetter(readIcon),
        'color': xml_js_6.makeObjectPropertySetter(readColor),
        'heading': xml_js_6.makeObjectPropertySetter(xsd_js_3.readDecimal),
        'hotSpot': xml_js_6.makeObjectPropertySetter(readVec2),
        'scale': xml_js_6.makeObjectPropertySetter(readScale),
    });
    /**
     * @this {KML}
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     */
    function iconStyleParser(node, objectStack) {
        // FIXME refreshMode
        // FIXME refreshInterval
        // FIXME viewRefreshTime
        // FIXME viewBoundScale
        // FIXME viewFormat
        // FIXME httpQuery
        const object = xml_js_6.pushParseAndPop({}, ICON_STYLE_PARSERS, node, objectStack);
        if (!object) {
            return;
        }
        const styleObject = /** @type {Object} */ (objectStack[objectStack.length - 1]);
        const IconObject = 'Icon' in object ? object['Icon'] : {};
        const drawIcon = !('Icon' in object) || Object.keys(IconObject).length > 0;
        let src;
        const href = /** @type {string|undefined} */ (IconObject['href']);
        if (href) {
            src = href;
        }
        else if (drawIcon) {
            src = DEFAULT_IMAGE_STYLE_SRC;
        }
        let anchor, anchorXUnits, anchorYUnits;
        let anchorOrigin = IconOrigin_js_2.default.BOTTOM_LEFT;
        const hotSpot = /** @type {Vec2|undefined} */ (object['hotSpot']);
        if (hotSpot) {
            anchor = [hotSpot.x, hotSpot.y];
            anchorXUnits = hotSpot.xunits;
            anchorYUnits = hotSpot.yunits;
            anchorOrigin = hotSpot.origin;
        }
        else if (src === DEFAULT_IMAGE_STYLE_SRC) {
            anchor = DEFAULT_IMAGE_STYLE_ANCHOR;
            anchorXUnits = DEFAULT_IMAGE_STYLE_ANCHOR_X_UNITS;
            anchorYUnits = DEFAULT_IMAGE_STYLE_ANCHOR_Y_UNITS;
        }
        else if (/^http:\/\/maps\.(?:google|gstatic)\.com\//.test(src)) {
            anchor = [0.5, 0];
            anchorXUnits = IconAnchorUnits_js_3.default.FRACTION;
            anchorYUnits = IconAnchorUnits_js_3.default.FRACTION;
        }
        let offset;
        const x = /** @type {number|undefined} */ (IconObject['x']);
        const y = /** @type {number|undefined} */ (IconObject['y']);
        if (x !== undefined && y !== undefined) {
            offset = [x, y];
        }
        let size;
        const w = /** @type {number|undefined} */ (IconObject['w']);
        const h = /** @type {number|undefined} */ (IconObject['h']);
        if (w !== undefined && h !== undefined) {
            size = [w, h];
        }
        let rotation;
        const heading = /** @type {number} */ (object['heading']);
        if (heading !== undefined) {
            rotation = math_js_25.toRadians(heading);
        }
        let scale = /** @type {number|undefined} */ (object['scale']);
        const color = /** @type {Array<number>|undefined} */ (object['color']);
        if (drawIcon) {
            if (src == DEFAULT_IMAGE_STYLE_SRC) {
                size = DEFAULT_IMAGE_STYLE_SIZE;
                if (scale === undefined) {
                    scale = DEFAULT_IMAGE_SCALE_MULTIPLIER;
                }
            }
            const imageStyle = new Icon_js_2.default({
                anchor: anchor,
                anchorOrigin: anchorOrigin,
                anchorXUnits: anchorXUnits,
                anchorYUnits: anchorYUnits,
                crossOrigin: this.crossOrigin_,
                offset: offset,
                offsetOrigin: IconOrigin_js_2.default.BOTTOM_LEFT,
                rotation: rotation,
                scale: scale,
                size: size,
                src: src,
                color: color,
            });
            styleObject['imageStyle'] = imageStyle;
        }
        else {
            // handle the case when we explicitly want to draw no icon.
            styleObject['imageStyle'] = DEFAULT_NO_IMAGE_STYLE;
        }
    }
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const LABEL_STYLE_PARSERS = xml_js_6.makeStructureNS(NAMESPACE_URIS, {
        'color': xml_js_6.makeObjectPropertySetter(readColor),
        'scale': xml_js_6.makeObjectPropertySetter(readScale),
    });
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     */
    function labelStyleParser(node, objectStack) {
        // FIXME colorMode
        const object = xml_js_6.pushParseAndPop({}, LABEL_STYLE_PARSERS, node, objectStack);
        if (!object) {
            return;
        }
        const styleObject = objectStack[objectStack.length - 1];
        const textStyle = new Text_js_2.default({
            fill: new Fill_js_4.default({
                color: 
                /** @type {import("../color.js").Color} */
                ('color' in object ? object['color'] : DEFAULT_COLOR),
            }),
            scale: /** @type {number|undefined} */ (object['scale']),
        });
        styleObject['textStyle'] = textStyle;
    }
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const LINE_STYLE_PARSERS = xml_js_6.makeStructureNS(NAMESPACE_URIS, {
        'color': xml_js_6.makeObjectPropertySetter(readColor),
        'width': xml_js_6.makeObjectPropertySetter(xsd_js_3.readDecimal),
    });
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     */
    function lineStyleParser(node, objectStack) {
        // FIXME colorMode
        // FIXME gx:outerColor
        // FIXME gx:outerWidth
        // FIXME gx:physicalWidth
        // FIXME gx:labelVisibility
        const object = xml_js_6.pushParseAndPop({}, LINE_STYLE_PARSERS, node, objectStack);
        if (!object) {
            return;
        }
        const styleObject = objectStack[objectStack.length - 1];
        const strokeStyle = new Stroke_js_3.default({
            color: 
            /** @type {import("../color.js").Color} */
            ('color' in object ? object['color'] : DEFAULT_COLOR),
            width: /** @type {number} */ ('width' in object ? object['width'] : 1),
        });
        styleObject['strokeStyle'] = strokeStyle;
    }
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const POLY_STYLE_PARSERS = xml_js_6.makeStructureNS(NAMESPACE_URIS, {
        'color': xml_js_6.makeObjectPropertySetter(readColor),
        'fill': xml_js_6.makeObjectPropertySetter(xsd_js_3.readBoolean),
        'outline': xml_js_6.makeObjectPropertySetter(xsd_js_3.readBoolean),
    });
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     */
    function polyStyleParser(node, objectStack) {
        // FIXME colorMode
        const object = xml_js_6.pushParseAndPop({}, POLY_STYLE_PARSERS, node, objectStack);
        if (!object) {
            return;
        }
        const styleObject = objectStack[objectStack.length - 1];
        const fillStyle = new Fill_js_4.default({
            color: 
            /** @type {import("../color.js").Color} */
            ('color' in object ? object['color'] : DEFAULT_COLOR),
        });
        styleObject['fillStyle'] = fillStyle;
        const fill = /** @type {boolean|undefined} */ (object['fill']);
        if (fill !== undefined) {
            styleObject['fill'] = fill;
        }
        const outline = /** @type {boolean|undefined} */ (object['outline']);
        if (outline !== undefined) {
            styleObject['outline'] = outline;
        }
    }
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const FLAT_LINEAR_RING_PARSERS = xml_js_6.makeStructureNS(NAMESPACE_URIS, {
        'coordinates': xml_js_6.makeReplacer(readFlatCoordinates),
    });
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Array<number>} LinearRing flat coordinates.
     */
    function readFlatLinearRing(node, objectStack) {
        return xml_js_6.pushParseAndPop(null, FLAT_LINEAR_RING_PARSERS, node, objectStack);
    }
    /**
     * @param {Node} node Node.
     * @param {Array<*>} objectStack Object stack.
     */
    function gxCoordParser(node, objectStack) {
        const gxTrackObject = 
        /** @type {GxTrackObject} */
        (objectStack[objectStack.length - 1]);
        const flatCoordinates = gxTrackObject.flatCoordinates;
        const s = xml_js_6.getAllTextContent(node, false);
        const re = /^\s*([+\-]?\d+(?:\.\d*)?(?:e[+\-]?\d*)?)\s+([+\-]?\d+(?:\.\d*)?(?:e[+\-]?\d*)?)\s+([+\-]?\d+(?:\.\d*)?(?:e[+\-]?\d*)?)\s*$/i;
        const m = re.exec(s);
        if (m) {
            const x = parseFloat(m[1]);
            const y = parseFloat(m[2]);
            const z = parseFloat(m[3]);
            flatCoordinates.push(x, y, z, 0);
        }
        else {
            flatCoordinates.push(0, 0, 0, 0);
        }
    }
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const GX_MULTITRACK_GEOMETRY_PARSERS = xml_js_6.makeStructureNS(GX_NAMESPACE_URIS, {
        'Track': xml_js_6.makeArrayPusher(readGxTrack),
    });
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {MultiLineString|undefined} MultiLineString.
     */
    function readGxMultiTrack(node, objectStack) {
        const lineStrings = xml_js_6.pushParseAndPop([], GX_MULTITRACK_GEOMETRY_PARSERS, node, objectStack);
        if (!lineStrings) {
            return undefined;
        }
        return new MultiLineString_js_7.default(lineStrings);
    }
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const GX_TRACK_PARSERS = xml_js_6.makeStructureNS(NAMESPACE_URIS, {
        'when': whenParser,
    }, xml_js_6.makeStructureNS(GX_NAMESPACE_URIS, {
        'coord': gxCoordParser,
    }));
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {LineString|undefined} LineString.
     */
    function readGxTrack(node, objectStack) {
        const gxTrackObject = xml_js_6.pushParseAndPop(
        /** @type {GxTrackObject} */ ({
            flatCoordinates: [],
            whens: [],
        }), GX_TRACK_PARSERS, node, objectStack);
        if (!gxTrackObject) {
            return undefined;
        }
        const flatCoordinates = gxTrackObject.flatCoordinates;
        const whens = gxTrackObject.whens;
        for (let i = 0, ii = Math.min(flatCoordinates.length, whens.length); i < ii; ++i) {
            flatCoordinates[4 * i + 3] = whens[i];
        }
        return new LineString_js_9.default(flatCoordinates, GeometryLayout_js_12.default.XYZM);
    }
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const ICON_PARSERS = xml_js_6.makeStructureNS(NAMESPACE_URIS, {
        'href': xml_js_6.makeObjectPropertySetter(readURI),
    }, xml_js_6.makeStructureNS(GX_NAMESPACE_URIS, {
        'x': xml_js_6.makeObjectPropertySetter(xsd_js_3.readDecimal),
        'y': xml_js_6.makeObjectPropertySetter(xsd_js_3.readDecimal),
        'w': xml_js_6.makeObjectPropertySetter(xsd_js_3.readDecimal),
        'h': xml_js_6.makeObjectPropertySetter(xsd_js_3.readDecimal),
    }));
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Object} Icon object.
     */
    function readIcon(node, objectStack) {
        const iconObject = xml_js_6.pushParseAndPop({}, ICON_PARSERS, node, objectStack);
        if (iconObject) {
            return iconObject;
        }
        else {
            return null;
        }
    }
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const GEOMETRY_FLAT_COORDINATES_PARSERS = xml_js_6.makeStructureNS(NAMESPACE_URIS, {
        'coordinates': xml_js_6.makeReplacer(readFlatCoordinates),
    });
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Array<number>} Flat coordinates.
     */
    function readFlatCoordinatesFromNode(node, objectStack) {
        return xml_js_6.pushParseAndPop(null, GEOMETRY_FLAT_COORDINATES_PARSERS, node, objectStack);
    }
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const EXTRUDE_AND_ALTITUDE_MODE_PARSERS = xml_js_6.makeStructureNS(NAMESPACE_URIS, {
        'extrude': xml_js_6.makeObjectPropertySetter(xsd_js_3.readBoolean),
        'tessellate': xml_js_6.makeObjectPropertySetter(xsd_js_3.readBoolean),
        'altitudeMode': xml_js_6.makeObjectPropertySetter(xsd_js_3.readString),
    });
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {LineString|undefined} LineString.
     */
    function readLineString(node, objectStack) {
        const properties = xml_js_6.pushParseAndPop({}, EXTRUDE_AND_ALTITUDE_MODE_PARSERS, node, objectStack);
        const flatCoordinates = readFlatCoordinatesFromNode(node, objectStack);
        if (flatCoordinates) {
            const lineString = new LineString_js_9.default(flatCoordinates, GeometryLayout_js_12.default.XYZ);
            lineString.setProperties(properties, true);
            return lineString;
        }
        else {
            return undefined;
        }
    }
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Polygon|undefined} Polygon.
     */
    function readLinearRing(node, objectStack) {
        const properties = xml_js_6.pushParseAndPop({}, EXTRUDE_AND_ALTITUDE_MODE_PARSERS, node, objectStack);
        const flatCoordinates = readFlatCoordinatesFromNode(node, objectStack);
        if (flatCoordinates) {
            const polygon = new Polygon_js_14.default(flatCoordinates, GeometryLayout_js_12.default.XYZ, [
                flatCoordinates.length,
            ]);
            polygon.setProperties(properties, true);
            return polygon;
        }
        else {
            return undefined;
        }
    }
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const MULTI_GEOMETRY_PARSERS = xml_js_6.makeStructureNS(NAMESPACE_URIS, {
        'LineString': xml_js_6.makeArrayPusher(readLineString),
        'LinearRing': xml_js_6.makeArrayPusher(readLinearRing),
        'MultiGeometry': xml_js_6.makeArrayPusher(readMultiGeometry),
        'Point': xml_js_6.makeArrayPusher(readPoint),
        'Polygon': xml_js_6.makeArrayPusher(readPolygon),
    });
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {import("../geom/Geometry.js").default} Geometry.
     */
    function readMultiGeometry(node, objectStack) {
        const geometries = xml_js_6.pushParseAndPop([], MULTI_GEOMETRY_PARSERS, node, objectStack);
        if (!geometries) {
            return null;
        }
        if (geometries.length === 0) {
            return new GeometryCollection_js_2.default(geometries);
        }
        let multiGeometry;
        let homogeneous = true;
        const type = geometries[0].getType();
        let geometry;
        for (let i = 1, ii = geometries.length; i < ii; ++i) {
            geometry = geometries[i];
            if (geometry.getType() != type) {
                homogeneous = false;
                break;
            }
        }
        if (homogeneous) {
            let layout;
            let flatCoordinates;
            if (type == GeometryType_js_27.default.POINT) {
                const point = geometries[0];
                layout = point.getLayout();
                flatCoordinates = point.getFlatCoordinates();
                for (let i = 1, ii = geometries.length; i < ii; ++i) {
                    geometry = geometries[i];
                    array_js_29.extend(flatCoordinates, geometry.getFlatCoordinates());
                }
                multiGeometry = new MultiPoint_js_6.default(flatCoordinates, layout);
                setCommonGeometryProperties(multiGeometry, geometries);
            }
            else if (type == GeometryType_js_27.default.LINE_STRING) {
                multiGeometry = new MultiLineString_js_7.default(geometries);
                setCommonGeometryProperties(multiGeometry, geometries);
            }
            else if (type == GeometryType_js_27.default.POLYGON) {
                multiGeometry = new MultiPolygon_js_6.default(geometries);
                setCommonGeometryProperties(multiGeometry, geometries);
            }
            else if (type == GeometryType_js_27.default.GEOMETRY_COLLECTION) {
                multiGeometry = new GeometryCollection_js_2.default(geometries);
            }
            else {
                asserts_js_24.assert(false, 37); // Unknown geometry type found
            }
        }
        else {
            multiGeometry = new GeometryCollection_js_2.default(geometries);
        }
        return /** @type {import("../geom/Geometry.js").default} */ (multiGeometry);
    }
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Point|undefined} Point.
     */
    function readPoint(node, objectStack) {
        const properties = xml_js_6.pushParseAndPop({}, EXTRUDE_AND_ALTITUDE_MODE_PARSERS, node, objectStack);
        const flatCoordinates = readFlatCoordinatesFromNode(node, objectStack);
        if (flatCoordinates) {
            const point = new Point_js_10.default(flatCoordinates, GeometryLayout_js_12.default.XYZ);
            point.setProperties(properties, true);
            return point;
        }
        else {
            return undefined;
        }
    }
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const FLAT_LINEAR_RINGS_PARSERS = xml_js_6.makeStructureNS(NAMESPACE_URIS, {
        'innerBoundaryIs': innerBoundaryIsParser,
        'outerBoundaryIs': outerBoundaryIsParser,
    });
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Polygon|undefined} Polygon.
     */
    function readPolygon(node, objectStack) {
        const properties = xml_js_6.pushParseAndPop(
        /** @type {Object<string,*>} */ ({}), EXTRUDE_AND_ALTITUDE_MODE_PARSERS, node, objectStack);
        const flatLinearRings = xml_js_6.pushParseAndPop([null], FLAT_LINEAR_RINGS_PARSERS, node, objectStack);
        if (flatLinearRings && flatLinearRings[0]) {
            const flatCoordinates = flatLinearRings[0];
            const ends = [flatCoordinates.length];
            for (let i = 1, ii = flatLinearRings.length; i < ii; ++i) {
                array_js_29.extend(flatCoordinates, flatLinearRings[i]);
                ends.push(flatCoordinates.length);
            }
            const polygon = new Polygon_js_14.default(flatCoordinates, GeometryLayout_js_12.default.XYZ, ends);
            polygon.setProperties(properties, true);
            return polygon;
        }
        else {
            return undefined;
        }
    }
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const STYLE_PARSERS = xml_js_6.makeStructureNS(NAMESPACE_URIS, {
        'IconStyle': iconStyleParser,
        'LabelStyle': labelStyleParser,
        'LineStyle': lineStyleParser,
        'PolyStyle': polyStyleParser,
    });
    /**
     * @this {KML}
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Array<Style>} Style.
     */
    function readStyle(node, objectStack) {
        const styleObject = xml_js_6.pushParseAndPop({}, STYLE_PARSERS, node, objectStack, this);
        if (!styleObject) {
            return null;
        }
        let fillStyle = 
        /** @type {Fill} */
        ('fillStyle' in styleObject
            ? styleObject['fillStyle']
            : DEFAULT_FILL_STYLE);
        const fill = /** @type {boolean|undefined} */ (styleObject['fill']);
        if (fill !== undefined && !fill) {
            fillStyle = null;
        }
        let imageStyle;
        if ('imageStyle' in styleObject) {
            if (styleObject['imageStyle'] != DEFAULT_NO_IMAGE_STYLE) {
                imageStyle = styleObject['imageStyle'];
            }
        }
        else {
            imageStyle = DEFAULT_IMAGE_STYLE;
        }
        const textStyle = 
        /** @type {Text} */
        ('textStyle' in styleObject
            ? styleObject['textStyle']
            : DEFAULT_TEXT_STYLE);
        const strokeStyle = 
        /** @type {Stroke} */
        ('strokeStyle' in styleObject
            ? styleObject['strokeStyle']
            : DEFAULT_STROKE_STYLE);
        const outline = /** @type {boolean|undefined} */ (styleObject['outline']);
        if (outline !== undefined && !outline) {
            // if the polystyle specifies no outline two styles are needed,
            // one for non-polygon geometries where linestrings require a stroke
            // and one for polygons where there should be no stroke
            return [
                new Style_js_7.default({
                    geometry: function (feature) {
                        const geometry = feature.getGeometry();
                        const type = geometry.getType();
                        if (type === GeometryType_js_27.default.GEOMETRY_COLLECTION) {
                            return new GeometryCollection_js_2.default(geometry
                                .getGeometriesArrayRecursive()
                                .filter(function (geometry) {
                                const type = geometry.getType();
                                return (type !== GeometryType_js_27.default.POLYGON &&
                                    type !== GeometryType_js_27.default.MULTI_POLYGON);
                            }));
                        }
                        else if (type !== GeometryType_js_27.default.POLYGON &&
                            type !== GeometryType_js_27.default.MULTI_POLYGON) {
                            return geometry;
                        }
                    },
                    fill: fillStyle,
                    image: imageStyle,
                    stroke: strokeStyle,
                    text: textStyle,
                    zIndex: undefined,
                }),
                new Style_js_7.default({
                    geometry: function (feature) {
                        const geometry = feature.getGeometry();
                        const type = geometry.getType();
                        if (type === GeometryType_js_27.default.GEOMETRY_COLLECTION) {
                            return new GeometryCollection_js_2.default(geometry
                                .getGeometriesArrayRecursive()
                                .filter(function (geometry) {
                                const type = geometry.getType();
                                return (type === GeometryType_js_27.default.POLYGON ||
                                    type === GeometryType_js_27.default.MULTI_POLYGON);
                            }));
                        }
                        else if (type === GeometryType_js_27.default.POLYGON ||
                            type === GeometryType_js_27.default.MULTI_POLYGON) {
                            return geometry;
                        }
                    },
                    fill: fillStyle,
                    stroke: null,
                    zIndex: undefined,
                }),
            ];
        }
        return [
            new Style_js_7.default({
                fill: fillStyle,
                image: imageStyle,
                stroke: strokeStyle,
                text: textStyle,
                zIndex: undefined,
            }),
        ];
    }
    /**
     * Reads an array of geometries and creates arrays for common geometry
     * properties. Then sets them to the multi geometry.
     * @param {MultiPoint|MultiLineString|MultiPolygon} multiGeometry A multi-geometry.
     * @param {Array<import("../geom/Geometry.js").default>} geometries List of geometries.
     */
    function setCommonGeometryProperties(multiGeometry, geometries) {
        const ii = geometries.length;
        const extrudes = new Array(geometries.length);
        const tessellates = new Array(geometries.length);
        const altitudeModes = new Array(geometries.length);
        let hasExtrude, hasTessellate, hasAltitudeMode;
        hasExtrude = false;
        hasTessellate = false;
        hasAltitudeMode = false;
        for (let i = 0; i < ii; ++i) {
            const geometry = geometries[i];
            extrudes[i] = geometry.get('extrude');
            tessellates[i] = geometry.get('tessellate');
            altitudeModes[i] = geometry.get('altitudeMode');
            hasExtrude = hasExtrude || extrudes[i] !== undefined;
            hasTessellate = hasTessellate || tessellates[i] !== undefined;
            hasAltitudeMode = hasAltitudeMode || altitudeModes[i];
        }
        if (hasExtrude) {
            multiGeometry.set('extrude', extrudes);
        }
        if (hasTessellate) {
            multiGeometry.set('tessellate', tessellates);
        }
        if (hasAltitudeMode) {
            multiGeometry.set('altitudeMode', altitudeModes);
        }
    }
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const DATA_PARSERS = xml_js_6.makeStructureNS(NAMESPACE_URIS, {
        'displayName': xml_js_6.makeObjectPropertySetter(xsd_js_3.readString),
        'value': xml_js_6.makeObjectPropertySetter(xsd_js_3.readString),
    });
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     */
    function dataParser(node, objectStack) {
        const name = node.getAttribute('name');
        xml_js_6.parseNode(DATA_PARSERS, node, objectStack);
        const featureObject = /** @type {Object} */ (objectStack[objectStack.length - 1]);
        if (name && featureObject.displayName) {
            featureObject[name] = {
                value: featureObject.value,
                displayName: featureObject.displayName,
                toString: function () {
                    return featureObject.value;
                },
            };
        }
        else if (name !== null) {
            featureObject[name] = featureObject.value;
        }
        else if (featureObject.displayName !== null) {
            featureObject[featureObject.displayName] = featureObject.value;
        }
        delete featureObject['value'];
    }
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const EXTENDED_DATA_PARSERS = xml_js_6.makeStructureNS(NAMESPACE_URIS, {
        'Data': dataParser,
        'SchemaData': schemaDataParser,
    });
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     */
    function extendedDataParser(node, objectStack) {
        xml_js_6.parseNode(EXTENDED_DATA_PARSERS, node, objectStack);
    }
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     */
    function regionParser(node, objectStack) {
        xml_js_6.parseNode(REGION_PARSERS, node, objectStack);
    }
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const PAIR_PARSERS = xml_js_6.makeStructureNS(NAMESPACE_URIS, {
        'Style': xml_js_6.makeObjectPropertySetter(readStyle),
        'key': xml_js_6.makeObjectPropertySetter(xsd_js_3.readString),
        'styleUrl': xml_js_6.makeObjectPropertySetter(readURI),
    });
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     */
    function pairDataParser(node, objectStack) {
        const pairObject = xml_js_6.pushParseAndPop({}, PAIR_PARSERS, node, objectStack, this);
        if (!pairObject) {
            return;
        }
        const key = /** @type {string|undefined} */ (pairObject['key']);
        if (key && key == 'normal') {
            const styleUrl = /** @type {string|undefined} */ (pairObject['styleUrl']);
            if (styleUrl) {
                objectStack[objectStack.length - 1] = styleUrl;
            }
            const style = /** @type {Style} */ (pairObject['Style']);
            if (style) {
                objectStack[objectStack.length - 1] = style;
            }
        }
    }
    /**
     * @this {KML}
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     */
    function placemarkStyleMapParser(node, objectStack) {
        const styleMapValue = readStyleMapValue.call(this, node, objectStack);
        if (!styleMapValue) {
            return;
        }
        const placemarkObject = objectStack[objectStack.length - 1];
        if (Array.isArray(styleMapValue)) {
            placemarkObject['Style'] = styleMapValue;
        }
        else if (typeof styleMapValue === 'string') {
            placemarkObject['styleUrl'] = styleMapValue;
        }
        else {
            asserts_js_24.assert(false, 38); // `styleMapValue` has an unknown type
        }
    }
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const SCHEMA_DATA_PARSERS = xml_js_6.makeStructureNS(NAMESPACE_URIS, {
        'SimpleData': simpleDataParser,
    });
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     */
    function schemaDataParser(node, objectStack) {
        xml_js_6.parseNode(SCHEMA_DATA_PARSERS, node, objectStack);
    }
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     */
    function simpleDataParser(node, objectStack) {
        const name = node.getAttribute('name');
        if (name !== null) {
            const data = xsd_js_3.readString(node);
            const featureObject = /** @type {Object} */ (objectStack[objectStack.length - 1]);
            featureObject[name] = data;
        }
    }
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const LAT_LON_ALT_BOX_PARSERS = xml_js_6.makeStructureNS(NAMESPACE_URIS, {
        'altitudeMode': xml_js_6.makeObjectPropertySetter(xsd_js_3.readString),
        'minAltitude': xml_js_6.makeObjectPropertySetter(xsd_js_3.readDecimal),
        'maxAltitude': xml_js_6.makeObjectPropertySetter(xsd_js_3.readDecimal),
        'north': xml_js_6.makeObjectPropertySetter(xsd_js_3.readDecimal),
        'south': xml_js_6.makeObjectPropertySetter(xsd_js_3.readDecimal),
        'east': xml_js_6.makeObjectPropertySetter(xsd_js_3.readDecimal),
        'west': xml_js_6.makeObjectPropertySetter(xsd_js_3.readDecimal),
    });
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     */
    function latLonAltBoxParser(node, objectStack) {
        const object = xml_js_6.pushParseAndPop({}, LAT_LON_ALT_BOX_PARSERS, node, objectStack);
        if (!object) {
            return;
        }
        const regionObject = /** @type {Object} */ (objectStack[objectStack.length - 1]);
        const extent = [
            parseFloat(object['west']),
            parseFloat(object['south']),
            parseFloat(object['east']),
            parseFloat(object['north']),
        ];
        regionObject['extent'] = extent;
        regionObject['altitudeMode'] = object['altitudeMode'];
        regionObject['minAltitude'] = parseFloat(object['minAltitude']);
        regionObject['maxAltitude'] = parseFloat(object['maxAltitude']);
    }
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const LOD_PARSERS = xml_js_6.makeStructureNS(NAMESPACE_URIS, {
        'minLodPixels': xml_js_6.makeObjectPropertySetter(xsd_js_3.readDecimal),
        'maxLodPixels': xml_js_6.makeObjectPropertySetter(xsd_js_3.readDecimal),
        'minFadeExtent': xml_js_6.makeObjectPropertySetter(xsd_js_3.readDecimal),
        'maxFadeExtent': xml_js_6.makeObjectPropertySetter(xsd_js_3.readDecimal),
    });
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     */
    function lodParser(node, objectStack) {
        const object = xml_js_6.pushParseAndPop({}, LOD_PARSERS, node, objectStack);
        if (!object) {
            return;
        }
        const lodObject = /** @type {Object} */ (objectStack[objectStack.length - 1]);
        lodObject['minLodPixels'] = parseFloat(object['minLodPixels']);
        lodObject['maxLodPixels'] = parseFloat(object['maxLodPixels']);
        lodObject['minFadeExtent'] = parseFloat(object['minFadeExtent']);
        lodObject['maxFadeExtent'] = parseFloat(object['maxFadeExtent']);
    }
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const INNER_BOUNDARY_IS_PARSERS = xml_js_6.makeStructureNS(NAMESPACE_URIS, {
        'LinearRing': xml_js_6.makeReplacer(readFlatLinearRing),
    });
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     */
    function innerBoundaryIsParser(node, objectStack) {
        /** @type {Array<number>|undefined} */
        const flatLinearRing = xml_js_6.pushParseAndPop(undefined, INNER_BOUNDARY_IS_PARSERS, node, objectStack);
        if (flatLinearRing) {
            const flatLinearRings = 
            /** @type {Array<Array<number>>} */
            (objectStack[objectStack.length - 1]);
            flatLinearRings.push(flatLinearRing);
        }
    }
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const OUTER_BOUNDARY_IS_PARSERS = xml_js_6.makeStructureNS(NAMESPACE_URIS, {
        'LinearRing': xml_js_6.makeReplacer(readFlatLinearRing),
    });
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     */
    function outerBoundaryIsParser(node, objectStack) {
        /** @type {Array<number>|undefined} */
        const flatLinearRing = xml_js_6.pushParseAndPop(undefined, OUTER_BOUNDARY_IS_PARSERS, node, objectStack);
        if (flatLinearRing) {
            const flatLinearRings = 
            /** @type {Array<Array<number>>} */
            (objectStack[objectStack.length - 1]);
            flatLinearRings[0] = flatLinearRing;
        }
    }
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     */
    function linkParser(node, objectStack) {
        xml_js_6.parseNode(LINK_PARSERS, node, objectStack);
    }
    /**
     * @param {Node} node Node.
     * @param {Array<*>} objectStack Object stack.
     */
    function whenParser(node, objectStack) {
        const gxTrackObject = 
        /** @type {GxTrackObject} */
        (objectStack[objectStack.length - 1]);
        const whens = gxTrackObject.whens;
        const s = xml_js_6.getAllTextContent(node, false);
        const when = Date.parse(s);
        whens.push(isNaN(when) ? 0 : when);
    }
    /**
     * @param {Node} node Node to append a TextNode with the color to.
     * @param {import("../color.js").Color|string} color Color.
     */
    function writeColorTextNode(node, color) {
        const rgba = color_js_5.asArray(color);
        const opacity = rgba.length == 4 ? rgba[3] : 1;
        /** @type {Array<string|number>} */
        const abgr = [opacity * 255, rgba[2], rgba[1], rgba[0]];
        for (let i = 0; i < 4; ++i) {
            const hex = Math.floor(/** @type {number} */ (abgr[i])).toString(16);
            abgr[i] = hex.length == 1 ? '0' + hex : hex;
        }
        xsd_js_3.writeStringTextNode(node, abgr.join(''));
    }
    /**
     * @param {Node} node Node to append a TextNode with the coordinates to.
     * @param {Array<number>} coordinates Coordinates.
     * @param {Array<*>} objectStack Object stack.
     */
    function writeCoordinatesTextNode(node, coordinates, objectStack) {
        const context = objectStack[objectStack.length - 1];
        const layout = context['layout'];
        const stride = context['stride'];
        let dimension;
        if (layout == GeometryLayout_js_12.default.XY || layout == GeometryLayout_js_12.default.XYM) {
            dimension = 2;
        }
        else if (layout == GeometryLayout_js_12.default.XYZ || layout == GeometryLayout_js_12.default.XYZM) {
            dimension = 3;
        }
        else {
            asserts_js_24.assert(false, 34); // Invalid geometry layout
        }
        const ii = coordinates.length;
        let text = '';
        if (ii > 0) {
            text += coordinates[0];
            for (let d = 1; d < dimension; ++d) {
                text += ',' + coordinates[d];
            }
            for (let i = stride; i < ii; i += stride) {
                text += ' ' + coordinates[i];
                for (let d = 1; d < dimension; ++d) {
                    text += ',' + coordinates[i + d];
                }
            }
        }
        xsd_js_3.writeStringTextNode(node, text);
    }
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
     */
    // @ts-ignore
    const EXTENDEDDATA_NODE_SERIALIZERS = xml_js_6.makeStructureNS(NAMESPACE_URIS, {
        'Data': xml_js_6.makeChildAppender(writeDataNode),
        'value': xml_js_6.makeChildAppender(writeDataNodeValue),
        'displayName': xml_js_6.makeChildAppender(writeDataNodeName),
    });
    /**
     * @param {Element} node Node.
     * @param {{name: *, value: *}} pair Name value pair.
     * @param {Array<*>} objectStack Object stack.
     */
    function writeDataNode(node, pair, objectStack) {
        node.setAttribute('name', pair.name);
        const /** @type {import("../xml.js").NodeStackItem} */ context = { node: node };
        const value = pair.value;
        if (typeof value == 'object') {
            if (value !== null && value.displayName) {
                xml_js_6.pushSerializeAndPop(context, EXTENDEDDATA_NODE_SERIALIZERS, xml_js_6.OBJECT_PROPERTY_NODE_FACTORY, [value.displayName], objectStack, ['displayName']);
            }
            if (value !== null && value.value) {
                xml_js_6.pushSerializeAndPop(context, EXTENDEDDATA_NODE_SERIALIZERS, xml_js_6.OBJECT_PROPERTY_NODE_FACTORY, [value.value], objectStack, ['value']);
            }
        }
        else {
            xml_js_6.pushSerializeAndPop(context, EXTENDEDDATA_NODE_SERIALIZERS, xml_js_6.OBJECT_PROPERTY_NODE_FACTORY, [value], objectStack, ['value']);
        }
    }
    /**
     * @param {Node} node Node to append a TextNode with the name to.
     * @param {string} name DisplayName.
     */
    function writeDataNodeName(node, name) {
        xsd_js_3.writeCDATASection(node, name);
    }
    /**
     * @param {Node} node Node to append a CDATA Section with the value to.
     * @param {string} value Value.
     */
    function writeDataNodeValue(node, value) {
        xsd_js_3.writeStringTextNode(node, value);
    }
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
     */
    // @ts-ignore
    const DOCUMENT_SERIALIZERS = xml_js_6.makeStructureNS(NAMESPACE_URIS, {
        'Placemark': xml_js_6.makeChildAppender(writePlacemark),
    });
    /**
     * @const
     * @param {*} value Value.
     * @param {Array<*>} objectStack Object stack.
     * @param {string=} opt_nodeName Node name.
     * @return {Node|undefined} Node.
     */
    const DOCUMENT_NODE_FACTORY = function (value, objectStack, opt_nodeName) {
        const parentNode = objectStack[objectStack.length - 1].node;
        return xml_js_6.createElementNS(parentNode.namespaceURI, 'Placemark');
    };
    /**
     * @param {Node} node Node.
     * @param {Array<Feature>} features Features.
     * @param {Array<*>} objectStack Object stack.
     * @this {KML}
     */
    function writeDocument(node, features, objectStack) {
        const /** @type {import("../xml.js").NodeStackItem} */ context = { node: node };
        xml_js_6.pushSerializeAndPop(context, DOCUMENT_SERIALIZERS, DOCUMENT_NODE_FACTORY, features, objectStack, undefined, this);
    }
    /**
     * A factory for creating Data nodes.
     * @const
     * @type {function(*, Array<*>): (Node|undefined)}
     */
    const DATA_NODE_FACTORY = xml_js_6.makeSimpleNodeFactory('Data');
    /**
     * @param {Node} node Node.
     * @param {{names: Array<string>, values: (Array<*>)}} namesAndValues Names and values.
     * @param {Array<*>} objectStack Object stack.
     */
    function writeExtendedData(node, namesAndValues, objectStack) {
        const /** @type {import("../xml.js").NodeStackItem} */ context = { node: node };
        const names = namesAndValues.names;
        const values = namesAndValues.values;
        const length = names.length;
        for (let i = 0; i < length; i++) {
            xml_js_6.pushSerializeAndPop(context, EXTENDEDDATA_NODE_SERIALIZERS, DATA_NODE_FACTORY, [{ name: names[i], value: values[i] }], objectStack);
        }
    }
    /**
     * @const
     * @type {Object<string, Array<string>>}
     */
    // @ts-ignore
    const ICON_SEQUENCE = xml_js_6.makeStructureNS(NAMESPACE_URIS, ['href'], xml_js_6.makeStructureNS(GX_NAMESPACE_URIS, ['x', 'y', 'w', 'h']));
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
     */
    // @ts-ignore
    const ICON_SERIALIZERS = xml_js_6.makeStructureNS(NAMESPACE_URIS, {
        'href': xml_js_6.makeChildAppender(xsd_js_3.writeStringTextNode),
    }, xml_js_6.makeStructureNS(GX_NAMESPACE_URIS, {
        'x': xml_js_6.makeChildAppender(xsd_js_3.writeDecimalTextNode),
        'y': xml_js_6.makeChildAppender(xsd_js_3.writeDecimalTextNode),
        'w': xml_js_6.makeChildAppender(xsd_js_3.writeDecimalTextNode),
        'h': xml_js_6.makeChildAppender(xsd_js_3.writeDecimalTextNode),
    }));
    /**
     * @const
     * @param {*} value Value.
     * @param {Array<*>} objectStack Object stack.
     * @param {string=} opt_nodeName Node name.
     * @return {Node|undefined} Node.
     */
    const GX_NODE_FACTORY = function (value, objectStack, opt_nodeName) {
        return xml_js_6.createElementNS(GX_NAMESPACE_URIS[0], 'gx:' + opt_nodeName);
    };
    /**
     * @param {Node} node Node.
     * @param {Object} icon Icon object.
     * @param {Array<*>} objectStack Object stack.
     */
    function writeIcon(node, icon, objectStack) {
        const /** @type {import("../xml.js").NodeStackItem} */ context = { node: node };
        const parentNode = objectStack[objectStack.length - 1].node;
        let orderedKeys = ICON_SEQUENCE[parentNode.namespaceURI];
        let values = xml_js_6.makeSequence(icon, orderedKeys);
        xml_js_6.pushSerializeAndPop(context, ICON_SERIALIZERS, xml_js_6.OBJECT_PROPERTY_NODE_FACTORY, values, objectStack, orderedKeys);
        orderedKeys = ICON_SEQUENCE[GX_NAMESPACE_URIS[0]];
        values = xml_js_6.makeSequence(icon, orderedKeys);
        xml_js_6.pushSerializeAndPop(context, ICON_SERIALIZERS, GX_NODE_FACTORY, values, objectStack, orderedKeys);
    }
    /**
     * @const
     * @type {Object<string, Array<string>>}
     */
    // @ts-ignore
    const ICON_STYLE_SEQUENCE = xml_js_6.makeStructureNS(NAMESPACE_URIS, [
        'scale',
        'heading',
        'Icon',
        'color',
        'hotSpot',
    ]);
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
     */
    // @ts-ignore
    const ICON_STYLE_SERIALIZERS = xml_js_6.makeStructureNS(NAMESPACE_URIS, {
        'Icon': xml_js_6.makeChildAppender(writeIcon),
        'color': xml_js_6.makeChildAppender(writeColorTextNode),
        'heading': xml_js_6.makeChildAppender(xsd_js_3.writeDecimalTextNode),
        'hotSpot': xml_js_6.makeChildAppender(writeVec2),
        'scale': xml_js_6.makeChildAppender(writeScaleTextNode),
    });
    /**
     * @param {Node} node Node.
     * @param {import("../style/Icon.js").default} style Icon style.
     * @param {Array<*>} objectStack Object stack.
     */
    function writeIconStyle(node, style, objectStack) {
        const /** @type {import("../xml.js").NodeStackItem} */ context = { node: node };
        const /** @type {Object<string, any>} */ properties = {};
        const src = style.getSrc();
        const size = style.getSize();
        const iconImageSize = style.getImageSize();
        const iconProperties = {
            'href': src,
        };
        if (size) {
            iconProperties['w'] = size[0];
            iconProperties['h'] = size[1];
            const anchor = style.getAnchor(); // top-left
            const origin = style.getOrigin(); // top-left
            if (origin && iconImageSize && origin[0] !== 0 && origin[1] !== size[1]) {
                iconProperties['x'] = origin[0];
                iconProperties['y'] = iconImageSize[1] - (origin[1] + size[1]);
            }
            if (anchor && (anchor[0] !== size[0] / 2 || anchor[1] !== size[1] / 2)) {
                const /** @type {Vec2} */ hotSpot = {
                    x: anchor[0],
                    xunits: IconAnchorUnits_js_3.default.PIXELS,
                    y: size[1] - anchor[1],
                    yunits: IconAnchorUnits_js_3.default.PIXELS,
                };
                properties['hotSpot'] = hotSpot;
            }
        }
        properties['Icon'] = iconProperties;
        const scale = style.getScale();
        if (scale !== 1) {
            properties['scale'] = scale;
        }
        const rotation = style.getRotation();
        if (rotation !== 0) {
            properties['heading'] = rotation; // 0-360
        }
        const color = style.getColor();
        if (color) {
            properties['color'] = color;
        }
        const parentNode = objectStack[objectStack.length - 1].node;
        const orderedKeys = ICON_STYLE_SEQUENCE[parentNode.namespaceURI];
        const values = xml_js_6.makeSequence(properties, orderedKeys);
        xml_js_6.pushSerializeAndPop(context, ICON_STYLE_SERIALIZERS, xml_js_6.OBJECT_PROPERTY_NODE_FACTORY, values, objectStack, orderedKeys);
    }
    /**
     * @const
     * @type {Object<string, Array<string>>}
     */
    // @ts-ignore
    const LABEL_STYLE_SEQUENCE = xml_js_6.makeStructureNS(NAMESPACE_URIS, [
        'color',
        'scale',
    ]);
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
     */
    // @ts-ignore
    const LABEL_STYLE_SERIALIZERS = xml_js_6.makeStructureNS(NAMESPACE_URIS, {
        'color': xml_js_6.makeChildAppender(writeColorTextNode),
        'scale': xml_js_6.makeChildAppender(writeScaleTextNode),
    });
    /**
     * @param {Node} node Node.
     * @param {Text} style style.
     * @param {Array<*>} objectStack Object stack.
     */
    function writeLabelStyle(node, style, objectStack) {
        const /** @type {import("../xml.js").NodeStackItem} */ context = { node: node };
        const properties = {};
        const fill = style.getFill();
        if (fill) {
            properties['color'] = fill.getColor();
        }
        const scale = style.getScale();
        if (scale && scale !== 1) {
            properties['scale'] = scale;
        }
        const parentNode = objectStack[objectStack.length - 1].node;
        const orderedKeys = LABEL_STYLE_SEQUENCE[parentNode.namespaceURI];
        const values = xml_js_6.makeSequence(properties, orderedKeys);
        xml_js_6.pushSerializeAndPop(context, LABEL_STYLE_SERIALIZERS, xml_js_6.OBJECT_PROPERTY_NODE_FACTORY, values, objectStack, orderedKeys);
    }
    /**
     * @const
     * @type {Object<string, Array<string>>}
     */
    // @ts-ignore
    const LINE_STYLE_SEQUENCE = xml_js_6.makeStructureNS(NAMESPACE_URIS, ['color', 'width']);
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
     */
    // @ts-ignore
    const LINE_STYLE_SERIALIZERS = xml_js_6.makeStructureNS(NAMESPACE_URIS, {
        'color': xml_js_6.makeChildAppender(writeColorTextNode),
        'width': xml_js_6.makeChildAppender(xsd_js_3.writeDecimalTextNode),
    });
    /**
     * @param {Node} node Node.
     * @param {Stroke} style style.
     * @param {Array<*>} objectStack Object stack.
     */
    function writeLineStyle(node, style, objectStack) {
        const /** @type {import("../xml.js").NodeStackItem} */ context = { node: node };
        const properties = {
            'color': style.getColor(),
            'width': Number(style.getWidth()) || 1,
        };
        const parentNode = objectStack[objectStack.length - 1].node;
        const orderedKeys = LINE_STYLE_SEQUENCE[parentNode.namespaceURI];
        const values = xml_js_6.makeSequence(properties, orderedKeys);
        xml_js_6.pushSerializeAndPop(context, LINE_STYLE_SERIALIZERS, xml_js_6.OBJECT_PROPERTY_NODE_FACTORY, values, objectStack, orderedKeys);
    }
    /**
     * @const
     * @type {Object<string, string>}
     */
    const GEOMETRY_TYPE_TO_NODENAME = {
        'Point': 'Point',
        'LineString': 'LineString',
        'LinearRing': 'LinearRing',
        'Polygon': 'Polygon',
        'MultiPoint': 'MultiGeometry',
        'MultiLineString': 'MultiGeometry',
        'MultiPolygon': 'MultiGeometry',
        'GeometryCollection': 'MultiGeometry',
    };
    /**
     * @const
     * @param {*} value Value.
     * @param {Array<*>} objectStack Object stack.
     * @param {string=} opt_nodeName Node name.
     * @return {Node|undefined} Node.
     */
    const GEOMETRY_NODE_FACTORY = function (value, objectStack, opt_nodeName) {
        if (value) {
            const parentNode = objectStack[objectStack.length - 1].node;
            return xml_js_6.createElementNS(parentNode.namespaceURI, GEOMETRY_TYPE_TO_NODENAME[
            /** @type {import("../geom/Geometry.js").default} */ (value).getType()]);
        }
    };
    /**
     * A factory for creating Point nodes.
     * @const
     * @type {function(*, Array<*>, string=): (Node|undefined)}
     */
    const POINT_NODE_FACTORY = xml_js_6.makeSimpleNodeFactory('Point');
    /**
     * A factory for creating LineString nodes.
     * @const
     * @type {function(*, Array<*>, string=): (Node|undefined)}
     */
    const LINE_STRING_NODE_FACTORY = xml_js_6.makeSimpleNodeFactory('LineString');
    /**
     * A factory for creating LinearRing nodes.
     * @const
     * @type {function(*, Array<*>, string=): (Node|undefined)}
     */
    const LINEAR_RING_NODE_FACTORY = xml_js_6.makeSimpleNodeFactory('LinearRing');
    /**
     * A factory for creating Polygon nodes.
     * @const
     * @type {function(*, Array<*>, string=): (Node|undefined)}
     */
    const POLYGON_NODE_FACTORY = xml_js_6.makeSimpleNodeFactory('Polygon');
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
     */
    // @ts-ignore
    const MULTI_GEOMETRY_SERIALIZERS = xml_js_6.makeStructureNS(NAMESPACE_URIS, {
        'LineString': xml_js_6.makeChildAppender(writePrimitiveGeometry),
        'Point': xml_js_6.makeChildAppender(writePrimitiveGeometry),
        'Polygon': xml_js_6.makeChildAppender(writePolygon),
        'GeometryCollection': xml_js_6.makeChildAppender(writeMultiGeometry),
    });
    /**
     * @param {Node} node Node.
     * @param {import("../geom/Geometry.js").default} geometry Geometry.
     * @param {Array<*>} objectStack Object stack.
     */
    function writeMultiGeometry(node, geometry, objectStack) {
        /** @type {import("../xml.js").NodeStackItem} */
        const context = { node: node };
        const type = geometry.getType();
        /** @type {Array<import("../geom/Geometry.js").default>} */
        let geometries = [];
        /** @type {function(*, Array<*>, string=): (Node|undefined)} */
        let factory;
        if (type === GeometryType_js_27.default.GEOMETRY_COLLECTION) {
            /** @type {GeometryCollection} */ (geometry)
                .getGeometriesArrayRecursive()
                .forEach(function (geometry) {
                const type = geometry.getType();
                if (type === GeometryType_js_27.default.MULTI_POINT) {
                    geometries = geometries.concat(
                    /** @type {MultiPoint} */ (geometry).getPoints());
                }
                else if (type === GeometryType_js_27.default.MULTI_LINE_STRING) {
                    geometries = geometries.concat(
                    /** @type {MultiLineString} */ (geometry).getLineStrings());
                }
                else if (type === GeometryType_js_27.default.MULTI_POLYGON) {
                    geometries = geometries.concat(
                    /** @type {MultiPolygon} */ (geometry).getPolygons());
                }
                else if (type === GeometryType_js_27.default.POINT ||
                    type === GeometryType_js_27.default.LINE_STRING ||
                    type === GeometryType_js_27.default.POLYGON) {
                    geometries.push(geometry);
                }
                else {
                    asserts_js_24.assert(false, 39); // Unknown geometry type
                }
            });
            factory = GEOMETRY_NODE_FACTORY;
        }
        else if (type === GeometryType_js_27.default.MULTI_POINT) {
            geometries = /** @type {MultiPoint} */ (geometry).getPoints();
            factory = POINT_NODE_FACTORY;
        }
        else if (type === GeometryType_js_27.default.MULTI_LINE_STRING) {
            geometries = /** @type {MultiLineString} */ (geometry).getLineStrings();
            factory = LINE_STRING_NODE_FACTORY;
        }
        else if (type === GeometryType_js_27.default.MULTI_POLYGON) {
            geometries = /** @type {MultiPolygon} */ (geometry).getPolygons();
            factory = POLYGON_NODE_FACTORY;
        }
        else {
            asserts_js_24.assert(false, 39); // Unknown geometry type
        }
        xml_js_6.pushSerializeAndPop(context, MULTI_GEOMETRY_SERIALIZERS, factory, geometries, objectStack);
    }
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
     */
    // @ts-ignore
    const BOUNDARY_IS_SERIALIZERS = xml_js_6.makeStructureNS(NAMESPACE_URIS, {
        'LinearRing': xml_js_6.makeChildAppender(writePrimitiveGeometry),
    });
    /**
     * @param {Node} node Node.
     * @param {import("../geom/LinearRing.js").default} linearRing Linear ring.
     * @param {Array<*>} objectStack Object stack.
     */
    function writeBoundaryIs(node, linearRing, objectStack) {
        const /** @type {import("../xml.js").NodeStackItem} */ context = { node: node };
        xml_js_6.pushSerializeAndPop(context, BOUNDARY_IS_SERIALIZERS, LINEAR_RING_NODE_FACTORY, [linearRing], objectStack);
    }
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
     */
    // @ts-ignore
    const PLACEMARK_SERIALIZERS = xml_js_6.makeStructureNS(NAMESPACE_URIS, {
        'ExtendedData': xml_js_6.makeChildAppender(writeExtendedData),
        'MultiGeometry': xml_js_6.makeChildAppender(writeMultiGeometry),
        'LineString': xml_js_6.makeChildAppender(writePrimitiveGeometry),
        'LinearRing': xml_js_6.makeChildAppender(writePrimitiveGeometry),
        'Point': xml_js_6.makeChildAppender(writePrimitiveGeometry),
        'Polygon': xml_js_6.makeChildAppender(writePolygon),
        'Style': xml_js_6.makeChildAppender(writeStyle),
        'address': xml_js_6.makeChildAppender(xsd_js_3.writeStringTextNode),
        'description': xml_js_6.makeChildAppender(xsd_js_3.writeStringTextNode),
        'name': xml_js_6.makeChildAppender(xsd_js_3.writeStringTextNode),
        'open': xml_js_6.makeChildAppender(xsd_js_3.writeBooleanTextNode),
        'phoneNumber': xml_js_6.makeChildAppender(xsd_js_3.writeStringTextNode),
        'styleUrl': xml_js_6.makeChildAppender(xsd_js_3.writeStringTextNode),
        'visibility': xml_js_6.makeChildAppender(xsd_js_3.writeBooleanTextNode),
    });
    /**
     * @const
     * @type {Object<string, Array<string>>}
     */
    // @ts-ignore
    const PLACEMARK_SEQUENCE = xml_js_6.makeStructureNS(NAMESPACE_URIS, [
        'name',
        'open',
        'visibility',
        'address',
        'phoneNumber',
        'description',
        'styleUrl',
        'Style',
    ]);
    /**
     * A factory for creating ExtendedData nodes.
     * @const
     * @type {function(*, Array<*>): (Node|undefined)}
     */
    const EXTENDEDDATA_NODE_FACTORY = xml_js_6.makeSimpleNodeFactory('ExtendedData');
    /**
     * FIXME currently we do serialize arbitrary/custom feature properties
     * (ExtendedData).
     * @param {Element} node Node.
     * @param {Feature} feature Feature.
     * @param {Array<*>} objectStack Object stack.
     * @this {KML}
     */
    function writePlacemark(node, feature, objectStack) {
        const /** @type {import("../xml.js").NodeStackItem} */ context = { node: node };
        // set id
        if (feature.getId()) {
            node.setAttribute('id', /** @type {string} */ (feature.getId()));
        }
        // serialize properties (properties unknown to KML are not serialized)
        const properties = feature.getProperties();
        // don't export these to ExtendedData
        const filter = {
            'address': 1,
            'description': 1,
            'name': 1,
            'open': 1,
            'phoneNumber': 1,
            'styleUrl': 1,
            'visibility': 1,
        };
        filter[feature.getGeometryName()] = 1;
        const keys = Object.keys(properties || {})
            .sort()
            .filter(function (v) {
            return !filter[v];
        });
        const styleFunction = feature.getStyleFunction();
        if (styleFunction) {
            // FIXME the styles returned by the style function are supposed to be
            // resolution-independent here
            const styles = styleFunction(feature, 0);
            if (styles) {
                const styleArray = Array.isArray(styles) ? styles : [styles];
                let pointStyles = styleArray;
                if (feature.getGeometry()) {
                    pointStyles = styleArray.filter(function (style) {
                        const geometry = style.getGeometryFunction()(feature);
                        if (geometry) {
                            const type = geometry.getType();
                            if (type === GeometryType_js_27.default.GEOMETRY_COLLECTION) {
                                return /** @type {GeometryCollection} */ (geometry)
                                    .getGeometriesArrayRecursive()
                                    .filter(function (geometry) {
                                    const type = geometry.getType();
                                    return (type === GeometryType_js_27.default.POINT ||
                                        type === GeometryType_js_27.default.MULTI_POINT);
                                }).length;
                            }
                            return (type === GeometryType_js_27.default.POINT || type === GeometryType_js_27.default.MULTI_POINT);
                        }
                    });
                }
                if (this.writeStyles_) {
                    let lineStyles = styleArray;
                    let polyStyles = styleArray;
                    if (feature.getGeometry()) {
                        lineStyles = styleArray.filter(function (style) {
                            const geometry = style.getGeometryFunction()(feature);
                            if (geometry) {
                                const type = geometry.getType();
                                if (type === GeometryType_js_27.default.GEOMETRY_COLLECTION) {
                                    return /** @type {GeometryCollection} */ (geometry)
                                        .getGeometriesArrayRecursive()
                                        .filter(function (geometry) {
                                        const type = geometry.getType();
                                        return (type === GeometryType_js_27.default.LINE_STRING ||
                                            type === GeometryType_js_27.default.MULTI_LINE_STRING);
                                    }).length;
                                }
                                return (type === GeometryType_js_27.default.LINE_STRING ||
                                    type === GeometryType_js_27.default.MULTI_LINE_STRING);
                            }
                        });
                        polyStyles = styleArray.filter(function (style) {
                            const geometry = style.getGeometryFunction()(feature);
                            if (geometry) {
                                const type = geometry.getType();
                                if (type === GeometryType_js_27.default.GEOMETRY_COLLECTION) {
                                    return /** @type {GeometryCollection} */ (geometry)
                                        .getGeometriesArrayRecursive()
                                        .filter(function (geometry) {
                                        const type = geometry.getType();
                                        return (type === GeometryType_js_27.default.POLYGON ||
                                            type === GeometryType_js_27.default.MULTI_POLYGON);
                                    }).length;
                                }
                                return (type === GeometryType_js_27.default.POLYGON ||
                                    type === GeometryType_js_27.default.MULTI_POLYGON);
                            }
                        });
                    }
                    properties['Style'] = {
                        pointStyles: pointStyles,
                        lineStyles: lineStyles,
                        polyStyles: polyStyles,
                    };
                }
                if (pointStyles.length && properties['name'] === undefined) {
                    const textStyle = pointStyles[0].getText();
                    if (textStyle) {
                        properties['name'] = textStyle.getText();
                    }
                }
            }
        }
        const parentNode = objectStack[objectStack.length - 1].node;
        const orderedKeys = PLACEMARK_SEQUENCE[parentNode.namespaceURI];
        const values = xml_js_6.makeSequence(properties, orderedKeys);
        xml_js_6.pushSerializeAndPop(context, PLACEMARK_SERIALIZERS, xml_js_6.OBJECT_PROPERTY_NODE_FACTORY, values, objectStack, orderedKeys);
        if (keys.length > 0) {
            const sequence = xml_js_6.makeSequence(properties, keys);
            const namesAndValues = { names: keys, values: sequence };
            xml_js_6.pushSerializeAndPop(context, PLACEMARK_SERIALIZERS, EXTENDEDDATA_NODE_FACTORY, [namesAndValues], objectStack);
        }
        // serialize geometry
        const options = /** @type {import("./Feature.js").WriteOptions} */ (objectStack[0]);
        let geometry = feature.getGeometry();
        if (geometry) {
            geometry = Feature_js_19.transformGeometryWithOptions(geometry, true, options);
        }
        xml_js_6.pushSerializeAndPop(context, PLACEMARK_SERIALIZERS, GEOMETRY_NODE_FACTORY, [geometry], objectStack);
    }
    /**
     * @const
     * @type {Object<string, Array<string>>}
     */
    // @ts-ignore
    const PRIMITIVE_GEOMETRY_SEQUENCE = xml_js_6.makeStructureNS(NAMESPACE_URIS, [
        'extrude',
        'tessellate',
        'altitudeMode',
        'coordinates',
    ]);
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
     */
    // @ts-ignore
    const PRIMITIVE_GEOMETRY_SERIALIZERS = xml_js_6.makeStructureNS(NAMESPACE_URIS, {
        'extrude': xml_js_6.makeChildAppender(xsd_js_3.writeBooleanTextNode),
        'tessellate': xml_js_6.makeChildAppender(xsd_js_3.writeBooleanTextNode),
        'altitudeMode': xml_js_6.makeChildAppender(xsd_js_3.writeStringTextNode),
        'coordinates': xml_js_6.makeChildAppender(writeCoordinatesTextNode),
    });
    /**
     * @param {Node} node Node.
     * @param {import("../geom/SimpleGeometry.js").default} geometry Geometry.
     * @param {Array<*>} objectStack Object stack.
     */
    function writePrimitiveGeometry(node, geometry, objectStack) {
        const flatCoordinates = geometry.getFlatCoordinates();
        const /** @type {import("../xml.js").NodeStackItem} */ context = { node: node };
        context['layout'] = geometry.getLayout();
        context['stride'] = geometry.getStride();
        // serialize properties (properties unknown to KML are not serialized)
        const properties = geometry.getProperties();
        properties.coordinates = flatCoordinates;
        const parentNode = objectStack[objectStack.length - 1].node;
        const orderedKeys = PRIMITIVE_GEOMETRY_SEQUENCE[parentNode.namespaceURI];
        const values = xml_js_6.makeSequence(properties, orderedKeys);
        xml_js_6.pushSerializeAndPop(context, PRIMITIVE_GEOMETRY_SERIALIZERS, xml_js_6.OBJECT_PROPERTY_NODE_FACTORY, values, objectStack, orderedKeys);
    }
    /**
     * @const
     * @type {Object<string, Array<string>>}
     */
    // @ts-ignore
    const POLY_STYLE_SEQUENCE = xml_js_6.makeStructureNS(NAMESPACE_URIS, [
        'color',
        'fill',
        'outline',
    ]);
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
     */
    // @ts-ignore
    const POLYGON_SERIALIZERS = xml_js_6.makeStructureNS(NAMESPACE_URIS, {
        'outerBoundaryIs': xml_js_6.makeChildAppender(writeBoundaryIs),
        'innerBoundaryIs': xml_js_6.makeChildAppender(writeBoundaryIs),
    });
    /**
     * A factory for creating innerBoundaryIs nodes.
     * @const
     * @type {function(*, Array<*>, string=): (Node|undefined)}
     */
    const INNER_BOUNDARY_NODE_FACTORY = xml_js_6.makeSimpleNodeFactory('innerBoundaryIs');
    /**
     * A factory for creating outerBoundaryIs nodes.
     * @const
     * @type {function(*, Array<*>, string=): (Node|undefined)}
     */
    const OUTER_BOUNDARY_NODE_FACTORY = xml_js_6.makeSimpleNodeFactory('outerBoundaryIs');
    /**
     * @param {Node} node Node.
     * @param {Polygon} polygon Polygon.
     * @param {Array<*>} objectStack Object stack.
     */
    function writePolygon(node, polygon, objectStack) {
        const linearRings = polygon.getLinearRings();
        const outerRing = linearRings.shift();
        const /** @type {import("../xml.js").NodeStackItem} */ context = { node: node };
        // inner rings
        xml_js_6.pushSerializeAndPop(context, POLYGON_SERIALIZERS, INNER_BOUNDARY_NODE_FACTORY, linearRings, objectStack);
        // outer ring
        xml_js_6.pushSerializeAndPop(context, POLYGON_SERIALIZERS, OUTER_BOUNDARY_NODE_FACTORY, [outerRing], objectStack);
    }
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
     */
    // @ts-ignore
    const POLY_STYLE_SERIALIZERS = xml_js_6.makeStructureNS(NAMESPACE_URIS, {
        'color': xml_js_6.makeChildAppender(writeColorTextNode),
        'fill': xml_js_6.makeChildAppender(xsd_js_3.writeBooleanTextNode),
        'outline': xml_js_6.makeChildAppender(xsd_js_3.writeBooleanTextNode),
    });
    /**
     * @param {Node} node Node.
     * @param {Style} style Style.
     * @param {Array<*>} objectStack Object stack.
     */
    function writePolyStyle(node, style, objectStack) {
        const /** @type {import("../xml.js").NodeStackItem} */ context = { node: node };
        const fill = style.getFill();
        const stroke = style.getStroke();
        const properties = {
            'color': fill ? fill.getColor() : undefined,
            'fill': fill ? undefined : false,
            'outline': stroke ? undefined : false,
        };
        const parentNode = objectStack[objectStack.length - 1].node;
        const orderedKeys = POLY_STYLE_SEQUENCE[parentNode.namespaceURI];
        const values = xml_js_6.makeSequence(properties, orderedKeys);
        xml_js_6.pushSerializeAndPop(context, POLY_STYLE_SERIALIZERS, xml_js_6.OBJECT_PROPERTY_NODE_FACTORY, values, objectStack, orderedKeys);
    }
    /**
     * @param {Node} node Node to append a TextNode with the scale to.
     * @param {number|undefined} scale Scale.
     */
    function writeScaleTextNode(node, scale) {
        // the Math is to remove any excess decimals created by float arithmetic
        xsd_js_3.writeDecimalTextNode(node, Math.round(scale * 1e6) / 1e6);
    }
    /**
     * @const
     * @type {Object<string, Array<string>>}
     */
    // @ts-ignore
    const STYLE_SEQUENCE = xml_js_6.makeStructureNS(NAMESPACE_URIS, [
        'IconStyle',
        'LabelStyle',
        'LineStyle',
        'PolyStyle',
    ]);
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
     */
    // @ts-ignore
    const STYLE_SERIALIZERS = xml_js_6.makeStructureNS(NAMESPACE_URIS, {
        'IconStyle': xml_js_6.makeChildAppender(writeIconStyle),
        'LabelStyle': xml_js_6.makeChildAppender(writeLabelStyle),
        'LineStyle': xml_js_6.makeChildAppender(writeLineStyle),
        'PolyStyle': xml_js_6.makeChildAppender(writePolyStyle),
    });
    /**
     * @param {Node} node Node.
     * @param {Object<string, Array<Style>>} styles Styles.
     * @param {Array<*>} objectStack Object stack.
     */
    function writeStyle(node, styles, objectStack) {
        const /** @type {import("../xml.js").NodeStackItem} */ context = { node: node };
        const properties = {};
        if (styles.pointStyles.length) {
            const textStyle = styles.pointStyles[0].getText();
            if (textStyle) {
                properties['LabelStyle'] = textStyle;
            }
            const imageStyle = styles.pointStyles[0].getImage();
            if (imageStyle &&
                typeof ( /** @type {?} */(imageStyle).getSrc) === 'function') {
                properties['IconStyle'] = imageStyle;
            }
        }
        if (styles.lineStyles.length) {
            const strokeStyle = styles.lineStyles[0].getStroke();
            if (strokeStyle) {
                properties['LineStyle'] = strokeStyle;
            }
        }
        if (styles.polyStyles.length) {
            const strokeStyle = styles.polyStyles[0].getStroke();
            if (strokeStyle && !properties['LineStyle']) {
                properties['LineStyle'] = strokeStyle;
            }
            properties['PolyStyle'] = styles.polyStyles[0];
        }
        const parentNode = objectStack[objectStack.length - 1].node;
        const orderedKeys = STYLE_SEQUENCE[parentNode.namespaceURI];
        const values = xml_js_6.makeSequence(properties, orderedKeys);
        xml_js_6.pushSerializeAndPop(context, STYLE_SERIALIZERS, xml_js_6.OBJECT_PROPERTY_NODE_FACTORY, values, objectStack, orderedKeys);
    }
    /**
     * @param {Element} node Node to append a TextNode with the Vec2 to.
     * @param {Vec2} vec2 Vec2.
     */
    function writeVec2(node, vec2) {
        node.setAttribute('x', String(vec2.x));
        node.setAttribute('y', String(vec2.y));
        node.setAttribute('xunits', vec2.xunits);
        node.setAttribute('yunits', vec2.yunits);
    }
    exports.default = KML;
});
define("assets/ieee754", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.write = exports.read = void 0;
    function read(buffer, offset, isLE, mLen, nBytes) {
        var e, m;
        var eLen = (nBytes * 8) - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var nBits = -7;
        var i = isLE ? (nBytes - 1) : 0;
        var d = isLE ? -1 : 1;
        var s = buffer[offset + i];
        i += d;
        e = s & ((1 << (-nBits)) - 1);
        s >>= (-nBits);
        nBits += eLen;
        for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) { }
        m = e & ((1 << (-nBits)) - 1);
        e >>= (-nBits);
        nBits += mLen;
        for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) { }
        if (e === 0) {
            e = 1 - eBias;
        }
        else if (e === eMax) {
            return m ? NaN : ((s ? -1 : 1) * Infinity);
        }
        else {
            m = m + Math.pow(2, mLen);
            e = e - eBias;
        }
        return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
    }
    exports.read = read;
    function write(buffer, value, offset, isLE, mLen, nBytes) {
        var e, m, c;
        var eLen = (nBytes * 8) - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
        var i = isLE ? 0 : (nBytes - 1);
        var d = isLE ? 1 : -1;
        var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;
        value = Math.abs(value);
        if (isNaN(value) || value === Infinity) {
            m = isNaN(value) ? 1 : 0;
            e = eMax;
        }
        else {
            e = Math.floor(Math.log(value) / Math.LN2);
            if (value * (c = Math.pow(2, -e)) < 1) {
                e--;
                c *= 2;
            }
            if (e + eBias >= 1) {
                value += rt / c;
            }
            else {
                value += rt * Math.pow(2, 1 - eBias);
            }
            if (value * c >= 2) {
                e++;
                c /= 2;
            }
            if (e + eBias >= eMax) {
                m = 0;
                e = eMax;
            }
            else if (e + eBias >= 1) {
                m = ((value * c) - 1) * Math.pow(2, mLen);
                e = e + eBias;
            }
            else {
                m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
                e = 0;
            }
        }
        for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) { }
        e = (e << mLen) | m;
        eLen += mLen;
        for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) { }
        buffer[offset + i - d] |= s * 128;
    }
    exports.write = write;
});
define("assets/pbf", ["require", "exports", "assets/ieee754"], function (require, exports, ieee754_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.write = exports.read = exports.Pbf = void 0;
    function Pbf(buf) {
        this.buf = ArrayBuffer.isView && ArrayBuffer.isView(buf) ? buf : new Uint8Array(buf || 0);
        this.pos = 0;
        this.type = 0;
        this.length = this.buf.length;
    }
    exports.Pbf = Pbf;
    Pbf.Varint = 0; // varint: int32, int64, uint32, uint64, sint32, sint64, bool, enum
    Pbf.Fixed64 = 1; // 64-bit: double, fixed64, sfixed64
    Pbf.Bytes = 2; // length-delimited: string, bytes, embedded messages, packed repeated fields
    Pbf.Fixed32 = 5; // 32-bit: float, fixed32, sfixed32
    var SHIFT_LEFT_32 = (1 << 16) * (1 << 16), SHIFT_RIGHT_32 = 1 / SHIFT_LEFT_32;
    // Threshold chosen based on both benchmarking and knowledge about browser string
    // data structures (which currently switch structure types at 12 bytes or more)
    var TEXT_DECODER_MIN_LENGTH = 12;
    var utf8TextDecoder = typeof TextDecoder === 'undefined' ? null : new TextDecoder('utf8');
    Pbf.prototype = {
        destroy: function () {
            this.buf = null;
        },
        // === READING =================================================================
        readFields: function (readField, result, end) {
            end = end || this.length;
            while (this.pos < end) {
                var val = this.readVarint(), tag = val >> 3, startPos = this.pos;
                this.type = val & 0x7;
                readField(tag, result, this);
                if (this.pos === startPos)
                    this.skip(val);
            }
            return result;
        },
        readMessage: function (readField, result) {
            return this.readFields(readField, result, this.readVarint() + this.pos);
        },
        readFixed32: function () {
            var val = readUInt32(this.buf, this.pos);
            this.pos += 4;
            return val;
        },
        readSFixed32: function () {
            var val = readInt32(this.buf, this.pos);
            this.pos += 4;
            return val;
        },
        // 64-bit int handling is based on github.com/dpw/node-buffer-more-ints (MIT-licensed)
        readFixed64: function () {
            var val = readUInt32(this.buf, this.pos) + readUInt32(this.buf, this.pos + 4) * SHIFT_LEFT_32;
            this.pos += 8;
            return val;
        },
        readSFixed64: function () {
            var val = readUInt32(this.buf, this.pos) + readInt32(this.buf, this.pos + 4) * SHIFT_LEFT_32;
            this.pos += 8;
            return val;
        },
        readFloat: function () {
            var val = ieee754_1.default.read(this.buf, this.pos, true, 23, 4);
            this.pos += 4;
            return val;
        },
        readDouble: function () {
            var val = ieee754_1.default.read(this.buf, this.pos, true, 52, 8);
            this.pos += 8;
            return val;
        },
        readVarint: function (isSigned) {
            var buf = this.buf, val, b;
            b = buf[this.pos++];
            val = b & 0x7f;
            if (b < 0x80)
                return val;
            b = buf[this.pos++];
            val |= (b & 0x7f) << 7;
            if (b < 0x80)
                return val;
            b = buf[this.pos++];
            val |= (b & 0x7f) << 14;
            if (b < 0x80)
                return val;
            b = buf[this.pos++];
            val |= (b & 0x7f) << 21;
            if (b < 0x80)
                return val;
            b = buf[this.pos];
            val |= (b & 0x0f) << 28;
            return readVarintRemainder(val, isSigned, this);
        },
        readVarint64: function () {
            return this.readVarint(true);
        },
        readSVarint: function () {
            var num = this.readVarint();
            return num % 2 === 1 ? (num + 1) / -2 : num / 2; // zigzag encoding
        },
        readBoolean: function () {
            return Boolean(this.readVarint());
        },
        readString: function () {
            var end = this.readVarint() + this.pos;
            var pos = this.pos;
            this.pos = end;
            if (end - pos >= TEXT_DECODER_MIN_LENGTH && utf8TextDecoder) {
                // longer strings are fast with the built-in browser TextDecoder API
                return readUtf8TextDecoder(this.buf, pos, end);
            }
            // short strings are fast with our custom implementation
            return readUtf8(this.buf, pos, end);
        },
        readBytes: function () {
            var end = this.readVarint() + this.pos, buffer = this.buf.subarray(this.pos, end);
            this.pos = end;
            return buffer;
        },
        // verbose for performance reasons; doesn't affect gzipped size
        readPackedVarint: function (arr, isSigned) {
            if (this.type !== Pbf.Bytes)
                return arr.push(this.readVarint(isSigned));
            var end = readPackedEnd(this);
            arr = arr || [];
            while (this.pos < end)
                arr.push(this.readVarint(isSigned));
            return arr;
        },
        readPackedSVarint: function (arr) {
            if (this.type !== Pbf.Bytes)
                return arr.push(this.readSVarint());
            var end = readPackedEnd(this);
            arr = arr || [];
            while (this.pos < end)
                arr.push(this.readSVarint());
            return arr;
        },
        readPackedBoolean: function (arr) {
            if (this.type !== Pbf.Bytes)
                return arr.push(this.readBoolean());
            var end = readPackedEnd(this);
            arr = arr || [];
            while (this.pos < end)
                arr.push(this.readBoolean());
            return arr;
        },
        readPackedFloat: function (arr) {
            if (this.type !== Pbf.Bytes)
                return arr.push(this.readFloat());
            var end = readPackedEnd(this);
            arr = arr || [];
            while (this.pos < end)
                arr.push(this.readFloat());
            return arr;
        },
        readPackedDouble: function (arr) {
            if (this.type !== Pbf.Bytes)
                return arr.push(this.readDouble());
            var end = readPackedEnd(this);
            arr = arr || [];
            while (this.pos < end)
                arr.push(this.readDouble());
            return arr;
        },
        readPackedFixed32: function (arr) {
            if (this.type !== Pbf.Bytes)
                return arr.push(this.readFixed32());
            var end = readPackedEnd(this);
            arr = arr || [];
            while (this.pos < end)
                arr.push(this.readFixed32());
            return arr;
        },
        readPackedSFixed32: function (arr) {
            if (this.type !== Pbf.Bytes)
                return arr.push(this.readSFixed32());
            var end = readPackedEnd(this);
            arr = arr || [];
            while (this.pos < end)
                arr.push(this.readSFixed32());
            return arr;
        },
        readPackedFixed64: function (arr) {
            if (this.type !== Pbf.Bytes)
                return arr.push(this.readFixed64());
            var end = readPackedEnd(this);
            arr = arr || [];
            while (this.pos < end)
                arr.push(this.readFixed64());
            return arr;
        },
        readPackedSFixed64: function (arr) {
            if (this.type !== Pbf.Bytes)
                return arr.push(this.readSFixed64());
            var end = readPackedEnd(this);
            arr = arr || [];
            while (this.pos < end)
                arr.push(this.readSFixed64());
            return arr;
        },
        skip: function (val) {
            var type = val & 0x7;
            if (type === Pbf.Varint)
                while (this.buf[this.pos++] > 0x7f) { }
            else if (type === Pbf.Bytes)
                this.pos = this.readVarint() + this.pos;
            else if (type === Pbf.Fixed32)
                this.pos += 4;
            else if (type === Pbf.Fixed64)
                this.pos += 8;
            else
                throw new Error('Unimplemented type: ' + type);
        },
        // === WRITING =================================================================
        writeTag: function (tag, type) {
            this.writeVarint((tag << 3) | type);
        },
        realloc: function (min) {
            var length = this.length || 16;
            while (length < this.pos + min)
                length *= 2;
            if (length !== this.length) {
                var buf = new Uint8Array(length);
                buf.set(this.buf);
                this.buf = buf;
                this.length = length;
            }
        },
        finish: function () {
            this.length = this.pos;
            this.pos = 0;
            return this.buf.subarray(0, this.length);
        },
        writeFixed32: function (val) {
            this.realloc(4);
            writeInt32(this.buf, val, this.pos);
            this.pos += 4;
        },
        writeSFixed32: function (val) {
            this.realloc(4);
            writeInt32(this.buf, val, this.pos);
            this.pos += 4;
        },
        writeFixed64: function (val) {
            this.realloc(8);
            writeInt32(this.buf, val & -1, this.pos);
            writeInt32(this.buf, Math.floor(val * SHIFT_RIGHT_32), this.pos + 4);
            this.pos += 8;
        },
        writeSFixed64: function (val) {
            this.realloc(8);
            writeInt32(this.buf, val & -1, this.pos);
            writeInt32(this.buf, Math.floor(val * SHIFT_RIGHT_32), this.pos + 4);
            this.pos += 8;
        },
        writeVarint: function (val) {
            val = +val || 0;
            if (val > 0xfffffff || val < 0) {
                writeBigVarint(val, this);
                return;
            }
            this.realloc(4);
            this.buf[this.pos++] = val & 0x7f | (val > 0x7f ? 0x80 : 0);
            if (val <= 0x7f)
                return;
            this.buf[this.pos++] = ((val >>>= 7) & 0x7f) | (val > 0x7f ? 0x80 : 0);
            if (val <= 0x7f)
                return;
            this.buf[this.pos++] = ((val >>>= 7) & 0x7f) | (val > 0x7f ? 0x80 : 0);
            if (val <= 0x7f)
                return;
            this.buf[this.pos++] = (val >>> 7) & 0x7f;
        },
        writeSVarint: function (val) {
            this.writeVarint(val < 0 ? -val * 2 - 1 : val * 2);
        },
        writeBoolean: function (val) {
            this.writeVarint(Boolean(val));
        },
        writeString: function (str) {
            str = String(str);
            this.realloc(str.length * 4);
            this.pos++; // reserve 1 byte for short string length
            var startPos = this.pos;
            // write the string directly to the buffer and see how much was written
            this.pos = writeUtf8(this.buf, str, this.pos);
            var len = this.pos - startPos;
            if (len >= 0x80)
                makeRoomForExtraLength(startPos, len, this);
            // finally, write the message length in the reserved place and restore the position
            this.pos = startPos - 1;
            this.writeVarint(len);
            this.pos += len;
        },
        writeFloat: function (val) {
            this.realloc(4);
            ieee754_1.default.write(this.buf, val, this.pos, true, 23, 4);
            this.pos += 4;
        },
        writeDouble: function (val) {
            this.realloc(8);
            ieee754_1.default.write(this.buf, val, this.pos, true, 52, 8);
            this.pos += 8;
        },
        writeBytes: function (buffer) {
            var len = buffer.length;
            this.writeVarint(len);
            this.realloc(len);
            for (var i = 0; i < len; i++)
                this.buf[this.pos++] = buffer[i];
        },
        writeRawMessage: function (fn, obj) {
            this.pos++; // reserve 1 byte for short message length
            // write the message directly to the buffer and see how much was written
            var startPos = this.pos;
            fn(obj, this);
            var len = this.pos - startPos;
            if (len >= 0x80)
                makeRoomForExtraLength(startPos, len, this);
            // finally, write the message length in the reserved place and restore the position
            this.pos = startPos - 1;
            this.writeVarint(len);
            this.pos += len;
        },
        writeMessage: function (tag, fn, obj) {
            this.writeTag(tag, Pbf.Bytes);
            this.writeRawMessage(fn, obj);
        },
        writePackedVarint: function (tag, arr) { if (arr.length)
            this.writeMessage(tag, writePackedVarint, arr); },
        writePackedSVarint: function (tag, arr) { if (arr.length)
            this.writeMessage(tag, writePackedSVarint, arr); },
        writePackedBoolean: function (tag, arr) { if (arr.length)
            this.writeMessage(tag, writePackedBoolean, arr); },
        writePackedFloat: function (tag, arr) { if (arr.length)
            this.writeMessage(tag, writePackedFloat, arr); },
        writePackedDouble: function (tag, arr) { if (arr.length)
            this.writeMessage(tag, writePackedDouble, arr); },
        writePackedFixed32: function (tag, arr) { if (arr.length)
            this.writeMessage(tag, writePackedFixed32, arr); },
        writePackedSFixed32: function (tag, arr) { if (arr.length)
            this.writeMessage(tag, writePackedSFixed32, arr); },
        writePackedFixed64: function (tag, arr) { if (arr.length)
            this.writeMessage(tag, writePackedFixed64, arr); },
        writePackedSFixed64: function (tag, arr) { if (arr.length)
            this.writeMessage(tag, writePackedSFixed64, arr); },
        writeBytesField: function (tag, buffer) {
            this.writeTag(tag, Pbf.Bytes);
            this.writeBytes(buffer);
        },
        writeFixed32Field: function (tag, val) {
            this.writeTag(tag, Pbf.Fixed32);
            this.writeFixed32(val);
        },
        writeSFixed32Field: function (tag, val) {
            this.writeTag(tag, Pbf.Fixed32);
            this.writeSFixed32(val);
        },
        writeFixed64Field: function (tag, val) {
            this.writeTag(tag, Pbf.Fixed64);
            this.writeFixed64(val);
        },
        writeSFixed64Field: function (tag, val) {
            this.writeTag(tag, Pbf.Fixed64);
            this.writeSFixed64(val);
        },
        writeVarintField: function (tag, val) {
            this.writeTag(tag, Pbf.Varint);
            this.writeVarint(val);
        },
        writeSVarintField: function (tag, val) {
            this.writeTag(tag, Pbf.Varint);
            this.writeSVarint(val);
        },
        writeStringField: function (tag, str) {
            this.writeTag(tag, Pbf.Bytes);
            this.writeString(str);
        },
        writeFloatField: function (tag, val) {
            this.writeTag(tag, Pbf.Fixed32);
            this.writeFloat(val);
        },
        writeDoubleField: function (tag, val) {
            this.writeTag(tag, Pbf.Fixed64);
            this.writeDouble(val);
        },
        writeBooleanField: function (tag, val) {
            this.writeVarintField(tag, Boolean(val));
        }
    };
    function readVarintRemainder(l, s, p) {
        var buf = p.buf, h, b;
        b = buf[p.pos++];
        h = (b & 0x70) >> 4;
        if (b < 0x80)
            return toNum(l, h, s);
        b = buf[p.pos++];
        h |= (b & 0x7f) << 3;
        if (b < 0x80)
            return toNum(l, h, s);
        b = buf[p.pos++];
        h |= (b & 0x7f) << 10;
        if (b < 0x80)
            return toNum(l, h, s);
        b = buf[p.pos++];
        h |= (b & 0x7f) << 17;
        if (b < 0x80)
            return toNum(l, h, s);
        b = buf[p.pos++];
        h |= (b & 0x7f) << 24;
        if (b < 0x80)
            return toNum(l, h, s);
        b = buf[p.pos++];
        h |= (b & 0x01) << 31;
        if (b < 0x80)
            return toNum(l, h, s);
        throw new Error('Expected varint not more than 10 bytes');
    }
    function readPackedEnd(pbf) {
        return pbf.type === Pbf.Bytes ?
            pbf.readVarint() + pbf.pos : pbf.pos + 1;
    }
    function toNum(low, high, isSigned) {
        if (isSigned) {
            return high * 0x100000000 + (low >>> 0);
        }
        return ((high >>> 0) * 0x100000000) + (low >>> 0);
    }
    function writeBigVarint(val, pbf) {
        var low, high;
        if (val >= 0) {
            low = (val % 0x100000000) | 0;
            high = (val / 0x100000000) | 0;
        }
        else {
            low = ~(-val % 0x100000000);
            high = ~(-val / 0x100000000);
            if (low ^ 0xffffffff) {
                low = (low + 1) | 0;
            }
            else {
                low = 0;
                high = (high + 1) | 0;
            }
        }
        if (val >= 0x10000000000000000 || val < -0x10000000000000000) {
            throw new Error('Given varint doesn\'t fit into 10 bytes');
        }
        pbf.realloc(10);
        writeBigVarintLow(low, high, pbf);
        writeBigVarintHigh(high, pbf);
    }
    function writeBigVarintLow(low, high, pbf) {
        pbf.buf[pbf.pos++] = low & 0x7f | 0x80;
        low >>>= 7;
        pbf.buf[pbf.pos++] = low & 0x7f | 0x80;
        low >>>= 7;
        pbf.buf[pbf.pos++] = low & 0x7f | 0x80;
        low >>>= 7;
        pbf.buf[pbf.pos++] = low & 0x7f | 0x80;
        low >>>= 7;
        pbf.buf[pbf.pos] = low & 0x7f;
    }
    function writeBigVarintHigh(high, pbf) {
        var lsb = (high & 0x07) << 4;
        pbf.buf[pbf.pos++] |= lsb | ((high >>>= 3) ? 0x80 : 0);
        if (!high)
            return;
        pbf.buf[pbf.pos++] = high & 0x7f | ((high >>>= 7) ? 0x80 : 0);
        if (!high)
            return;
        pbf.buf[pbf.pos++] = high & 0x7f | ((high >>>= 7) ? 0x80 : 0);
        if (!high)
            return;
        pbf.buf[pbf.pos++] = high & 0x7f | ((high >>>= 7) ? 0x80 : 0);
        if (!high)
            return;
        pbf.buf[pbf.pos++] = high & 0x7f | ((high >>>= 7) ? 0x80 : 0);
        if (!high)
            return;
        pbf.buf[pbf.pos++] = high & 0x7f;
    }
    function makeRoomForExtraLength(startPos, len, pbf) {
        var extraLen = len <= 0x3fff ? 1 :
            len <= 0x1fffff ? 2 :
                len <= 0xfffffff ? 3 : Math.floor(Math.log(len) / (Math.LN2 * 7));
        // if 1 byte isn't enough for encoding message length, shift the data to the right
        pbf.realloc(extraLen);
        for (var i = pbf.pos - 1; i >= startPos; i--)
            pbf.buf[i + extraLen] = pbf.buf[i];
    }
    function writePackedVarint(arr, pbf) { for (var i = 0; i < arr.length; i++)
        pbf.writeVarint(arr[i]); }
    function writePackedSVarint(arr, pbf) { for (var i = 0; i < arr.length; i++)
        pbf.writeSVarint(arr[i]); }
    function writePackedFloat(arr, pbf) { for (var i = 0; i < arr.length; i++)
        pbf.writeFloat(arr[i]); }
    function writePackedDouble(arr, pbf) { for (var i = 0; i < arr.length; i++)
        pbf.writeDouble(arr[i]); }
    function writePackedBoolean(arr, pbf) { for (var i = 0; i < arr.length; i++)
        pbf.writeBoolean(arr[i]); }
    function writePackedFixed32(arr, pbf) { for (var i = 0; i < arr.length; i++)
        pbf.writeFixed32(arr[i]); }
    function writePackedSFixed32(arr, pbf) { for (var i = 0; i < arr.length; i++)
        pbf.writeSFixed32(arr[i]); }
    function writePackedFixed64(arr, pbf) { for (var i = 0; i < arr.length; i++)
        pbf.writeFixed64(arr[i]); }
    function writePackedSFixed64(arr, pbf) { for (var i = 0; i < arr.length; i++)
        pbf.writeSFixed64(arr[i]); }
    // Buffer code below from https://github.com/feross/buffer, MIT-licensed
    function readUInt32(buf, pos) {
        return ((buf[pos]) |
            (buf[pos + 1] << 8) |
            (buf[pos + 2] << 16)) +
            (buf[pos + 3] * 0x1000000);
    }
    function writeInt32(buf, val, pos) {
        buf[pos] = val;
        buf[pos + 1] = (val >>> 8);
        buf[pos + 2] = (val >>> 16);
        buf[pos + 3] = (val >>> 24);
    }
    function readInt32(buf, pos) {
        return ((buf[pos]) |
            (buf[pos + 1] << 8) |
            (buf[pos + 2] << 16)) +
            (buf[pos + 3] << 24);
    }
    function readUtf8(buf, pos, end) {
        var str = '';
        var i = pos;
        while (i < end) {
            var b0 = buf[i];
            var c = null; // codepoint
            var bytesPerSequence = b0 > 0xEF ? 4 :
                b0 > 0xDF ? 3 :
                    b0 > 0xBF ? 2 : 1;
            if (i + bytesPerSequence > end)
                break;
            var b1, b2, b3;
            if (bytesPerSequence === 1) {
                if (b0 < 0x80) {
                    c = b0;
                }
            }
            else if (bytesPerSequence === 2) {
                b1 = buf[i + 1];
                if ((b1 & 0xC0) === 0x80) {
                    c = (b0 & 0x1F) << 0x6 | (b1 & 0x3F);
                    if (c <= 0x7F) {
                        c = null;
                    }
                }
            }
            else if (bytesPerSequence === 3) {
                b1 = buf[i + 1];
                b2 = buf[i + 2];
                if ((b1 & 0xC0) === 0x80 && (b2 & 0xC0) === 0x80) {
                    c = (b0 & 0xF) << 0xC | (b1 & 0x3F) << 0x6 | (b2 & 0x3F);
                    if (c <= 0x7FF || (c >= 0xD800 && c <= 0xDFFF)) {
                        c = null;
                    }
                }
            }
            else if (bytesPerSequence === 4) {
                b1 = buf[i + 1];
                b2 = buf[i + 2];
                b3 = buf[i + 3];
                if ((b1 & 0xC0) === 0x80 && (b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80) {
                    c = (b0 & 0xF) << 0x12 | (b1 & 0x3F) << 0xC | (b2 & 0x3F) << 0x6 | (b3 & 0x3F);
                    if (c <= 0xFFFF || c >= 0x110000) {
                        c = null;
                    }
                }
            }
            if (c === null) {
                c = 0xFFFD;
                bytesPerSequence = 1;
            }
            else if (c > 0xFFFF) {
                c -= 0x10000;
                str += String.fromCharCode(c >>> 10 & 0x3FF | 0xD800);
                c = 0xDC00 | c & 0x3FF;
            }
            str += String.fromCharCode(c);
            i += bytesPerSequence;
        }
        return str;
    }
    function readUtf8TextDecoder(buf, pos, end) {
        return utf8TextDecoder.decode(buf.subarray(pos, end));
    }
    function writeUtf8(buf, str, pos) {
        for (var i = 0, c, lead; i < str.length; i++) {
            c = str.charCodeAt(i); // code point
            if (c > 0xD7FF && c < 0xE000) {
                if (lead) {
                    if (c < 0xDC00) {
                        buf[pos++] = 0xEF;
                        buf[pos++] = 0xBF;
                        buf[pos++] = 0xBD;
                        lead = c;
                        continue;
                    }
                    else {
                        c = lead - 0xD800 << 10 | c - 0xDC00 | 0x10000;
                        lead = null;
                    }
                }
                else {
                    if (c > 0xDBFF || (i + 1 === str.length)) {
                        buf[pos++] = 0xEF;
                        buf[pos++] = 0xBF;
                        buf[pos++] = 0xBD;
                    }
                    else {
                        lead = c;
                    }
                    continue;
                }
            }
            else if (lead) {
                buf[pos++] = 0xEF;
                buf[pos++] = 0xBF;
                buf[pos++] = 0xBD;
                lead = null;
            }
            if (c < 0x80) {
                buf[pos++] = c;
            }
            else {
                if (c < 0x800) {
                    buf[pos++] = c >> 0x6 | 0xC0;
                }
                else {
                    if (c < 0x10000) {
                        buf[pos++] = c >> 0xC | 0xE0;
                    }
                    else {
                        buf[pos++] = c >> 0x12 | 0xF0;
                        buf[pos++] = c >> 0xC & 0x3F | 0x80;
                    }
                    buf[pos++] = c >> 0x6 & 0x3F | 0x80;
                }
                buf[pos++] = c & 0x3F | 0x80;
            }
        }
        return pos;
    }
    function read(buffer, offset, isLE, mLen, nBytes) {
        var e, m;
        var eLen = (nBytes * 8) - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var nBits = -7;
        var i = isLE ? (nBytes - 1) : 0;
        var d = isLE ? -1 : 1;
        var s = buffer[offset + i];
        i += d;
        e = s & ((1 << (-nBits)) - 1);
        s >>= (-nBits);
        nBits += eLen;
        for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) { }
        m = e & ((1 << (-nBits)) - 1);
        e >>= (-nBits);
        nBits += mLen;
        for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) { }
        if (e === 0) {
            e = 1 - eBias;
        }
        else if (e === eMax) {
            return m ? NaN : ((s ? -1 : 1) * Infinity);
        }
        else {
            m = m + Math.pow(2, mLen);
            e = e - eBias;
        }
        return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
    }
    exports.read = read;
    function write(buffer, value, offset, isLE, mLen, nBytes) {
        var e, m, c;
        var eLen = (nBytes * 8) - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
        var i = isLE ? 0 : (nBytes - 1);
        var d = isLE ? 1 : -1;
        var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;
        value = Math.abs(value);
        if (isNaN(value) || value === Infinity) {
            m = isNaN(value) ? 1 : 0;
            e = eMax;
        }
        else {
            e = Math.floor(Math.log(value) / Math.LN2);
            if (value * (c = Math.pow(2, -e)) < 1) {
                e--;
                c *= 2;
            }
            if (e + eBias >= 1) {
                value += rt / c;
            }
            else {
                value += rt * Math.pow(2, 1 - eBias);
            }
            if (value * c >= 2) {
                e++;
                c /= 2;
            }
            if (e + eBias >= eMax) {
                m = 0;
                e = eMax;
            }
            else if (e + eBias >= 1) {
                m = ((value * c) - 1) * Math.pow(2, mLen);
                e = e + eBias;
            }
            else {
                m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
                e = 0;
            }
        }
        for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) { }
        e = (e << mLen) | m;
        eLen += mLen;
        for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) { }
        buffer[offset + i - d] |= s * 128;
    }
    exports.write = write;
});
/**
 * @module ol/format/MVT
 */
//FIXME Implement projection handling
define("node_modules/ol/src/format/MVT", ["require", "exports", "node_modules/ol/src/format/Feature", "node_modules/ol/src/format/FormatType", "node_modules/ol/src/geom/GeometryLayout", "node_modules/ol/src/geom/GeometryType", "node_modules/ol/src/geom/LineString", "node_modules/ol/src/geom/MultiLineString", "node_modules/ol/src/geom/MultiPoint", "node_modules/ol/src/geom/MultiPolygon", "assets/pbf", "node_modules/ol/src/geom/Point", "node_modules/ol/src/geom/Polygon", "node_modules/ol/src/proj/Projection", "node_modules/ol/src/render/Feature", "node_modules/ol/src/proj/Units", "node_modules/ol/src/asserts", "node_modules/ol/src/proj", "node_modules/ol/src/geom/flat/orient"], function (require, exports, Feature_js_20, FormatType_js_5, GeometryLayout_js_13, GeometryType_js_28, LineString_js_10, MultiLineString_js_8, MultiPoint_js_7, MultiPolygon_js_7, pbf_1, Point_js_11, Polygon_js_15, Projection_js_4, Feature_js_21, Units_js_10, asserts_js_25, proj_js_28, orient_js_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @typedef {Object} Options
     * @property {import("../Feature.js").FeatureClass} [featureClass] Class for features returned by
     * {@link module:ol/format/MVT#readFeatures}. Set to {@link module:ol/Feature~Feature} to get full editing and geometry
     * support at the cost of decreased rendering performance. The default is
     * {@link module:ol/render/Feature~RenderFeature}, which is optimized for rendering and hit detection.
     * @property {string} [geometryName='geometry'] Geometry name to use when creating features.
     * @property {string} [layerName='layer'] Name of the feature attribute that holds the layer name.
     * @property {Array<string>} [layers] Layers to read features from. If not provided, features will be read from all
     * @property {string} [idProperty] Optional property that will be assigned as the feature id and removed from the properties.
     * layers.
     */
    /**
     * @classdesc
     * Feature format for reading data in the Mapbox MVT format.
     *
     * @param {Options=} opt_options Options.
     * @api
     */
    class MVT extends Feature_js_20.default {
        /**
         * @param {Options=} opt_options Options.
         */
        constructor(opt_options) {
            super();
            const options = opt_options ? opt_options : {};
            /**
             * @type {Projection}
             */
            this.dataProjection = new Projection_js_4.default({
                code: '',
                units: Units_js_10.default.TILE_PIXELS,
            });
            /**
             * @private
             * @type {import("../Feature.js").FeatureClass}
             */
            this.featureClass_ = options.featureClass
                ? options.featureClass
                : Feature_js_21.default;
            /**
             * @private
             * @type {string|undefined}
             */
            this.geometryName_ = options.geometryName;
            /**
             * @private
             * @type {string}
             */
            this.layerName_ = options.layerName ? options.layerName : 'layer';
            /**
             * @private
             * @type {Array<string>}
             */
            this.layers_ = options.layers ? options.layers : null;
            /**
             * @private
             * @type {string}
             */
            this.idProperty_ = options.idProperty;
        }
        /**
         * Read the raw geometry from the pbf offset stored in a raw feature's geometry
         * property.
         * @param {PBF} pbf PBF.
         * @param {Object} feature Raw feature.
         * @param {Array<number>} flatCoordinates Array to store flat coordinates in.
         * @param {Array<number>} ends Array to store ends in.
         * @private
         */
        readRawGeometry_(pbf, feature, flatCoordinates, ends) {
            pbf.pos = feature.geometry;
            const end = pbf.readVarint() + pbf.pos;
            let cmd = 1;
            let length = 0;
            let x = 0;
            let y = 0;
            let coordsLen = 0;
            let currentEnd = 0;
            while (pbf.pos < end) {
                if (!length) {
                    const cmdLen = pbf.readVarint();
                    cmd = cmdLen & 0x7;
                    length = cmdLen >> 3;
                }
                length--;
                if (cmd === 1 || cmd === 2) {
                    x += pbf.readSVarint();
                    y += pbf.readSVarint();
                    if (cmd === 1) {
                        // moveTo
                        if (coordsLen > currentEnd) {
                            ends.push(coordsLen);
                            currentEnd = coordsLen;
                        }
                    }
                    flatCoordinates.push(x, y);
                    coordsLen += 2;
                }
                else if (cmd === 7) {
                    if (coordsLen > currentEnd) {
                        // close polygon
                        flatCoordinates.push(flatCoordinates[currentEnd], flatCoordinates[currentEnd + 1]);
                        coordsLen += 2;
                    }
                }
                else {
                    asserts_js_25.assert(false, 59); // Invalid command found in the PBF
                }
            }
            if (coordsLen > currentEnd) {
                ends.push(coordsLen);
                currentEnd = coordsLen;
            }
        }
        /**
         * @private
         * @param {PBF} pbf PBF
         * @param {Object} rawFeature Raw Mapbox feature.
         * @param {import("./Feature.js").ReadOptions} options Read options.
         * @return {import("../Feature.js").FeatureLike} Feature.
         */
        createFeature_(pbf, rawFeature, options) {
            const type = rawFeature.type;
            if (type === 0) {
                return null;
            }
            let feature;
            const values = rawFeature.properties;
            let id;
            if (!this.idProperty_) {
                id = rawFeature.id;
            }
            else {
                id = values[this.idProperty_];
                delete values[this.idProperty_];
            }
            values[this.layerName_] = rawFeature.layer.name;
            const flatCoordinates = [];
            const ends = [];
            this.readRawGeometry_(pbf, rawFeature, flatCoordinates, ends);
            const geometryType = getGeometryType(type, ends.length);
            if (this.featureClass_ === Feature_js_21.default) {
                feature = new this.featureClass_(geometryType, flatCoordinates, ends, values, id);
                feature.transform(options.dataProjection, options.featureProjection);
            }
            else {
                let geom;
                if (geometryType == GeometryType_js_28.default.POLYGON) {
                    const endss = [];
                    let offset = 0;
                    let prevEndIndex = 0;
                    for (let i = 0, ii = ends.length; i < ii; ++i) {
                        const end = ends[i];
                        // classifies an array of rings into polygons with outer rings and holes
                        if (!orient_js_4.linearRingIsClockwise(flatCoordinates, offset, end, 2)) {
                            endss.push(ends.slice(prevEndIndex, i + 1));
                        }
                        else {
                            if (endss.length === 0) {
                                continue;
                            }
                            endss[endss.length - 1].push(ends[prevEndIndex]);
                        }
                        prevEndIndex = i + 1;
                        offset = end;
                    }
                    if (endss.length > 1) {
                        geom = new MultiPolygon_js_7.default(flatCoordinates, GeometryLayout_js_13.default.XY, endss);
                    }
                    else {
                        geom = new Polygon_js_15.default(flatCoordinates, GeometryLayout_js_13.default.XY, ends);
                    }
                }
                else {
                    geom =
                        geometryType === GeometryType_js_28.default.POINT
                            ? new Point_js_11.default(flatCoordinates, GeometryLayout_js_13.default.XY)
                            : geometryType === GeometryType_js_28.default.LINE_STRING
                                ? new LineString_js_10.default(flatCoordinates, GeometryLayout_js_13.default.XY)
                                : geometryType === GeometryType_js_28.default.POLYGON
                                    ? new Polygon_js_15.default(flatCoordinates, GeometryLayout_js_13.default.XY, ends)
                                    : geometryType === GeometryType_js_28.default.MULTI_POINT
                                        ? new MultiPoint_js_7.default(flatCoordinates, GeometryLayout_js_13.default.XY)
                                        : geometryType === GeometryType_js_28.default.MULTI_LINE_STRING
                                            ? new MultiLineString_js_8.default(flatCoordinates, GeometryLayout_js_13.default.XY, ends)
                                            : null;
                }
                const ctor = /** @type {typeof import("../Feature.js").default} */ (this
                    .featureClass_);
                feature = new ctor();
                if (this.geometryName_) {
                    feature.setGeometryName(this.geometryName_);
                }
                const geometry = Feature_js_20.transformGeometryWithOptions(geom, false, options);
                feature.setGeometry(geometry);
                feature.setId(id);
                feature.setProperties(values, true);
            }
            return feature;
        }
        /**
         * @return {import("./FormatType.js").default} Format.
         */
        getType() {
            return FormatType_js_5.default.ARRAY_BUFFER;
        }
        /**
         * Read all features.
         *
         * @param {ArrayBuffer} source Source.
         * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
         * @return {Array<import("../Feature.js").FeatureLike>} Features.
         * @api
         */
        readFeatures(source, opt_options) {
            const layers = this.layers_;
            const options = /** @type {import("./Feature.js").ReadOptions} */ (this.adaptOptions(opt_options));
            const dataProjection = proj_js_28.get(options.dataProjection);
            dataProjection.setWorldExtent(options.extent);
            options.dataProjection = dataProjection;
            const pbf = new pbf_1.default(/** @type {ArrayBuffer} */ (source));
            const pbfLayers = pbf.readFields(layersPBFReader, {});
            const features = [];
            for (const name in pbfLayers) {
                if (layers && layers.indexOf(name) == -1) {
                    continue;
                }
                const pbfLayer = pbfLayers[name];
                const extent = pbfLayer ? [0, 0, pbfLayer.extent, pbfLayer.extent] : null;
                dataProjection.setExtent(extent);
                for (let i = 0, ii = pbfLayer.length; i < ii; ++i) {
                    const rawFeature = readRawFeature(pbf, pbfLayer, i);
                    features.push(this.createFeature_(pbf, rawFeature, options));
                }
            }
            return features;
        }
        /**
         * Read the projection from the source.
         *
         * @param {Document|Element|Object|string} source Source.
         * @return {import("../proj/Projection.js").default} Projection.
         * @api
         */
        readProjection(source) {
            return this.dataProjection;
        }
        /**
         * Sets the layers that features will be read from.
         * @param {Array<string>} layers Layers.
         * @api
         */
        setLayers(layers) {
            this.layers_ = layers;
        }
    }
    /**
     * Reader callback for parsing layers.
     * @param {number} tag The tag.
     * @param {Object} layers The layers object.
     * @param {PBF} pbf The PBF.
     */
    function layersPBFReader(tag, layers, pbf) {
        if (tag === 3) {
            const layer = {
                keys: [],
                values: [],
                features: [],
            };
            const end = pbf.readVarint() + pbf.pos;
            pbf.readFields(layerPBFReader, layer, end);
            layer.length = layer.features.length;
            if (layer.length) {
                layers[layer.name] = layer;
            }
        }
    }
    /**
     * Reader callback for parsing layer.
     * @param {number} tag The tag.
     * @param {Object} layer The layer object.
     * @param {PBF} pbf The PBF.
     */
    function layerPBFReader(tag, layer, pbf) {
        if (tag === 15) {
            layer.version = pbf.readVarint();
        }
        else if (tag === 1) {
            layer.name = pbf.readString();
        }
        else if (tag === 5) {
            layer.extent = pbf.readVarint();
        }
        else if (tag === 2) {
            layer.features.push(pbf.pos);
        }
        else if (tag === 3) {
            layer.keys.push(pbf.readString());
        }
        else if (tag === 4) {
            let value = null;
            const end = pbf.readVarint() + pbf.pos;
            while (pbf.pos < end) {
                tag = pbf.readVarint() >> 3;
                value =
                    tag === 1
                        ? pbf.readString()
                        : tag === 2
                            ? pbf.readFloat()
                            : tag === 3
                                ? pbf.readDouble()
                                : tag === 4
                                    ? pbf.readVarint64()
                                    : tag === 5
                                        ? pbf.readVarint()
                                        : tag === 6
                                            ? pbf.readSVarint()
                                            : tag === 7
                                                ? pbf.readBoolean()
                                                : null;
            }
            layer.values.push(value);
        }
    }
    /**
     * Reader callback for parsing feature.
     * @param {number} tag The tag.
     * @param {Object} feature The feature object.
     * @param {PBF} pbf The PBF.
     */
    function featurePBFReader(tag, feature, pbf) {
        if (tag == 1) {
            feature.id = pbf.readVarint();
        }
        else if (tag == 2) {
            const end = pbf.readVarint() + pbf.pos;
            while (pbf.pos < end) {
                const key = feature.layer.keys[pbf.readVarint()];
                const value = feature.layer.values[pbf.readVarint()];
                feature.properties[key] = value;
            }
        }
        else if (tag == 3) {
            feature.type = pbf.readVarint();
        }
        else if (tag == 4) {
            feature.geometry = pbf.pos;
        }
    }
    /**
     * Read a raw feature from the pbf offset stored at index `i` in the raw layer.
     * @param {PBF} pbf PBF.
     * @param {Object} layer Raw layer.
     * @param {number} i Index of the feature in the raw layer's `features` array.
     * @return {Object} Raw feature.
     */
    function readRawFeature(pbf, layer, i) {
        pbf.pos = layer.features[i];
        const end = pbf.readVarint() + pbf.pos;
        const feature = {
            layer: layer,
            type: 0,
            properties: {},
        };
        pbf.readFields(featurePBFReader, feature, end);
        return feature;
    }
    /**
     * @param {number} type The raw feature's geometry type
     * @param {number} numEnds Number of ends of the flat coordinates of the
     * geometry.
     * @return {import("../geom/GeometryType.js").default} The geometry type.
     */
    function getGeometryType(type, numEnds) {
        /** @type {import("../geom/GeometryType.js").default} */
        let geometryType;
        if (type === 1) {
            geometryType =
                numEnds === 1 ? GeometryType_js_28.default.POINT : GeometryType_js_28.default.MULTI_POINT;
        }
        else if (type === 2) {
            geometryType =
                numEnds === 1 ? GeometryType_js_28.default.LINE_STRING : GeometryType_js_28.default.MULTI_LINE_STRING;
        }
        else if (type === 3) {
            geometryType = GeometryType_js_28.default.POLYGON;
            // MultiPolygon not relevant for rendering - winding order determines
            // outer rings of polygons.
        }
        return geometryType;
    }
    exports.default = MVT;
});
define("node_modules/ol/src/format/XML", ["require", "exports", "node_modules/ol/src/xml"], function (require, exports, xml_js_7) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @classdesc
     * Generic format for reading non-feature XML data
     *
     * @abstract
     */
    class XML {
        /**
         * Read the source document.
         *
         * @param {Document|Element|string} source The XML source.
         * @return {Object} An object representing the source.
         * @api
         */
        read(source) {
            if (!source) {
                return null;
            }
            else if (typeof source === 'string') {
                const doc = xml_js_7.parse(source);
                return this.readFromDocument(doc);
            }
            else if (xml_js_7.isDocument(source)) {
                return this.readFromDocument(/** @type {Document} */ (source));
            }
            else {
                return this.readFromNode(/** @type {Element} */ (source));
            }
        }
        /**
         * @param {Document} doc Document.
         * @return {Object} Object
         */
        readFromDocument(doc) {
            for (let n = doc.firstChild; n; n = n.nextSibling) {
                if (n.nodeType == Node.ELEMENT_NODE) {
                    return this.readFromNode(/** @type {Element} */ (n));
                }
            }
            return null;
        }
        /**
         * @abstract
         * @param {Element} node Node.
         * @return {Object} Object
         */
        readFromNode(node) { }
    }
    exports.default = XML;
});
/**
 * @module ol/format/XLink
 */
define("node_modules/ol/src/format/XLink", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.readHref = void 0;
    /**
     * @const
     * @type {string}
     */
    const NAMESPACE_URI = 'http://www.w3.org/1999/xlink';
    /**
     * @param {Element} node Node.
     * @return {string|undefined} href.
     */
    function readHref(node) {
        return node.getAttributeNS(NAMESPACE_URI, 'href');
    }
    exports.readHref = readHref;
});
define("node_modules/ol/src/format/OWS", ["require", "exports", "node_modules/ol/src/format/XML", "node_modules/ol/src/xml", "node_modules/ol/src/format/XLink", "node_modules/ol/src/format/xsd"], function (require, exports, XML_js_1, xml_js_8, XLink_js_1, xsd_js_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @const
     * @type {Array<null|string>}
     */
    const NAMESPACE_URIS = [null, 'http://www.opengis.net/ows/1.1'];
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const PARSERS = xml_js_8.makeStructureNS(NAMESPACE_URIS, {
        'ServiceIdentification': xml_js_8.makeObjectPropertySetter(readServiceIdentification),
        'ServiceProvider': xml_js_8.makeObjectPropertySetter(readServiceProvider),
        'OperationsMetadata': xml_js_8.makeObjectPropertySetter(readOperationsMetadata),
    });
    class OWS extends XML_js_1.default {
        constructor() {
            super();
        }
        /**
         * @param {Element} node Node.
         * @return {Object} Object
         */
        readFromNode(node) {
            const owsObject = xml_js_8.pushParseAndPop({}, PARSERS, node, []);
            return owsObject ? owsObject : null;
        }
    }
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const ADDRESS_PARSERS = xml_js_8.makeStructureNS(NAMESPACE_URIS, {
        'DeliveryPoint': xml_js_8.makeObjectPropertySetter(xsd_js_4.readString),
        'City': xml_js_8.makeObjectPropertySetter(xsd_js_4.readString),
        'AdministrativeArea': xml_js_8.makeObjectPropertySetter(xsd_js_4.readString),
        'PostalCode': xml_js_8.makeObjectPropertySetter(xsd_js_4.readString),
        'Country': xml_js_8.makeObjectPropertySetter(xsd_js_4.readString),
        'ElectronicMailAddress': xml_js_8.makeObjectPropertySetter(xsd_js_4.readString),
    });
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const ALLOWED_VALUES_PARSERS = xml_js_8.makeStructureNS(NAMESPACE_URIS, {
        'Value': xml_js_8.makeObjectPropertyPusher(readValue),
    });
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const CONSTRAINT_PARSERS = xml_js_8.makeStructureNS(NAMESPACE_URIS, {
        'AllowedValues': xml_js_8.makeObjectPropertySetter(readAllowedValues),
    });
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const CONTACT_INFO_PARSERS = xml_js_8.makeStructureNS(NAMESPACE_URIS, {
        'Phone': xml_js_8.makeObjectPropertySetter(readPhone),
        'Address': xml_js_8.makeObjectPropertySetter(readAddress),
    });
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const DCP_PARSERS = xml_js_8.makeStructureNS(NAMESPACE_URIS, {
        'HTTP': xml_js_8.makeObjectPropertySetter(readHttp),
    });
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const HTTP_PARSERS = xml_js_8.makeStructureNS(NAMESPACE_URIS, {
        'Get': xml_js_8.makeObjectPropertyPusher(readGet),
        'Post': undefined,
    });
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const OPERATION_PARSERS = xml_js_8.makeStructureNS(NAMESPACE_URIS, {
        'DCP': xml_js_8.makeObjectPropertySetter(readDcp),
    });
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const OPERATIONS_METADATA_PARSERS = xml_js_8.makeStructureNS(NAMESPACE_URIS, {
        'Operation': readOperation,
    });
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const PHONE_PARSERS = xml_js_8.makeStructureNS(NAMESPACE_URIS, {
        'Voice': xml_js_8.makeObjectPropertySetter(xsd_js_4.readString),
        'Facsimile': xml_js_8.makeObjectPropertySetter(xsd_js_4.readString),
    });
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const REQUEST_METHOD_PARSERS = xml_js_8.makeStructureNS(NAMESPACE_URIS, {
        'Constraint': xml_js_8.makeObjectPropertyPusher(readConstraint),
    });
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const SERVICE_CONTACT_PARSERS = xml_js_8.makeStructureNS(NAMESPACE_URIS, {
        'IndividualName': xml_js_8.makeObjectPropertySetter(xsd_js_4.readString),
        'PositionName': xml_js_8.makeObjectPropertySetter(xsd_js_4.readString),
        'ContactInfo': xml_js_8.makeObjectPropertySetter(readContactInfo),
    });
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const SERVICE_IDENTIFICATION_PARSERS = xml_js_8.makeStructureNS(NAMESPACE_URIS, {
        'Abstract': xml_js_8.makeObjectPropertySetter(xsd_js_4.readString),
        'AccessConstraints': xml_js_8.makeObjectPropertySetter(xsd_js_4.readString),
        'Fees': xml_js_8.makeObjectPropertySetter(xsd_js_4.readString),
        'Title': xml_js_8.makeObjectPropertySetter(xsd_js_4.readString),
        'ServiceTypeVersion': xml_js_8.makeObjectPropertySetter(xsd_js_4.readString),
        'ServiceType': xml_js_8.makeObjectPropertySetter(xsd_js_4.readString),
    });
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const SERVICE_PROVIDER_PARSERS = xml_js_8.makeStructureNS(NAMESPACE_URIS, {
        'ProviderName': xml_js_8.makeObjectPropertySetter(xsd_js_4.readString),
        'ProviderSite': xml_js_8.makeObjectPropertySetter(XLink_js_1.readHref),
        'ServiceContact': xml_js_8.makeObjectPropertySetter(readServiceContact),
    });
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Object|undefined} The address.
     */
    function readAddress(node, objectStack) {
        return xml_js_8.pushParseAndPop({}, ADDRESS_PARSERS, node, objectStack);
    }
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Object|undefined} The values.
     */
    function readAllowedValues(node, objectStack) {
        return xml_js_8.pushParseAndPop({}, ALLOWED_VALUES_PARSERS, node, objectStack);
    }
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Object|undefined} The constraint.
     */
    function readConstraint(node, objectStack) {
        const name = node.getAttribute('name');
        if (!name) {
            return undefined;
        }
        return xml_js_8.pushParseAndPop({ 'name': name }, CONSTRAINT_PARSERS, node, objectStack);
    }
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Object|undefined} The contact info.
     */
    function readContactInfo(node, objectStack) {
        return xml_js_8.pushParseAndPop({}, CONTACT_INFO_PARSERS, node, objectStack);
    }
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Object|undefined} The DCP.
     */
    function readDcp(node, objectStack) {
        return xml_js_8.pushParseAndPop({}, DCP_PARSERS, node, objectStack);
    }
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Object|undefined} The GET object.
     */
    function readGet(node, objectStack) {
        const href = XLink_js_1.readHref(node);
        if (!href) {
            return undefined;
        }
        return xml_js_8.pushParseAndPop({ 'href': href }, REQUEST_METHOD_PARSERS, node, objectStack);
    }
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Object|undefined} The HTTP object.
     */
    function readHttp(node, objectStack) {
        return xml_js_8.pushParseAndPop({}, HTTP_PARSERS, node, objectStack);
    }
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Object|undefined} The operation.
     */
    function readOperation(node, objectStack) {
        const name = node.getAttribute('name');
        const value = xml_js_8.pushParseAndPop({}, OPERATION_PARSERS, node, objectStack);
        if (!value) {
            return undefined;
        }
        const object = /** @type {Object} */ (objectStack[objectStack.length - 1]);
        object[name] = value;
    }
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Object|undefined} The operations metadata.
     */
    function readOperationsMetadata(node, objectStack) {
        return xml_js_8.pushParseAndPop({}, OPERATIONS_METADATA_PARSERS, node, objectStack);
    }
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Object|undefined} The phone.
     */
    function readPhone(node, objectStack) {
        return xml_js_8.pushParseAndPop({}, PHONE_PARSERS, node, objectStack);
    }
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Object|undefined} The service identification.
     */
    function readServiceIdentification(node, objectStack) {
        return xml_js_8.pushParseAndPop({}, SERVICE_IDENTIFICATION_PARSERS, node, objectStack);
    }
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Object|undefined} The service contact.
     */
    function readServiceContact(node, objectStack) {
        return xml_js_8.pushParseAndPop({}, SERVICE_CONTACT_PARSERS, node, objectStack);
    }
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Object|undefined} The service provider.
     */
    function readServiceProvider(node, objectStack) {
        return xml_js_8.pushParseAndPop({}, SERVICE_PROVIDER_PARSERS, node, objectStack);
    }
    /**
     * @param {Node} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {string|undefined} The value.
     */
    function readValue(node, objectStack) {
        return xsd_js_4.readString(node);
    }
    exports.default = OWS;
});
/**
 * @module ol/geom/flat/flip
 */
define("node_modules/ol/src/geom/flat/flip", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.flipXY = void 0;
    /**
     * @param {Array<number>} flatCoordinates Flat coordinates.
     * @param {number} offset Offset.
     * @param {number} end End.
     * @param {number} stride Stride.
     * @param {Array<number>=} opt_dest Destination.
     * @param {number=} opt_destOffset Destination offset.
     * @return {Array<number>} Flat coordinates.
     */
    function flipXY(flatCoordinates, offset, end, stride, opt_dest, opt_destOffset) {
        let dest, destOffset;
        if (opt_dest !== undefined) {
            dest = opt_dest;
            destOffset = opt_destOffset !== undefined ? opt_destOffset : 0;
        }
        else {
            dest = [];
            destOffset = 0;
        }
        let j = offset;
        while (j < end) {
            const x = flatCoordinates[j++];
            dest[destOffset++] = flatCoordinates[j++];
            dest[destOffset++] = x;
            for (let k = 2; k < stride; ++k) {
                dest[destOffset++] = flatCoordinates[j++];
            }
        }
        dest.length = destOffset;
        return dest;
    }
    exports.flipXY = flipXY;
});
define("node_modules/ol/src/format/Polyline", ["require", "exports", "node_modules/ol/src/Feature", "node_modules/ol/src/geom/GeometryLayout", "node_modules/ol/src/geom/LineString", "node_modules/ol/src/format/TextFeature", "node_modules/ol/src/asserts", "node_modules/ol/src/geom/flat/flip", "node_modules/ol/src/proj", "node_modules/ol/src/geom/SimpleGeometry", "node_modules/ol/src/geom/flat/inflate", "node_modules/ol/src/format/Feature"], function (require, exports, Feature_js_22, GeometryLayout_js_14, LineString_js_11, TextFeature_js_2, asserts_js_26, flip_js_1, proj_js_29, SimpleGeometry_js_10, inflate_js_8, Feature_js_23) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.encodeUnsignedInteger = exports.decodeUnsignedIntegers = exports.encodeUnsignedIntegers = exports.decodeSignedIntegers = exports.encodeSignedIntegers = exports.decodeFloats = exports.encodeFloats = exports.decodeDeltas = exports.encodeDeltas = void 0;
    /**
     * @typedef {Object} Options
     * @property {number} [factor=1e5] The factor by which the coordinates values will be scaled.
     * @property {GeometryLayout} [geometryLayout='XY'] Layout of the
     * feature geometries created by the format reader.
     */
    /**
     * @classdesc
     * Feature format for reading and writing data in the Encoded
     * Polyline Algorithm Format.
     *
     * When reading features, the coordinates are assumed to be in two dimensions
     * and in [latitude, longitude] order.
     *
     * As Polyline sources contain a single feature,
     * {@link module:ol/format/Polyline~Polyline#readFeatures} will return the
     * feature in an array.
     *
     * @api
     */
    class Polyline extends TextFeature_js_2.default {
        /**
         * @param {Options=} opt_options Optional configuration object.
         */
        constructor(opt_options) {
            super();
            const options = opt_options ? opt_options : {};
            /**
             * @type {import("../proj/Projection.js").default}
             */
            this.dataProjection = proj_js_29.get('EPSG:4326');
            /**
             * @private
             * @type {number}
             */
            this.factor_ = options.factor ? options.factor : 1e5;
            /**
             * @private
             * @type {import("../geom/GeometryLayout").default}
             */
            this.geometryLayout_ = options.geometryLayout
                ? options.geometryLayout
                : GeometryLayout_js_14.default.XY;
        }
        /**
         * @protected
         * @param {string} text Text.
         * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
         * @return {import("../Feature.js").default} Feature.
         */
        readFeatureFromText(text, opt_options) {
            const geometry = this.readGeometryFromText(text, opt_options);
            return new Feature_js_22.default(geometry);
        }
        /**
         * @param {string} text Text.
         * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
         * @protected
         * @return {Array<Feature>} Features.
         */
        readFeaturesFromText(text, opt_options) {
            const feature = this.readFeatureFromText(text, opt_options);
            return [feature];
        }
        /**
         * @param {string} text Text.
         * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
         * @protected
         * @return {import("../geom/Geometry.js").default} Geometry.
         */
        readGeometryFromText(text, opt_options) {
            const stride = SimpleGeometry_js_10.getStrideForLayout(this.geometryLayout_);
            const flatCoordinates = decodeDeltas(text, stride, this.factor_);
            flip_js_1.flipXY(flatCoordinates, 0, flatCoordinates.length, stride, flatCoordinates);
            const coordinates = inflate_js_8.inflateCoordinates(flatCoordinates, 0, flatCoordinates.length, stride);
            const lineString = new LineString_js_11.default(coordinates, this.geometryLayout_);
            return Feature_js_23.transformGeometryWithOptions(lineString, false, this.adaptOptions(opt_options));
        }
        /**
         * @param {import("../Feature.js").default} feature Features.
         * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
         * @protected
         * @return {string} Text.
         */
        writeFeatureText(feature, opt_options) {
            const geometry = feature.getGeometry();
            if (geometry) {
                return this.writeGeometryText(geometry, opt_options);
            }
            else {
                asserts_js_26.assert(false, 40); // Expected `feature` to have a geometry
                return '';
            }
        }
        /**
         * @param {Array<import("../Feature.js").default>} features Features.
         * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
         * @protected
         * @return {string} Text.
         */
        writeFeaturesText(features, opt_options) {
            return this.writeFeatureText(features[0], opt_options);
        }
        /**
         * @param {LineString} geometry Geometry.
         * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
         * @protected
         * @return {string} Text.
         */
        writeGeometryText(geometry, opt_options) {
            geometry =
                /** @type {LineString} */
                (Feature_js_23.transformGeometryWithOptions(geometry, true, this.adaptOptions(opt_options)));
            const flatCoordinates = geometry.getFlatCoordinates();
            const stride = geometry.getStride();
            flip_js_1.flipXY(flatCoordinates, 0, flatCoordinates.length, stride, flatCoordinates);
            return encodeDeltas(flatCoordinates, stride, this.factor_);
        }
    }
    /**
     * Encode a list of n-dimensional points and return an encoded string
     *
     * Attention: This function will modify the passed array!
     *
     * @param {Array<number>} numbers A list of n-dimensional points.
     * @param {number} stride The number of dimension of the points in the list.
     * @param {number=} opt_factor The factor by which the numbers will be
     *     multiplied. The remaining decimal places will get rounded away.
     *     Default is `1e5`.
     * @return {string} The encoded string.
     * @api
     */
    function encodeDeltas(numbers, stride, opt_factor) {
        const factor = opt_factor ? opt_factor : 1e5;
        let d;
        const lastNumbers = new Array(stride);
        for (d = 0; d < stride; ++d) {
            lastNumbers[d] = 0;
        }
        for (let i = 0, ii = numbers.length; i < ii;) {
            for (d = 0; d < stride; ++d, ++i) {
                const num = numbers[i];
                const delta = num - lastNumbers[d];
                lastNumbers[d] = num;
                numbers[i] = delta;
            }
        }
        return encodeFloats(numbers, factor);
    }
    exports.encodeDeltas = encodeDeltas;
    /**
     * Decode a list of n-dimensional points from an encoded string
     *
     * @param {string} encoded An encoded string.
     * @param {number} stride The number of dimension of the points in the
     *     encoded string.
     * @param {number=} opt_factor The factor by which the resulting numbers will
     *     be divided. Default is `1e5`.
     * @return {Array<number>} A list of n-dimensional points.
     * @api
     */
    function decodeDeltas(encoded, stride, opt_factor) {
        const factor = opt_factor ? opt_factor : 1e5;
        let d;
        /** @type {Array<number>} */
        const lastNumbers = new Array(stride);
        for (d = 0; d < stride; ++d) {
            lastNumbers[d] = 0;
        }
        const numbers = decodeFloats(encoded, factor);
        for (let i = 0, ii = numbers.length; i < ii;) {
            for (d = 0; d < stride; ++d, ++i) {
                lastNumbers[d] += numbers[i];
                numbers[i] = lastNumbers[d];
            }
        }
        return numbers;
    }
    exports.decodeDeltas = decodeDeltas;
    /**
     * Encode a list of floating point numbers and return an encoded string
     *
     * Attention: This function will modify the passed array!
     *
     * @param {Array<number>} numbers A list of floating point numbers.
     * @param {number=} opt_factor The factor by which the numbers will be
     *     multiplied. The remaining decimal places will get rounded away.
     *     Default is `1e5`.
     * @return {string} The encoded string.
     * @api
     */
    function encodeFloats(numbers, opt_factor) {
        const factor = opt_factor ? opt_factor : 1e5;
        for (let i = 0, ii = numbers.length; i < ii; ++i) {
            numbers[i] = Math.round(numbers[i] * factor);
        }
        return encodeSignedIntegers(numbers);
    }
    exports.encodeFloats = encodeFloats;
    /**
     * Decode a list of floating point numbers from an encoded string
     *
     * @param {string} encoded An encoded string.
     * @param {number=} opt_factor The factor by which the result will be divided.
     *     Default is `1e5`.
     * @return {Array<number>} A list of floating point numbers.
     * @api
     */
    function decodeFloats(encoded, opt_factor) {
        const factor = opt_factor ? opt_factor : 1e5;
        const numbers = decodeSignedIntegers(encoded);
        for (let i = 0, ii = numbers.length; i < ii; ++i) {
            numbers[i] /= factor;
        }
        return numbers;
    }
    exports.decodeFloats = decodeFloats;
    /**
     * Encode a list of signed integers and return an encoded string
     *
     * Attention: This function will modify the passed array!
     *
     * @param {Array<number>} numbers A list of signed integers.
     * @return {string} The encoded string.
     */
    function encodeSignedIntegers(numbers) {
        for (let i = 0, ii = numbers.length; i < ii; ++i) {
            const num = numbers[i];
            numbers[i] = num < 0 ? ~(num << 1) : num << 1;
        }
        return encodeUnsignedIntegers(numbers);
    }
    exports.encodeSignedIntegers = encodeSignedIntegers;
    /**
     * Decode a list of signed integers from an encoded string
     *
     * @param {string} encoded An encoded string.
     * @return {Array<number>} A list of signed integers.
     */
    function decodeSignedIntegers(encoded) {
        const numbers = decodeUnsignedIntegers(encoded);
        for (let i = 0, ii = numbers.length; i < ii; ++i) {
            const num = numbers[i];
            numbers[i] = num & 1 ? ~(num >> 1) : num >> 1;
        }
        return numbers;
    }
    exports.decodeSignedIntegers = decodeSignedIntegers;
    /**
     * Encode a list of unsigned integers and return an encoded string
     *
     * @param {Array<number>} numbers A list of unsigned integers.
     * @return {string} The encoded string.
     */
    function encodeUnsignedIntegers(numbers) {
        let encoded = '';
        for (let i = 0, ii = numbers.length; i < ii; ++i) {
            encoded += encodeUnsignedInteger(numbers[i]);
        }
        return encoded;
    }
    exports.encodeUnsignedIntegers = encodeUnsignedIntegers;
    /**
     * Decode a list of unsigned integers from an encoded string
     *
     * @param {string} encoded An encoded string.
     * @return {Array<number>} A list of unsigned integers.
     */
    function decodeUnsignedIntegers(encoded) {
        const numbers = [];
        let current = 0;
        let shift = 0;
        for (let i = 0, ii = encoded.length; i < ii; ++i) {
            const b = encoded.charCodeAt(i) - 63;
            current |= (b & 0x1f) << shift;
            if (b < 0x20) {
                numbers.push(current);
                current = 0;
                shift = 0;
            }
            else {
                shift += 5;
            }
        }
        return numbers;
    }
    exports.decodeUnsignedIntegers = decodeUnsignedIntegers;
    /**
     * Encode one single unsigned integer and return an encoded string
     *
     * @param {number} num Unsigned integer that should be encoded.
     * @return {string} The encoded string.
     */
    function encodeUnsignedInteger(num) {
        let value, encoded = '';
        while (num >= 0x20) {
            value = (0x20 | (num & 0x1f)) + 63;
            encoded += String.fromCharCode(value);
            num >>= 5;
        }
        value = num + 63;
        encoded += String.fromCharCode(value);
        return encoded;
    }
    exports.encodeUnsignedInteger = encodeUnsignedInteger;
    exports.default = Polyline;
});
define("node_modules/ol/src/format/TopoJSON", ["require", "exports", "node_modules/ol/src/Feature", "node_modules/ol/src/format/JSONFeature", "node_modules/ol/src/geom/LineString", "node_modules/ol/src/geom/MultiLineString", "node_modules/ol/src/geom/MultiPoint", "node_modules/ol/src/geom/MultiPolygon", "node_modules/ol/src/geom/Point", "node_modules/ol/src/geom/Polygon", "node_modules/ol/src/proj", "node_modules/ol/src/format/Feature"], function (require, exports, Feature_js_24, JSONFeature_js_3, LineString_js_12, MultiLineString_js_9, MultiPoint_js_8, MultiPolygon_js_8, Point_js_12, Polygon_js_16, proj_js_30, Feature_js_25) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @typedef {import("topojson-specification").Topology} TopoJSONTopology
     * @typedef {import("topojson-specification").GeometryCollection} TopoJSONGeometryCollection
     * @typedef {import("topojson-specification").GeometryObject} TopoJSONGeometry
     * @typedef {import("topojson-specification").Point} TopoJSONPoint
     * @typedef {import("topojson-specification").MultiPoint} TopoJSONMultiPoint
     * @typedef {import("topojson-specification").LineString} TopoJSONLineString
     * @typedef {import("topojson-specification").MultiLineString} TopoJSONMultiLineString
     * @typedef {import("topojson-specification").Polygon} TopoJSONPolygon
     * @typedef {import("topojson-specification").MultiPolygon} TopoJSONMultiPolygon
     */
    /**
     * @typedef {Object} Options
     * @property {import("../proj.js").ProjectionLike} [dataProjection='EPSG:4326'] Default data projection.
     * @property {string} [layerName] Set the name of the TopoJSON topology
     * `objects`'s children as feature property with the specified name. This means
     * that when set to `'layer'`, a topology like
     * ```
     * {
     *   "type": "Topology",
     *   "objects": {
     *     "example": {
     *       "type": "GeometryCollection",
     *       "geometries": []
     *     }
     *   }
     * }
     * ```
     * will result in features that have a property `'layer'` set to `'example'`.
     * When not set, no property will be added to features.
     * @property {Array<string>} [layers] Names of the TopoJSON topology's
     * `objects`'s children to read features from.  If not provided, features will
     * be read from all children.
     */
    /**
     * @classdesc
     * Feature format for reading data in the TopoJSON format.
     *
     * @api
     */
    class TopoJSON extends JSONFeature_js_3.default {
        /**
         * @param {Options=} opt_options Options.
         */
        constructor(opt_options) {
            super();
            const options = opt_options ? opt_options : {};
            /**
             * @private
             * @type {string|undefined}
             */
            this.layerName_ = options.layerName;
            /**
             * @private
             * @type {?Array<string>}
             */
            this.layers_ = options.layers ? options.layers : null;
            /**
             * @type {import("../proj/Projection.js").default}
             */
            this.dataProjection = proj_js_30.get(options.dataProjection ? options.dataProjection : 'EPSG:4326');
        }
        /**
         * @param {Object} object Object.
         * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
         * @protected
         * @return {Array<Feature>} Features.
         */
        readFeaturesFromObject(object, opt_options) {
            if (object.type == 'Topology') {
                const topoJSONTopology = /** @type {TopoJSONTopology} */ (object);
                let transform, scale = null, translate = null;
                if (topoJSONTopology['transform']) {
                    transform = topoJSONTopology['transform'];
                    scale = transform['scale'];
                    translate = transform['translate'];
                }
                const arcs = topoJSONTopology['arcs'];
                if (transform) {
                    transformArcs(arcs, scale, translate);
                }
                /** @type {Array<Feature>} */
                const features = [];
                const topoJSONFeatures = topoJSONTopology['objects'];
                const property = this.layerName_;
                let feature;
                for (const objectName in topoJSONFeatures) {
                    if (this.layers_ && this.layers_.indexOf(objectName) == -1) {
                        continue;
                    }
                    if (topoJSONFeatures[objectName].type === 'GeometryCollection') {
                        feature = /** @type {TopoJSONGeometryCollection} */ (topoJSONFeatures[objectName]);
                        features.push.apply(features, readFeaturesFromGeometryCollection(feature, arcs, scale, translate, property, objectName, opt_options));
                    }
                    else {
                        feature = /** @type {TopoJSONGeometry} */ (topoJSONFeatures[objectName]);
                        features.push(readFeatureFromGeometry(feature, arcs, scale, translate, property, objectName, opt_options));
                    }
                }
                return features;
            }
            else {
                return [];
            }
        }
        /**
         * @param {Object} object Object.
         * @protected
         * @return {import("../proj/Projection.js").default} Projection.
         */
        readProjectionFromObject(object) {
            return this.dataProjection;
        }
    }
    /**
     * @const
     * @type {Object<string, function(TopoJSONGeometry, Array, ...Array=): import("../geom/Geometry.js").default>}
     */
    const GEOMETRY_READERS = {
        'Point': readPointGeometry,
        'LineString': readLineStringGeometry,
        'Polygon': readPolygonGeometry,
        'MultiPoint': readMultiPointGeometry,
        'MultiLineString': readMultiLineStringGeometry,
        'MultiPolygon': readMultiPolygonGeometry,
    };
    /**
     * Concatenate arcs into a coordinate array.
     * @param {Array<number>} indices Indices of arcs to concatenate.  Negative
     *     values indicate arcs need to be reversed.
     * @param {Array<Array<import("../coordinate.js").Coordinate>>} arcs Array of arcs (already
     *     transformed).
     * @return {Array<import("../coordinate.js").Coordinate>} Coordinates array.
     */
    function concatenateArcs(indices, arcs) {
        /** @type {Array<import("../coordinate.js").Coordinate>} */
        const coordinates = [];
        let index, arc;
        for (let i = 0, ii = indices.length; i < ii; ++i) {
            index = indices[i];
            if (i > 0) {
                // splicing together arcs, discard last point
                coordinates.pop();
            }
            if (index >= 0) {
                // forward arc
                arc = arcs[index];
            }
            else {
                // reverse arc
                arc = arcs[~index].slice().reverse();
            }
            coordinates.push.apply(coordinates, arc);
        }
        // provide fresh copies of coordinate arrays
        for (let j = 0, jj = coordinates.length; j < jj; ++j) {
            coordinates[j] = coordinates[j].slice();
        }
        return coordinates;
    }
    /**
     * Create a point from a TopoJSON geometry object.
     *
     * @param {TopoJSONPoint} object TopoJSON object.
     * @param {Array<number>} scale Scale for each dimension.
     * @param {Array<number>} translate Translation for each dimension.
     * @return {Point} Geometry.
     */
    function readPointGeometry(object, scale, translate) {
        const coordinates = object['coordinates'];
        if (scale && translate) {
            transformVertex(coordinates, scale, translate);
        }
        return new Point_js_12.default(coordinates);
    }
    /**
     * Create a multi-point from a TopoJSON geometry object.
     *
     * @param {TopoJSONMultiPoint} object TopoJSON object.
     * @param {Array<number>} scale Scale for each dimension.
     * @param {Array<number>} translate Translation for each dimension.
     * @return {MultiPoint} Geometry.
     */
    function readMultiPointGeometry(object, scale, translate) {
        const coordinates = object['coordinates'];
        if (scale && translate) {
            for (let i = 0, ii = coordinates.length; i < ii; ++i) {
                transformVertex(coordinates[i], scale, translate);
            }
        }
        return new MultiPoint_js_8.default(coordinates);
    }
    /**
     * Create a linestring from a TopoJSON geometry object.
     *
     * @param {TopoJSONLineString} object TopoJSON object.
     * @param {Array<Array<import("../coordinate.js").Coordinate>>} arcs Array of arcs.
     * @return {LineString} Geometry.
     */
    function readLineStringGeometry(object, arcs) {
        const coordinates = concatenateArcs(object['arcs'], arcs);
        return new LineString_js_12.default(coordinates);
    }
    /**
     * Create a multi-linestring from a TopoJSON geometry object.
     *
     * @param {TopoJSONMultiLineString} object TopoJSON object.
     * @param {Array<Array<import("../coordinate.js").Coordinate>>} arcs Array of arcs.
     * @return {MultiLineString} Geometry.
     */
    function readMultiLineStringGeometry(object, arcs) {
        const coordinates = [];
        for (let i = 0, ii = object['arcs'].length; i < ii; ++i) {
            coordinates[i] = concatenateArcs(object['arcs'][i], arcs);
        }
        return new MultiLineString_js_9.default(coordinates);
    }
    /**
     * Create a polygon from a TopoJSON geometry object.
     *
     * @param {TopoJSONPolygon} object TopoJSON object.
     * @param {Array<Array<import("../coordinate.js").Coordinate>>} arcs Array of arcs.
     * @return {Polygon} Geometry.
     */
    function readPolygonGeometry(object, arcs) {
        const coordinates = [];
        for (let i = 0, ii = object['arcs'].length; i < ii; ++i) {
            coordinates[i] = concatenateArcs(object['arcs'][i], arcs);
        }
        return new Polygon_js_16.default(coordinates);
    }
    /**
     * Create a multi-polygon from a TopoJSON geometry object.
     *
     * @param {TopoJSONMultiPolygon} object TopoJSON object.
     * @param {Array<Array<import("../coordinate.js").Coordinate>>} arcs Array of arcs.
     * @return {MultiPolygon} Geometry.
     */
    function readMultiPolygonGeometry(object, arcs) {
        const coordinates = [];
        for (let i = 0, ii = object['arcs'].length; i < ii; ++i) {
            // for each polygon
            const polyArray = object['arcs'][i];
            const ringCoords = [];
            for (let j = 0, jj = polyArray.length; j < jj; ++j) {
                // for each ring
                ringCoords[j] = concatenateArcs(polyArray[j], arcs);
            }
            coordinates[i] = ringCoords;
        }
        return new MultiPolygon_js_8.default(coordinates);
    }
    /**
     * Create features from a TopoJSON GeometryCollection object.
     *
     * @param {TopoJSONGeometryCollection} collection TopoJSON Geometry
     *     object.
     * @param {Array<Array<import("../coordinate.js").Coordinate>>} arcs Array of arcs.
     * @param {Array<number>} scale Scale for each dimension.
     * @param {Array<number>} translate Translation for each dimension.
     * @param {string|undefined} property Property to set the `GeometryCollection`'s parent
     *     object to.
     * @param {string} name Name of the `Topology`'s child object.
     * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
     * @return {Array<Feature>} Array of features.
     */
    function readFeaturesFromGeometryCollection(collection, arcs, scale, translate, property, name, opt_options) {
        const geometries = collection['geometries'];
        const features = [];
        for (let i = 0, ii = geometries.length; i < ii; ++i) {
            features[i] = readFeatureFromGeometry(geometries[i], arcs, scale, translate, property, name, opt_options);
        }
        return features;
    }
    /**
     * Create a feature from a TopoJSON geometry object.
     *
     * @param {TopoJSONGeometry} object TopoJSON geometry object.
     * @param {Array<Array<import("../coordinate.js").Coordinate>>} arcs Array of arcs.
     * @param {Array<number>} scale Scale for each dimension.
     * @param {Array<number>} translate Translation for each dimension.
     * @param {string|undefined} property Property to set the `GeometryCollection`'s parent
     *     object to.
     * @param {string} name Name of the `Topology`'s child object.
     * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
     * @return {Feature} Feature.
     */
    function readFeatureFromGeometry(object, arcs, scale, translate, property, name, opt_options) {
        let geometry;
        const type = object.type;
        const geometryReader = GEOMETRY_READERS[type];
        if (type === 'Point' || type === 'MultiPoint') {
            geometry = geometryReader(object, scale, translate);
        }
        else {
            geometry = geometryReader(object, arcs);
        }
        const feature = new Feature_js_24.default();
        feature.setGeometry(Feature_js_25.transformGeometryWithOptions(geometry, false, opt_options));
        if (object.id !== undefined) {
            feature.setId(object.id);
        }
        let properties = object.properties;
        if (property) {
            if (!properties) {
                properties = {};
            }
            properties[property] = name;
        }
        if (properties) {
            feature.setProperties(properties, true);
        }
        return feature;
    }
    /**
     * Apply a linear transform to array of arcs.  The provided array of arcs is
     * modified in place.
     *
     * @param {Array<Array<import("../coordinate.js").Coordinate>>} arcs Array of arcs.
     * @param {Array<number>} scale Scale for each dimension.
     * @param {Array<number>} translate Translation for each dimension.
     */
    function transformArcs(arcs, scale, translate) {
        for (let i = 0, ii = arcs.length; i < ii; ++i) {
            transformArc(arcs[i], scale, translate);
        }
    }
    /**
     * Apply a linear transform to an arc.  The provided arc is modified in place.
     *
     * @param {Array<import("../coordinate.js").Coordinate>} arc Arc.
     * @param {Array<number>} scale Scale for each dimension.
     * @param {Array<number>} translate Translation for each dimension.
     */
    function transformArc(arc, scale, translate) {
        let x = 0;
        let y = 0;
        for (let i = 0, ii = arc.length; i < ii; ++i) {
            const vertex = arc[i];
            x += vertex[0];
            y += vertex[1];
            vertex[0] = x;
            vertex[1] = y;
            transformVertex(vertex, scale, translate);
        }
    }
    /**
     * Apply a linear transform to a vertex.  The provided vertex is modified in
     * place.
     *
     * @param {import("../coordinate.js").Coordinate} vertex Vertex.
     * @param {Array<number>} scale Scale for each dimension.
     * @param {Array<number>} translate Translation for each dimension.
     */
    function transformVertex(vertex, scale, translate) {
        vertex[0] = vertex[0] * scale[0] + translate[0];
        vertex[1] = vertex[1] * scale[1] + translate[1];
    }
    exports.default = TopoJSON;
});
define("node_modules/ol/src/format/GML2", ["require", "exports", "node_modules/ol/src/format/GMLBase", "node_modules/ol/src/xml", "node_modules/ol/src/obj", "node_modules/ol/src/extent", "node_modules/ol/src/proj", "node_modules/ol/src/format/Feature", "node_modules/ol/src/format/xsd"], function (require, exports, GMLBase_js_2, xml_js_9, obj_js_25, extent_js_51, proj_js_31, Feature_js_26, xsd_js_5) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @const
     * @type {string}
     */
    const schemaLocation = GMLBase_js_2.GMLNS + ' http://schemas.opengis.net/gml/2.1.2/feature.xsd';
    /**
     * @const
     * @type {Object<string, string>}
     */
    const MULTIGEOMETRY_TO_MEMBER_NODENAME = {
        'MultiLineString': 'lineStringMember',
        'MultiCurve': 'curveMember',
        'MultiPolygon': 'polygonMember',
        'MultiSurface': 'surfaceMember',
    };
    /**
     * @classdesc
     * Feature format for reading and writing data in the GML format,
     * version 2.1.2.
     *
     * @api
     */
    class GML2 extends GMLBase_js_2.default {
        /**
         * @param {import("./GMLBase.js").Options=} opt_options Optional configuration object.
         */
        constructor(opt_options) {
            const options = 
            /** @type {import("./GMLBase.js").Options} */
            (opt_options ? opt_options : {});
            super(options);
            this.FEATURE_COLLECTION_PARSERS[GMLBase_js_2.GMLNS]['featureMember'] = xml_js_9.makeArrayPusher(this.readFeaturesInternal);
            /**
             * @type {string}
             */
            this.schemaLocation = options.schemaLocation
                ? options.schemaLocation
                : schemaLocation;
        }
        /**
         * @param {Node} node Node.
         * @param {Array<*>} objectStack Object stack.
         * @return {Array<number>|undefined} Flat coordinates.
         */
        readFlatCoordinates(node, objectStack) {
            const s = xml_js_9.getAllTextContent(node, false).replace(/^\s*|\s*$/g, '');
            const context = /** @type {import("../xml.js").NodeStackItem} */ (objectStack[0]);
            const containerSrs = context['srsName'];
            let axisOrientation = 'enu';
            if (containerSrs) {
                const proj = proj_js_31.get(containerSrs);
                if (proj) {
                    axisOrientation = proj.getAxisOrientation();
                }
            }
            const coordsGroups = s.trim().split(/\s+/);
            const flatCoordinates = [];
            for (let i = 0, ii = coordsGroups.length; i < ii; i++) {
                const coords = coordsGroups[i].split(/,+/);
                const x = parseFloat(coords[0]);
                const y = parseFloat(coords[1]);
                const z = coords.length === 3 ? parseFloat(coords[2]) : 0;
                if (axisOrientation.substr(0, 2) === 'en') {
                    flatCoordinates.push(x, y, z);
                }
                else {
                    flatCoordinates.push(y, x, z);
                }
            }
            return flatCoordinates;
        }
        /**
         * @param {Element} node Node.
         * @param {Array<*>} objectStack Object stack.
         * @return {import("../extent.js").Extent|undefined} Envelope.
         */
        readBox(node, objectStack) {
            /** @type {Array<number>} */
            const flatCoordinates = xml_js_9.pushParseAndPop([null], this.BOX_PARSERS_, node, objectStack, this);
            return extent_js_51.createOrUpdate(flatCoordinates[1][0], flatCoordinates[1][1], flatCoordinates[1][3], flatCoordinates[1][4]);
        }
        /**
         * @param {Element} node Node.
         * @param {Array<*>} objectStack Object stack.
         */
        innerBoundaryIsParser(node, objectStack) {
            /** @type {Array<number>|undefined} */
            const flatLinearRing = xml_js_9.pushParseAndPop(undefined, this.RING_PARSERS, node, objectStack, this);
            if (flatLinearRing) {
                const flatLinearRings = 
                /** @type {Array<Array<number>>} */
                (objectStack[objectStack.length - 1]);
                flatLinearRings.push(flatLinearRing);
            }
        }
        /**
         * @param {Element} node Node.
         * @param {Array<*>} objectStack Object stack.
         */
        outerBoundaryIsParser(node, objectStack) {
            /** @type {Array<number>|undefined} */
            const flatLinearRing = xml_js_9.pushParseAndPop(undefined, this.RING_PARSERS, node, objectStack, this);
            if (flatLinearRing) {
                const flatLinearRings = 
                /** @type {Array<Array<number>>} */
                (objectStack[objectStack.length - 1]);
                flatLinearRings[0] = flatLinearRing;
            }
        }
        /**
         * @const
         * @param {*} value Value.
         * @param {Array<*>} objectStack Object stack.
         * @param {string=} opt_nodeName Node name.
         * @return {Element|undefined} Node.
         * @private
         */
        GEOMETRY_NODE_FACTORY_(value, objectStack, opt_nodeName) {
            const context = objectStack[objectStack.length - 1];
            const multiSurface = context['multiSurface'];
            const surface = context['surface'];
            const multiCurve = context['multiCurve'];
            let nodeName;
            if (!Array.isArray(value)) {
                nodeName = /** @type {import("../geom/Geometry.js").default} */ (value).getType();
                if (nodeName === 'MultiPolygon' && multiSurface === true) {
                    nodeName = 'MultiSurface';
                }
                else if (nodeName === 'Polygon' && surface === true) {
                    nodeName = 'Surface';
                }
                else if (nodeName === 'MultiLineString' && multiCurve === true) {
                    nodeName = 'MultiCurve';
                }
            }
            else {
                nodeName = 'Envelope';
            }
            return xml_js_9.createElementNS('http://www.opengis.net/gml', nodeName);
        }
        /**
         * @param {Element} node Node.
         * @param {import("../Feature.js").default} feature Feature.
         * @param {Array<*>} objectStack Node stack.
         */
        writeFeatureElement(node, feature, objectStack) {
            const fid = feature.getId();
            if (fid) {
                node.setAttribute('fid', /** @type {string} */ (fid));
            }
            const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);
            const featureNS = context['featureNS'];
            const geometryName = feature.getGeometryName();
            if (!context.serializers) {
                context.serializers = {};
                context.serializers[featureNS] = {};
            }
            const keys = [];
            const values = [];
            if (feature.hasProperties()) {
                const properties = feature.getProperties();
                for (const key in properties) {
                    const value = properties[key];
                    if (value !== null) {
                        keys.push(key);
                        values.push(value);
                        if (key == geometryName ||
                            typeof ( /** @type {?} */(value).getSimplifiedGeometry) ===
                                'function') {
                            if (!(key in context.serializers[featureNS])) {
                                context.serializers[featureNS][key] = xml_js_9.makeChildAppender(this.writeGeometryElement, this);
                            }
                        }
                        else {
                            if (!(key in context.serializers[featureNS])) {
                                context.serializers[featureNS][key] = xml_js_9.makeChildAppender(xsd_js_5.writeStringTextNode);
                            }
                        }
                    }
                }
            }
            const item = obj_js_25.assign({}, context);
            item.node = node;
            xml_js_9.pushSerializeAndPop(
            /** @type {import("../xml.js").NodeStackItem} */
            (item), context.serializers, xml_js_9.makeSimpleNodeFactory(undefined, featureNS), values, objectStack, keys);
        }
        /**
         * @param {Element} node Node.
         * @param {import("../geom/LineString.js").default} geometry LineString geometry.
         * @param {Array<*>} objectStack Node stack.
         */
        writeCurveOrLineString(node, geometry, objectStack) {
            const context = objectStack[objectStack.length - 1];
            const srsName = context['srsName'];
            if (node.nodeName !== 'LineStringSegment' && srsName) {
                node.setAttribute('srsName', srsName);
            }
            if (node.nodeName === 'LineString' ||
                node.nodeName === 'LineStringSegment') {
                const coordinates = this.createCoordinatesNode_(node.namespaceURI);
                node.appendChild(coordinates);
                this.writeCoordinates_(coordinates, geometry, objectStack);
            }
            else if (node.nodeName === 'Curve') {
                const segments = xml_js_9.createElementNS(node.namespaceURI, 'segments');
                node.appendChild(segments);
                this.writeCurveSegments_(segments, geometry, objectStack);
            }
        }
        /**
         * @param {Element} node Node.
         * @param {import("../geom/LineString.js").default} line LineString geometry.
         * @param {Array<*>} objectStack Node stack.
         */
        writeLineStringOrCurveMember(node, line, objectStack) {
            const child = this.GEOMETRY_NODE_FACTORY_(line, objectStack);
            if (child) {
                node.appendChild(child);
                this.writeCurveOrLineString(child, line, objectStack);
            }
        }
        /**
         * @param {Element} node Node.
         * @param {import("../geom/MultiLineString.js").default} geometry MultiLineString geometry.
         * @param {Array<*>} objectStack Node stack.
         */
        writeMultiCurveOrLineString(node, geometry, objectStack) {
            const context = objectStack[objectStack.length - 1];
            const hasZ = context['hasZ'];
            const srsName = context['srsName'];
            const curve = context['curve'];
            if (srsName) {
                node.setAttribute('srsName', srsName);
            }
            const lines = geometry.getLineStrings();
            xml_js_9.pushSerializeAndPop({ node: node, hasZ: hasZ, srsName: srsName, curve: curve }, this.LINESTRINGORCURVEMEMBER_SERIALIZERS, this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_, lines, objectStack, undefined, this);
        }
        /**
         * @param {Node} node Node.
         * @param {import("../geom/Geometry.js").default|import("../extent.js").Extent} geometry Geometry.
         * @param {Array<*>} objectStack Node stack.
         */
        writeGeometryElement(node, geometry, objectStack) {
            const context = /** @type {import("./Feature.js").WriteOptions} */ (objectStack[objectStack.length - 1]);
            const item = obj_js_25.assign({}, context);
            item['node'] = node;
            let value;
            if (Array.isArray(geometry)) {
                value = Feature_js_26.transformExtentWithOptions(
                /** @type {import("../extent.js").Extent} */ (geometry), context);
            }
            else {
                value = Feature_js_26.transformGeometryWithOptions(
                /** @type {import("../geom/Geometry.js").default} */ (geometry), true, context);
            }
            xml_js_9.pushSerializeAndPop(
            /** @type {import("../xml.js").NodeStackItem} */
            (item), this.GEOMETRY_SERIALIZERS, this.GEOMETRY_NODE_FACTORY_, [value], objectStack, undefined, this);
        }
        /**
         * @param {string} namespaceURI XML namespace.
         * @returns {Element} coordinates node.
         * @private
         */
        createCoordinatesNode_(namespaceURI) {
            const coordinates = xml_js_9.createElementNS(namespaceURI, 'coordinates');
            coordinates.setAttribute('decimal', '.');
            coordinates.setAttribute('cs', ',');
            coordinates.setAttribute('ts', ' ');
            return coordinates;
        }
        /**
         * @param {Node} node Node.
         * @param {import("../geom/LineString.js").default|import("../geom/LinearRing.js").default} value Geometry.
         * @param {Array<*>} objectStack Node stack.
         * @private
         */
        writeCoordinates_(node, value, objectStack) {
            const context = objectStack[objectStack.length - 1];
            const hasZ = context['hasZ'];
            const srsName = context['srsName'];
            // only 2d for simple features profile
            const points = value.getCoordinates();
            const len = points.length;
            const parts = new Array(len);
            for (let i = 0; i < len; ++i) {
                const point = points[i];
                parts[i] = this.getCoords_(point, srsName, hasZ);
            }
            xsd_js_5.writeStringTextNode(node, parts.join(' '));
        }
        /**
         * @param {Node} node Node.
         * @param {import("../geom/LineString.js").default} line LineString geometry.
         * @param {Array<*>} objectStack Node stack.
         * @private
         */
        writeCurveSegments_(node, line, objectStack) {
            const child = xml_js_9.createElementNS(node.namespaceURI, 'LineStringSegment');
            node.appendChild(child);
            this.writeCurveOrLineString(child, line, objectStack);
        }
        /**
         * @param {Element} node Node.
         * @param {import("../geom/Polygon.js").default} geometry Polygon geometry.
         * @param {Array<*>} objectStack Node stack.
         */
        writeSurfaceOrPolygon(node, geometry, objectStack) {
            const context = objectStack[objectStack.length - 1];
            const hasZ = context['hasZ'];
            const srsName = context['srsName'];
            if (node.nodeName !== 'PolygonPatch' && srsName) {
                node.setAttribute('srsName', srsName);
            }
            if (node.nodeName === 'Polygon' || node.nodeName === 'PolygonPatch') {
                const rings = geometry.getLinearRings();
                xml_js_9.pushSerializeAndPop({ node: node, hasZ: hasZ, srsName: srsName }, this.RING_SERIALIZERS, this.RING_NODE_FACTORY_, rings, objectStack, undefined, this);
            }
            else if (node.nodeName === 'Surface') {
                const patches = xml_js_9.createElementNS(node.namespaceURI, 'patches');
                node.appendChild(patches);
                this.writeSurfacePatches_(patches, geometry, objectStack);
            }
        }
        /**
         * @param {*} value Value.
         * @param {Array<*>} objectStack Object stack.
         * @param {string=} opt_nodeName Node name.
         * @return {Node} Node.
         * @private
         */
        RING_NODE_FACTORY_(value, objectStack, opt_nodeName) {
            const context = objectStack[objectStack.length - 1];
            const parentNode = context.node;
            const exteriorWritten = context['exteriorWritten'];
            if (exteriorWritten === undefined) {
                context['exteriorWritten'] = true;
            }
            return xml_js_9.createElementNS(parentNode.namespaceURI, exteriorWritten !== undefined ? 'innerBoundaryIs' : 'outerBoundaryIs');
        }
        /**
         * @param {Node} node Node.
         * @param {import("../geom/Polygon.js").default} polygon Polygon geometry.
         * @param {Array<*>} objectStack Node stack.
         * @private
         */
        writeSurfacePatches_(node, polygon, objectStack) {
            const child = xml_js_9.createElementNS(node.namespaceURI, 'PolygonPatch');
            node.appendChild(child);
            this.writeSurfaceOrPolygon(child, polygon, objectStack);
        }
        /**
         * @param {Node} node Node.
         * @param {import("../geom/LinearRing.js").default} ring LinearRing geometry.
         * @param {Array<*>} objectStack Node stack.
         */
        writeRing(node, ring, objectStack) {
            const linearRing = xml_js_9.createElementNS(node.namespaceURI, 'LinearRing');
            node.appendChild(linearRing);
            this.writeLinearRing(linearRing, ring, objectStack);
        }
        /**
         * @param {Array<number>} point Point geometry.
         * @param {string=} opt_srsName Optional srsName
         * @param {boolean=} opt_hasZ whether the geometry has a Z coordinate (is 3D) or not.
         * @return {string} The coords string.
         * @private
         */
        getCoords_(point, opt_srsName, opt_hasZ) {
            let axisOrientation = 'enu';
            if (opt_srsName) {
                axisOrientation = proj_js_31.get(opt_srsName).getAxisOrientation();
            }
            let coords = axisOrientation.substr(0, 2) === 'en'
                ? point[0] + ',' + point[1]
                : point[1] + ',' + point[0];
            if (opt_hasZ) {
                // For newly created points, Z can be undefined.
                const z = point[2] || 0;
                coords += ',' + z;
            }
            return coords;
        }
        /**
         * @param {Element} node Node.
         * @param {import("../geom/Point.js").default} geometry Point geometry.
         * @param {Array<*>} objectStack Node stack.
         */
        writePoint(node, geometry, objectStack) {
            const context = objectStack[objectStack.length - 1];
            const hasZ = context['hasZ'];
            const srsName = context['srsName'];
            if (srsName) {
                node.setAttribute('srsName', srsName);
            }
            const coordinates = this.createCoordinatesNode_(node.namespaceURI);
            node.appendChild(coordinates);
            const point = geometry.getCoordinates();
            const coord = this.getCoords_(point, srsName, hasZ);
            xsd_js_5.writeStringTextNode(coordinates, coord);
        }
        /**
         * @param {Element} node Node.
         * @param {import("../geom/MultiPoint.js").default} geometry MultiPoint geometry.
         * @param {Array<*>} objectStack Node stack.
         */
        writeMultiPoint(node, geometry, objectStack) {
            const context = objectStack[objectStack.length - 1];
            const hasZ = context['hasZ'];
            const srsName = context['srsName'];
            if (srsName) {
                node.setAttribute('srsName', srsName);
            }
            const points = geometry.getPoints();
            xml_js_9.pushSerializeAndPop({ node: node, hasZ: hasZ, srsName: srsName }, this.POINTMEMBER_SERIALIZERS, xml_js_9.makeSimpleNodeFactory('pointMember'), points, objectStack, undefined, this);
        }
        /**
         * @param {Node} node Node.
         * @param {import("../geom/Point.js").default} point Point geometry.
         * @param {Array<*>} objectStack Node stack.
         */
        writePointMember(node, point, objectStack) {
            const child = xml_js_9.createElementNS(node.namespaceURI, 'Point');
            node.appendChild(child);
            this.writePoint(child, point, objectStack);
        }
        /**
         * @param {Element} node Node.
         * @param {import("../geom/LinearRing.js").default} geometry LinearRing geometry.
         * @param {Array<*>} objectStack Node stack.
         */
        writeLinearRing(node, geometry, objectStack) {
            const context = objectStack[objectStack.length - 1];
            const srsName = context['srsName'];
            if (srsName) {
                node.setAttribute('srsName', srsName);
            }
            const coordinates = this.createCoordinatesNode_(node.namespaceURI);
            node.appendChild(coordinates);
            this.writeCoordinates_(coordinates, geometry, objectStack);
        }
        /**
         * @param {Element} node Node.
         * @param {import("../geom/MultiPolygon.js").default} geometry MultiPolygon geometry.
         * @param {Array<*>} objectStack Node stack.
         */
        writeMultiSurfaceOrPolygon(node, geometry, objectStack) {
            const context = objectStack[objectStack.length - 1];
            const hasZ = context['hasZ'];
            const srsName = context['srsName'];
            const surface = context['surface'];
            if (srsName) {
                node.setAttribute('srsName', srsName);
            }
            const polygons = geometry.getPolygons();
            xml_js_9.pushSerializeAndPop({ node: node, hasZ: hasZ, srsName: srsName, surface: surface }, this.SURFACEORPOLYGONMEMBER_SERIALIZERS, this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_, polygons, objectStack, undefined, this);
        }
        /**
         * @param {Node} node Node.
         * @param {import("../geom/Polygon.js").default} polygon Polygon geometry.
         * @param {Array<*>} objectStack Node stack.
         */
        writeSurfaceOrPolygonMember(node, polygon, objectStack) {
            const child = this.GEOMETRY_NODE_FACTORY_(polygon, objectStack);
            if (child) {
                node.appendChild(child);
                this.writeSurfaceOrPolygon(child, polygon, objectStack);
            }
        }
        /**
         * @param {Element} node Node.
         * @param {import("../extent.js").Extent} extent Extent.
         * @param {Array<*>} objectStack Node stack.
         */
        writeEnvelope(node, extent, objectStack) {
            const context = objectStack[objectStack.length - 1];
            const srsName = context['srsName'];
            if (srsName) {
                node.setAttribute('srsName', srsName);
            }
            const keys = ['lowerCorner', 'upperCorner'];
            const values = [extent[0] + ' ' + extent[1], extent[2] + ' ' + extent[3]];
            xml_js_9.pushSerializeAndPop(
            /** @type {import("../xml.js").NodeStackItem} */
            ({ node: node }), this.ENVELOPE_SERIALIZERS, xml_js_9.OBJECT_PROPERTY_NODE_FACTORY, values, objectStack, keys, this);
        }
        /**
         * @const
         * @param {*} value Value.
         * @param {Array<*>} objectStack Object stack.
         * @param {string=} opt_nodeName Node name.
         * @return {Node|undefined} Node.
         * @private
         */
        MULTIGEOMETRY_MEMBER_NODE_FACTORY_(value, objectStack, opt_nodeName) {
            const parentNode = objectStack[objectStack.length - 1].node;
            return xml_js_9.createElementNS('http://www.opengis.net/gml', MULTIGEOMETRY_TO_MEMBER_NODENAME[parentNode.nodeName]);
        }
    }
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    GML2.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS = {
        'http://www.opengis.net/gml': {
            'coordinates': xml_js_9.makeReplacer(GML2.prototype.readFlatCoordinates),
        },
    };
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    GML2.prototype.FLAT_LINEAR_RINGS_PARSERS = {
        'http://www.opengis.net/gml': {
            'innerBoundaryIs': GML2.prototype.innerBoundaryIsParser,
            'outerBoundaryIs': GML2.prototype.outerBoundaryIsParser,
        },
    };
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    GML2.prototype.BOX_PARSERS_ = {
        'http://www.opengis.net/gml': {
            'coordinates': xml_js_9.makeArrayPusher(GML2.prototype.readFlatCoordinates),
        },
    };
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    GML2.prototype.GEOMETRY_PARSERS = {
        'http://www.opengis.net/gml': {
            'Point': xml_js_9.makeReplacer(GMLBase_js_2.default.prototype.readPoint),
            'MultiPoint': xml_js_9.makeReplacer(GMLBase_js_2.default.prototype.readMultiPoint),
            'LineString': xml_js_9.makeReplacer(GMLBase_js_2.default.prototype.readLineString),
            'MultiLineString': xml_js_9.makeReplacer(GMLBase_js_2.default.prototype.readMultiLineString),
            'LinearRing': xml_js_9.makeReplacer(GMLBase_js_2.default.prototype.readLinearRing),
            'Polygon': xml_js_9.makeReplacer(GMLBase_js_2.default.prototype.readPolygon),
            'MultiPolygon': xml_js_9.makeReplacer(GMLBase_js_2.default.prototype.readMultiPolygon),
            'Box': xml_js_9.makeReplacer(GML2.prototype.readBox),
        },
    };
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
     */
    GML2.prototype.GEOMETRY_SERIALIZERS = {
        'http://www.opengis.net/gml': {
            'Curve': xml_js_9.makeChildAppender(GML2.prototype.writeCurveOrLineString),
            'MultiCurve': xml_js_9.makeChildAppender(GML2.prototype.writeMultiCurveOrLineString),
            'Point': xml_js_9.makeChildAppender(GML2.prototype.writePoint),
            'MultiPoint': xml_js_9.makeChildAppender(GML2.prototype.writeMultiPoint),
            'LineString': xml_js_9.makeChildAppender(GML2.prototype.writeCurveOrLineString),
            'MultiLineString': xml_js_9.makeChildAppender(GML2.prototype.writeMultiCurveOrLineString),
            'LinearRing': xml_js_9.makeChildAppender(GML2.prototype.writeLinearRing),
            'Polygon': xml_js_9.makeChildAppender(GML2.prototype.writeSurfaceOrPolygon),
            'MultiPolygon': xml_js_9.makeChildAppender(GML2.prototype.writeMultiSurfaceOrPolygon),
            'Surface': xml_js_9.makeChildAppender(GML2.prototype.writeSurfaceOrPolygon),
            'MultiSurface': xml_js_9.makeChildAppender(GML2.prototype.writeMultiSurfaceOrPolygon),
            'Envelope': xml_js_9.makeChildAppender(GML2.prototype.writeEnvelope),
        },
    };
    /**
     * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
     */
    GML2.prototype.LINESTRINGORCURVEMEMBER_SERIALIZERS = {
        'http://www.opengis.net/gml': {
            'lineStringMember': xml_js_9.makeChildAppender(GML2.prototype.writeLineStringOrCurveMember),
            'curveMember': xml_js_9.makeChildAppender(GML2.prototype.writeLineStringOrCurveMember),
        },
    };
    /**
     * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
     */
    GML2.prototype.RING_SERIALIZERS = {
        'http://www.opengis.net/gml': {
            'outerBoundaryIs': xml_js_9.makeChildAppender(GML2.prototype.writeRing),
            'innerBoundaryIs': xml_js_9.makeChildAppender(GML2.prototype.writeRing),
        },
    };
    /**
     * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
     */
    GML2.prototype.POINTMEMBER_SERIALIZERS = {
        'http://www.opengis.net/gml': {
            'pointMember': xml_js_9.makeChildAppender(GML2.prototype.writePointMember),
        },
    };
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
     */
    GML2.prototype.SURFACEORPOLYGONMEMBER_SERIALIZERS = {
        'http://www.opengis.net/gml': {
            'surfaceMember': xml_js_9.makeChildAppender(GML2.prototype.writeSurfaceOrPolygonMember),
            'polygonMember': xml_js_9.makeChildAppender(GML2.prototype.writeSurfaceOrPolygonMember),
        },
    };
    /**
     * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
     */
    GML2.prototype.ENVELOPE_SERIALIZERS = {
        'http://www.opengis.net/gml': {
            'lowerCorner': xml_js_9.makeChildAppender(xsd_js_5.writeStringTextNode),
            'upperCorner': xml_js_9.makeChildAppender(xsd_js_5.writeStringTextNode),
        },
    };
    exports.default = GML2;
});
/**
 * @module ol/format/filter/Filter
 */
define("node_modules/ol/src/format/filter/Filter", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @classdesc
     * Abstract class; normally only used for creating subclasses and not instantiated in apps.
     * Base class for WFS GetFeature filters.
     *
     * @abstract
     */
    class Filter {
        /**
         * @param {!string} tagName The XML tag name for this filter.
         */
        constructor(tagName) {
            /**
             * @private
             * @type {!string}
             */
            this.tagName_ = tagName;
        }
        /**
         * The XML tag name for a filter.
         * @returns {!string} Name.
         */
        getTagName() {
            return this.tagName_;
        }
    }
    exports.default = Filter;
});
define("node_modules/ol/src/format/filter/LogicalNary", ["require", "exports", "node_modules/ol/src/format/filter/Filter", "node_modules/ol/src/asserts"], function (require, exports, Filter_js_1, asserts_js_27) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @classdesc
     * Abstract class; normally only used for creating subclasses and not instantiated in apps.
     * Base class for WFS GetFeature n-ary logical filters.
     *
     * @abstract
     */
    class LogicalNary extends Filter_js_1.default {
        /**
         * @param {!string} tagName The XML tag name for this filter.
         * @param {Array<import("./Filter.js").default>} conditions Conditions.
         */
        constructor(tagName, conditions) {
            super(tagName);
            /**
             * @type {Array<import("./Filter.js").default>}
             */
            this.conditions = conditions;
            asserts_js_27.assert(this.conditions.length >= 2, 57); // At least 2 conditions are required.
        }
    }
    exports.default = LogicalNary;
});
define("node_modules/ol/src/format/filter/And", ["require", "exports", "node_modules/ol/src/format/filter/LogicalNary"], function (require, exports, LogicalNary_js_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @classdesc
     * Represents a logical `<And>` operator between two or more filter conditions.
     *
     * @abstract
     */
    class And extends LogicalNary_js_1.default {
        /**
         * @param {...import("./Filter.js").default} conditions Conditions.
         */
        constructor(conditions) {
            super('And', Array.prototype.slice.call(arguments));
        }
    }
    exports.default = And;
});
define("node_modules/ol/src/format/filter/Bbox", ["require", "exports", "node_modules/ol/src/format/filter/Filter"], function (require, exports, Filter_js_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @classdesc
     * Represents a `<BBOX>` operator to test whether a geometry-valued property
     * intersects a fixed bounding box
     *
     * @api
     */
    class Bbox extends Filter_js_2.default {
        /**
         * @param {!string} geometryName Geometry name to use.
         * @param {!import("../../extent.js").Extent} extent Extent.
         * @param {string=} opt_srsName SRS name. No srsName attribute will be set
         * on geometries when this is not provided.
         */
        constructor(geometryName, extent, opt_srsName) {
            super('BBOX');
            /**
             * @type {!string}
             */
            this.geometryName = geometryName;
            /**
             * @type {import("../../extent.js").Extent}
             */
            this.extent = extent;
            if (extent.length !== 4) {
                throw new Error('Expected an extent with four values ([minX, minY, maxX, maxY])');
            }
            /**
             * @type {string|undefined}
             */
            this.srsName = opt_srsName;
        }
    }
    exports.default = Bbox;
});
define("node_modules/ol/src/format/filter/Spatial", ["require", "exports", "node_modules/ol/src/format/filter/Filter"], function (require, exports, Filter_js_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @classdesc
     * Abstract class; normally only used for creating subclasses and not instantiated in apps.
     * Represents a spatial operator to test whether a geometry-valued property
     * relates to a given geometry.
     *
     * @abstract
     */
    class Spatial extends Filter_js_3.default {
        /**
         * @param {!string} tagName The XML tag name for this filter.
         * @param {!string} geometryName Geometry name to use.
         * @param {!import("../../geom/Geometry.js").default} geometry Geometry.
         * @param {string=} opt_srsName SRS name. No srsName attribute will be
         *    set on geometries when this is not provided.
         */
        constructor(tagName, geometryName, geometry, opt_srsName) {
            super(tagName);
            /**
             * @type {!string}
             */
            this.geometryName = geometryName || 'the_geom';
            /**
             * @type {import("../../geom/Geometry.js").default}
             */
            this.geometry = geometry;
            /**
             * @type {string|undefined}
             */
            this.srsName = opt_srsName;
        }
    }
    exports.default = Spatial;
});
define("node_modules/ol/src/format/filter/Contains", ["require", "exports", "node_modules/ol/src/format/filter/Spatial"], function (require, exports, Spatial_js_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @classdesc
     * Represents a `<Contains>` operator to test whether a geometry-valued property
     * contains a given geometry.
     * @api
     */
    class Contains extends Spatial_js_1.default {
        /**
         * @param {!string} geometryName Geometry name to use.
         * @param {!import("../../geom/Geometry.js").default} geometry Geometry.
         * @param {string=} opt_srsName SRS name. No srsName attribute will be
         *    set on geometries when this is not provided.
         */
        constructor(geometryName, geometry, opt_srsName) {
            super('Contains', geometryName, geometry, opt_srsName);
        }
    }
    exports.default = Contains;
});
define("node_modules/ol/src/format/filter/Comparison", ["require", "exports", "node_modules/ol/src/format/filter/Filter"], function (require, exports, Filter_js_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @classdesc
     * Abstract class; normally only used for creating subclasses and not instantiated in apps.
     * Base class for WFS GetFeature property comparison filters.
     *
     * @abstract
     */
    class Comparison extends Filter_js_4.default {
        /**
         * @param {!string} tagName The XML tag name for this filter.
         * @param {!string} propertyName Name of the context property to compare.
         */
        constructor(tagName, propertyName) {
            super(tagName);
            /**
             * @type {!string}
             */
            this.propertyName = propertyName;
        }
    }
    exports.default = Comparison;
});
define("node_modules/ol/src/format/filter/During", ["require", "exports", "node_modules/ol/src/format/filter/Comparison"], function (require, exports, Comparison_js_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @classdesc
     * Represents a `<During>` comparison operator.
     * @api
     */
    class During extends Comparison_js_1.default {
        /**
         * @param {!string} propertyName Name of the context property to compare.
         * @param {!string} begin The begin date in ISO-8601 format.
         * @param {!string} end The end date in ISO-8601 format.
         */
        constructor(propertyName, begin, end) {
            super('During', propertyName);
            /**
             * @type {!string}
             */
            this.begin = begin;
            /**
             * @type {!string}
             */
            this.end = end;
        }
    }
    exports.default = During;
});
define("node_modules/ol/src/format/filter/ComparisonBinary", ["require", "exports", "node_modules/ol/src/format/filter/Comparison"], function (require, exports, Comparison_js_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @classdesc
     * Abstract class; normally only used for creating subclasses and not instantiated in apps.
     * Base class for WFS GetFeature property binary comparison filters.
     *
     * @abstract
     */
    class ComparisonBinary extends Comparison_js_2.default {
        /**
         * @param {!string} tagName The XML tag name for this filter.
         * @param {!string} propertyName Name of the context property to compare.
         * @param {!(string|number)} expression The value to compare.
         * @param {boolean=} opt_matchCase Case-sensitive?
         */
        constructor(tagName, propertyName, expression, opt_matchCase) {
            super(tagName, propertyName);
            /**
             * @type {!(string|number)}
             */
            this.expression = expression;
            /**
             * @type {boolean|undefined}
             */
            this.matchCase = opt_matchCase;
        }
    }
    exports.default = ComparisonBinary;
});
define("node_modules/ol/src/format/filter/EqualTo", ["require", "exports", "node_modules/ol/src/format/filter/ComparisonBinary"], function (require, exports, ComparisonBinary_js_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @classdesc
     * Represents a `<PropertyIsEqualTo>` comparison operator.
     * @api
     */
    class EqualTo extends ComparisonBinary_js_1.default {
        /**
         * @param {!string} propertyName Name of the context property to compare.
         * @param {!(string|number)} expression The value to compare.
         * @param {boolean=} opt_matchCase Case-sensitive?
         */
        constructor(propertyName, expression, opt_matchCase) {
            super('PropertyIsEqualTo', propertyName, expression, opt_matchCase);
        }
    }
    exports.default = EqualTo;
});
define("node_modules/ol/src/format/filter/GreaterThan", ["require", "exports", "node_modules/ol/src/format/filter/ComparisonBinary"], function (require, exports, ComparisonBinary_js_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @classdesc
     * Represents a `<PropertyIsGreaterThan>` comparison operator.
     * @api
     */
    class GreaterThan extends ComparisonBinary_js_2.default {
        /**
         * @param {!string} propertyName Name of the context property to compare.
         * @param {!number} expression The value to compare.
         */
        constructor(propertyName, expression) {
            super('PropertyIsGreaterThan', propertyName, expression);
        }
    }
    exports.default = GreaterThan;
});
define("node_modules/ol/src/format/filter/GreaterThanOrEqualTo", ["require", "exports", "node_modules/ol/src/format/filter/ComparisonBinary"], function (require, exports, ComparisonBinary_js_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @classdesc
     * Represents a `<PropertyIsGreaterThanOrEqualTo>` comparison operator.
     * @api
     */
    class GreaterThanOrEqualTo extends ComparisonBinary_js_3.default {
        /**
         * @param {!string} propertyName Name of the context property to compare.
         * @param {!number} expression The value to compare.
         */
        constructor(propertyName, expression) {
            super('PropertyIsGreaterThanOrEqualTo', propertyName, expression);
        }
    }
    exports.default = GreaterThanOrEqualTo;
});
define("node_modules/ol/src/format/filter/Intersects", ["require", "exports", "node_modules/ol/src/format/filter/Spatial"], function (require, exports, Spatial_js_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @classdesc
     * Represents a `<Intersects>` operator to test whether a geometry-valued property
     * intersects a given geometry.
     * @api
     */
    class Intersects extends Spatial_js_2.default {
        /**
         * @param {!string} geometryName Geometry name to use.
         * @param {!import("../../geom/Geometry.js").default} geometry Geometry.
         * @param {string=} opt_srsName SRS name. No srsName attribute will be
         *    set on geometries when this is not provided.
         */
        constructor(geometryName, geometry, opt_srsName) {
            super('Intersects', geometryName, geometry, opt_srsName);
        }
    }
    exports.default = Intersects;
});
define("node_modules/ol/src/format/filter/IsBetween", ["require", "exports", "node_modules/ol/src/format/filter/Comparison"], function (require, exports, Comparison_js_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @classdesc
     * Represents a `<PropertyIsBetween>` comparison operator.
     * @api
     */
    class IsBetween extends Comparison_js_3.default {
        /**
         * @param {!string} propertyName Name of the context property to compare.
         * @param {!number} lowerBoundary The lower bound of the range.
         * @param {!number} upperBoundary The upper bound of the range.
         */
        constructor(propertyName, lowerBoundary, upperBoundary) {
            super('PropertyIsBetween', propertyName);
            /**
             * @type {!number}
             */
            this.lowerBoundary = lowerBoundary;
            /**
             * @type {!number}
             */
            this.upperBoundary = upperBoundary;
        }
    }
    exports.default = IsBetween;
});
define("node_modules/ol/src/format/filter/IsLike", ["require", "exports", "node_modules/ol/src/format/filter/Comparison"], function (require, exports, Comparison_js_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @classdesc
     * Represents a `<PropertyIsLike>` comparison operator.
     * @api
     */
    class IsLike extends Comparison_js_4.default {
        /**
         * [constructor description]
         * @param {!string} propertyName Name of the context property to compare.
         * @param {!string} pattern Text pattern.
         * @param {string=} opt_wildCard Pattern character which matches any sequence of
         *    zero or more string characters. Default is '*'.
         * @param {string=} opt_singleChar pattern character which matches any single
         *    string character. Default is '.'.
         * @param {string=} opt_escapeChar Escape character which can be used to escape
         *    the pattern characters. Default is '!'.
         * @param {boolean=} opt_matchCase Case-sensitive?
         */
        constructor(propertyName, pattern, opt_wildCard, opt_singleChar, opt_escapeChar, opt_matchCase) {
            super('PropertyIsLike', propertyName);
            /**
             * @type {!string}
             */
            this.pattern = pattern;
            /**
             * @type {!string}
             */
            this.wildCard = opt_wildCard !== undefined ? opt_wildCard : '*';
            /**
             * @type {!string}
             */
            this.singleChar = opt_singleChar !== undefined ? opt_singleChar : '.';
            /**
             * @type {!string}
             */
            this.escapeChar = opt_escapeChar !== undefined ? opt_escapeChar : '!';
            /**
             * @type {boolean|undefined}
             */
            this.matchCase = opt_matchCase;
        }
    }
    exports.default = IsLike;
});
define("node_modules/ol/src/format/filter/IsNull", ["require", "exports", "node_modules/ol/src/format/filter/Comparison"], function (require, exports, Comparison_js_5) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @classdesc
     * Represents a `<PropertyIsNull>` comparison operator.
     * @api
     */
    class IsNull extends Comparison_js_5.default {
        /**
         * @param {!string} propertyName Name of the context property to compare.
         */
        constructor(propertyName) {
            super('PropertyIsNull', propertyName);
        }
    }
    exports.default = IsNull;
});
define("node_modules/ol/src/format/filter/LessThan", ["require", "exports", "node_modules/ol/src/format/filter/ComparisonBinary"], function (require, exports, ComparisonBinary_js_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @classdesc
     * Represents a `<PropertyIsLessThan>` comparison operator.
     * @api
     */
    class LessThan extends ComparisonBinary_js_4.default {
        /**
         * @param {!string} propertyName Name of the context property to compare.
         * @param {!number} expression The value to compare.
         */
        constructor(propertyName, expression) {
            super('PropertyIsLessThan', propertyName, expression);
        }
    }
    exports.default = LessThan;
});
define("node_modules/ol/src/format/filter/LessThanOrEqualTo", ["require", "exports", "node_modules/ol/src/format/filter/ComparisonBinary"], function (require, exports, ComparisonBinary_js_5) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @classdesc
     * Represents a `<PropertyIsLessThanOrEqualTo>` comparison operator.
     * @api
     */
    class LessThanOrEqualTo extends ComparisonBinary_js_5.default {
        /**
         * @param {!string} propertyName Name of the context property to compare.
         * @param {!number} expression The value to compare.
         */
        constructor(propertyName, expression) {
            super('PropertyIsLessThanOrEqualTo', propertyName, expression);
        }
    }
    exports.default = LessThanOrEqualTo;
});
define("node_modules/ol/src/format/filter/Not", ["require", "exports", "node_modules/ol/src/format/filter/Filter"], function (require, exports, Filter_js_5) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @classdesc
     * Represents a logical `<Not>` operator for a filter condition.
     * @api
     */
    class Not extends Filter_js_5.default {
        /**
         * @param {!import("./Filter.js").default} condition Filter condition.
         */
        constructor(condition) {
            super('Not');
            /**
             * @type {!import("./Filter.js").default}
             */
            this.condition = condition;
        }
    }
    exports.default = Not;
});
define("node_modules/ol/src/format/filter/NotEqualTo", ["require", "exports", "node_modules/ol/src/format/filter/ComparisonBinary"], function (require, exports, ComparisonBinary_js_6) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @classdesc
     * Represents a `<PropertyIsNotEqualTo>` comparison operator.
     * @api
     */
    class NotEqualTo extends ComparisonBinary_js_6.default {
        /**
         * @param {!string} propertyName Name of the context property to compare.
         * @param {!(string|number)} expression The value to compare.
         * @param {boolean=} opt_matchCase Case-sensitive?
         */
        constructor(propertyName, expression, opt_matchCase) {
            super('PropertyIsNotEqualTo', propertyName, expression, opt_matchCase);
        }
    }
    exports.default = NotEqualTo;
});
define("node_modules/ol/src/format/filter/Or", ["require", "exports", "node_modules/ol/src/format/filter/LogicalNary"], function (require, exports, LogicalNary_js_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @classdesc
     * Represents a logical `<Or>` operator between two ore more filter conditions.
     * @api
     */
    class Or extends LogicalNary_js_2.default {
        /**
         * @param {...import("./Filter.js").default} conditions Conditions.
         */
        constructor(conditions) {
            super('Or', Array.prototype.slice.call(arguments));
        }
    }
    exports.default = Or;
});
define("node_modules/ol/src/format/filter/Within", ["require", "exports", "node_modules/ol/src/format/filter/Spatial"], function (require, exports, Spatial_js_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @classdesc
     * Represents a `<Within>` operator to test whether a geometry-valued property
     * is within a given geometry.
     * @api
     */
    class Within extends Spatial_js_3.default {
        /**
         * @param {!string} geometryName Geometry name to use.
         * @param {!import("../../geom/Geometry.js").default} geometry Geometry.
         * @param {string=} opt_srsName SRS name. No srsName attribute will be
         *    set on geometries when this is not provided.
         */
        constructor(geometryName, geometry, opt_srsName) {
            super('Within', geometryName, geometry, opt_srsName);
        }
    }
    exports.default = Within;
});
define("node_modules/ol/src/format/filter", ["require", "exports", "node_modules/ol/src/format/filter/And", "node_modules/ol/src/format/filter/Bbox", "node_modules/ol/src/format/filter/Contains", "node_modules/ol/src/format/filter/During", "node_modules/ol/src/format/filter/EqualTo", "node_modules/ol/src/format/filter/GreaterThan", "node_modules/ol/src/format/filter/GreaterThanOrEqualTo", "node_modules/ol/src/format/filter/Intersects", "node_modules/ol/src/format/filter/IsBetween", "node_modules/ol/src/format/filter/IsLike", "node_modules/ol/src/format/filter/IsNull", "node_modules/ol/src/format/filter/LessThan", "node_modules/ol/src/format/filter/LessThanOrEqualTo", "node_modules/ol/src/format/filter/Not", "node_modules/ol/src/format/filter/NotEqualTo", "node_modules/ol/src/format/filter/Or", "node_modules/ol/src/format/filter/Within"], function (require, exports, And_js_1, Bbox_js_1, Contains_js_1, During_js_1, EqualTo_js_1, GreaterThan_js_1, GreaterThanOrEqualTo_js_1, Intersects_js_1, IsBetween_js_1, IsLike_js_1, IsNull_js_1, LessThan_js_1, LessThanOrEqualTo_js_1, Not_js_1, NotEqualTo_js_1, Or_js_1, Within_js_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.during = exports.like = exports.between = exports.isNull = exports.greaterThanOrEqualTo = exports.greaterThan = exports.lessThanOrEqualTo = exports.lessThan = exports.notEqualTo = exports.equalTo = exports.within = exports.intersects = exports.contains = exports.bbox = exports.not = exports.or = exports.and = void 0;
    /**
     * Create a logical `<And>` operator between two or more filter conditions.
     *
     * @param {...import("./filter/Filter.js").default} conditions Filter conditions.
     * @returns {!And} `<And>` operator.
     * @api
     */
    function and(conditions) {
        const params = [null].concat(Array.prototype.slice.call(arguments));
        return new (Function.prototype.bind.apply(And_js_1.default, params))();
    }
    exports.and = and;
    /**
     * Create a logical `<Or>` operator between two or more filter conditions.
     *
     * @param {...import("./filter/Filter.js").default} conditions Filter conditions.
     * @returns {!Or} `<Or>` operator.
     * @api
     */
    function or(conditions) {
        const params = [null].concat(Array.prototype.slice.call(arguments));
        return new (Function.prototype.bind.apply(Or_js_1.default, params))();
    }
    exports.or = or;
    /**
     * Represents a logical `<Not>` operator for a filter condition.
     *
     * @param {!import("./filter/Filter.js").default} condition Filter condition.
     * @returns {!Not} `<Not>` operator.
     * @api
     */
    function not(condition) {
        return new Not_js_1.default(condition);
    }
    exports.not = not;
    /**
     * Create a `<BBOX>` operator to test whether a geometry-valued property
     * intersects a fixed bounding box
     *
     * @param {!string} geometryName Geometry name to use.
     * @param {!import("../extent.js").Extent} extent Extent.
     * @param {string=} opt_srsName SRS name. No srsName attribute will be
     *    set on geometries when this is not provided.
     * @returns {!Bbox} `<BBOX>` operator.
     * @api
     */
    function bbox(geometryName, extent, opt_srsName) {
        return new Bbox_js_1.default(geometryName, extent, opt_srsName);
    }
    exports.bbox = bbox;
    /**
     * Create a `<Contains>` operator to test whether a geometry-valued property
     * contains a given geometry.
     *
     * @param {!string} geometryName Geometry name to use.
     * @param {!import("../geom/Geometry.js").default} geometry Geometry.
     * @param {string=} opt_srsName SRS name. No srsName attribute will be
     *    set on geometries when this is not provided.
     * @returns {!Contains} `<Contains>` operator.
     * @api
     */
    function contains(geometryName, geometry, opt_srsName) {
        return new Contains_js_1.default(geometryName, geometry, opt_srsName);
    }
    exports.contains = contains;
    /**
     * Create a `<Intersects>` operator to test whether a geometry-valued property
     * intersects a given geometry.
     *
     * @param {!string} geometryName Geometry name to use.
     * @param {!import("../geom/Geometry.js").default} geometry Geometry.
     * @param {string=} opt_srsName SRS name. No srsName attribute will be
     *    set on geometries when this is not provided.
     * @returns {!Intersects} `<Intersects>` operator.
     * @api
     */
    function intersects(geometryName, geometry, opt_srsName) {
        return new Intersects_js_1.default(geometryName, geometry, opt_srsName);
    }
    exports.intersects = intersects;
    /**
     * Create a `<Within>` operator to test whether a geometry-valued property
     * is within a given geometry.
     *
     * @param {!string} geometryName Geometry name to use.
     * @param {!import("../geom/Geometry.js").default} geometry Geometry.
     * @param {string=} opt_srsName SRS name. No srsName attribute will be
     *    set on geometries when this is not provided.
     * @returns {!Within} `<Within>` operator.
     * @api
     */
    function within(geometryName, geometry, opt_srsName) {
        return new Within_js_1.default(geometryName, geometry, opt_srsName);
    }
    exports.within = within;
    /**
     * Creates a `<PropertyIsEqualTo>` comparison operator.
     *
     * @param {!string} propertyName Name of the context property to compare.
     * @param {!(string|number)} expression The value to compare.
     * @param {boolean=} opt_matchCase Case-sensitive?
     * @returns {!EqualTo} `<PropertyIsEqualTo>` operator.
     * @api
     */
    function equalTo(propertyName, expression, opt_matchCase) {
        return new EqualTo_js_1.default(propertyName, expression, opt_matchCase);
    }
    exports.equalTo = equalTo;
    /**
     * Creates a `<PropertyIsNotEqualTo>` comparison operator.
     *
     * @param {!string} propertyName Name of the context property to compare.
     * @param {!(string|number)} expression The value to compare.
     * @param {boolean=} opt_matchCase Case-sensitive?
     * @returns {!NotEqualTo} `<PropertyIsNotEqualTo>` operator.
     * @api
     */
    function notEqualTo(propertyName, expression, opt_matchCase) {
        return new NotEqualTo_js_1.default(propertyName, expression, opt_matchCase);
    }
    exports.notEqualTo = notEqualTo;
    /**
     * Creates a `<PropertyIsLessThan>` comparison operator.
     *
     * @param {!string} propertyName Name of the context property to compare.
     * @param {!number} expression The value to compare.
     * @returns {!LessThan} `<PropertyIsLessThan>` operator.
     * @api
     */
    function lessThan(propertyName, expression) {
        return new LessThan_js_1.default(propertyName, expression);
    }
    exports.lessThan = lessThan;
    /**
     * Creates a `<PropertyIsLessThanOrEqualTo>` comparison operator.
     *
     * @param {!string} propertyName Name of the context property to compare.
     * @param {!number} expression The value to compare.
     * @returns {!LessThanOrEqualTo} `<PropertyIsLessThanOrEqualTo>` operator.
     * @api
     */
    function lessThanOrEqualTo(propertyName, expression) {
        return new LessThanOrEqualTo_js_1.default(propertyName, expression);
    }
    exports.lessThanOrEqualTo = lessThanOrEqualTo;
    /**
     * Creates a `<PropertyIsGreaterThan>` comparison operator.
     *
     * @param {!string} propertyName Name of the context property to compare.
     * @param {!number} expression The value to compare.
     * @returns {!GreaterThan} `<PropertyIsGreaterThan>` operator.
     * @api
     */
    function greaterThan(propertyName, expression) {
        return new GreaterThan_js_1.default(propertyName, expression);
    }
    exports.greaterThan = greaterThan;
    /**
     * Creates a `<PropertyIsGreaterThanOrEqualTo>` comparison operator.
     *
     * @param {!string} propertyName Name of the context property to compare.
     * @param {!number} expression The value to compare.
     * @returns {!GreaterThanOrEqualTo} `<PropertyIsGreaterThanOrEqualTo>` operator.
     * @api
     */
    function greaterThanOrEqualTo(propertyName, expression) {
        return new GreaterThanOrEqualTo_js_1.default(propertyName, expression);
    }
    exports.greaterThanOrEqualTo = greaterThanOrEqualTo;
    /**
     * Creates a `<PropertyIsNull>` comparison operator to test whether a property value
     * is null.
     *
     * @param {!string} propertyName Name of the context property to compare.
     * @returns {!IsNull} `<PropertyIsNull>` operator.
     * @api
     */
    function isNull(propertyName) {
        return new IsNull_js_1.default(propertyName);
    }
    exports.isNull = isNull;
    /**
     * Creates a `<PropertyIsBetween>` comparison operator to test whether an expression
     * value lies within a range given by a lower and upper bound (inclusive).
     *
     * @param {!string} propertyName Name of the context property to compare.
     * @param {!number} lowerBoundary The lower bound of the range.
     * @param {!number} upperBoundary The upper bound of the range.
     * @returns {!IsBetween} `<PropertyIsBetween>` operator.
     * @api
     */
    function between(propertyName, lowerBoundary, upperBoundary) {
        return new IsBetween_js_1.default(propertyName, lowerBoundary, upperBoundary);
    }
    exports.between = between;
    /**
     * Represents a `<PropertyIsLike>` comparison operator that matches a string property
     * value against a text pattern.
     *
     * @param {!string} propertyName Name of the context property to compare.
     * @param {!string} pattern Text pattern.
     * @param {string=} opt_wildCard Pattern character which matches any sequence of
     *    zero or more string characters. Default is '*'.
     * @param {string=} opt_singleChar pattern character which matches any single
     *    string character. Default is '.'.
     * @param {string=} opt_escapeChar Escape character which can be used to escape
     *    the pattern characters. Default is '!'.
     * @param {boolean=} opt_matchCase Case-sensitive?
     * @returns {!IsLike} `<PropertyIsLike>` operator.
     * @api
     */
    function like(propertyName, pattern, opt_wildCard, opt_singleChar, opt_escapeChar, opt_matchCase) {
        return new IsLike_js_1.default(propertyName, pattern, opt_wildCard, opt_singleChar, opt_escapeChar, opt_matchCase);
    }
    exports.like = like;
    /**
     * Create a `<During>` temporal operator.
     *
     * @param {!string} propertyName Name of the context property to compare.
     * @param {!string} begin The begin date in ISO-8601 format.
     * @param {!string} end The end date in ISO-8601 format.
     * @returns {!During} `<During>` operator.
     * @api
     */
    function during(propertyName, begin, end) {
        return new During_js_1.default(propertyName, begin, end);
    }
    exports.during = during;
});
define("node_modules/ol/src/format/WFS", ["require", "exports", "node_modules/ol/src/format/GML2", "node_modules/ol/src/format/GML3", "node_modules/ol/src/format/GMLBase", "node_modules/ol/src/format/XMLFeature", "node_modules/ol/src/xml", "node_modules/ol/src/format/filter", "node_modules/ol/src/asserts", "node_modules/ol/src/obj", "node_modules/ol/src/proj", "node_modules/ol/src/format/xsd"], function (require, exports, GML2_js_1, GML3_js_2, GMLBase_js_3, XMLFeature_js_4, xml_js_10, filter_js_1, asserts_js_28, obj_js_26, proj_js_32, xsd_js_6) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.writeFilter = void 0;
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    const FEATURE_COLLECTION_PARSERS = {
        'http://www.opengis.net/gml': {
            'boundedBy': xml_js_10.makeObjectPropertySetter(GMLBase_js_3.default.prototype.readGeometryElement, 'bounds'),
        },
    };
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    const TRANSACTION_SUMMARY_PARSERS = {
        'http://www.opengis.net/wfs': {
            'totalInserted': xml_js_10.makeObjectPropertySetter(xsd_js_6.readNonNegativeInteger),
            'totalUpdated': xml_js_10.makeObjectPropertySetter(xsd_js_6.readNonNegativeInteger),
            'totalDeleted': xml_js_10.makeObjectPropertySetter(xsd_js_6.readNonNegativeInteger),
        },
    };
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    const TRANSACTION_RESPONSE_PARSERS = {
        'http://www.opengis.net/wfs': {
            'TransactionSummary': xml_js_10.makeObjectPropertySetter(readTransactionSummary, 'transactionSummary'),
            'InsertResults': xml_js_10.makeObjectPropertySetter(readInsertResults, 'insertIds'),
        },
    };
    /**
     * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
     */
    const QUERY_SERIALIZERS = {
        'http://www.opengis.net/wfs': {
            'PropertyName': xml_js_10.makeChildAppender(xsd_js_6.writeStringTextNode),
        },
    };
    /**
     * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
     */
    const TRANSACTION_SERIALIZERS = {
        'http://www.opengis.net/wfs': {
            'Insert': xml_js_10.makeChildAppender(writeFeature),
            'Update': xml_js_10.makeChildAppender(writeUpdate),
            'Delete': xml_js_10.makeChildAppender(writeDelete),
            'Property': xml_js_10.makeChildAppender(writeProperty),
            'Native': xml_js_10.makeChildAppender(writeNative),
        },
    };
    /**
     * @typedef {Object} Options
     * @property {Object<string, string>|string} [featureNS] The namespace URI used for features.
     * @property {Array<string>|string} [featureType] The feature type to parse. Only used for read operations.
     * @property {GMLBase} [gmlFormat] The GML format to use to parse the response. Default is `ol/format/GML3`.
     * @property {string} [schemaLocation] Optional schemaLocation to use for serialization, this will override the default.
     */
    /**
     * @typedef {Object} WriteGetFeatureOptions
     * @property {string} featureNS The namespace URI used for features.
     * @property {string} featurePrefix The prefix for the feature namespace.
     * @property {Array<string>} featureTypes The feature type names.
     * @property {string} [srsName] SRS name. No srsName attribute will be set on
     * geometries when this is not provided.
     * @property {string} [handle] Handle.
     * @property {string} [outputFormat] Output format.
     * @property {number} [maxFeatures] Maximum number of features to fetch.
     * @property {string} [geometryName] Geometry name to use in a BBOX filter.
     * @property {Array<string>} [propertyNames] Optional list of property names to serialize.
     * @property {string} [viewParams] viewParams GeoServer vendor parameter.
     * @property {number} [startIndex] Start index to use for WFS paging. This is a
     * WFS 2.0 feature backported to WFS 1.1.0 by some Web Feature Services.
     * @property {number} [count] Number of features to retrieve when paging. This is a
     * WFS 2.0 feature backported to WFS 1.1.0 by some Web Feature Services. Please note that some
     * Web Feature Services have repurposed `maxfeatures` instead.
     * @property {import("../extent.js").Extent} [bbox] Extent to use for the BBOX filter.
     * @property {import("./filter/Filter.js").default} [filter] Filter condition. See
     * {@link module:ol/format/Filter} for more information.
     * @property {string} [resultType] Indicates what response should be returned,
     * E.g. `hits` only includes the `numberOfFeatures` attribute in the response and no features.
     */
    /**
     * @typedef {Object} WriteTransactionOptions
     * @property {string} featureNS The namespace URI used for features.
     * @property {string} featurePrefix The prefix for the feature namespace.
     * @property {string} featureType The feature type name.
     * @property {string} [srsName] SRS name. No srsName attribute will be set on
     * geometries when this is not provided.
     * @property {string} [handle] Handle.
     * @property {boolean} [hasZ] Must be set to true if the transaction is for
     * a 3D layer. This will allow the Z coordinate to be included in the transaction.
     * @property {Array<Object>} nativeElements Native elements. Currently not supported.
     * @property {import("./GMLBase.js").Options} [gmlOptions] GML options for the WFS transaction writer.
     * @property {string} [version='1.1.0'] WFS version to use for the transaction. Can be either `1.0.0` or `1.1.0`.
     */
    /**
     * Number of features; bounds/extent.
     * @typedef {Object} FeatureCollectionMetadata
     * @property {number} numberOfFeatures
     * @property {import("../extent.js").Extent} bounds
     */
    /**
     * Total deleted; total inserted; total updated; array of insert ids.
     * @typedef {Object} TransactionResponse
     * @property {number} totalDeleted
     * @property {number} totalInserted
     * @property {number} totalUpdated
     * @property {Array<string>} insertIds
     */
    /**
     * @type {string}
     */
    const FEATURE_PREFIX = 'feature';
    /**
     * @type {string}
     */
    const XMLNS = 'http://www.w3.org/2000/xmlns/';
    /**
     * @type {string}
     */
    const OGCNS = 'http://www.opengis.net/ogc';
    /**
     * @type {string}
     */
    const WFSNS = 'http://www.opengis.net/wfs';
    /**
     * @type {string}
     */
    const FESNS = 'http://www.opengis.net/fes';
    /**
     * @type {Object<string, string>}
     */
    const SCHEMA_LOCATIONS = {
        '1.1.0': 'http://www.opengis.net/wfs http://schemas.opengis.net/wfs/1.1.0/wfs.xsd',
        '1.0.0': 'http://www.opengis.net/wfs http://schemas.opengis.net/wfs/1.0.0/wfs.xsd',
    };
    /**
     * @const
     * @type {string}
     */
    const DEFAULT_VERSION = '1.1.0';
    /**
     * @classdesc
     * Feature format for reading and writing data in the WFS format.
     * By default, supports WFS version 1.1.0. You can pass a GML format
     * as option if you want to read a WFS that contains GML2 (WFS 1.0.0).
     * Also see {@link module:ol/format/GMLBase~GMLBase} which is used by this format.
     *
     * @api
     */
    class WFS extends XMLFeature_js_4.default {
        /**
         * @param {Options=} opt_options Optional configuration object.
         */
        constructor(opt_options) {
            super();
            const options = opt_options ? opt_options : {};
            /**
             * @private
             * @type {Array<string>|string|undefined}
             */
            this.featureType_ = options.featureType;
            /**
             * @private
             * @type {Object<string, string>|string|undefined}
             */
            this.featureNS_ = options.featureNS;
            /**
             * @private
             * @type {GMLBase}
             */
            this.gmlFormat_ = options.gmlFormat ? options.gmlFormat : new GML3_js_2.default();
            /**
             * @private
             * @type {string}
             */
            this.schemaLocation_ = options.schemaLocation
                ? options.schemaLocation
                : SCHEMA_LOCATIONS[DEFAULT_VERSION];
        }
        /**
         * @return {Array<string>|string|undefined} featureType
         */
        getFeatureType() {
            return this.featureType_;
        }
        /**
         * @param {Array<string>|string|undefined} featureType Feature type(s) to parse.
         */
        setFeatureType(featureType) {
            this.featureType_ = featureType;
        }
        /**
         * @protected
         * @param {Element} node Node.
         * @param {import("./Feature.js").ReadOptions=} opt_options Options.
         * @return {Array<import("../Feature.js").default>} Features.
         */
        readFeaturesFromNode(node, opt_options) {
            /** @type {import("../xml.js").NodeStackItem} */
            const context = {
                node: node,
            };
            obj_js_26.assign(context, {
                'featureType': this.featureType_,
                'featureNS': this.featureNS_,
            });
            obj_js_26.assign(context, this.getReadOptions(node, opt_options ? opt_options : {}));
            const objectStack = [context];
            this.gmlFormat_.FEATURE_COLLECTION_PARSERS[GMLBase_js_3.GMLNS]['featureMember'] = xml_js_10.makeArrayPusher(GMLBase_js_3.default.prototype.readFeaturesInternal);
            let features = xml_js_10.pushParseAndPop([], this.gmlFormat_.FEATURE_COLLECTION_PARSERS, node, objectStack, this.gmlFormat_);
            if (!features) {
                features = [];
            }
            return features;
        }
        /**
         * Read transaction response of the source.
         *
         * @param {Document|Element|Object|string} source Source.
         * @return {TransactionResponse|undefined} Transaction response.
         * @api
         */
        readTransactionResponse(source) {
            if (!source) {
                return undefined;
            }
            else if (typeof source === 'string') {
                const doc = xml_js_10.parse(source);
                return this.readTransactionResponseFromDocument(doc);
            }
            else if (xml_js_10.isDocument(source)) {
                return this.readTransactionResponseFromDocument(
                /** @type {Document} */ (source));
            }
            else {
                return this.readTransactionResponseFromNode(
                /** @type {Element} */ (source));
            }
        }
        /**
         * Read feature collection metadata of the source.
         *
         * @param {Document|Element|Object|string} source Source.
         * @return {FeatureCollectionMetadata|undefined}
         *     FeatureCollection metadata.
         * @api
         */
        readFeatureCollectionMetadata(source) {
            if (!source) {
                return undefined;
            }
            else if (typeof source === 'string') {
                const doc = xml_js_10.parse(source);
                return this.readFeatureCollectionMetadataFromDocument(doc);
            }
            else if (xml_js_10.isDocument(source)) {
                return this.readFeatureCollectionMetadataFromDocument(
                /** @type {Document} */ (source));
            }
            else {
                return this.readFeatureCollectionMetadataFromNode(
                /** @type {Element} */ (source));
            }
        }
        /**
         * @param {Document} doc Document.
         * @return {FeatureCollectionMetadata|undefined}
         *     FeatureCollection metadata.
         */
        readFeatureCollectionMetadataFromDocument(doc) {
            for (let n = /** @type {Node} */ (doc.firstChild); n; n = n.nextSibling) {
                if (n.nodeType == Node.ELEMENT_NODE) {
                    return this.readFeatureCollectionMetadataFromNode(
                    /** @type {Element} */ (n));
                }
            }
            return undefined;
        }
        /**
         * @param {Element} node Node.
         * @return {FeatureCollectionMetadata|undefined}
         *     FeatureCollection metadata.
         */
        readFeatureCollectionMetadataFromNode(node) {
            const result = {};
            const value = xsd_js_6.readNonNegativeIntegerString(node.getAttribute('numberOfFeatures'));
            result['numberOfFeatures'] = value;
            return xml_js_10.pushParseAndPop(
            /** @type {FeatureCollectionMetadata} */ (result), FEATURE_COLLECTION_PARSERS, node, [], this.gmlFormat_);
        }
        /**
         * @param {Document} doc Document.
         * @return {TransactionResponse|undefined} Transaction response.
         */
        readTransactionResponseFromDocument(doc) {
            for (let n = /** @type {Node} */ (doc.firstChild); n; n = n.nextSibling) {
                if (n.nodeType == Node.ELEMENT_NODE) {
                    return this.readTransactionResponseFromNode(/** @type {Element} */ (n));
                }
            }
            return undefined;
        }
        /**
         * @param {Element} node Node.
         * @return {TransactionResponse|undefined} Transaction response.
         */
        readTransactionResponseFromNode(node) {
            return xml_js_10.pushParseAndPop(
            /** @type {TransactionResponse} */ ({}), TRANSACTION_RESPONSE_PARSERS, node, []);
        }
        /**
         * Encode format as WFS `GetFeature` and return the Node.
         *
         * @param {WriteGetFeatureOptions} options Options.
         * @return {Node} Result.
         * @api
         */
        writeGetFeature(options) {
            const node = xml_js_10.createElementNS(WFSNS, 'GetFeature');
            node.setAttribute('service', 'WFS');
            node.setAttribute('version', '1.1.0');
            let filter;
            if (options) {
                if (options.handle) {
                    node.setAttribute('handle', options.handle);
                }
                if (options.outputFormat) {
                    node.setAttribute('outputFormat', options.outputFormat);
                }
                if (options.maxFeatures !== undefined) {
                    node.setAttribute('maxFeatures', String(options.maxFeatures));
                }
                if (options.resultType) {
                    node.setAttribute('resultType', options.resultType);
                }
                if (options.startIndex !== undefined) {
                    node.setAttribute('startIndex', String(options.startIndex));
                }
                if (options.count !== undefined) {
                    node.setAttribute('count', String(options.count));
                }
                if (options.viewParams !== undefined) {
                    node.setAttribute('viewParams', options.viewParams);
                }
                filter = options.filter;
                if (options.bbox) {
                    asserts_js_28.assert(options.geometryName, 12); // `options.geometryName` must also be provided when `options.bbox` is set
                    const bbox = filter_js_1.bbox(
                    /** @type {string} */ (options.geometryName), options.bbox, options.srsName);
                    if (filter) {
                        // if bbox and filter are both set, combine the two into a single filter
                        filter = filter_js_1.and(filter, bbox);
                    }
                    else {
                        filter = bbox;
                    }
                }
            }
            node.setAttributeNS(xml_js_10.XML_SCHEMA_INSTANCE_URI, 'xsi:schemaLocation', this.schemaLocation_);
            /** @type {import("../xml.js").NodeStackItem} */
            const context = {
                node: node,
            };
            obj_js_26.assign(context, {
                'srsName': options.srsName,
                'featureNS': options.featureNS ? options.featureNS : this.featureNS_,
                'featurePrefix': options.featurePrefix,
                'geometryName': options.geometryName,
                'filter': filter,
                'propertyNames': options.propertyNames ? options.propertyNames : [],
            });
            asserts_js_28.assert(Array.isArray(options.featureTypes), 11); // `options.featureTypes` should be an Array
            writeGetFeature(node, 
            /** @type {!Array<string>} */ (options.featureTypes), [context]);
            return node;
        }
        /**
         * Encode format as WFS `Transaction` and return the Node.
         *
         * @param {Array<import("../Feature.js").default>} inserts The features to insert.
         * @param {Array<import("../Feature.js").default>} updates The features to update.
         * @param {Array<import("../Feature.js").default>} deletes The features to delete.
         * @param {WriteTransactionOptions} options Write options.
         * @return {Node} Result.
         * @api
         */
        writeTransaction(inserts, updates, deletes, options) {
            const objectStack = [];
            const node = xml_js_10.createElementNS(WFSNS, 'Transaction');
            const version = options.version ? options.version : DEFAULT_VERSION;
            const gmlVersion = version === '1.0.0' ? 2 : 3;
            node.setAttribute('service', 'WFS');
            node.setAttribute('version', version);
            let baseObj;
            /** @type {import("../xml.js").NodeStackItem} */
            let obj;
            if (options) {
                baseObj = options.gmlOptions ? options.gmlOptions : {};
                if (options.handle) {
                    node.setAttribute('handle', options.handle);
                }
            }
            const schemaLocation = SCHEMA_LOCATIONS[version];
            node.setAttributeNS(xml_js_10.XML_SCHEMA_INSTANCE_URI, 'xsi:schemaLocation', schemaLocation);
            const featurePrefix = options.featurePrefix
                ? options.featurePrefix
                : FEATURE_PREFIX;
            if (inserts) {
                obj = obj_js_26.assign({ node: node }, {
                    'featureNS': options.featureNS,
                    'featureType': options.featureType,
                    'featurePrefix': featurePrefix,
                    'gmlVersion': gmlVersion,
                    'hasZ': options.hasZ,
                    'srsName': options.srsName,
                });
                obj_js_26.assign(obj, baseObj);
                xml_js_10.pushSerializeAndPop(obj, TRANSACTION_SERIALIZERS, xml_js_10.makeSimpleNodeFactory('Insert'), inserts, objectStack);
            }
            if (updates) {
                obj = obj_js_26.assign({ node: node }, {
                    'featureNS': options.featureNS,
                    'featureType': options.featureType,
                    'featurePrefix': featurePrefix,
                    'gmlVersion': gmlVersion,
                    'hasZ': options.hasZ,
                    'srsName': options.srsName,
                });
                obj_js_26.assign(obj, baseObj);
                xml_js_10.pushSerializeAndPop(obj, TRANSACTION_SERIALIZERS, xml_js_10.makeSimpleNodeFactory('Update'), updates, objectStack);
            }
            if (deletes) {
                xml_js_10.pushSerializeAndPop({
                    node: node,
                    'featureNS': options.featureNS,
                    'featureType': options.featureType,
                    'featurePrefix': featurePrefix,
                    'gmlVersion': gmlVersion,
                    'srsName': options.srsName,
                }, TRANSACTION_SERIALIZERS, xml_js_10.makeSimpleNodeFactory('Delete'), deletes, objectStack);
            }
            if (options.nativeElements) {
                xml_js_10.pushSerializeAndPop({
                    node: node,
                    'featureNS': options.featureNS,
                    'featureType': options.featureType,
                    'featurePrefix': featurePrefix,
                    'gmlVersion': gmlVersion,
                    'srsName': options.srsName,
                }, TRANSACTION_SERIALIZERS, xml_js_10.makeSimpleNodeFactory('Native'), options.nativeElements, objectStack);
            }
            return node;
        }
        /**
         * @param {Document} doc Document.
         * @return {import("../proj/Projection.js").default} Projection.
         */
        readProjectionFromDocument(doc) {
            for (let n = doc.firstChild; n; n = n.nextSibling) {
                if (n.nodeType == Node.ELEMENT_NODE) {
                    return this.readProjectionFromNode(/** @type {Element} */ (n));
                }
            }
            return null;
        }
        /**
         * @param {Element} node Node.
         * @return {import("../proj/Projection.js").default} Projection.
         */
        readProjectionFromNode(node) {
            if (node.firstElementChild && node.firstElementChild.firstElementChild) {
                node = node.firstElementChild.firstElementChild;
                for (let n = node.firstElementChild; n; n = n.nextElementSibling) {
                    if (!(n.childNodes.length === 0 ||
                        (n.childNodes.length === 1 && n.firstChild.nodeType === 3))) {
                        const objectStack = [{}];
                        this.gmlFormat_.readGeometryElement(n, objectStack);
                        return proj_js_32.get(objectStack.pop().srsName);
                    }
                }
            }
            return null;
        }
    }
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Object|undefined} Transaction Summary.
     */
    function readTransactionSummary(node, objectStack) {
        return xml_js_10.pushParseAndPop({}, TRANSACTION_SUMMARY_PARSERS, node, objectStack);
    }
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    const OGC_FID_PARSERS = {
        'http://www.opengis.net/ogc': {
            'FeatureId': xml_js_10.makeArrayPusher(function (node, objectStack) {
                return node.getAttribute('fid');
            }),
        },
    };
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     */
    function fidParser(node, objectStack) {
        xml_js_10.parseNode(OGC_FID_PARSERS, node, objectStack);
    }
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    const INSERT_RESULTS_PARSERS = {
        'http://www.opengis.net/wfs': {
            'Feature': fidParser,
        },
    };
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Array<string>|undefined} Insert results.
     */
    function readInsertResults(node, objectStack) {
        return xml_js_10.pushParseAndPop([], INSERT_RESULTS_PARSERS, node, objectStack);
    }
    /**
     * @param {Element} node Node.
     * @param {import("../Feature.js").default} feature Feature.
     * @param {Array<*>} objectStack Node stack.
     */
    function writeFeature(node, feature, objectStack) {
        const context = objectStack[objectStack.length - 1];
        const featureType = context['featureType'];
        const featureNS = context['featureNS'];
        const gmlVersion = context['gmlVersion'];
        const child = xml_js_10.createElementNS(featureNS, featureType);
        node.appendChild(child);
        if (gmlVersion === 2) {
            GML2_js_1.default.prototype.writeFeatureElement(child, feature, objectStack);
        }
        else {
            GML3_js_2.default.prototype.writeFeatureElement(child, feature, objectStack);
        }
    }
    /**
     * @param {Node} node Node.
     * @param {number|string} fid Feature identifier.
     * @param {Array<*>} objectStack Node stack.
     */
    function writeOgcFidFilter(node, fid, objectStack) {
        const filter = xml_js_10.createElementNS(OGCNS, 'Filter');
        const child = xml_js_10.createElementNS(OGCNS, 'FeatureId');
        filter.appendChild(child);
        child.setAttribute('fid', /** @type {string} */ (fid));
        node.appendChild(filter);
    }
    /**
     * @param {string|undefined} featurePrefix The prefix of the feature.
     * @param {string} featureType The type of the feature.
     * @returns {string} The value of the typeName property.
     */
    function getTypeName(featurePrefix, featureType) {
        featurePrefix = featurePrefix ? featurePrefix : FEATURE_PREFIX;
        const prefix = featurePrefix + ':';
        // The featureType already contains the prefix.
        if (featureType.indexOf(prefix) === 0) {
            return featureType;
        }
        else {
            return prefix + featureType;
        }
    }
    /**
     * @param {Element} node Node.
     * @param {import("../Feature.js").default} feature Feature.
     * @param {Array<*>} objectStack Node stack.
     */
    function writeDelete(node, feature, objectStack) {
        const context = objectStack[objectStack.length - 1];
        asserts_js_28.assert(feature.getId() !== undefined, 26); // Features must have an id set
        const featureType = context['featureType'];
        const featurePrefix = context['featurePrefix'];
        const featureNS = context['featureNS'];
        const typeName = getTypeName(featurePrefix, featureType);
        node.setAttribute('typeName', typeName);
        node.setAttributeNS(XMLNS, 'xmlns:' + featurePrefix, featureNS);
        const fid = feature.getId();
        if (fid !== undefined) {
            writeOgcFidFilter(node, fid, objectStack);
        }
    }
    /**
     * @param {Element} node Node.
     * @param {import("../Feature.js").default} feature Feature.
     * @param {Array<*>} objectStack Node stack.
     */
    function writeUpdate(node, feature, objectStack) {
        const context = objectStack[objectStack.length - 1];
        asserts_js_28.assert(feature.getId() !== undefined, 27); // Features must have an id set
        const featureType = context['featureType'];
        const featurePrefix = context['featurePrefix'];
        const featureNS = context['featureNS'];
        const typeName = getTypeName(featurePrefix, featureType);
        const geometryName = feature.getGeometryName();
        node.setAttribute('typeName', typeName);
        node.setAttributeNS(XMLNS, 'xmlns:' + featurePrefix, featureNS);
        const fid = feature.getId();
        if (fid !== undefined) {
            const keys = feature.getKeys();
            const values = [];
            for (let i = 0, ii = keys.length; i < ii; i++) {
                const value = feature.get(keys[i]);
                if (value !== undefined) {
                    let name = keys[i];
                    if (value &&
                        typeof ( /** @type {?} */(value).getSimplifiedGeometry) === 'function') {
                        name = geometryName;
                    }
                    values.push({ name: name, value: value });
                }
            }
            xml_js_10.pushSerializeAndPop(
            /** @type {import("../xml.js").NodeStackItem} */ ({
                'gmlVersion': context['gmlVersion'],
                node: node,
                'hasZ': context['hasZ'],
                'srsName': context['srsName'],
            }), TRANSACTION_SERIALIZERS, xml_js_10.makeSimpleNodeFactory('Property'), values, objectStack);
            writeOgcFidFilter(node, fid, objectStack);
        }
    }
    /**
     * @param {Node} node Node.
     * @param {Object} pair Property name and value.
     * @param {Array<*>} objectStack Node stack.
     */
    function writeProperty(node, pair, objectStack) {
        const name = xml_js_10.createElementNS(WFSNS, 'Name');
        const context = objectStack[objectStack.length - 1];
        const gmlVersion = context['gmlVersion'];
        node.appendChild(name);
        xsd_js_6.writeStringTextNode(name, pair.name);
        if (pair.value !== undefined && pair.value !== null) {
            const value = xml_js_10.createElementNS(WFSNS, 'Value');
            node.appendChild(value);
            if (pair.value &&
                typeof ( /** @type {?} */(pair.value).getSimplifiedGeometry) ===
                    'function') {
                if (gmlVersion === 2) {
                    GML2_js_1.default.prototype.writeGeometryElement(value, pair.value, objectStack);
                }
                else {
                    GML3_js_2.default.prototype.writeGeometryElement(value, pair.value, objectStack);
                }
            }
            else {
                xsd_js_6.writeStringTextNode(value, pair.value);
            }
        }
    }
    /**
     * @param {Element} node Node.
     * @param {{vendorId: string, safeToIgnore: boolean, value: string}} nativeElement The native element.
     * @param {Array<*>} objectStack Node stack.
     */
    function writeNative(node, nativeElement, objectStack) {
        if (nativeElement.vendorId) {
            node.setAttribute('vendorId', nativeElement.vendorId);
        }
        if (nativeElement.safeToIgnore !== undefined) {
            node.setAttribute('safeToIgnore', String(nativeElement.safeToIgnore));
        }
        if (nativeElement.value !== undefined) {
            xsd_js_6.writeStringTextNode(node, nativeElement.value);
        }
    }
    /**
     * @type {Object<string, Object<string, import("../xml.js").Serializer>>}
     */
    const GETFEATURE_SERIALIZERS = {
        'http://www.opengis.net/wfs': {
            'Query': xml_js_10.makeChildAppender(writeQuery),
        },
        'http://www.opengis.net/ogc': {
            'During': xml_js_10.makeChildAppender(writeDuringFilter),
            'And': xml_js_10.makeChildAppender(writeLogicalFilter),
            'Or': xml_js_10.makeChildAppender(writeLogicalFilter),
            'Not': xml_js_10.makeChildAppender(writeNotFilter),
            'BBOX': xml_js_10.makeChildAppender(writeBboxFilter),
            'Contains': xml_js_10.makeChildAppender(writeContainsFilter),
            'Intersects': xml_js_10.makeChildAppender(writeIntersectsFilter),
            'Within': xml_js_10.makeChildAppender(writeWithinFilter),
            'PropertyIsEqualTo': xml_js_10.makeChildAppender(writeComparisonFilter),
            'PropertyIsNotEqualTo': xml_js_10.makeChildAppender(writeComparisonFilter),
            'PropertyIsLessThan': xml_js_10.makeChildAppender(writeComparisonFilter),
            'PropertyIsLessThanOrEqualTo': xml_js_10.makeChildAppender(writeComparisonFilter),
            'PropertyIsGreaterThan': xml_js_10.makeChildAppender(writeComparisonFilter),
            'PropertyIsGreaterThanOrEqualTo': xml_js_10.makeChildAppender(writeComparisonFilter),
            'PropertyIsNull': xml_js_10.makeChildAppender(writeIsNullFilter),
            'PropertyIsBetween': xml_js_10.makeChildAppender(writeIsBetweenFilter),
            'PropertyIsLike': xml_js_10.makeChildAppender(writeIsLikeFilter),
        },
    };
    /**
     * @param {Element} node Node.
     * @param {string} featureType Feature type.
     * @param {Array<*>} objectStack Node stack.
     */
    function writeQuery(node, featureType, objectStack) {
        const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);
        const featurePrefix = context['featurePrefix'];
        const featureNS = context['featureNS'];
        const propertyNames = context['propertyNames'];
        const srsName = context['srsName'];
        let typeName;
        // If feature prefix is not defined, we must not use the default prefix.
        if (featurePrefix) {
            typeName = getTypeName(featurePrefix, featureType);
        }
        else {
            typeName = featureType;
        }
        node.setAttribute('typeName', typeName);
        if (srsName) {
            node.setAttribute('srsName', srsName);
        }
        if (featureNS) {
            node.setAttributeNS(XMLNS, 'xmlns:' + featurePrefix, featureNS);
        }
        const item = /** @type {import("../xml.js").NodeStackItem} */ (obj_js_26.assign({}, context));
        item.node = node;
        xml_js_10.pushSerializeAndPop(item, QUERY_SERIALIZERS, xml_js_10.makeSimpleNodeFactory('PropertyName'), propertyNames, objectStack);
        const filter = context['filter'];
        if (filter) {
            const child = xml_js_10.createElementNS(OGCNS, 'Filter');
            node.appendChild(child);
            writeFilterCondition(child, filter, objectStack);
        }
    }
    /**
     * @param {Node} node Node.
     * @param {import("./filter/Filter.js").default} filter Filter.
     * @param {Array<*>} objectStack Node stack.
     */
    function writeFilterCondition(node, filter, objectStack) {
        /** @type {import("../xml.js").NodeStackItem} */
        const item = { node: node };
        xml_js_10.pushSerializeAndPop(item, GETFEATURE_SERIALIZERS, xml_js_10.makeSimpleNodeFactory(filter.getTagName()), [filter], objectStack);
    }
    /**
     * @param {Node} node Node.
     * @param {import("./filter/Bbox.js").default} filter Filter.
     * @param {Array<*>} objectStack Node stack.
     */
    function writeBboxFilter(node, filter, objectStack) {
        const context = objectStack[objectStack.length - 1];
        context['srsName'] = filter.srsName;
        writeOgcPropertyName(node, filter.geometryName);
        GML3_js_2.default.prototype.writeGeometryElement(node, filter.extent, objectStack);
    }
    /**
     * @param {Node} node Node.
     * @param {import("./filter/Contains.js").default} filter Filter.
     * @param {Array<*>} objectStack Node stack.
     */
    function writeContainsFilter(node, filter, objectStack) {
        const context = objectStack[objectStack.length - 1];
        context['srsName'] = filter.srsName;
        writeOgcPropertyName(node, filter.geometryName);
        GML3_js_2.default.prototype.writeGeometryElement(node, filter.geometry, objectStack);
    }
    /**
     * @param {Node} node Node.
     * @param {import("./filter/Intersects.js").default} filter Filter.
     * @param {Array<*>} objectStack Node stack.
     */
    function writeIntersectsFilter(node, filter, objectStack) {
        const context = objectStack[objectStack.length - 1];
        context['srsName'] = filter.srsName;
        writeOgcPropertyName(node, filter.geometryName);
        GML3_js_2.default.prototype.writeGeometryElement(node, filter.geometry, objectStack);
    }
    /**
     * @param {Node} node Node.
     * @param {import("./filter/Within.js").default} filter Filter.
     * @param {Array<*>} objectStack Node stack.
     */
    function writeWithinFilter(node, filter, objectStack) {
        const context = objectStack[objectStack.length - 1];
        context['srsName'] = filter.srsName;
        writeOgcPropertyName(node, filter.geometryName);
        GML3_js_2.default.prototype.writeGeometryElement(node, filter.geometry, objectStack);
    }
    /**
     * @param {Node} node Node.
     * @param {import("./filter/During.js").default} filter Filter.
     * @param {Array<*>} objectStack Node stack.
     */
    function writeDuringFilter(node, filter, objectStack) {
        const valueReference = xml_js_10.createElementNS(FESNS, 'ValueReference');
        xsd_js_6.writeStringTextNode(valueReference, filter.propertyName);
        node.appendChild(valueReference);
        const timePeriod = xml_js_10.createElementNS(GMLBase_js_3.GMLNS, 'TimePeriod');
        node.appendChild(timePeriod);
        const begin = xml_js_10.createElementNS(GMLBase_js_3.GMLNS, 'begin');
        timePeriod.appendChild(begin);
        writeTimeInstant(begin, filter.begin);
        const end = xml_js_10.createElementNS(GMLBase_js_3.GMLNS, 'end');
        timePeriod.appendChild(end);
        writeTimeInstant(end, filter.end);
    }
    /**
     * @param {Node} node Node.
     * @param {import("./filter/LogicalNary.js").default} filter Filter.
     * @param {Array<*>} objectStack Node stack.
     */
    function writeLogicalFilter(node, filter, objectStack) {
        /** @type {import("../xml.js").NodeStackItem} */
        const item = { node: node };
        const conditions = filter.conditions;
        for (let i = 0, ii = conditions.length; i < ii; ++i) {
            const condition = conditions[i];
            xml_js_10.pushSerializeAndPop(item, GETFEATURE_SERIALIZERS, xml_js_10.makeSimpleNodeFactory(condition.getTagName()), [condition], objectStack);
        }
    }
    /**
     * @param {Node} node Node.
     * @param {import("./filter/Not.js").default} filter Filter.
     * @param {Array<*>} objectStack Node stack.
     */
    function writeNotFilter(node, filter, objectStack) {
        /** @type {import("../xml.js").NodeStackItem} */
        const item = { node: node };
        const condition = filter.condition;
        xml_js_10.pushSerializeAndPop(item, GETFEATURE_SERIALIZERS, xml_js_10.makeSimpleNodeFactory(condition.getTagName()), [condition], objectStack);
    }
    /**
     * @param {Element} node Node.
     * @param {import("./filter/ComparisonBinary.js").default} filter Filter.
     * @param {Array<*>} objectStack Node stack.
     */
    function writeComparisonFilter(node, filter, objectStack) {
        if (filter.matchCase !== undefined) {
            node.setAttribute('matchCase', filter.matchCase.toString());
        }
        writeOgcPropertyName(node, filter.propertyName);
        writeOgcLiteral(node, '' + filter.expression);
    }
    /**
     * @param {Node} node Node.
     * @param {import("./filter/IsNull.js").default} filter Filter.
     * @param {Array<*>} objectStack Node stack.
     */
    function writeIsNullFilter(node, filter, objectStack) {
        writeOgcPropertyName(node, filter.propertyName);
    }
    /**
     * @param {Node} node Node.
     * @param {import("./filter/IsBetween.js").default} filter Filter.
     * @param {Array<*>} objectStack Node stack.
     */
    function writeIsBetweenFilter(node, filter, objectStack) {
        writeOgcPropertyName(node, filter.propertyName);
        const lowerBoundary = xml_js_10.createElementNS(OGCNS, 'LowerBoundary');
        node.appendChild(lowerBoundary);
        writeOgcLiteral(lowerBoundary, '' + filter.lowerBoundary);
        const upperBoundary = xml_js_10.createElementNS(OGCNS, 'UpperBoundary');
        node.appendChild(upperBoundary);
        writeOgcLiteral(upperBoundary, '' + filter.upperBoundary);
    }
    /**
     * @param {Element} node Node.
     * @param {import("./filter/IsLike.js").default} filter Filter.
     * @param {Array<*>} objectStack Node stack.
     */
    function writeIsLikeFilter(node, filter, objectStack) {
        node.setAttribute('wildCard', filter.wildCard);
        node.setAttribute('singleChar', filter.singleChar);
        node.setAttribute('escapeChar', filter.escapeChar);
        if (filter.matchCase !== undefined) {
            node.setAttribute('matchCase', filter.matchCase.toString());
        }
        writeOgcPropertyName(node, filter.propertyName);
        writeOgcLiteral(node, '' + filter.pattern);
    }
    /**
     * @param {string} tagName Tag name.
     * @param {Node} node Node.
     * @param {string} value Value.
     */
    function writeOgcExpression(tagName, node, value) {
        const property = xml_js_10.createElementNS(OGCNS, tagName);
        xsd_js_6.writeStringTextNode(property, value);
        node.appendChild(property);
    }
    /**
     * @param {Node} node Node.
     * @param {string} value PropertyName value.
     */
    function writeOgcPropertyName(node, value) {
        writeOgcExpression('PropertyName', node, value);
    }
    /**
     * @param {Node} node Node.
     * @param {string} value PropertyName value.
     */
    function writeOgcLiteral(node, value) {
        writeOgcExpression('Literal', node, value);
    }
    /**
     * @param {Node} node Node.
     * @param {string} time PropertyName value.
     */
    function writeTimeInstant(node, time) {
        const timeInstant = xml_js_10.createElementNS(GMLBase_js_3.GMLNS, 'TimeInstant');
        node.appendChild(timeInstant);
        const timePosition = xml_js_10.createElementNS(GMLBase_js_3.GMLNS, 'timePosition');
        timeInstant.appendChild(timePosition);
        xsd_js_6.writeStringTextNode(timePosition, time);
    }
    /**
     * Encode filter as WFS `Filter` and return the Node.
     *
     * @param {import("./filter/Filter.js").default} filter Filter.
     * @return {Node} Result.
     * @api
     */
    function writeFilter(filter) {
        const child = xml_js_10.createElementNS(OGCNS, 'Filter');
        writeFilterCondition(child, filter, []);
        return child;
    }
    exports.writeFilter = writeFilter;
    /**
     * @param {Node} node Node.
     * @param {Array<string>} featureTypes Feature types.
     * @param {Array<*>} objectStack Node stack.
     */
    function writeGetFeature(node, featureTypes, objectStack) {
        const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);
        const item = /** @type {import("../xml.js").NodeStackItem} */ (obj_js_26.assign({}, context));
        item.node = node;
        xml_js_10.pushSerializeAndPop(item, GETFEATURE_SERIALIZERS, xml_js_10.makeSimpleNodeFactory('Query'), featureTypes, objectStack);
    }
    exports.default = WFS;
});
define("node_modules/ol/src/format/WKT", ["require", "exports", "node_modules/ol/src/Feature", "node_modules/ol/src/geom/GeometryCollection", "node_modules/ol/src/geom/GeometryLayout", "node_modules/ol/src/geom/GeometryType", "node_modules/ol/src/geom/LineString", "node_modules/ol/src/geom/MultiLineString", "node_modules/ol/src/geom/MultiPoint", "node_modules/ol/src/geom/MultiPolygon", "node_modules/ol/src/geom/Point", "node_modules/ol/src/geom/Polygon", "node_modules/ol/src/format/TextFeature", "node_modules/ol/src/format/Feature"], function (require, exports, Feature_js_27, GeometryCollection_js_3, GeometryLayout_js_15, GeometryType_js_29, LineString_js_13, MultiLineString_js_10, MultiPoint_js_9, MultiPolygon_js_9, Point_js_13, Polygon_js_17, TextFeature_js_3, Feature_js_28) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Geometry constructors
     * @enum {function (new:import("../geom/Geometry.js").default, Array, import("../geom/GeometryLayout.js").default)}
     */
    const GeometryConstructor = {
        'POINT': Point_js_13.default,
        'LINESTRING': LineString_js_13.default,
        'POLYGON': Polygon_js_17.default,
        'MULTIPOINT': MultiPoint_js_9.default,
        'MULTILINESTRING': MultiLineString_js_10.default,
        'MULTIPOLYGON': MultiPolygon_js_9.default,
    };
    /**
     * @typedef {Object} Options
     * @property {boolean} [splitCollection=false] Whether to split GeometryCollections into
     * multiple features on reading.
     */
    /**
     * @typedef {Object} Token
     * @property {number} type
     * @property {number|string} [value]
     * @property {number} position
     */
    /**
     * @const
     * @type {string}
     */
    const EMPTY = 'EMPTY';
    /**
     * @const
     * @type {string}
     */
    const Z = 'Z';
    /**
     * @const
     * @type {string}
     */
    const M = 'M';
    /**
     * @const
     * @type {string}
     */
    const ZM = 'ZM';
    /**
     * @const
     * @enum {number}
     */
    const TokenType = {
        TEXT: 1,
        LEFT_PAREN: 2,
        RIGHT_PAREN: 3,
        NUMBER: 4,
        COMMA: 5,
        EOF: 6,
    };
    /**
     * @const
     * @type {Object<string, string>}
     */
    const WKTGeometryType = {};
    for (const type in GeometryType_js_29.default) {
        WKTGeometryType[type] = GeometryType_js_29.default[type].toUpperCase();
    }
    /**
     * Class to tokenize a WKT string.
     */
    class Lexer {
        /**
         * @param {string} wkt WKT string.
         */
        constructor(wkt) {
            /**
             * @type {string}
             */
            this.wkt = wkt;
            /**
             * @type {number}
             * @private
             */
            this.index_ = -1;
        }
        /**
         * @param {string} c Character.
         * @return {boolean} Whether the character is alphabetic.
         * @private
         */
        isAlpha_(c) {
            return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z');
        }
        /**
         * @param {string} c Character.
         * @param {boolean=} opt_decimal Whether the string number
         *     contains a dot, i.e. is a decimal number.
         * @return {boolean} Whether the character is numeric.
         * @private
         */
        isNumeric_(c, opt_decimal) {
            const decimal = opt_decimal !== undefined ? opt_decimal : false;
            return (c >= '0' && c <= '9') || (c == '.' && !decimal);
        }
        /**
         * @param {string} c Character.
         * @return {boolean} Whether the character is whitespace.
         * @private
         */
        isWhiteSpace_(c) {
            return c == ' ' || c == '\t' || c == '\r' || c == '\n';
        }
        /**
         * @return {string} Next string character.
         * @private
         */
        nextChar_() {
            return this.wkt.charAt(++this.index_);
        }
        /**
         * Fetch and return the next token.
         * @return {!Token} Next string token.
         */
        nextToken() {
            const c = this.nextChar_();
            const position = this.index_;
            /** @type {number|string} */
            let value = c;
            let type;
            if (c == '(') {
                type = TokenType.LEFT_PAREN;
            }
            else if (c == ',') {
                type = TokenType.COMMA;
            }
            else if (c == ')') {
                type = TokenType.RIGHT_PAREN;
            }
            else if (this.isNumeric_(c) || c == '-') {
                type = TokenType.NUMBER;
                value = this.readNumber_();
            }
            else if (this.isAlpha_(c)) {
                type = TokenType.TEXT;
                value = this.readText_();
            }
            else if (this.isWhiteSpace_(c)) {
                return this.nextToken();
            }
            else if (c === '') {
                type = TokenType.EOF;
            }
            else {
                throw new Error('Unexpected character: ' + c);
            }
            return { position: position, value: value, type: type };
        }
        /**
         * @return {number} Numeric token value.
         * @private
         */
        readNumber_() {
            let c;
            const index = this.index_;
            let decimal = false;
            let scientificNotation = false;
            do {
                if (c == '.') {
                    decimal = true;
                }
                else if (c == 'e' || c == 'E') {
                    scientificNotation = true;
                }
                c = this.nextChar_();
            } while (this.isNumeric_(c, decimal) ||
                // if we haven't detected a scientific number before, 'e' or 'E'
                // hint that we should continue to read
                (!scientificNotation && (c == 'e' || c == 'E')) ||
                // once we know that we have a scientific number, both '-' and '+'
                // are allowed
                (scientificNotation && (c == '-' || c == '+')));
            return parseFloat(this.wkt.substring(index, this.index_--));
        }
        /**
         * @return {string} String token value.
         * @private
         */
        readText_() {
            let c;
            const index = this.index_;
            do {
                c = this.nextChar_();
            } while (this.isAlpha_(c));
            return this.wkt.substring(index, this.index_--).toUpperCase();
        }
    }
    /**
     * Class to parse the tokens from the WKT string.
     */
    class Parser {
        /**
         * @param {Lexer} lexer The lexer.
         */
        constructor(lexer) {
            /**
             * @type {Lexer}
             * @private
             */
            this.lexer_ = lexer;
            /**
             * @type {Token}
             * @private
             */
            this.token_;
            /**
             * @type {import("../geom/GeometryLayout.js").default}
             * @private
             */
            this.layout_ = GeometryLayout_js_15.default.XY;
        }
        /**
         * Fetch the next token form the lexer and replace the active token.
         * @private
         */
        consume_() {
            this.token_ = this.lexer_.nextToken();
        }
        /**
         * Tests if the given type matches the type of the current token.
         * @param {TokenType} type Token type.
         * @return {boolean} Whether the token matches the given type.
         */
        isTokenType(type) {
            const isMatch = this.token_.type == type;
            return isMatch;
        }
        /**
         * If the given type matches the current token, consume it.
         * @param {TokenType} type Token type.
         * @return {boolean} Whether the token matches the given type.
         */
        match(type) {
            const isMatch = this.isTokenType(type);
            if (isMatch) {
                this.consume_();
            }
            return isMatch;
        }
        /**
         * Try to parse the tokens provided by the lexer.
         * @return {import("../geom/Geometry.js").default} The geometry.
         */
        parse() {
            this.consume_();
            const geometry = this.parseGeometry_();
            return geometry;
        }
        /**
         * Try to parse the dimensional info.
         * @return {import("../geom/GeometryLayout.js").default} The layout.
         * @private
         */
        parseGeometryLayout_() {
            let layout = GeometryLayout_js_15.default.XY;
            const dimToken = this.token_;
            if (this.isTokenType(TokenType.TEXT)) {
                const dimInfo = dimToken.value;
                if (dimInfo === Z) {
                    layout = GeometryLayout_js_15.default.XYZ;
                }
                else if (dimInfo === M) {
                    layout = GeometryLayout_js_15.default.XYM;
                }
                else if (dimInfo === ZM) {
                    layout = GeometryLayout_js_15.default.XYZM;
                }
                if (layout !== GeometryLayout_js_15.default.XY) {
                    this.consume_();
                }
            }
            return layout;
        }
        /**
         * @return {!Array<import("../geom/Geometry.js").default>} A collection of geometries.
         * @private
         */
        parseGeometryCollectionText_() {
            if (this.match(TokenType.LEFT_PAREN)) {
                const geometries = [];
                do {
                    geometries.push(this.parseGeometry_());
                } while (this.match(TokenType.COMMA));
                if (this.match(TokenType.RIGHT_PAREN)) {
                    return geometries;
                }
            }
            else if (this.isEmptyGeometry_()) {
                return [];
            }
            throw new Error(this.formatErrorMessage_());
        }
        /**
         * @return {Array<number>} All values in a point.
         * @private
         */
        parsePointText_() {
            if (this.match(TokenType.LEFT_PAREN)) {
                const coordinates = this.parsePoint_();
                if (this.match(TokenType.RIGHT_PAREN)) {
                    return coordinates;
                }
            }
            else if (this.isEmptyGeometry_()) {
                return null;
            }
            throw new Error(this.formatErrorMessage_());
        }
        /**
         * @return {!Array<!Array<number>>} All points in a linestring.
         * @private
         */
        parseLineStringText_() {
            if (this.match(TokenType.LEFT_PAREN)) {
                const coordinates = this.parsePointList_();
                if (this.match(TokenType.RIGHT_PAREN)) {
                    return coordinates;
                }
            }
            else if (this.isEmptyGeometry_()) {
                return [];
            }
            throw new Error(this.formatErrorMessage_());
        }
        /**
         * @return {!Array<!Array<!Array<number>>>} All points in a polygon.
         * @private
         */
        parsePolygonText_() {
            if (this.match(TokenType.LEFT_PAREN)) {
                const coordinates = this.parseLineStringTextList_();
                if (this.match(TokenType.RIGHT_PAREN)) {
                    return coordinates;
                }
            }
            else if (this.isEmptyGeometry_()) {
                return [];
            }
            throw new Error(this.formatErrorMessage_());
        }
        /**
         * @return {!Array<!Array<number>>} All points in a multipoint.
         * @private
         */
        parseMultiPointText_() {
            if (this.match(TokenType.LEFT_PAREN)) {
                let coordinates;
                if (this.token_.type == TokenType.LEFT_PAREN) {
                    coordinates = this.parsePointTextList_();
                }
                else {
                    coordinates = this.parsePointList_();
                }
                if (this.match(TokenType.RIGHT_PAREN)) {
                    return coordinates;
                }
            }
            else if (this.isEmptyGeometry_()) {
                return [];
            }
            throw new Error(this.formatErrorMessage_());
        }
        /**
         * @return {!Array<!Array<!Array<number>>>} All linestring points
         *                                          in a multilinestring.
         * @private
         */
        parseMultiLineStringText_() {
            if (this.match(TokenType.LEFT_PAREN)) {
                const coordinates = this.parseLineStringTextList_();
                if (this.match(TokenType.RIGHT_PAREN)) {
                    return coordinates;
                }
            }
            else if (this.isEmptyGeometry_()) {
                return [];
            }
            throw new Error(this.formatErrorMessage_());
        }
        /**
         * @return {!Array<!Array<!Array<!Array<number>>>>} All polygon points in a multipolygon.
         * @private
         */
        parseMultiPolygonText_() {
            if (this.match(TokenType.LEFT_PAREN)) {
                const coordinates = this.parsePolygonTextList_();
                if (this.match(TokenType.RIGHT_PAREN)) {
                    return coordinates;
                }
            }
            else if (this.isEmptyGeometry_()) {
                return [];
            }
            throw new Error(this.formatErrorMessage_());
        }
        /**
         * @return {!Array<number>} A point.
         * @private
         */
        parsePoint_() {
            const coordinates = [];
            const dimensions = this.layout_.length;
            for (let i = 0; i < dimensions; ++i) {
                const token = this.token_;
                if (this.match(TokenType.NUMBER)) {
                    coordinates.push(/** @type {number} */ (token.value));
                }
                else {
                    break;
                }
            }
            if (coordinates.length == dimensions) {
                return coordinates;
            }
            throw new Error(this.formatErrorMessage_());
        }
        /**
         * @return {!Array<!Array<number>>} An array of points.
         * @private
         */
        parsePointList_() {
            const coordinates = [this.parsePoint_()];
            while (this.match(TokenType.COMMA)) {
                coordinates.push(this.parsePoint_());
            }
            return coordinates;
        }
        /**
         * @return {!Array<!Array<number>>} An array of points.
         * @private
         */
        parsePointTextList_() {
            const coordinates = [this.parsePointText_()];
            while (this.match(TokenType.COMMA)) {
                coordinates.push(this.parsePointText_());
            }
            return coordinates;
        }
        /**
         * @return {!Array<!Array<!Array<number>>>} An array of points.
         * @private
         */
        parseLineStringTextList_() {
            const coordinates = [this.parseLineStringText_()];
            while (this.match(TokenType.COMMA)) {
                coordinates.push(this.parseLineStringText_());
            }
            return coordinates;
        }
        /**
         * @return {!Array<!Array<!Array<!Array<number>>>>} An array of points.
         * @private
         */
        parsePolygonTextList_() {
            const coordinates = [this.parsePolygonText_()];
            while (this.match(TokenType.COMMA)) {
                coordinates.push(this.parsePolygonText_());
            }
            return coordinates;
        }
        /**
         * @return {boolean} Whether the token implies an empty geometry.
         * @private
         */
        isEmptyGeometry_() {
            const isEmpty = this.isTokenType(TokenType.TEXT) && this.token_.value == EMPTY;
            if (isEmpty) {
                this.consume_();
            }
            return isEmpty;
        }
        /**
         * Create an error message for an unexpected token error.
         * @return {string} Error message.
         * @private
         */
        formatErrorMessage_() {
            return ('Unexpected `' +
                this.token_.value +
                '` at position ' +
                this.token_.position +
                ' in `' +
                this.lexer_.wkt +
                '`');
        }
        /**
         * @return {!import("../geom/Geometry.js").default} The geometry.
         * @private
         */
        parseGeometry_() {
            const token = this.token_;
            if (this.match(TokenType.TEXT)) {
                const geomType = token.value;
                this.layout_ = this.parseGeometryLayout_();
                if (geomType == 'GEOMETRYCOLLECTION') {
                    const geometries = this.parseGeometryCollectionText_();
                    return new GeometryCollection_js_3.default(geometries);
                }
                else {
                    const ctor = GeometryConstructor[geomType];
                    if (!ctor) {
                        throw new Error('Invalid geometry type: ' + geomType);
                    }
                    let coordinates;
                    switch (geomType) {
                        case 'POINT': {
                            coordinates = this.parsePointText_();
                            break;
                        }
                        case 'LINESTRING': {
                            coordinates = this.parseLineStringText_();
                            break;
                        }
                        case 'POLYGON': {
                            coordinates = this.parsePolygonText_();
                            break;
                        }
                        case 'MULTIPOINT': {
                            coordinates = this.parseMultiPointText_();
                            break;
                        }
                        case 'MULTILINESTRING': {
                            coordinates = this.parseMultiLineStringText_();
                            break;
                        }
                        case 'MULTIPOLYGON': {
                            coordinates = this.parseMultiPolygonText_();
                            break;
                        }
                        default: {
                            throw new Error('Invalid geometry type: ' + geomType);
                        }
                    }
                    if (!coordinates) {
                        if (ctor === GeometryConstructor['POINT']) {
                            coordinates = [NaN, NaN];
                        }
                        else {
                            coordinates = [];
                        }
                    }
                    return new ctor(coordinates, this.layout_);
                }
            }
            throw new Error(this.formatErrorMessage_());
        }
    }
    /**
     * @classdesc
     * Geometry format for reading and writing data in the `WellKnownText` (WKT)
     * format.
     *
     * @api
     */
    class WKT extends TextFeature_js_3.default {
        /**
         * @param {Options=} opt_options Options.
         */
        constructor(opt_options) {
            super();
            const options = opt_options ? opt_options : {};
            /**
             * Split GeometryCollection into multiple features.
             * @type {boolean}
             * @private
             */
            this.splitCollection_ =
                options.splitCollection !== undefined ? options.splitCollection : false;
        }
        /**
         * Parse a WKT string.
         * @param {string} wkt WKT string.
         * @return {import("../geom/Geometry.js").default|undefined}
         *     The geometry created.
         * @private
         */
        parse_(wkt) {
            const lexer = new Lexer(wkt);
            const parser = new Parser(lexer);
            return parser.parse();
        }
        /**
         * @protected
         * @param {string} text Text.
         * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
         * @return {import("../Feature.js").default} Feature.
         */
        readFeatureFromText(text, opt_options) {
            const geom = this.readGeometryFromText(text, opt_options);
            if (geom) {
                const feature = new Feature_js_27.default();
                feature.setGeometry(geom);
                return feature;
            }
            return null;
        }
        /**
         * @param {string} text Text.
         * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
         * @protected
         * @return {Array<Feature>} Features.
         */
        readFeaturesFromText(text, opt_options) {
            let geometries = [];
            const geometry = this.readGeometryFromText(text, opt_options);
            if (this.splitCollection_ &&
                geometry.getType() == GeometryType_js_29.default.GEOMETRY_COLLECTION) {
                geometries = /** @type {GeometryCollection} */ (geometry).getGeometriesArray();
            }
            else {
                geometries = [geometry];
            }
            const features = [];
            for (let i = 0, ii = geometries.length; i < ii; ++i) {
                const feature = new Feature_js_27.default();
                feature.setGeometry(geometries[i]);
                features.push(feature);
            }
            return features;
        }
        /**
         * @param {string} text Text.
         * @param {import("./Feature.js").ReadOptions=} opt_options Read options.
         * @protected
         * @return {import("../geom/Geometry.js").default} Geometry.
         */
        readGeometryFromText(text, opt_options) {
            const geometry = this.parse_(text);
            if (geometry) {
                return Feature_js_28.transformGeometryWithOptions(geometry, false, opt_options);
            }
            else {
                return null;
            }
        }
        /**
         * @param {import("../Feature.js").default} feature Features.
         * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
         * @protected
         * @return {string} Text.
         */
        writeFeatureText(feature, opt_options) {
            const geometry = feature.getGeometry();
            if (geometry) {
                return this.writeGeometryText(geometry, opt_options);
            }
            return '';
        }
        /**
         * @param {Array<import("../Feature.js").default>} features Features.
         * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
         * @protected
         * @return {string} Text.
         */
        writeFeaturesText(features, opt_options) {
            if (features.length == 1) {
                return this.writeFeatureText(features[0], opt_options);
            }
            const geometries = [];
            for (let i = 0, ii = features.length; i < ii; ++i) {
                geometries.push(features[i].getGeometry());
            }
            const collection = new GeometryCollection_js_3.default(geometries);
            return this.writeGeometryText(collection, opt_options);
        }
        /**
         * @param {import("../geom/Geometry.js").default} geometry Geometry.
         * @param {import("./Feature.js").WriteOptions=} opt_options Write options.
         * @protected
         * @return {string} Text.
         */
        writeGeometryText(geometry, opt_options) {
            return encode(Feature_js_28.transformGeometryWithOptions(geometry, true, opt_options));
        }
    }
    /**
     * @param {Point} geom Point geometry.
     * @return {string} Coordinates part of Point as WKT.
     */
    function encodePointGeometry(geom) {
        const coordinates = geom.getCoordinates();
        if (coordinates.length === 0) {
            return '';
        }
        return coordinates.join(' ');
    }
    /**
     * @param {MultiPoint} geom MultiPoint geometry.
     * @return {string} Coordinates part of MultiPoint as WKT.
     */
    function encodeMultiPointGeometry(geom) {
        const array = [];
        const components = geom.getPoints();
        for (let i = 0, ii = components.length; i < ii; ++i) {
            array.push('(' + encodePointGeometry(components[i]) + ')');
        }
        return array.join(',');
    }
    /**
     * @param {GeometryCollection} geom GeometryCollection geometry.
     * @return {string} Coordinates part of GeometryCollection as WKT.
     */
    function encodeGeometryCollectionGeometry(geom) {
        const array = [];
        const geoms = geom.getGeometries();
        for (let i = 0, ii = geoms.length; i < ii; ++i) {
            array.push(encode(geoms[i]));
        }
        return array.join(',');
    }
    /**
     * @param {LineString|import("../geom/LinearRing.js").default} geom LineString geometry.
     * @return {string} Coordinates part of LineString as WKT.
     */
    function encodeLineStringGeometry(geom) {
        const coordinates = geom.getCoordinates();
        const array = [];
        for (let i = 0, ii = coordinates.length; i < ii; ++i) {
            array.push(coordinates[i].join(' '));
        }
        return array.join(',');
    }
    /**
     * @param {MultiLineString} geom MultiLineString geometry.
     * @return {string} Coordinates part of MultiLineString as WKT.
     */
    function encodeMultiLineStringGeometry(geom) {
        const array = [];
        const components = geom.getLineStrings();
        for (let i = 0, ii = components.length; i < ii; ++i) {
            array.push('(' + encodeLineStringGeometry(components[i]) + ')');
        }
        return array.join(',');
    }
    /**
     * @param {Polygon} geom Polygon geometry.
     * @return {string} Coordinates part of Polygon as WKT.
     */
    function encodePolygonGeometry(geom) {
        const array = [];
        const rings = geom.getLinearRings();
        for (let i = 0, ii = rings.length; i < ii; ++i) {
            array.push('(' + encodeLineStringGeometry(rings[i]) + ')');
        }
        return array.join(',');
    }
    /**
     * @param {MultiPolygon} geom MultiPolygon geometry.
     * @return {string} Coordinates part of MultiPolygon as WKT.
     */
    function encodeMultiPolygonGeometry(geom) {
        const array = [];
        const components = geom.getPolygons();
        for (let i = 0, ii = components.length; i < ii; ++i) {
            array.push('(' + encodePolygonGeometry(components[i]) + ')');
        }
        return array.join(',');
    }
    /**
     * @param {import("../geom/SimpleGeometry.js").default} geom SimpleGeometry geometry.
     * @return {string} Potential dimensional information for WKT type.
     */
    function encodeGeometryLayout(geom) {
        const layout = geom.getLayout();
        let dimInfo = '';
        if (layout === GeometryLayout_js_15.default.XYZ || layout === GeometryLayout_js_15.default.XYZM) {
            dimInfo += Z;
        }
        if (layout === GeometryLayout_js_15.default.XYM || layout === GeometryLayout_js_15.default.XYZM) {
            dimInfo += M;
        }
        return dimInfo;
    }
    /**
     * @const
     * @type {Object<string, function(import("../geom/Geometry.js").default): string>}
     */
    const GeometryEncoder = {
        'Point': encodePointGeometry,
        'LineString': encodeLineStringGeometry,
        'Polygon': encodePolygonGeometry,
        'MultiPoint': encodeMultiPointGeometry,
        'MultiLineString': encodeMultiLineStringGeometry,
        'MultiPolygon': encodeMultiPolygonGeometry,
        'GeometryCollection': encodeGeometryCollectionGeometry,
    };
    /**
     * Encode a geometry as WKT.
     * @param {!import("../geom/Geometry.js").default} geom The geometry to encode.
     * @return {string} WKT string for the geometry.
     */
    function encode(geom) {
        let type = geom.getType();
        const geometryEncoder = GeometryEncoder[type];
        const enc = geometryEncoder(geom);
        type = type.toUpperCase();
        if (typeof ( /** @type {?} */(geom).getFlatCoordinates) === 'function') {
            const dimInfo = encodeGeometryLayout(
            /** @type {import("../geom/SimpleGeometry.js").default} */ (geom));
            if (dimInfo.length > 0) {
                type += ' ' + dimInfo;
            }
        }
        if (enc.length === 0) {
            return type + ' ' + EMPTY;
        }
        return type + '(' + enc + ')';
    }
    exports.default = WKT;
});
define("node_modules/ol/src/format/WMSCapabilities", ["require", "exports", "node_modules/ol/src/format/XML", "node_modules/ol/src/xml", "node_modules/ol/src/format/xsd", "node_modules/ol/src/format/XLink"], function (require, exports, XML_js_2, xml_js_11, xsd_js_7, XLink_js_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @const
     * @type {Array<null|string>}
     */
    const NAMESPACE_URIS = [null, 'http://www.opengis.net/wms'];
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const PARSERS = xml_js_11.makeStructureNS(NAMESPACE_URIS, {
        'Service': xml_js_11.makeObjectPropertySetter(readService),
        'Capability': xml_js_11.makeObjectPropertySetter(readCapability),
    });
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const CAPABILITY_PARSERS = xml_js_11.makeStructureNS(NAMESPACE_URIS, {
        'Request': xml_js_11.makeObjectPropertySetter(readRequest),
        'Exception': xml_js_11.makeObjectPropertySetter(readException),
        'Layer': xml_js_11.makeObjectPropertySetter(readCapabilityLayer),
    });
    /**
     * @classdesc
     * Format for reading WMS capabilities data
     *
     * @api
     */
    class WMSCapabilities extends XML_js_2.default {
        constructor() {
            super();
            /**
             * @type {string|undefined}
             */
            this.version = undefined;
        }
        /**
         * @param {Element} node Node.
         * @return {Object} Object
         */
        readFromNode(node) {
            this.version = node.getAttribute('version').trim();
            const wmsCapabilityObject = xml_js_11.pushParseAndPop({
                'version': this.version,
            }, PARSERS, node, []);
            return wmsCapabilityObject ? wmsCapabilityObject : null;
        }
    }
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const SERVICE_PARSERS = xml_js_11.makeStructureNS(NAMESPACE_URIS, {
        'Name': xml_js_11.makeObjectPropertySetter(xsd_js_7.readString),
        'Title': xml_js_11.makeObjectPropertySetter(xsd_js_7.readString),
        'Abstract': xml_js_11.makeObjectPropertySetter(xsd_js_7.readString),
        'KeywordList': xml_js_11.makeObjectPropertySetter(readKeywordList),
        'OnlineResource': xml_js_11.makeObjectPropertySetter(XLink_js_2.readHref),
        'ContactInformation': xml_js_11.makeObjectPropertySetter(readContactInformation),
        'Fees': xml_js_11.makeObjectPropertySetter(xsd_js_7.readString),
        'AccessConstraints': xml_js_11.makeObjectPropertySetter(xsd_js_7.readString),
        'LayerLimit': xml_js_11.makeObjectPropertySetter(xsd_js_7.readNonNegativeInteger),
        'MaxWidth': xml_js_11.makeObjectPropertySetter(xsd_js_7.readNonNegativeInteger),
        'MaxHeight': xml_js_11.makeObjectPropertySetter(xsd_js_7.readNonNegativeInteger),
    });
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const CONTACT_INFORMATION_PARSERS = xml_js_11.makeStructureNS(NAMESPACE_URIS, {
        'ContactPersonPrimary': xml_js_11.makeObjectPropertySetter(readContactPersonPrimary),
        'ContactPosition': xml_js_11.makeObjectPropertySetter(xsd_js_7.readString),
        'ContactAddress': xml_js_11.makeObjectPropertySetter(readContactAddress),
        'ContactVoiceTelephone': xml_js_11.makeObjectPropertySetter(xsd_js_7.readString),
        'ContactFacsimileTelephone': xml_js_11.makeObjectPropertySetter(xsd_js_7.readString),
        'ContactElectronicMailAddress': xml_js_11.makeObjectPropertySetter(xsd_js_7.readString),
    });
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const CONTACT_PERSON_PARSERS = xml_js_11.makeStructureNS(NAMESPACE_URIS, {
        'ContactPerson': xml_js_11.makeObjectPropertySetter(xsd_js_7.readString),
        'ContactOrganization': xml_js_11.makeObjectPropertySetter(xsd_js_7.readString),
    });
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const CONTACT_ADDRESS_PARSERS = xml_js_11.makeStructureNS(NAMESPACE_URIS, {
        'AddressType': xml_js_11.makeObjectPropertySetter(xsd_js_7.readString),
        'Address': xml_js_11.makeObjectPropertySetter(xsd_js_7.readString),
        'City': xml_js_11.makeObjectPropertySetter(xsd_js_7.readString),
        'StateOrProvince': xml_js_11.makeObjectPropertySetter(xsd_js_7.readString),
        'PostCode': xml_js_11.makeObjectPropertySetter(xsd_js_7.readString),
        'Country': xml_js_11.makeObjectPropertySetter(xsd_js_7.readString),
    });
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const EXCEPTION_PARSERS = xml_js_11.makeStructureNS(NAMESPACE_URIS, {
        'Format': xml_js_11.makeArrayPusher(xsd_js_7.readString),
    });
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const LAYER_PARSERS = xml_js_11.makeStructureNS(NAMESPACE_URIS, {
        'Name': xml_js_11.makeObjectPropertySetter(xsd_js_7.readString),
        'Title': xml_js_11.makeObjectPropertySetter(xsd_js_7.readString),
        'Abstract': xml_js_11.makeObjectPropertySetter(xsd_js_7.readString),
        'KeywordList': xml_js_11.makeObjectPropertySetter(readKeywordList),
        'CRS': xml_js_11.makeObjectPropertyPusher(xsd_js_7.readString),
        'EX_GeographicBoundingBox': xml_js_11.makeObjectPropertySetter(readEXGeographicBoundingBox),
        'BoundingBox': xml_js_11.makeObjectPropertyPusher(readBoundingBox),
        'Dimension': xml_js_11.makeObjectPropertyPusher(readDimension),
        'Attribution': xml_js_11.makeObjectPropertySetter(readAttribution),
        'AuthorityURL': xml_js_11.makeObjectPropertyPusher(readAuthorityURL),
        'Identifier': xml_js_11.makeObjectPropertyPusher(xsd_js_7.readString),
        'MetadataURL': xml_js_11.makeObjectPropertyPusher(readMetadataURL),
        'DataURL': xml_js_11.makeObjectPropertyPusher(readFormatOnlineresource),
        'FeatureListURL': xml_js_11.makeObjectPropertyPusher(readFormatOnlineresource),
        'Style': xml_js_11.makeObjectPropertyPusher(readStyle),
        'MinScaleDenominator': xml_js_11.makeObjectPropertySetter(xsd_js_7.readDecimal),
        'MaxScaleDenominator': xml_js_11.makeObjectPropertySetter(xsd_js_7.readDecimal),
        'Layer': xml_js_11.makeObjectPropertyPusher(readLayer),
    });
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const ATTRIBUTION_PARSERS = xml_js_11.makeStructureNS(NAMESPACE_URIS, {
        'Title': xml_js_11.makeObjectPropertySetter(xsd_js_7.readString),
        'OnlineResource': xml_js_11.makeObjectPropertySetter(XLink_js_2.readHref),
        'LogoURL': xml_js_11.makeObjectPropertySetter(readSizedFormatOnlineresource),
    });
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const EX_GEOGRAPHIC_BOUNDING_BOX_PARSERS = xml_js_11.makeStructureNS(NAMESPACE_URIS, {
        'westBoundLongitude': xml_js_11.makeObjectPropertySetter(xsd_js_7.readDecimal),
        'eastBoundLongitude': xml_js_11.makeObjectPropertySetter(xsd_js_7.readDecimal),
        'southBoundLatitude': xml_js_11.makeObjectPropertySetter(xsd_js_7.readDecimal),
        'northBoundLatitude': xml_js_11.makeObjectPropertySetter(xsd_js_7.readDecimal),
    });
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const REQUEST_PARSERS = xml_js_11.makeStructureNS(NAMESPACE_URIS, {
        'GetCapabilities': xml_js_11.makeObjectPropertySetter(readOperationType),
        'GetMap': xml_js_11.makeObjectPropertySetter(readOperationType),
        'GetFeatureInfo': xml_js_11.makeObjectPropertySetter(readOperationType),
    });
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const OPERATIONTYPE_PARSERS = xml_js_11.makeStructureNS(NAMESPACE_URIS, {
        'Format': xml_js_11.makeObjectPropertyPusher(xsd_js_7.readString),
        'DCPType': xml_js_11.makeObjectPropertyPusher(readDCPType),
    });
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const DCPTYPE_PARSERS = xml_js_11.makeStructureNS(NAMESPACE_URIS, {
        'HTTP': xml_js_11.makeObjectPropertySetter(readHTTP),
    });
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const HTTP_PARSERS = xml_js_11.makeStructureNS(NAMESPACE_URIS, {
        'Get': xml_js_11.makeObjectPropertySetter(readFormatOnlineresource),
        'Post': xml_js_11.makeObjectPropertySetter(readFormatOnlineresource),
    });
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const STYLE_PARSERS = xml_js_11.makeStructureNS(NAMESPACE_URIS, {
        'Name': xml_js_11.makeObjectPropertySetter(xsd_js_7.readString),
        'Title': xml_js_11.makeObjectPropertySetter(xsd_js_7.readString),
        'Abstract': xml_js_11.makeObjectPropertySetter(xsd_js_7.readString),
        'LegendURL': xml_js_11.makeObjectPropertyPusher(readSizedFormatOnlineresource),
        'StyleSheetURL': xml_js_11.makeObjectPropertySetter(readFormatOnlineresource),
        'StyleURL': xml_js_11.makeObjectPropertySetter(readFormatOnlineresource),
    });
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const FORMAT_ONLINERESOURCE_PARSERS = xml_js_11.makeStructureNS(NAMESPACE_URIS, {
        'Format': xml_js_11.makeObjectPropertySetter(xsd_js_7.readString),
        'OnlineResource': xml_js_11.makeObjectPropertySetter(XLink_js_2.readHref),
    });
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const KEYWORDLIST_PARSERS = xml_js_11.makeStructureNS(NAMESPACE_URIS, {
        'Keyword': xml_js_11.makeArrayPusher(xsd_js_7.readString),
    });
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Object|undefined} Attribution object.
     */
    function readAttribution(node, objectStack) {
        return xml_js_11.pushParseAndPop({}, ATTRIBUTION_PARSERS, node, objectStack);
    }
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Object} Bounding box object.
     */
    function readBoundingBox(node, objectStack) {
        const extent = [
            xsd_js_7.readDecimalString(node.getAttribute('minx')),
            xsd_js_7.readDecimalString(node.getAttribute('miny')),
            xsd_js_7.readDecimalString(node.getAttribute('maxx')),
            xsd_js_7.readDecimalString(node.getAttribute('maxy')),
        ];
        const resolutions = [
            xsd_js_7.readDecimalString(node.getAttribute('resx')),
            xsd_js_7.readDecimalString(node.getAttribute('resy')),
        ];
        return {
            'crs': node.getAttribute('CRS'),
            'extent': extent,
            'res': resolutions,
        };
    }
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {import("../extent.js").Extent|undefined} Bounding box object.
     */
    function readEXGeographicBoundingBox(node, objectStack) {
        const geographicBoundingBox = xml_js_11.pushParseAndPop({}, EX_GEOGRAPHIC_BOUNDING_BOX_PARSERS, node, objectStack);
        if (!geographicBoundingBox) {
            return undefined;
        }
        const westBoundLongitude = 
        /** @type {number|undefined} */
        (geographicBoundingBox['westBoundLongitude']);
        const southBoundLatitude = 
        /** @type {number|undefined} */
        (geographicBoundingBox['southBoundLatitude']);
        const eastBoundLongitude = 
        /** @type {number|undefined} */
        (geographicBoundingBox['eastBoundLongitude']);
        const northBoundLatitude = 
        /** @type {number|undefined} */
        (geographicBoundingBox['northBoundLatitude']);
        if (westBoundLongitude === undefined ||
            southBoundLatitude === undefined ||
            eastBoundLongitude === undefined ||
            northBoundLatitude === undefined) {
            return undefined;
        }
        return [
            westBoundLongitude,
            southBoundLatitude,
            eastBoundLongitude,
            northBoundLatitude,
        ];
    }
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Object|undefined} Capability object.
     */
    function readCapability(node, objectStack) {
        return xml_js_11.pushParseAndPop({}, CAPABILITY_PARSERS, node, objectStack);
    }
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Object|undefined} Service object.
     */
    function readService(node, objectStack) {
        return xml_js_11.pushParseAndPop({}, SERVICE_PARSERS, node, objectStack);
    }
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Object|undefined} Contact information object.
     */
    function readContactInformation(node, objectStack) {
        return xml_js_11.pushParseAndPop({}, CONTACT_INFORMATION_PARSERS, node, objectStack);
    }
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Object|undefined} Contact person object.
     */
    function readContactPersonPrimary(node, objectStack) {
        return xml_js_11.pushParseAndPop({}, CONTACT_PERSON_PARSERS, node, objectStack);
    }
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Object|undefined} Contact address object.
     */
    function readContactAddress(node, objectStack) {
        return xml_js_11.pushParseAndPop({}, CONTACT_ADDRESS_PARSERS, node, objectStack);
    }
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Array<string>|undefined} Format array.
     */
    function readException(node, objectStack) {
        return xml_js_11.pushParseAndPop([], EXCEPTION_PARSERS, node, objectStack);
    }
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Object|undefined} Layer object.
     */
    function readCapabilityLayer(node, objectStack) {
        return xml_js_11.pushParseAndPop({}, LAYER_PARSERS, node, objectStack);
    }
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Object|undefined} Layer object.
     */
    function readLayer(node, objectStack) {
        const parentLayerObject = /**  @type {!Object<string,*>} */ (objectStack[objectStack.length - 1]);
        const layerObject = xml_js_11.pushParseAndPop({}, LAYER_PARSERS, node, objectStack);
        if (!layerObject) {
            return undefined;
        }
        let queryable = xsd_js_7.readBooleanString(node.getAttribute('queryable'));
        if (queryable === undefined) {
            queryable = parentLayerObject['queryable'];
        }
        layerObject['queryable'] = queryable !== undefined ? queryable : false;
        let cascaded = xsd_js_7.readNonNegativeIntegerString(node.getAttribute('cascaded'));
        if (cascaded === undefined) {
            cascaded = parentLayerObject['cascaded'];
        }
        layerObject['cascaded'] = cascaded;
        let opaque = xsd_js_7.readBooleanString(node.getAttribute('opaque'));
        if (opaque === undefined) {
            opaque = parentLayerObject['opaque'];
        }
        layerObject['opaque'] = opaque !== undefined ? opaque : false;
        let noSubsets = xsd_js_7.readBooleanString(node.getAttribute('noSubsets'));
        if (noSubsets === undefined) {
            noSubsets = parentLayerObject['noSubsets'];
        }
        layerObject['noSubsets'] = noSubsets !== undefined ? noSubsets : false;
        let fixedWidth = xsd_js_7.readDecimalString(node.getAttribute('fixedWidth'));
        if (!fixedWidth) {
            fixedWidth = parentLayerObject['fixedWidth'];
        }
        layerObject['fixedWidth'] = fixedWidth;
        let fixedHeight = xsd_js_7.readDecimalString(node.getAttribute('fixedHeight'));
        if (!fixedHeight) {
            fixedHeight = parentLayerObject['fixedHeight'];
        }
        layerObject['fixedHeight'] = fixedHeight;
        // See 7.2.4.8
        const addKeys = ['Style', 'CRS', 'AuthorityURL'];
        addKeys.forEach(function (key) {
            if (key in parentLayerObject) {
                const childValue = layerObject[key] || [];
                layerObject[key] = childValue.concat(parentLayerObject[key]);
            }
        });
        const replaceKeys = [
            'EX_GeographicBoundingBox',
            'BoundingBox',
            'Dimension',
            'Attribution',
            'MinScaleDenominator',
            'MaxScaleDenominator',
        ];
        replaceKeys.forEach(function (key) {
            if (!(key in layerObject)) {
                const parentValue = parentLayerObject[key];
                layerObject[key] = parentValue;
            }
        });
        return layerObject;
    }
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Object} Dimension object.
     */
    function readDimension(node, objectStack) {
        const dimensionObject = {
            'name': node.getAttribute('name'),
            'units': node.getAttribute('units'),
            'unitSymbol': node.getAttribute('unitSymbol'),
            'default': node.getAttribute('default'),
            'multipleValues': xsd_js_7.readBooleanString(node.getAttribute('multipleValues')),
            'nearestValue': xsd_js_7.readBooleanString(node.getAttribute('nearestValue')),
            'current': xsd_js_7.readBooleanString(node.getAttribute('current')),
            'values': xsd_js_7.readString(node),
        };
        return dimensionObject;
    }
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Object|undefined} Online resource object.
     */
    function readFormatOnlineresource(node, objectStack) {
        return xml_js_11.pushParseAndPop({}, FORMAT_ONLINERESOURCE_PARSERS, node, objectStack);
    }
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Object|undefined} Request object.
     */
    function readRequest(node, objectStack) {
        return xml_js_11.pushParseAndPop({}, REQUEST_PARSERS, node, objectStack);
    }
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Object|undefined} DCP type object.
     */
    function readDCPType(node, objectStack) {
        return xml_js_11.pushParseAndPop({}, DCPTYPE_PARSERS, node, objectStack);
    }
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Object|undefined} HTTP object.
     */
    function readHTTP(node, objectStack) {
        return xml_js_11.pushParseAndPop({}, HTTP_PARSERS, node, objectStack);
    }
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Object|undefined} Operation type object.
     */
    function readOperationType(node, objectStack) {
        return xml_js_11.pushParseAndPop({}, OPERATIONTYPE_PARSERS, node, objectStack);
    }
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Object|undefined} Online resource object.
     */
    function readSizedFormatOnlineresource(node, objectStack) {
        const formatOnlineresource = readFormatOnlineresource(node, objectStack);
        if (formatOnlineresource) {
            const size = [
                xsd_js_7.readNonNegativeIntegerString(node.getAttribute('width')),
                xsd_js_7.readNonNegativeIntegerString(node.getAttribute('height')),
            ];
            formatOnlineresource['size'] = size;
            return formatOnlineresource;
        }
        return undefined;
    }
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Object|undefined} Authority URL object.
     */
    function readAuthorityURL(node, objectStack) {
        const authorityObject = readFormatOnlineresource(node, objectStack);
        if (authorityObject) {
            authorityObject['name'] = node.getAttribute('name');
            return authorityObject;
        }
        return undefined;
    }
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Object|undefined} Metadata URL object.
     */
    function readMetadataURL(node, objectStack) {
        const metadataObject = readFormatOnlineresource(node, objectStack);
        if (metadataObject) {
            metadataObject['type'] = node.getAttribute('type');
            return metadataObject;
        }
        return undefined;
    }
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Object|undefined} Style object.
     */
    function readStyle(node, objectStack) {
        return xml_js_11.pushParseAndPop({}, STYLE_PARSERS, node, objectStack);
    }
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Array<string>|undefined} Keyword list.
     */
    function readKeywordList(node, objectStack) {
        return xml_js_11.pushParseAndPop([], KEYWORDLIST_PARSERS, node, objectStack);
    }
    exports.default = WMSCapabilities;
});
define("node_modules/ol/src/format/WMSGetFeatureInfo", ["require", "exports", "node_modules/ol/src/format/GML2", "node_modules/ol/src/format/XMLFeature", "node_modules/ol/src/obj", "node_modules/ol/src/array", "node_modules/ol/src/xml"], function (require, exports, GML2_js_2, XMLFeature_js_5, obj_js_27, array_js_30, xml_js_12) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @typedef {Object} Options
     * @property {Array<string>} [layers] If set, only features of the given layers will be returned by the format when read.
     */
    /**
     * @const
     * @type {string}
     */
    const featureIdentifier = '_feature';
    /**
     * @const
     * @type {string}
     */
    const layerIdentifier = '_layer';
    /**
     * @classdesc
     * Format for reading WMSGetFeatureInfo format. It uses
     * {@link module:ol/format/GML2~GML2} to read features.
     *
     * @api
     */
    class WMSGetFeatureInfo extends XMLFeature_js_5.default {
        /**
         * @param {Options=} opt_options Options.
         */
        constructor(opt_options) {
            super();
            const options = opt_options ? opt_options : {};
            /**
             * @private
             * @type {string}
             */
            this.featureNS_ = 'http://mapserver.gis.umn.edu/mapserver';
            /**
             * @private
             * @type {GML2}
             */
            this.gmlFormat_ = new GML2_js_2.default();
            /**
             * @private
             * @type {Array<string>}
             */
            this.layers_ = options.layers ? options.layers : null;
        }
        /**
         * @return {Array<string>} layers
         */
        getLayers() {
            return this.layers_;
        }
        /**
         * @param {Array<string>} layers Layers to parse.
         */
        setLayers(layers) {
            this.layers_ = layers;
        }
        /**
         * @param {Element} node Node.
         * @param {Array<*>} objectStack Object stack.
         * @return {Array<import("../Feature.js").default>} Features.
         * @private
         */
        readFeatures_(node, objectStack) {
            node.setAttribute('namespaceURI', this.featureNS_);
            const localName = node.localName;
            /** @type {Array<import("../Feature.js").default>} */
            let features = [];
            if (node.childNodes.length === 0) {
                return features;
            }
            if (localName == 'msGMLOutput') {
                for (let i = 0, ii = node.childNodes.length; i < ii; i++) {
                    const layer = node.childNodes[i];
                    if (layer.nodeType !== Node.ELEMENT_NODE) {
                        continue;
                    }
                    const layerElement = /** @type {Element} */ (layer);
                    const context = objectStack[0];
                    const toRemove = layerIdentifier;
                    const layerName = layerElement.localName.replace(toRemove, '');
                    if (this.layers_ && !array_js_30.includes(this.layers_, layerName)) {
                        continue;
                    }
                    const featureType = layerName + featureIdentifier;
                    context['featureType'] = featureType;
                    context['featureNS'] = this.featureNS_;
                    /** @type {Object<string, import("../xml.js").Parser>} */
                    const parsers = {};
                    parsers[featureType] = xml_js_12.makeArrayPusher(this.gmlFormat_.readFeatureElement, this.gmlFormat_);
                    const parsersNS = xml_js_12.makeStructureNS([context['featureNS'], null], parsers);
                    layerElement.setAttribute('namespaceURI', this.featureNS_);
                    const layerFeatures = xml_js_12.pushParseAndPop([], 
                    // @ts-ignore
                    parsersNS, layerElement, objectStack, this.gmlFormat_);
                    if (layerFeatures) {
                        array_js_30.extend(features, layerFeatures);
                    }
                }
            }
            if (localName == 'FeatureCollection') {
                const gmlFeatures = xml_js_12.pushParseAndPop([], this.gmlFormat_.FEATURE_COLLECTION_PARSERS, node, [{}], this.gmlFormat_);
                if (gmlFeatures) {
                    features = gmlFeatures;
                }
            }
            return features;
        }
        /**
         * @protected
         * @param {Element} node Node.
         * @param {import("./Feature.js").ReadOptions=} opt_options Options.
         * @return {Array<import("../Feature.js").default>} Features.
         */
        readFeaturesFromNode(node, opt_options) {
            const options = {};
            if (opt_options) {
                obj_js_27.assign(options, this.getReadOptions(node, opt_options));
            }
            return this.readFeatures_(node, [options]);
        }
    }
    exports.default = WMSGetFeatureInfo;
});
define("node_modules/ol/src/format/WMTSCapabilities", ["require", "exports", "node_modules/ol/src/format/OWS", "node_modules/ol/src/format/XML", "node_modules/ol/src/extent", "node_modules/ol/src/xml", "node_modules/ol/src/format/xsd", "node_modules/ol/src/format/XLink"], function (require, exports, OWS_js_1, XML_js_3, extent_js_52, xml_js_13, xsd_js_8, XLink_js_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @const
     * @type {Array<null|string>}
     */
    const NAMESPACE_URIS = [null, 'http://www.opengis.net/wmts/1.0'];
    /**
     * @const
     * @type {Array<null|string>}
     */
    const OWS_NAMESPACE_URIS = [null, 'http://www.opengis.net/ows/1.1'];
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const PARSERS = xml_js_13.makeStructureNS(NAMESPACE_URIS, {
        'Contents': xml_js_13.makeObjectPropertySetter(readContents),
    });
    /**
     * @classdesc
     * Format for reading WMTS capabilities data.
     *
     * @api
     */
    class WMTSCapabilities extends XML_js_3.default {
        constructor() {
            super();
            /**
             * @type {OWS}
             * @private
             */
            this.owsParser_ = new OWS_js_1.default();
        }
        /**
         * @param {Element} node Node.
         * @return {Object} Object
         */
        readFromNode(node) {
            let version = node.getAttribute('version');
            if (version) {
                version = version.trim();
            }
            let WMTSCapabilityObject = this.owsParser_.readFromNode(node);
            if (!WMTSCapabilityObject) {
                return null;
            }
            WMTSCapabilityObject['version'] = version;
            WMTSCapabilityObject = xml_js_13.pushParseAndPop(WMTSCapabilityObject, PARSERS, node, []);
            return WMTSCapabilityObject ? WMTSCapabilityObject : null;
        }
    }
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const CONTENTS_PARSERS = xml_js_13.makeStructureNS(NAMESPACE_URIS, {
        'Layer': xml_js_13.makeObjectPropertyPusher(readLayer),
        'TileMatrixSet': xml_js_13.makeObjectPropertyPusher(readTileMatrixSet),
    });
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const LAYER_PARSERS = xml_js_13.makeStructureNS(NAMESPACE_URIS, {
        'Style': xml_js_13.makeObjectPropertyPusher(readStyle),
        'Format': xml_js_13.makeObjectPropertyPusher(xsd_js_8.readString),
        'TileMatrixSetLink': xml_js_13.makeObjectPropertyPusher(readTileMatrixSetLink),
        'Dimension': xml_js_13.makeObjectPropertyPusher(readDimensions),
        'ResourceURL': xml_js_13.makeObjectPropertyPusher(readResourceUrl),
    }, xml_js_13.makeStructureNS(OWS_NAMESPACE_URIS, {
        'Title': xml_js_13.makeObjectPropertySetter(xsd_js_8.readString),
        'Abstract': xml_js_13.makeObjectPropertySetter(xsd_js_8.readString),
        'WGS84BoundingBox': xml_js_13.makeObjectPropertySetter(readWgs84BoundingBox),
        'Identifier': xml_js_13.makeObjectPropertySetter(xsd_js_8.readString),
    }));
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const STYLE_PARSERS = xml_js_13.makeStructureNS(NAMESPACE_URIS, {
        'LegendURL': xml_js_13.makeObjectPropertyPusher(readLegendUrl),
    }, xml_js_13.makeStructureNS(OWS_NAMESPACE_URIS, {
        'Title': xml_js_13.makeObjectPropertySetter(xsd_js_8.readString),
        'Identifier': xml_js_13.makeObjectPropertySetter(xsd_js_8.readString),
    }));
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const TMS_LINKS_PARSERS = xml_js_13.makeStructureNS(NAMESPACE_URIS, {
        'TileMatrixSet': xml_js_13.makeObjectPropertySetter(xsd_js_8.readString),
        'TileMatrixSetLimits': xml_js_13.makeObjectPropertySetter(readTileMatrixLimitsList),
    });
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const TMS_LIMITS_LIST_PARSERS = xml_js_13.makeStructureNS(NAMESPACE_URIS, {
        'TileMatrixLimits': xml_js_13.makeArrayPusher(readTileMatrixLimits),
    });
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const TMS_LIMITS_PARSERS = xml_js_13.makeStructureNS(NAMESPACE_URIS, {
        'TileMatrix': xml_js_13.makeObjectPropertySetter(xsd_js_8.readString),
        'MinTileRow': xml_js_13.makeObjectPropertySetter(xsd_js_8.readNonNegativeInteger),
        'MaxTileRow': xml_js_13.makeObjectPropertySetter(xsd_js_8.readNonNegativeInteger),
        'MinTileCol': xml_js_13.makeObjectPropertySetter(xsd_js_8.readNonNegativeInteger),
        'MaxTileCol': xml_js_13.makeObjectPropertySetter(xsd_js_8.readNonNegativeInteger),
    });
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const DIMENSION_PARSERS = xml_js_13.makeStructureNS(NAMESPACE_URIS, {
        'Default': xml_js_13.makeObjectPropertySetter(xsd_js_8.readString),
        'Value': xml_js_13.makeObjectPropertyPusher(xsd_js_8.readString),
    }, xml_js_13.makeStructureNS(OWS_NAMESPACE_URIS, {
        'Identifier': xml_js_13.makeObjectPropertySetter(xsd_js_8.readString),
    }));
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const WGS84_BBOX_READERS = xml_js_13.makeStructureNS(OWS_NAMESPACE_URIS, {
        'LowerCorner': xml_js_13.makeArrayPusher(readCoordinates),
        'UpperCorner': xml_js_13.makeArrayPusher(readCoordinates),
    });
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const TMS_PARSERS = xml_js_13.makeStructureNS(NAMESPACE_URIS, {
        'WellKnownScaleSet': xml_js_13.makeObjectPropertySetter(xsd_js_8.readString),
        'TileMatrix': xml_js_13.makeObjectPropertyPusher(readTileMatrix),
    }, xml_js_13.makeStructureNS(OWS_NAMESPACE_URIS, {
        'SupportedCRS': xml_js_13.makeObjectPropertySetter(xsd_js_8.readString),
        'Identifier': xml_js_13.makeObjectPropertySetter(xsd_js_8.readString),
    }));
    /**
     * @const
     * @type {Object<string, Object<string, import("../xml.js").Parser>>}
     */
    // @ts-ignore
    const TM_PARSERS = xml_js_13.makeStructureNS(NAMESPACE_URIS, {
        'TopLeftCorner': xml_js_13.makeObjectPropertySetter(readCoordinates),
        'ScaleDenominator': xml_js_13.makeObjectPropertySetter(xsd_js_8.readDecimal),
        'TileWidth': xml_js_13.makeObjectPropertySetter(xsd_js_8.readNonNegativeInteger),
        'TileHeight': xml_js_13.makeObjectPropertySetter(xsd_js_8.readNonNegativeInteger),
        'MatrixWidth': xml_js_13.makeObjectPropertySetter(xsd_js_8.readNonNegativeInteger),
        'MatrixHeight': xml_js_13.makeObjectPropertySetter(xsd_js_8.readNonNegativeInteger),
    }, xml_js_13.makeStructureNS(OWS_NAMESPACE_URIS, {
        'Identifier': xml_js_13.makeObjectPropertySetter(xsd_js_8.readString),
    }));
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Object|undefined} Attribution object.
     */
    function readContents(node, objectStack) {
        return xml_js_13.pushParseAndPop({}, CONTENTS_PARSERS, node, objectStack);
    }
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Object|undefined} Layers object.
     */
    function readLayer(node, objectStack) {
        return xml_js_13.pushParseAndPop({}, LAYER_PARSERS, node, objectStack);
    }
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Object|undefined} Tile Matrix Set object.
     */
    function readTileMatrixSet(node, objectStack) {
        return xml_js_13.pushParseAndPop({}, TMS_PARSERS, node, objectStack);
    }
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Object|undefined} Style object.
     */
    function readStyle(node, objectStack) {
        const style = xml_js_13.pushParseAndPop({}, STYLE_PARSERS, node, objectStack);
        if (!style) {
            return undefined;
        }
        const isDefault = node.getAttribute('isDefault') === 'true';
        style['isDefault'] = isDefault;
        return style;
    }
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Object|undefined} Tile Matrix Set Link object.
     */
    function readTileMatrixSetLink(node, objectStack) {
        return xml_js_13.pushParseAndPop({}, TMS_LINKS_PARSERS, node, objectStack);
    }
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Object|undefined} Dimension object.
     */
    function readDimensions(node, objectStack) {
        return xml_js_13.pushParseAndPop({}, DIMENSION_PARSERS, node, objectStack);
    }
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Object|undefined} Resource URL object.
     */
    function readResourceUrl(node, objectStack) {
        const format = node.getAttribute('format');
        const template = node.getAttribute('template');
        const resourceType = node.getAttribute('resourceType');
        const resource = {};
        if (format) {
            resource['format'] = format;
        }
        if (template) {
            resource['template'] = template;
        }
        if (resourceType) {
            resource['resourceType'] = resourceType;
        }
        return resource;
    }
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Object|undefined} WGS84 BBox object.
     */
    function readWgs84BoundingBox(node, objectStack) {
        const coordinates = xml_js_13.pushParseAndPop([], WGS84_BBOX_READERS, node, objectStack);
        if (coordinates.length != 2) {
            return undefined;
        }
        return extent_js_52.boundingExtent(coordinates);
    }
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Object|undefined} Legend object.
     */
    function readLegendUrl(node, objectStack) {
        const legend = {};
        legend['format'] = node.getAttribute('format');
        legend['href'] = XLink_js_3.readHref(node);
        return legend;
    }
    /**
     * @param {Node} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Object|undefined} Coordinates object.
     */
    function readCoordinates(node, objectStack) {
        const coordinates = xsd_js_8.readString(node).split(/\s+/);
        if (!coordinates || coordinates.length != 2) {
            return undefined;
        }
        const x = +coordinates[0];
        const y = +coordinates[1];
        if (isNaN(x) || isNaN(y)) {
            return undefined;
        }
        return [x, y];
    }
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Object|undefined} TileMatrix object.
     */
    function readTileMatrix(node, objectStack) {
        return xml_js_13.pushParseAndPop({}, TM_PARSERS, node, objectStack);
    }
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Object|undefined} TileMatrixSetLimits Object.
     */
    function readTileMatrixLimitsList(node, objectStack) {
        return xml_js_13.pushParseAndPop([], TMS_LIMITS_LIST_PARSERS, node, objectStack);
    }
    /**
     * @param {Element} node Node.
     * @param {Array<*>} objectStack Object stack.
     * @return {Object|undefined} TileMatrixLimits Array.
     */
    function readTileMatrixLimits(node, objectStack) {
        return xml_js_13.pushParseAndPop({}, TMS_LIMITS_PARSERS, node, objectStack);
    }
    exports.default = WMTSCapabilities;
});
/**
 * @module ol/format
 */
define("node_modules/ol/src/format", ["require", "exports", "node_modules/ol/src/format/EsriJSON", "node_modules/ol/src/format/GeoJSON", "node_modules/ol/src/format/GML", "node_modules/ol/src/format/GPX", "node_modules/ol/src/format/IGC", "node_modules/ol/src/format/IIIFInfo", "node_modules/ol/src/format/KML", "node_modules/ol/src/format/MVT", "node_modules/ol/src/format/OWS", "node_modules/ol/src/format/Polyline", "node_modules/ol/src/format/TopoJSON", "node_modules/ol/src/format/WFS", "node_modules/ol/src/format/WKT", "node_modules/ol/src/format/WMSCapabilities", "node_modules/ol/src/format/WMSGetFeatureInfo", "node_modules/ol/src/format/WMTSCapabilities"], function (require, exports, EsriJSON_js_1, GeoJSON_js_1, GML_js_1, GPX_js_1, IGC_js_1, IIIFInfo_js_2, KML_js_1, MVT_js_1, OWS_js_2, Polyline_js_1, TopoJSON_js_1, WFS_js_1, WKT_js_1, WMSCapabilities_js_1, WMSGetFeatureInfo_js_1, WMTSCapabilities_js_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WMTSCapabilities = exports.WMSGetFeatureInfo = exports.WMSCapabilities = exports.WKT = exports.WFS = exports.TopoJSON = exports.Polyline = exports.OWS = exports.MVT = exports.KML = exports.IIIFInfo = exports.IGC = exports.GPX = exports.GML = exports.GeoJSON = exports.EsriJSON = void 0;
    Object.defineProperty(exports, "EsriJSON", { enumerable: true, get: function () { return EsriJSON_js_1.default; } });
    Object.defineProperty(exports, "GeoJSON", { enumerable: true, get: function () { return GeoJSON_js_1.default; } });
    Object.defineProperty(exports, "GML", { enumerable: true, get: function () { return GML_js_1.default; } });
    Object.defineProperty(exports, "GPX", { enumerable: true, get: function () { return GPX_js_1.default; } });
    Object.defineProperty(exports, "IGC", { enumerable: true, get: function () { return IGC_js_1.default; } });
    Object.defineProperty(exports, "IIIFInfo", { enumerable: true, get: function () { return IIIFInfo_js_2.default; } });
    Object.defineProperty(exports, "KML", { enumerable: true, get: function () { return KML_js_1.default; } });
    Object.defineProperty(exports, "MVT", { enumerable: true, get: function () { return MVT_js_1.default; } });
    Object.defineProperty(exports, "OWS", { enumerable: true, get: function () { return OWS_js_2.default; } });
    Object.defineProperty(exports, "Polyline", { enumerable: true, get: function () { return Polyline_js_1.default; } });
    Object.defineProperty(exports, "TopoJSON", { enumerable: true, get: function () { return TopoJSON_js_1.default; } });
    Object.defineProperty(exports, "WFS", { enumerable: true, get: function () { return WFS_js_1.default; } });
    Object.defineProperty(exports, "WKT", { enumerable: true, get: function () { return WKT_js_1.default; } });
    Object.defineProperty(exports, "WMSCapabilities", { enumerable: true, get: function () { return WMSCapabilities_js_1.default; } });
    Object.defineProperty(exports, "WMSGetFeatureInfo", { enumerable: true, get: function () { return WMSGetFeatureInfo_js_1.default; } });
    Object.defineProperty(exports, "WMTSCapabilities", { enumerable: true, get: function () { return WMTSCapabilities_js_1.default; } });
});
define("node_modules/ol/src/net", ["require", "exports", "node_modules/ol/src/util"], function (require, exports, util_js_30) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.jsonp = void 0;
    /**
     * Simple JSONP helper. Supports error callbacks and a custom callback param.
     * The error callback will be called when no JSONP is executed after 10 seconds.
     *
     * @param {string} url Request url. A 'callback' query parameter will be
     *     appended.
     * @param {Function} callback Callback on success.
     * @param {function()=} opt_errback Callback on error.
     * @param {string=} opt_callbackParam Custom query parameter for the JSONP
     *     callback. Default is 'callback'.
     */
    function jsonp(url, callback, opt_errback, opt_callbackParam) {
        const script = document.createElement('script');
        const key = 'olc_' + util_js_30.getUid(callback);
        function cleanup() {
            delete window[key];
            script.parentNode.removeChild(script);
        }
        script.async = true;
        script.src =
            url +
                (url.indexOf('?') == -1 ? '?' : '&') +
                (opt_callbackParam || 'callback') +
                '=' +
                key;
        const timer = setTimeout(function () {
            cleanup();
            if (opt_errback) {
                opt_errback();
            }
        }, 10000);
        window[key] = function (data) {
            clearTimeout(timer);
            cleanup();
            callback(data);
        };
        document.getElementsByTagName('head')[0].appendChild(script);
    }
    exports.jsonp = jsonp;
});
/**
 * @module ol/source/BingMaps
 */
define("node_modules/ol/src/source/BingMaps", ["require", "exports", "node_modules/ol/src/source/State", "node_modules/ol/src/source/TileImage", "node_modules/ol/src/extent", "node_modules/ol/src/tileurlfunction", "node_modules/ol/src/tilecoord", "node_modules/ol/src/tilegrid", "node_modules/ol/src/proj", "node_modules/ol/src/net"], function (require, exports, State_js_7, TileImage_js_3, extent_js_53, tileurlfunction_js_3, tilecoord_js_8, tilegrid_js_4, proj_js_33, net_js_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.quadKey = void 0;
    /**
     * @param {import('../tilecoord.js').TileCoord} tileCoord Tile coord.
     * @return {string} Quad key.
     */
    function quadKey(tileCoord) {
        const z = tileCoord[0];
        const digits = new Array(z);
        let mask = 1 << (z - 1);
        let i, charCode;
        for (i = 0; i < z; ++i) {
            // 48 is charCode for 0 - '0'.charCodeAt(0)
            charCode = 48;
            if (tileCoord[1] & mask) {
                charCode += 1;
            }
            if (tileCoord[2] & mask) {
                charCode += 2;
            }
            digits[i] = String.fromCharCode(charCode);
            mask >>= 1;
        }
        return digits.join('');
    }
    exports.quadKey = quadKey;
    /**
     * The attribution containing a link to the Microsoft® Bing™ Maps Platform APIs’
     * Terms Of Use.
     * @const
     * @type {string}
     */
    const TOS_ATTRIBUTION = '<a class="ol-attribution-bing-tos" ' +
        'href="https://www.microsoft.com/maps/product/terms.html" target="_blank">' +
        'Terms of Use</a>';
    /**
     * @typedef {Object} Options
     * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.
     * @property {boolean} [hidpi=false] If `true` hidpi tiles will be requested.
     * @property {string} [culture='en-us'] Culture code.
     * @property {string} key Bing Maps API key. Get yours at http://www.bingmapsportal.com/.
     * @property {string} imagerySet Type of imagery.
     * @property {boolean} [imageSmoothing=true] Enable image smoothing.
     * @property {number} [maxZoom=21] Max zoom. Default is what's advertized by the BingMaps service.
     * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).
     * Higher values can increase reprojection performance, but decrease precision.
     * @property {import("../Tile.js").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is
     * ```js
     * function(imageTile, src) {
     *   imageTile.getImage().src = src;
     * };
     * ```
     * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.
     * @property {number} [transition] Duration of the opacity transition for rendering.
     * To disable the opacity transition, pass `transition: 0`.
     */
    /**
     * @typedef {Object} BingMapsImageryMetadataResponse
     * @property {number} statusCode The response status code
     * @property {string} statusDescription The response status description
     * @property {string} authenticationResultCode The authentication result code
     * @property {Array<ResourceSet>} resourceSets The array of resource sets
     */
    /**
     * @typedef {Object} ResourceSet
     * @property {Array<Resource>} resources
     */
    /**
     * @typedef {Object} Resource
     * @property {number} imageHeight The image height
     * @property {number} imageWidth The image width
     * @property {number} zoomMin The minimum zoom level
     * @property {number} zoomMax The maximum zoom level
     * @property {string} imageUrl The image URL
     * @property {Array<string>} imageUrlSubdomains The image URL subdomains for rotation
     * @property {Array<ImageryProvider>} [imageryProviders] The array of ImageryProviders
     */
    /**
     * @typedef {Object} ImageryProvider
     * @property {Array<CoverageArea>} coverageAreas The coverage areas
     * @property {string} [attribution] The attribution
     */
    /**
     * @typedef {Object} CoverageArea
     * @property {number} zoomMin The minimum zoom
     * @property {number} zoomMax The maximum zoom
     * @property {Array<number>} bbox The coverage bounding box
     */
    /**
     * @classdesc
     * Layer source for Bing Maps tile data.
     * @api
     */
    class BingMaps extends TileImage_js_3.default {
        /**
         * @param {Options} options Bing Maps options.
         */
        constructor(options) {
            const hidpi = options.hidpi !== undefined ? options.hidpi : false;
            super({
                cacheSize: options.cacheSize,
                crossOrigin: 'anonymous',
                imageSmoothing: options.imageSmoothing,
                opaque: true,
                projection: proj_js_33.get('EPSG:3857'),
                reprojectionErrorThreshold: options.reprojectionErrorThreshold,
                state: State_js_7.default.LOADING,
                tileLoadFunction: options.tileLoadFunction,
                tilePixelRatio: hidpi ? 2 : 1,
                wrapX: options.wrapX !== undefined ? options.wrapX : true,
                transition: options.transition,
            });
            /**
             * @private
             * @type {boolean}
             */
            this.hidpi_ = hidpi;
            /**
             * @private
             * @type {string}
             */
            this.culture_ = options.culture !== undefined ? options.culture : 'en-us';
            /**
             * @private
             * @type {number}
             */
            this.maxZoom_ = options.maxZoom !== undefined ? options.maxZoom : -1;
            /**
             * @private
             * @type {string}
             */
            this.apiKey_ = options.key;
            /**
             * @private
             * @type {string}
             */
            this.imagerySet_ = options.imagerySet;
            const url = 'https://dev.virtualearth.net/REST/v1/Imagery/Metadata/' +
                this.imagerySet_ +
                '?uriScheme=https&include=ImageryProviders&key=' +
                this.apiKey_ +
                '&c=' +
                this.culture_;
            net_js_1.jsonp(url, this.handleImageryMetadataResponse.bind(this), undefined, 'jsonp');
        }
        /**
         * Get the api key used for this source.
         *
         * @return {string} The api key.
         * @api
         */
        getApiKey() {
            return this.apiKey_;
        }
        /**
         * Get the imagery set associated with this source.
         *
         * @return {string} The imagery set.
         * @api
         */
        getImagerySet() {
            return this.imagerySet_;
        }
        /**
         * @param {BingMapsImageryMetadataResponse} response Response.
         */
        handleImageryMetadataResponse(response) {
            if (response.statusCode != 200 ||
                response.statusDescription != 'OK' ||
                response.authenticationResultCode != 'ValidCredentials' ||
                response.resourceSets.length != 1 ||
                response.resourceSets[0].resources.length != 1) {
                this.setState(State_js_7.default.ERROR);
                return;
            }
            const resource = response.resourceSets[0].resources[0];
            const maxZoom = this.maxZoom_ == -1 ? resource.zoomMax : this.maxZoom_;
            const sourceProjection = this.getProjection();
            const extent = tilegrid_js_4.extentFromProjection(sourceProjection);
            const scale = this.hidpi_ ? 2 : 1;
            const tileSize = resource.imageWidth == resource.imageHeight
                ? resource.imageWidth / scale
                : [resource.imageWidth / scale, resource.imageHeight / scale];
            const tileGrid = tilegrid_js_4.createXYZ({
                extent: extent,
                minZoom: resource.zoomMin,
                maxZoom: maxZoom,
                tileSize: tileSize,
            });
            this.tileGrid = tileGrid;
            const culture = this.culture_;
            const hidpi = this.hidpi_;
            this.tileUrlFunction = tileurlfunction_js_3.createFromTileUrlFunctions(resource.imageUrlSubdomains.map(function (subdomain) {
                /** @type {import('../tilecoord.js').TileCoord} */
                const quadKeyTileCoord = [0, 0, 0];
                const imageUrl = resource.imageUrl
                    .replace('{subdomain}', subdomain)
                    .replace('{culture}', culture);
                return (
                /**
                 * @param {import("../tilecoord.js").TileCoord} tileCoord Tile coordinate.
                 * @param {number} pixelRatio Pixel ratio.
                 * @param {import("../proj/Projection.js").default} projection Projection.
                 * @return {string|undefined} Tile URL.
                 */
                function (tileCoord, pixelRatio, projection) {
                    if (!tileCoord) {
                        return undefined;
                    }
                    else {
                        tilecoord_js_8.createOrUpdate(tileCoord[0], tileCoord[1], tileCoord[2], quadKeyTileCoord);
                        let url = imageUrl;
                        if (hidpi) {
                            url += '&dpi=d1&device=mobile';
                        }
                        return url.replace('{quadkey}', quadKey(quadKeyTileCoord));
                    }
                });
            }));
            if (resource.imageryProviders) {
                const transform = proj_js_33.getTransformFromProjections(proj_js_33.get('EPSG:4326'), this.getProjection());
                this.setAttributions(function (frameState) {
                    const attributions = [];
                    const viewState = frameState.viewState;
                    const tileGrid = this.getTileGrid();
                    const z = tileGrid.getZForResolution(viewState.resolution, this.zDirection);
                    const tileCoord = tileGrid.getTileCoordForCoordAndZ(viewState.center, z);
                    const zoom = tileCoord[0];
                    resource.imageryProviders.map(function (imageryProvider) {
                        let intersecting = false;
                        const coverageAreas = imageryProvider.coverageAreas;
                        for (let i = 0, ii = coverageAreas.length; i < ii; ++i) {
                            const coverageArea = coverageAreas[i];
                            if (zoom >= coverageArea.zoomMin &&
                                zoom <= coverageArea.zoomMax) {
                                const bbox = coverageArea.bbox;
                                const epsg4326Extent = [bbox[1], bbox[0], bbox[3], bbox[2]];
                                const extent = extent_js_53.applyTransform(epsg4326Extent, transform);
                                if (extent_js_53.intersects(extent, frameState.extent)) {
                                    intersecting = true;
                                    break;
                                }
                            }
                        }
                        if (intersecting) {
                            attributions.push(imageryProvider.attribution);
                        }
                    });
                    attributions.push(TOS_ATTRIBUTION);
                    return attributions;
                }.bind(this));
            }
            this.setState(State_js_7.default.READY);
        }
    }
    exports.default = BingMaps;
});
/**
 * @module ol/source/XYZ
 */
define("node_modules/ol/src/source/XYZ", ["require", "exports", "node_modules/ol/src/source/TileImage", "node_modules/ol/src/tilegrid"], function (require, exports, TileImage_js_4, tilegrid_js_5) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @typedef {Object} Options
     * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
     * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.
     * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.
     * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that
     * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.
     * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.
     * @property {boolean} [imageSmoothing=true] Enable image smoothing.
     * @property {boolean} [opaque=false] Whether the layer is opaque.
     * @property {import("../proj.js").ProjectionLike} [projection='EPSG:3857'] Projection.
     * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).
     * Higher values can increase reprojection performance, but decrease precision.
     * @property {number} [maxZoom=42] Optional max zoom level. Not used if `tileGrid` is provided.
     * @property {number} [minZoom=0] Optional min zoom level. Not used if `tileGrid` is provided.
     * @property {number} [maxResolution] Optional tile grid resolution at level zero. Not used if `tileGrid` is provided.
     * @property {import("../tilegrid/TileGrid.js").default} [tileGrid] Tile grid.
     * @property {import("../Tile.js").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is
     * ```js
     * function(imageTile, src) {
     *   imageTile.getImage().src = src;
     * };
     * ```
     * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service.
     * For example, if the tile service advertizes 256px by 256px tiles but actually sends 512px
     * by 512px images (for retina/hidpi devices) then `tilePixelRatio`
     * should be set to `2`.
     * @property {number|import("../size.js").Size} [tileSize=[256, 256]] The tile size used by the tile service.
     * Not used if `tileGrid` is provided.
     * @property {import("../Tile.js").UrlFunction} [tileUrlFunction] Optional function to get
     * tile URL given a tile coordinate and the projection.
     * Required if `url` or `urls` are not provided.
     * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`,
     * and `{z}` placeholders. A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`,
     * may be used instead of defining each one separately in the `urls` option.
     * @property {Array<string>} [urls] An array of URL templates.
     * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.
     * @property {number} [transition] Duration of the opacity transition for rendering.
     * To disable the opacity transition, pass `transition: 0`.
     * @property {number} [zDirection=0] Indicate which resolution should be used
     * by a renderer if the view resolution does not match any resolution of the tile source.
     * If 0, the nearest resolution will be used. If 1, the nearest lower resolution
     * will be used. If -1, the nearest higher resolution will be used.
     */
    /**
     * @classdesc
     * Layer source for tile data with URLs in a set XYZ format that are
     * defined in a URL template. By default, this follows the widely-used
     * Google grid where `x` 0 and `y` 0 are in the top left. Grids like
     * TMS where `x` 0 and `y` 0 are in the bottom left can be used by
     * using the `{-y}` placeholder in the URL template, so long as the
     * source does not have a custom tile grid. In this case,
     * {@link module:ol/source/TileImage} can be used with a `tileUrlFunction`
     * such as:
     *
     *  tileUrlFunction: function(coordinate) {
     *    return 'http://mapserver.com/' + coordinate[0] + '/' +
     *        coordinate[1] + '/' + coordinate[2] + '.png';
     *    }
     *
     * @api
     */
    class XYZ extends TileImage_js_4.default {
        /**
         * @param {Options=} opt_options XYZ options.
         */
        constructor(opt_options) {
            const options = opt_options || {};
            const projection = options.projection !== undefined ? options.projection : 'EPSG:3857';
            const tileGrid = options.tileGrid !== undefined
                ? options.tileGrid
                : tilegrid_js_5.createXYZ({
                    extent: tilegrid_js_5.extentFromProjection(projection),
                    maxResolution: options.maxResolution,
                    maxZoom: options.maxZoom,
                    minZoom: options.minZoom,
                    tileSize: options.tileSize,
                });
            super({
                attributions: options.attributions,
                cacheSize: options.cacheSize,
                crossOrigin: options.crossOrigin,
                imageSmoothing: options.imageSmoothing,
                opaque: options.opaque,
                projection: projection,
                reprojectionErrorThreshold: options.reprojectionErrorThreshold,
                tileGrid: tileGrid,
                tileLoadFunction: options.tileLoadFunction,
                tilePixelRatio: options.tilePixelRatio,
                tileUrlFunction: options.tileUrlFunction,
                url: options.url,
                urls: options.urls,
                wrapX: options.wrapX !== undefined ? options.wrapX : true,
                transition: options.transition,
                attributionsCollapsible: options.attributionsCollapsible,
                zDirection: options.zDirection,
            });
        }
    }
    exports.default = XYZ;
});
/**
 * @module ol/source/OSM
 */
define("node_modules/ol/src/source/OSM", ["require", "exports", "node_modules/ol/src/source/XYZ"], function (require, exports, XYZ_js_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ATTRIBUTION = void 0;
    /**
     * The attribution containing a link to the OpenStreetMap Copyright and License
     * page.
     * @const
     * @type {string}
     * @api
     */
    exports.ATTRIBUTION = '&#169; ' +
        '<a href="https://www.openstreetmap.org/copyright" target="_blank">OpenStreetMap</a> ' +
        'contributors.';
    /**
     * @typedef {Object} Options
     * @property {import("./Source.js").AttributionLike} [attributions] Attributions.
     * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.
     * @property {null|string} [crossOrigin='anonymous'] The `crossOrigin` attribute for loaded images.  Note that
     * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.
     * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.
     * @property {boolean} [imageSmoothing=true] Enable image smoothing.
     * @property {number} [maxZoom=19] Max zoom.
     * @property {boolean} [opaque=true] Whether the layer is opaque.
     * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).
     * Higher values can increase reprojection performance, but decrease precision.
     * @property {import("../Tile.js").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is
     * ```js
     * function(imageTile, src) {
     *   imageTile.getImage().src = src;
     * };
     * ```
     * @property {string} [url='https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png'] URL template.
     * Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.
     * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.
     */
    /**
     * @classdesc
     * Layer source for the OpenStreetMap tile server.
     * @api
     */
    class OSM extends XYZ_js_1.default {
        /**
         * @param {Options=} [opt_options] Open Street Map options.
         */
        constructor(opt_options) {
            const options = opt_options || {};
            let attributions;
            if (options.attributions !== undefined) {
                attributions = options.attributions;
            }
            else {
                attributions = [exports.ATTRIBUTION];
            }
            const crossOrigin = options.crossOrigin !== undefined ? options.crossOrigin : 'anonymous';
            const url = options.url !== undefined
                ? options.url
                : 'https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png';
            super({
                attributions: attributions,
                cacheSize: options.cacheSize,
                crossOrigin: crossOrigin,
                imageSmoothing: options.imageSmoothing,
                opaque: options.opaque !== undefined ? options.opaque : true,
                maxZoom: options.maxZoom !== undefined ? options.maxZoom : 19,
                reprojectionErrorThreshold: options.reprojectionErrorThreshold,
                tileLoadFunction: options.tileLoadFunction,
                url: url,
                wrapX: options.wrapX,
                attributionsCollapsible: false,
            });
        }
    }
    exports.default = OSM;
});
/**
 * @module ol/layer/TileProperty
 */
define("node_modules/ol/src/layer/TileProperty", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @enum {string}
     */
    exports.default = {
        PRELOAD: 'preload',
        USE_INTERIM_TILES_ON_ERROR: 'useInterimTilesOnError',
    };
});
define("node_modules/ol/src/layer/BaseTile", ["require", "exports", "node_modules/ol/src/layer/Layer", "node_modules/ol/src/layer/TileProperty", "node_modules/ol/src/obj"], function (require, exports, Layer_js_7, TileProperty_js_1, obj_js_28) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @typedef {Object} Options
     * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.
     * @property {number} [opacity=1] Opacity (0, 1).
     * @property {boolean} [visible=true] Visibility.
     * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
     * rendered outside of this extent.
     * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
     * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
     * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
     * method was used.
     * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
     * visible.
     * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
     * be visible.
     * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be
     * visible.
     * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will
     * be visible.
     * @property {number} [preload=0] Preload. Load low-resolution tiles up to `preload` levels. `0`
     * means no preloading.
     * @property {import("../source/Tile.js").default} [source] Source for this layer.
     * @property {import("../PluggableMap.js").default} [map] Sets the layer as overlay on a map. The map will not manage
     * this layer in its layers collection, and the layer will be rendered on top. This is useful for
     * temporary layers. The standard way to add a layer to a map and have it managed by the map is to
     * use {@link module:ol/Map#addLayer}.
     * @property {boolean} [useInterimTilesOnError=true] Use interim tiles on error.
     */
    /**
     * @classdesc
     * For layer sources that provide pre-rendered, tiled images in grids that are
     * organized by zoom levels for specific resolutions.
     * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}
     * property on the layer object; for example, setting `title: 'My Title'` in the
     * options means that `title` is observable, and has get/set accessors.
     *
     * @extends {Layer<import("../source/Tile.js").default>}
     * @api
     */
    class BaseTileLayer extends Layer_js_7.default {
        /**
         * @param {Options=} opt_options Tile layer options.
         */
        constructor(opt_options) {
            const options = opt_options ? opt_options : {};
            const baseOptions = obj_js_28.assign({}, options);
            delete baseOptions.preload;
            delete baseOptions.useInterimTilesOnError;
            super(baseOptions);
            this.setPreload(options.preload !== undefined ? options.preload : 0);
            this.setUseInterimTilesOnError(options.useInterimTilesOnError !== undefined
                ? options.useInterimTilesOnError
                : true);
        }
        /**
         * Return the level as number to which we will preload tiles up to.
         * @return {number} The level to preload tiles up to.
         * @observable
         * @api
         */
        getPreload() {
            return /** @type {number} */ (this.get(TileProperty_js_1.default.PRELOAD));
        }
        /**
         * Set the level as number to which we will preload tiles up to.
         * @param {number} preload The level to preload tiles up to.
         * @observable
         * @api
         */
        setPreload(preload) {
            this.set(TileProperty_js_1.default.PRELOAD, preload);
        }
        /**
         * Whether we use interim tiles on error.
         * @return {boolean} Use interim tiles on error.
         * @observable
         * @api
         */
        getUseInterimTilesOnError() {
            return /** @type {boolean} */ (this.get(TileProperty_js_1.default.USE_INTERIM_TILES_ON_ERROR));
        }
        /**
         * Set whether we use interim tiles on error.
         * @param {boolean} useInterimTilesOnError Use interim tiles on error.
         * @observable
         * @api
         */
        setUseInterimTilesOnError(useInterimTilesOnError) {
            this.set(TileProperty_js_1.default.USE_INTERIM_TILES_ON_ERROR, useInterimTilesOnError);
        }
    }
    exports.default = BaseTileLayer;
});
/**
 * @module ol/layer/VectorTileRenderType
 */
define("node_modules/ol/src/layer/VectorTileRenderType", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @enum {string}
     * Render mode for vector tiles:
     *  * `'image'`: Vector tiles are rendered as images. Great performance, but
     *    point symbols and texts are always rotated with the view and pixels are
     *    scaled during zoom animations.
     *  * `'hybrid'`: Polygon and line elements are rendered as images, so pixels
     *    are scaled during zoom animations. Point symbols and texts are accurately
     *    rendered as vectors and can stay upright on rotated views.
     *  * `'vector'`: Everything is rendered as vectors. Use this mode for improved
     *    performance on vector tile layers with only a few rendered features (e.g.
     *    for highlighting a subset of features of another layer with the same
     *    source).
     * @api
     */
    exports.default = {
        IMAGE: 'image',
        HYBRID: 'hybrid',
        VECTOR: 'vector',
    };
});
define("node_modules/ol/src/renderer/canvas/VectorTileLayer", ["require", "exports", "node_modules/ol/src/render/canvas/BuilderGroup", "node_modules/ol/src/render/canvas/ExecutorGroup", "node_modules/ol/src/renderer/canvas/TileLayer", "node_modules/ol/src/events/EventType", "node_modules/ol/src/render/canvas/BuilderType", "node_modules/ol/src/TileState", "node_modules/ol/src/layer/VectorTileRenderType", "node_modules/ol/src/ViewHint", "node_modules/ol/src/transform", "node_modules/ol/src/extent", "node_modules/ol/src/obj", "node_modules/ol/src/render/canvas/hitdetect", "node_modules/ol/src/renderer/vector", "node_modules/ol/src/util", "node_modules/ol/src/events", "node_modules/ol/src/size", "node_modules/ol/src/coordinate"], function (require, exports, BuilderGroup_js_2, ExecutorGroup_js_2, TileLayer_js_1, EventType_js_42, BuilderType_js_3, TileState_js_11, VectorTileRenderType_js_1, ViewHint_js_4, transform_js_20, extent_js_54, obj_js_29, hitdetect_js_2, vector_js_3, util_js_31, events_js_20, size_js_10, coordinate_js_12) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @type {!Object<string, Array<import("../../render/canvas/BuilderType.js").default>>}
     */
    const IMAGE_REPLAYS = {
        'image': [
            BuilderType_js_3.default.POLYGON,
            BuilderType_js_3.default.CIRCLE,
            BuilderType_js_3.default.LINE_STRING,
            BuilderType_js_3.default.IMAGE,
            BuilderType_js_3.default.TEXT,
        ],
        'hybrid': [BuilderType_js_3.default.POLYGON, BuilderType_js_3.default.LINE_STRING],
        'vector': [],
    };
    /**
     * @type {!Object<string, Array<import("../../render/canvas/BuilderType.js").default>>}
     */
    const VECTOR_REPLAYS = {
        'image': [BuilderType_js_3.default.DEFAULT],
        'hybrid': [BuilderType_js_3.default.IMAGE, BuilderType_js_3.default.TEXT, BuilderType_js_3.default.DEFAULT],
        'vector': [
            BuilderType_js_3.default.POLYGON,
            BuilderType_js_3.default.CIRCLE,
            BuilderType_js_3.default.LINE_STRING,
            BuilderType_js_3.default.IMAGE,
            BuilderType_js_3.default.TEXT,
            BuilderType_js_3.default.DEFAULT,
        ],
    };
    /**
     * @classdesc
     * Canvas renderer for vector tile layers.
     * @api
     */
    class CanvasVectorTileLayerRenderer extends TileLayer_js_1.default {
        /**
         * @param {import("../../layer/VectorTile.js").default} layer VectorTile layer.
         */
        constructor(layer) {
            super(layer);
            /** @private */
            this.boundHandleStyleImageChange_ = this.handleStyleImageChange_.bind(this);
            /**
             * @private
             * @type {boolean}
             */
            this.dirty_ = false;
            /**
             * @private
             * @type {number}
             */
            this.renderedLayerRevision_;
            /**
             * @private
             * @type {import("../../transform").Transform}
             */
            this.renderedPixelToCoordinateTransform_ = null;
            /**
             * @private
             * @type {number}
             */
            this.renderedRotation_;
            /**
             * @private
             * @type {!Object<string, import("../../VectorRenderTile.js").default>}
             */
            this.renderTileImageQueue_ = {};
            /**
             * @type {Object<string, import("../../events.js").EventsKey>}
             */
            this.tileListenerKeys_ = {};
            /**
             * @private
             * @type {import("../../transform.js").Transform}
             */
            this.tmpTransform_ = transform_js_20.create();
        }
        /**
         * @param {import("../../VectorRenderTile.js").default} tile Tile.
         * @param {number} pixelRatio Pixel ratio.
         * @param {import("../../proj/Projection").default} projection Projection.
         * @param {boolean} queue Queue tile for rendering.
         * @return {boolean|undefined} Tile needs to be rendered.
         */
        prepareTile(tile, pixelRatio, projection, queue) {
            let render;
            const tileUid = util_js_31.getUid(tile);
            const state = tile.getState();
            if (((state === TileState_js_11.default.LOADED && tile.hifi) ||
                state === TileState_js_11.default.ERROR) &&
                tileUid in this.tileListenerKeys_) {
                events_js_20.unlistenByKey(this.tileListenerKeys_[tileUid]);
                delete this.tileListenerKeys_[tileUid];
            }
            if (state === TileState_js_11.default.LOADED || state === TileState_js_11.default.ERROR) {
                this.updateExecutorGroup_(tile, pixelRatio, projection);
                if (this.tileImageNeedsRender_(tile, pixelRatio, projection)) {
                    render = true;
                    if (queue) {
                        this.renderTileImageQueue_[tileUid] = tile;
                    }
                }
            }
            return render;
        }
        /**
         * @param {number} z Tile coordinate z.
         * @param {number} x Tile coordinate x.
         * @param {number} y Tile coordinate y.
         * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
         * @return {!import("../../Tile.js").default} Tile.
         */
        getTile(z, x, y, frameState) {
            const pixelRatio = frameState.pixelRatio;
            const viewState = frameState.viewState;
            const resolution = viewState.resolution;
            const projection = viewState.projection;
            const layer = this.getLayer();
            const tile = layer.getSource().getTile(z, x, y, pixelRatio, projection);
            if (tile.getState() < TileState_js_11.default.LOADED) {
                tile.wantedResolution = resolution;
                const tileUid = util_js_31.getUid(tile);
                if (!(tileUid in this.tileListenerKeys_)) {
                    const listenerKey = events_js_20.listen(tile, EventType_js_42.default.CHANGE, this.prepareTile.bind(this, tile, pixelRatio, projection, true));
                    this.tileListenerKeys_[tileUid] = listenerKey;
                }
            }
            else {
                const viewHints = frameState.viewHints;
                const hifi = !(viewHints[ViewHint_js_4.default.ANIMATING] || viewHints[ViewHint_js_4.default.INTERACTING]);
                if (hifi || !tile.wantedResolution) {
                    tile.wantedResolution = resolution;
                }
                const render = this.prepareTile(tile, pixelRatio, projection, false);
                if (render && layer.getRenderMode() !== VectorTileRenderType_js_1.default.VECTOR) {
                    this.renderTileImage_(tile, frameState);
                }
            }
            return super.getTile(z, x, y, frameState);
        }
        /**
         * @param {import("../../VectorRenderTile.js").default} tile Tile.
         * @return {boolean} Tile is drawable.
         */
        isDrawableTile(tile) {
            const layer = this.getLayer();
            return (super.isDrawableTile(tile) &&
                (layer.getRenderMode() === VectorTileRenderType_js_1.default.VECTOR
                    ? util_js_31.getUid(layer) in tile.executorGroups
                    : tile.hasContext(layer)));
        }
        /**
         * @inheritDoc
         */
        getTileImage(tile) {
            return tile.getImage(this.getLayer());
        }
        /**
         * Determine whether render should be called.
         * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
         * @return {boolean} Layer is ready to be rendered.
         */
        prepareFrame(frameState) {
            const layerRevision = this.getLayer().getRevision();
            if (this.renderedLayerRevision_ != layerRevision) {
                this.renderedTiles.length = 0;
            }
            this.renderedLayerRevision_ = layerRevision;
            return super.prepareFrame(frameState);
        }
        /**
         * @param {import("../../VectorRenderTile.js").default} tile Tile.
         * @param {number} pixelRatio Pixel ratio.
         * @param {import("../../proj/Projection.js").default} projection Projection.
         * @private
         */
        updateExecutorGroup_(tile, pixelRatio, projection) {
            const layer = /** @type {import("../../layer/VectorTile.js").default} */ (this.getLayer());
            const revision = layer.getRevision();
            const renderOrder = layer.getRenderOrder() || null;
            const resolution = tile.wantedResolution;
            const builderState = tile.getReplayState(layer);
            if (!builderState.dirty &&
                builderState.renderedResolution === resolution &&
                builderState.renderedRevision == revision &&
                builderState.renderedRenderOrder == renderOrder &&
                builderState.renderedZ === tile.sourceZ) {
                return;
            }
            const source = layer.getSource();
            const sourceTileGrid = source.getTileGrid();
            const tileGrid = source.getTileGridForProjection(projection);
            const tileExtent = tileGrid.getTileCoordExtent(tile.wrappedTileCoord);
            const sourceTiles = source.getSourceTiles(pixelRatio, projection, tile);
            const layerUid = util_js_31.getUid(layer);
            delete tile.hitDetectionImageData[layerUid];
            tile.executorGroups[layerUid] = [];
            for (let t = 0, tt = sourceTiles.length; t < tt; ++t) {
                const sourceTile = sourceTiles[t];
                if (sourceTile.getState() != TileState_js_11.default.LOADED) {
                    continue;
                }
                const sourceTileCoord = sourceTile.tileCoord;
                const sourceTileExtent = sourceTileGrid.getTileCoordExtent(sourceTileCoord);
                const sharedExtent = extent_js_54.getIntersection(tileExtent, sourceTileExtent);
                const bufferedExtent = extent_js_54.equals(sourceTileExtent, sharedExtent)
                    ? null
                    : extent_js_54.buffer(sharedExtent, layer.getRenderBuffer() * resolution, this.tmpExtent);
                builderState.dirty = false;
                const builderGroup = new BuilderGroup_js_2.default(0, sharedExtent, resolution, pixelRatio, layer.getDeclutter());
                const squaredTolerance = vector_js_3.getSquaredTolerance(resolution, pixelRatio);
                /**
                 * @param {import("../../Feature.js").FeatureLike} feature Feature.
                 * @this {CanvasVectorTileLayerRenderer}
                 */
                const render = function (feature) {
                    let styles;
                    const styleFunction = feature.getStyleFunction() || layer.getStyleFunction();
                    if (styleFunction) {
                        styles = styleFunction(feature, resolution);
                    }
                    if (styles) {
                        const dirty = this.renderFeature(feature, squaredTolerance, styles, builderGroup);
                        this.dirty_ = this.dirty_ || dirty;
                        builderState.dirty = builderState.dirty || dirty;
                    }
                };
                const features = sourceTile.getFeatures();
                if (renderOrder && renderOrder !== builderState.renderedRenderOrder) {
                    features.sort(renderOrder);
                }
                for (let i = 0, ii = features.length; i < ii; ++i) {
                    const feature = features[i];
                    if (!bufferedExtent ||
                        extent_js_54.intersects(bufferedExtent, feature.getGeometry().getExtent())) {
                        render.call(this, feature);
                    }
                }
                const executorGroupInstructions = builderGroup.finish();
                // no need to clip when the render tile is covered by a single source tile
                const replayExtent = layer.getRenderMode() !== VectorTileRenderType_js_1.default.VECTOR &&
                    layer.getDeclutter() &&
                    sourceTiles.length === 1
                    ? null
                    : sharedExtent;
                const renderingReplayGroup = new ExecutorGroup_js_2.default(replayExtent, resolution, pixelRatio, source.getOverlaps(), executorGroupInstructions, layer.getRenderBuffer());
                tile.executorGroups[layerUid].push(renderingReplayGroup);
            }
            builderState.renderedRevision = revision;
            builderState.renderedZ = tile.sourceZ;
            builderState.renderedRenderOrder = renderOrder;
            builderState.renderedResolution = resolution;
        }
        /**
         * @param {import("../../coordinate.js").Coordinate} coordinate Coordinate.
         * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
         * @param {number} hitTolerance Hit tolerance in pixels.
         * @param {function(import("../../Feature.js").FeatureLike, import("../../layer/Layer.js").default): T} callback Feature callback.
         * @param {Array<import("../../Feature.js").FeatureLike>} declutteredFeatures Decluttered features.
         * @return {T|void} Callback result.
         * @template T
         */
        forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, callback, declutteredFeatures) {
            const resolution = frameState.viewState.resolution;
            const rotation = frameState.viewState.rotation;
            hitTolerance = hitTolerance == undefined ? 0 : hitTolerance;
            const layer = this.getLayer();
            const declutter = layer.getDeclutter();
            const source = layer.getSource();
            const tileGrid = source.getTileGridForProjection(frameState.viewState.projection);
            /** @type {!Object<string, boolean>} */
            const features = {};
            const renderedTiles = /** @type {Array<import("../../VectorRenderTile.js").default>} */ (this
                .renderedTiles);
            let found;
            let i, ii;
            for (i = 0, ii = renderedTiles.length; i < ii; ++i) {
                const tile = renderedTiles[i];
                const tileExtent = tileGrid.getTileCoordExtent(tile.wrappedTileCoord);
                const tileContainsCoordinate = extent_js_54.containsCoordinate(tileExtent, coordinate);
                if (!declutter) {
                    // When not decluttering, we only need to consider the tile that contains the given
                    // coordinate, because each feature will be rendered for each tile that contains it.
                    if (!tileContainsCoordinate) {
                        continue;
                    }
                }
                const executorGroups = tile.executorGroups[util_js_31.getUid(layer)];
                for (let t = 0, tt = executorGroups.length; t < tt; ++t) {
                    const executorGroup = executorGroups[t];
                    found =
                        found ||
                            executorGroup.forEachFeatureAtCoordinate(coordinate, resolution, rotation, hitTolerance, 
                            /**
                             * @param {import("../../Feature.js").FeatureLike} feature Feature.
                             * @return {?} Callback result.
                             */
                            function (feature) {
                                if (tileContainsCoordinate ||
                                    (declutteredFeatures &&
                                        declutteredFeatures.indexOf(feature) !== -1)) {
                                    let key = feature.getId();
                                    if (key === undefined) {
                                        key = util_js_31.getUid(feature);
                                    }
                                    if (!(key in features)) {
                                        features[key] = true;
                                        return callback(feature, layer);
                                    }
                                }
                            }, layer.getDeclutter() ? declutteredFeatures : null);
                }
            }
            return found;
        }
        /**
         * Asynchronous layer level hit detection.
         * @param {import("../../pixel.js").Pixel} pixel Pixel.
         * @return {Promise<Array<import("../../Feature").default>>} Promise that resolves with an array of features.
         */
        getFeatures(pixel) {
            return new Promise(function (resolve, reject) {
                const layer = /** @type {import("../../layer/VectorTile.js").default} */ (this.getLayer());
                const layerUid = util_js_31.getUid(layer);
                const source = layer.getSource();
                const projection = this.renderedProjection;
                const projectionExtent = projection.getExtent();
                const resolution = this.renderedResolution;
                const tileGrid = source.getTileGridForProjection(projection);
                const coordinate = transform_js_20.apply(this.renderedPixelToCoordinateTransform_, pixel.slice());
                const tileCoord = tileGrid.getTileCoordForCoordAndResolution(coordinate, resolution);
                let tile;
                for (let i = 0, ii = this.renderedTiles.length; i < ii; ++i) {
                    if (tileCoord.toString() === this.renderedTiles[i].tileCoord.toString()) {
                        tile = this.renderedTiles[i];
                        if (tile.getState() === TileState_js_11.default.LOADED && tile.hifi) {
                            const extent = tileGrid.getTileCoordExtent(tile.tileCoord);
                            if (source.getWrapX() &&
                                projection.canWrapX() &&
                                !extent_js_54.containsExtent(projectionExtent, extent)) {
                                coordinate_js_12.wrapX(coordinate, projection);
                            }
                            break;
                        }
                        tile = undefined;
                    }
                }
                if (!tile || tile.loadingSourceTiles > 0) {
                    resolve([]);
                    return;
                }
                const extent = tileGrid.getTileCoordExtent(tile.wrappedTileCoord);
                const corner = extent_js_54.getTopLeft(extent);
                const tilePixel = [
                    (coordinate[0] - corner[0]) / resolution,
                    (corner[1] - coordinate[1]) / resolution,
                ];
                const features = tile
                    .getSourceTiles()
                    .reduce(function (accumulator, sourceTile) {
                    return accumulator.concat(sourceTile.getFeatures());
                }, []);
                let hitDetectionImageData = tile.hitDetectionImageData[layerUid];
                if (!hitDetectionImageData && !this.animatingOrInteracting_) {
                    const tileSize = size_js_10.toSize(tileGrid.getTileSize(tileGrid.getZForResolution(resolution)));
                    const size = [tileSize[0] / 2, tileSize[1] / 2];
                    const rotation = this.renderedRotation_;
                    const transforms = [
                        this.getRenderTransform(tileGrid.getTileCoordCenter(tile.wrappedTileCoord), resolution, 0, 0.5, size[0], size[1], 0),
                    ];
                    hitDetectionImageData = hitdetect_js_2.createHitDetectionImageData(tileSize, transforms, features, layer.getStyleFunction(), tileGrid.getTileCoordExtent(tile.wrappedTileCoord), tile.getReplayState(layer).renderedResolution, rotation);
                    tile.hitDetectionImageData[layerUid] = hitDetectionImageData;
                }
                resolve(hitdetect_js_2.hitDetect(tilePixel, features, hitDetectionImageData));
            }.bind(this));
        }
        /**
         * Perform action necessary to get the layer rendered after new fonts have loaded
         */
        handleFontsChanged() {
            obj_js_29.clear(this.renderTileImageQueue_);
            const layer = this.getLayer();
            if (layer.getVisible() && this.renderedLayerRevision_ !== undefined) {
                layer.changed();
            }
        }
        /**
         * Handle changes in image style state.
         * @param {import("../../events/Event.js").default} event Image style change event.
         * @private
         */
        handleStyleImageChange_(event) {
            this.renderIfReadyAndVisible();
        }
        /**
         * Render the layer.
         * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
         * @param {HTMLElement} target Target that may be used to render content to.
         * @return {HTMLElement} The rendered element.
         */
        renderFrame(frameState, target) {
            const viewHints = frameState.viewHints;
            const hifi = !(viewHints[ViewHint_js_4.default.ANIMATING] || viewHints[ViewHint_js_4.default.INTERACTING]);
            this.renderQueuedTileImages_(hifi, frameState);
            super.renderFrame(frameState, target);
            this.renderedPixelToCoordinateTransform_ = frameState.pixelToCoordinateTransform.slice();
            this.renderedRotation_ = frameState.viewState.rotation;
            const layer = /** @type {import("../../layer/VectorTile.js").default} */ (this.getLayer());
            const renderMode = layer.getRenderMode();
            if (renderMode === VectorTileRenderType_js_1.default.IMAGE) {
                return this.container;
            }
            const source = layer.getSource();
            // Unqueue tiles from the image queue when we don't need any more
            const usedTiles = frameState.usedTiles[util_js_31.getUid(source)];
            for (const tileUid in this.renderTileImageQueue_) {
                if (!usedTiles || !(tileUid in usedTiles)) {
                    delete this.renderTileImageQueue_[tileUid];
                }
            }
            const context = this.context;
            const declutterReplays = layer.getDeclutter() ? {} : null;
            const replayTypes = VECTOR_REPLAYS[renderMode];
            const pixelRatio = frameState.pixelRatio;
            const viewState = frameState.viewState;
            const center = viewState.center;
            const resolution = viewState.resolution;
            const rotation = viewState.rotation;
            const size = frameState.size;
            const width = Math.round(size[0] * pixelRatio);
            const height = Math.round(size[1] * pixelRatio);
            const tiles = this.renderedTiles;
            const tileGrid = source.getTileGridForProjection(frameState.viewState.projection);
            const clips = [];
            const clipZs = [];
            for (let i = tiles.length - 1; i >= 0; --i) {
                const tile = /** @type {import("../../VectorRenderTile.js").default} */ (tiles[i]);
                const tileCoord = tile.tileCoord;
                const tileExtent = tileGrid.getTileCoordExtent(tile.wrappedTileCoord);
                const worldOffset = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent)[0] -
                    tileExtent[0];
                const transform = transform_js_20.multiply(transform_js_20.scale(this.inversePixelTransform.slice(), 1 / pixelRatio, 1 / pixelRatio), this.getRenderTransform(center, resolution, rotation, pixelRatio, width, height, worldOffset));
                const executorGroups = tile.executorGroups[util_js_31.getUid(layer)];
                let clipped = false;
                for (let t = 0, tt = executorGroups.length; t < tt; ++t) {
                    const executorGroup = executorGroups[t];
                    if (!executorGroup.hasExecutors(replayTypes)) {
                        // sourceTile has no instructions of the types we want to render
                        continue;
                    }
                    const currentZ = tile.tileCoord[0];
                    let currentClip;
                    if (!declutterReplays && !clipped) {
                        currentClip = executorGroup.getClipCoords(transform);
                        context.save();
                        // Create a clip mask for regions in this low resolution tile that are
                        // already filled by a higher resolution tile
                        for (let j = 0, jj = clips.length; j < jj; ++j) {
                            const clip = clips[j];
                            if (currentZ < clipZs[j]) {
                                context.beginPath();
                                // counter-clockwise (outer ring) for current tile
                                context.moveTo(currentClip[0], currentClip[1]);
                                context.lineTo(currentClip[2], currentClip[3]);
                                context.lineTo(currentClip[4], currentClip[5]);
                                context.lineTo(currentClip[6], currentClip[7]);
                                // clockwise (inner ring) for higher resolution tile
                                context.moveTo(clip[6], clip[7]);
                                context.lineTo(clip[4], clip[5]);
                                context.lineTo(clip[2], clip[3]);
                                context.lineTo(clip[0], clip[1]);
                                context.clip();
                            }
                        }
                    }
                    executorGroup.execute(context, 1, transform, rotation, hifi, replayTypes, declutterReplays);
                    if (!declutterReplays && !clipped) {
                        context.restore();
                        clips.push(currentClip);
                        clipZs.push(currentZ);
                        clipped = true;
                    }
                }
            }
            if (declutterReplays) {
                const layerState = frameState.layerStatesArray[frameState.layerIndex];
                ExecutorGroup_js_2.replayDeclutter(declutterReplays, context, rotation, layerState.opacity, hifi, frameState.declutterItems);
            }
            return this.container;
        }
        /**
         * @param {boolean} hifi We have time to render a high fidelity map image.
         * @param {import('../../PluggableMap.js').FrameState} frameState Frame state.
         */
        renderQueuedTileImages_(hifi, frameState) {
            // When we don't have time to render hifi, only render tiles until we have used up
            // half of the frame budget of 16 ms
            for (const uid in this.renderTileImageQueue_) {
                if (!hifi && Date.now() - frameState.time > 8) {
                    frameState.animate = true;
                    break;
                }
                const tile = this.renderTileImageQueue_[uid];
                delete this.renderTileImageQueue_[uid];
                this.renderTileImage_(tile, frameState);
            }
        }
        /**
         * @param {import("../../Feature.js").FeatureLike} feature Feature.
         * @param {number} squaredTolerance Squared tolerance.
         * @param {import("../../style/Style.js").default|Array<import("../../style/Style.js").default>} styles The style or array of styles.
         * @param {import("../../render/canvas/BuilderGroup.js").default} executorGroup Replay group.
         * @return {boolean} `true` if an image is loading.
         */
        renderFeature(feature, squaredTolerance, styles, executorGroup) {
            if (!styles) {
                return false;
            }
            let loading = false;
            if (Array.isArray(styles)) {
                for (let i = 0, ii = styles.length; i < ii; ++i) {
                    loading =
                        vector_js_3.renderFeature(executorGroup, feature, styles[i], squaredTolerance, this.boundHandleStyleImageChange_) || loading;
                }
            }
            else {
                loading = vector_js_3.renderFeature(executorGroup, feature, styles, squaredTolerance, this.boundHandleStyleImageChange_);
            }
            return loading;
        }
        /**
         * @param {import("../../VectorRenderTile.js").default} tile Tile.
         * @param {number} pixelRatio Pixel ratio.
         * @param {import("../../proj/Projection.js").default} projection Projection.
         * @return {boolean} A new tile image was rendered.
         * @private
         */
        tileImageNeedsRender_(tile, pixelRatio, projection) {
            const layer = /** @type {import("../../layer/VectorTile.js").default} */ (this.getLayer());
            const replayState = tile.getReplayState(layer);
            const revision = layer.getRevision();
            const sourceZ = tile.sourceZ;
            const resolution = tile.wantedResolution;
            return (replayState.renderedTileResolution !== resolution ||
                replayState.renderedTileRevision !== revision ||
                replayState.renderedTileZ !== sourceZ);
        }
        /**
         * @param {import("../../VectorRenderTile.js").default} tile Tile.
         * @param {import("../../PluggableMap").FrameState} frameState Frame state.
         * @private
         */
        renderTileImage_(tile, frameState) {
            const layer = /** @type {import("../../layer/VectorTile.js").default} */ (this.getLayer());
            const replayState = tile.getReplayState(layer);
            const revision = layer.getRevision();
            const executorGroups = tile.executorGroups[util_js_31.getUid(layer)];
            replayState.renderedTileRevision = revision;
            replayState.renderedTileZ = tile.sourceZ;
            const tileCoord = tile.wrappedTileCoord;
            const z = tileCoord[0];
            const source = layer.getSource();
            let pixelRatio = frameState.pixelRatio;
            const viewState = frameState.viewState;
            const projection = viewState.projection;
            const tileGrid = source.getTileGridForProjection(projection);
            const tileResolution = tileGrid.getResolution(tile.tileCoord[0]);
            const renderPixelRatio = (frameState.pixelRatio / tile.wantedResolution) * tileResolution;
            const resolution = tileGrid.getResolution(z);
            const context = tile.getContext(layer);
            // Increase tile size when overzooming for low pixel ratio, to avoid blurry tiles
            pixelRatio = Math.max(pixelRatio, renderPixelRatio / pixelRatio);
            const size = source.getTilePixelSize(z, pixelRatio, projection);
            context.canvas.width = size[0];
            context.canvas.height = size[1];
            const renderScale = pixelRatio / renderPixelRatio;
            if (renderScale !== 1) {
                const canvasTransform = transform_js_20.reset(this.tmpTransform_);
                transform_js_20.scale(canvasTransform, renderScale, renderScale);
                context.setTransform.apply(context, canvasTransform);
            }
            const tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent);
            const pixelScale = renderPixelRatio / resolution;
            const transform = transform_js_20.reset(this.tmpTransform_);
            transform_js_20.scale(transform, pixelScale, -pixelScale);
            transform_js_20.translate(transform, -tileExtent[0], -tileExtent[3]);
            for (let i = 0, ii = executorGroups.length; i < ii; ++i) {
                const executorGroup = executorGroups[i];
                executorGroup.execute(context, renderScale, transform, 0, true, IMAGE_REPLAYS[layer.getRenderMode()]);
            }
            replayState.renderedTileResolution = tile.wantedResolution;
        }
    }
    exports.default = CanvasVectorTileLayerRenderer;
});
define("node_modules/ol/src/layer/VectorTile", ["require", "exports", "node_modules/ol/src/layer/BaseVector", "node_modules/ol/src/renderer/canvas/VectorTileLayer", "node_modules/ol/src/layer/TileProperty", "node_modules/ol/src/layer/VectorTileRenderType", "node_modules/ol/src/asserts", "node_modules/ol/src/obj"], function (require, exports, BaseVector_js_2, VectorTileLayer_js_1, TileProperty_js_2, VectorTileRenderType_js_2, asserts_js_29, obj_js_30) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @typedef {Object} Options
     * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.
     * @property {number} [opacity=1] Opacity (0, 1).
     * @property {boolean} [visible=true] Visibility.
     * @property {import("../extent.js").Extent} [extent] The bounding extent for layer rendering.  The layer will not be
     * rendered outside of this extent.
     * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers
     * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed
     * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`
     * method was used.
     * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be
     * visible.
     * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will
     * be visible.
     * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be
     * visible.
     * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will
     * be visible.
     * @property {import("../render.js").OrderFunction} [renderOrder] Render order. Function to be used when sorting
     * features before rendering. By default features are drawn in the order that they are created. Use
     * `null` to avoid the sort, but get an undefined draw order.
     * @property {number} [renderBuffer=100] The buffer in pixels around the tile extent used by the
     * renderer when getting features from the vector tile for the rendering or hit-detection.
     * Recommended value: Vector tiles are usually generated with a buffer, so this value should match
     * the largest possible buffer of the used tiles. It should be at least the size of the largest
     * point symbol or line width.
     * @property {import("./VectorTileRenderType.js").default|string} [renderMode='hybrid'] Render mode for vector tiles:
     *  * `'image'`: Vector tiles are rendered as images. Great performance, but point symbols and texts
     *    are always rotated with the view and pixels are scaled during zoom animations. When `declutter`
     *    is set to `true`, the decluttering is done per tile resulting in labels and point symbols getting
     *    cut off at tile boundaries.
     *  * `'hybrid'`: Polygon and line elements are rendered as images, so pixels are scaled during zoom
     *    animations. Point symbols and texts are accurately rendered as vectors and can stay upright on
     *    rotated views.
     *  * `'vector'`: Everything is rendered as vectors. Use this mode for improved performance on vector
     *    tile layers with only a few rendered features (e.g. for highlighting a subset of features of
     *    another layer with the same source).
     * @property {import("../source/VectorTile.js").default} [source] Source.
     * @property {import("../PluggableMap.js").default} [map] Sets the layer as overlay on a map. The map will not manage
     * this layer in its layers collection, and the layer will be rendered on top. This is useful for
     * temporary layers. The standard way to add a layer to a map and have it managed by the map is to
     * use {@link module:ol/Map#addLayer}.
     * @property {boolean} [declutter=false] Declutter images and text. Decluttering is applied to all
     * image and text styles of all Vector and VectorTile layers that have set this to `true`. The priority
     * is defined by the z-index of the layer, the `zIndex` of the style and the render order of features.
     * Higher z-index means higher priority. Within the same z-index, a feature rendered before another has
     * higher priority.
     * @property {import("../style/Style.js").StyleLike} [style] Layer style. See
     * {@link module:ol/style} for default style which will be used if this is not defined.
     * @property {boolean} [updateWhileAnimating=false] When set to `true`, feature batches will be
     * recreated during animations. This means that no vectors will be shown clipped, but the setting
     * will have a performance impact for large amounts of vector data. When set to `false`, batches
     * will be recreated when no animation is active.
     * @property {boolean} [updateWhileInteracting=false] When set to `true`, feature batches will be
     * recreated during interactions. See also `updateWhileAnimating`.
     * @property {number} [preload=0] Preload. Load low-resolution tiles up to `preload` levels. `0`
     * means no preloading.
     * @property {boolean} [useInterimTilesOnError=true] Use interim tiles on error.
     */
    /**
     * @classdesc
     * Layer for vector tile data that is rendered client-side.
     * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}
     * property on the layer object; for example, setting `title: 'My Title'` in the
     * options means that `title` is observable, and has get/set accessors.
     *
     * @param {Options=} opt_options Options.
     * @extends {BaseVectorLayer<import("../source/VectorTile.js").default>}
     * @api
     */
    class VectorTileLayer extends BaseVector_js_2.default {
        /**
         * @param {Options=} opt_options Options.
         */
        constructor(opt_options) {
            const options = opt_options ? opt_options : {};
            const baseOptions = /** @type {Object} */ (obj_js_30.assign({}, options));
            delete baseOptions.preload;
            delete baseOptions.useInterimTilesOnError;
            super(/** @type {import("./BaseVector.js").Options} */ (baseOptions));
            const renderMode = options.renderMode || VectorTileRenderType_js_2.default.HYBRID;
            asserts_js_29.assert(renderMode == undefined ||
                renderMode == VectorTileRenderType_js_2.default.IMAGE ||
                renderMode == VectorTileRenderType_js_2.default.HYBRID ||
                renderMode == VectorTileRenderType_js_2.default.VECTOR, 28); // `renderMode` must be `'image'`, `'hybrid'` or `'vector'`.
            /**
             * @private
             * @type {import("./VectorTileRenderType.js").default}
             */
            this.renderMode_ = renderMode;
            this.setPreload(options.preload ? options.preload : 0);
            this.setUseInterimTilesOnError(options.useInterimTilesOnError !== undefined
                ? options.useInterimTilesOnError
                : true);
        }
        /**
         * Create a renderer for this layer.
         * @return {import("../renderer/Layer.js").default} A layer renderer.
         * @protected
         */
        createRenderer() {
            return new VectorTileLayer_js_1.default(this);
        }
        /**
         * Get the topmost feature that intersects the given pixel on the viewport. Returns a promise
         * that resolves with an array of features. The array will either contain the topmost feature
         * when a hit was detected, or it will be empty.
         *
         * The hit detection algorithm used for this method is optimized for performance, but is less
         * accurate than the one used in {@link import("../PluggableMap.js").default#getFeaturesAtPixel}: Text
         * is not considered, and icons are only represented by their bounding box instead of the exact
         * image.
         *
         * @param {import("../pixel.js").Pixel} pixel Pixel.
         * @return {Promise<Array<import("../Feature").default>>} Promise that resolves with an array of features.
         * @api
         */
        getFeatures(pixel) {
            return super.getFeatures(pixel);
        }
        /**
         * @return {import("./VectorTileRenderType.js").default} The render mode.
         */
        getRenderMode() {
            return this.renderMode_;
        }
        /**
         * Return the level as number to which we will preload tiles up to.
         * @return {number} The level to preload tiles up to.
         * @observable
         * @api
         */
        getPreload() {
            return /** @type {number} */ (this.get(TileProperty_js_2.default.PRELOAD));
        }
        /**
         * Whether we use interim tiles on error.
         * @return {boolean} Use interim tiles on error.
         * @observable
         * @api
         */
        getUseInterimTilesOnError() {
            return /** @type {boolean} */ (this.get(TileProperty_js_2.default.USE_INTERIM_TILES_ON_ERROR));
        }
        /**
         * Set the level as number to which we will preload tiles up to.
         * @param {number} preload The level to preload tiles up to.
         * @observable
         * @api
         */
        setPreload(preload) {
            this.set(TileProperty_js_2.default.PRELOAD, preload);
        }
        /**
         * Set whether we use interim tiles on error.
         * @param {boolean} useInterimTilesOnError Use interim tiles on error.
         * @observable
         * @api
         */
        setUseInterimTilesOnError(useInterimTilesOnError) {
            this.set(TileProperty_js_2.default.USE_INTERIM_TILES_ON_ERROR, useInterimTilesOnError);
        }
    }
    exports.default = VectorTileLayer;
});
define("node_modules/ol/src/renderer/canvas/TileLayer", ["require", "exports", "node_modules/ol/src/renderer/canvas/Layer", "node_modules/ol/src/TileRange", "node_modules/ol/src/TileState", "node_modules/ol/src/transform", "node_modules/ol/src/obj", "node_modules/ol/src/extent", "node_modules/ol/src/render/canvas", "node_modules/ol/src/proj", "node_modules/ol/src/util", "node_modules/ol/src/array"], function (require, exports, Layer_js_8, TileRange_js_2, TileState_js_12, transform_js_21, obj_js_31, extent_js_55, canvas_js_10, proj_js_34, util_js_32, array_js_31) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @classdesc
     * Canvas renderer for tile layers.
     * @api
     */
    class CanvasTileLayerRenderer extends Layer_js_8.default {
        /**
         * @param {import("../../layer/Tile.js").default|import("../../layer/VectorTile.js").default} tileLayer Tile layer.
         */
        constructor(tileLayer) {
            super(tileLayer);
            /**
             * Rendered extent has changed since the previous `renderFrame()` call
             * @type {boolean}
             */
            this.extentChanged = true;
            /**
             * @private
             * @type {?import("../../extent.js").Extent}
             */
            this.renderedExtent_ = null;
            /**
             * @protected
             * @type {number}
             */
            this.renderedPixelRatio;
            /**
             * @protected
             * @type {import("../../proj/Projection.js").default}
             */
            this.renderedProjection = null;
            /**
             * @protected
             * @type {number}
             */
            this.renderedRevision;
            /**
             * @protected
             * @type {!Array<import("../../Tile.js").default>}
             */
            this.renderedTiles = [];
            /**
             * @private
             * @type {boolean}
             */
            this.newTiles_ = false;
            /**
             * @protected
             * @type {import("../../extent.js").Extent}
             */
            this.tmpExtent = extent_js_55.createEmpty();
            /**
             * @private
             * @type {import("../../TileRange.js").default}
             */
            this.tmpTileRange_ = new TileRange_js_2.default(0, 0, 0, 0);
        }
        /**
         * @protected
         * @param {import("../../Tile.js").default} tile Tile.
         * @return {boolean} Tile is drawable.
         */
        isDrawableTile(tile) {
            const tileLayer = this.getLayer();
            const tileState = tile.getState();
            const useInterimTilesOnError = tileLayer.getUseInterimTilesOnError();
            return (tileState == TileState_js_12.default.LOADED ||
                tileState == TileState_js_12.default.EMPTY ||
                (tileState == TileState_js_12.default.ERROR && !useInterimTilesOnError));
        }
        /**
         * @param {number} z Tile coordinate z.
         * @param {number} x Tile coordinate x.
         * @param {number} y Tile coordinate y.
         * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
         * @return {!import("../../Tile.js").default} Tile.
         */
        getTile(z, x, y, frameState) {
            const pixelRatio = frameState.pixelRatio;
            const projection = frameState.viewState.projection;
            const tileLayer = this.getLayer();
            const tileSource = tileLayer.getSource();
            let tile = tileSource.getTile(z, x, y, pixelRatio, projection);
            if (tile.getState() == TileState_js_12.default.ERROR) {
                if (!tileLayer.getUseInterimTilesOnError()) {
                    // When useInterimTilesOnError is false, we consider the error tile as loaded.
                    tile.setState(TileState_js_12.default.LOADED);
                }
                else if (tileLayer.getPreload() > 0) {
                    // Preloaded tiles for lower resolutions might have finished loading.
                    this.newTiles_ = true;
                }
            }
            if (!this.isDrawableTile(tile)) {
                tile = tile.getInterimTile();
            }
            return tile;
        }
        /**
         * @param {Object<number, Object<string, import("../../Tile.js").default>>} tiles Lookup of loaded tiles by zoom level.
         * @param {number} zoom Zoom level.
         * @param {import("../../Tile.js").default} tile Tile.
         * @return {boolean|void} If `false`, the tile will not be considered loaded.
         */
        loadedTileCallback(tiles, zoom, tile) {
            if (this.isDrawableTile(tile)) {
                return super.loadedTileCallback(tiles, zoom, tile);
            }
            return false;
        }
        /**
         * Determine whether render should be called.
         * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
         * @return {boolean} Layer is ready to be rendered.
         */
        prepareFrame(frameState) {
            return !!this.getLayer().getSource();
        }
        /**
         * Render the layer.
         * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
         * @param {HTMLElement} target Target that may be used to render content to.
         * @return {HTMLElement} The rendered element.
         */
        renderFrame(frameState, target) {
            const layerState = frameState.layerStatesArray[frameState.layerIndex];
            const viewState = frameState.viewState;
            const projection = viewState.projection;
            const viewResolution = viewState.resolution;
            const viewCenter = viewState.center;
            const rotation = viewState.rotation;
            const pixelRatio = frameState.pixelRatio;
            const tileLayer = this.getLayer();
            const tileSource = tileLayer.getSource();
            const sourceRevision = tileSource.getRevision();
            const tileGrid = tileSource.getTileGridForProjection(projection);
            const z = tileGrid.getZForResolution(viewResolution, tileSource.zDirection);
            const tileResolution = tileGrid.getResolution(z);
            let extent = frameState.extent;
            const layerExtent = layerState.extent && proj_js_34.fromUserExtent(layerState.extent, projection);
            if (layerExtent) {
                extent = extent_js_55.getIntersection(extent, proj_js_34.fromUserExtent(layerState.extent, projection));
            }
            const tilePixelRatio = tileSource.getTilePixelRatio(pixelRatio);
            // desired dimensions of the canvas in pixels
            let width = Math.round(frameState.size[0] * tilePixelRatio);
            let height = Math.round(frameState.size[1] * tilePixelRatio);
            if (rotation) {
                const size = Math.round(Math.sqrt(width * width + height * height));
                width = size;
                height = size;
            }
            const dx = (tileResolution * width) / 2 / tilePixelRatio;
            const dy = (tileResolution * height) / 2 / tilePixelRatio;
            const canvasExtent = [
                viewCenter[0] - dx,
                viewCenter[1] - dy,
                viewCenter[0] + dx,
                viewCenter[1] + dy,
            ];
            const tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z);
            /**
             * @type {Object<number, Object<string, import("../../Tile.js").default>>}
             */
            const tilesToDrawByZ = {};
            tilesToDrawByZ[z] = {};
            const findLoadedTiles = this.createLoadedTileFinder(tileSource, projection, tilesToDrawByZ);
            const tmpExtent = this.tmpExtent;
            const tmpTileRange = this.tmpTileRange_;
            this.newTiles_ = false;
            for (let x = tileRange.minX; x <= tileRange.maxX; ++x) {
                for (let y = tileRange.minY; y <= tileRange.maxY; ++y) {
                    const tile = this.getTile(z, x, y, frameState);
                    if (this.isDrawableTile(tile)) {
                        const uid = util_js_32.getUid(this);
                        if (tile.getState() == TileState_js_12.default.LOADED) {
                            tilesToDrawByZ[z][tile.tileCoord.toString()] = tile;
                            const inTransition = tile.inTransition(uid);
                            if (!this.newTiles_ &&
                                (inTransition || this.renderedTiles.indexOf(tile) === -1)) {
                                this.newTiles_ = true;
                            }
                        }
                        if (tile.getAlpha(uid, frameState.time) === 1) {
                            // don't look for alt tiles if alpha is 1
                            continue;
                        }
                    }
                    const childTileRange = tileGrid.getTileCoordChildTileRange(tile.tileCoord, tmpTileRange, tmpExtent);
                    let covered = false;
                    if (childTileRange) {
                        covered = findLoadedTiles(z + 1, childTileRange);
                    }
                    if (!covered) {
                        tileGrid.forEachTileCoordParentTileRange(tile.tileCoord, findLoadedTiles, tmpTileRange, tmpExtent);
                    }
                }
            }
            const canvasScale = tileResolution / viewResolution;
            // set forward and inverse pixel transforms
            transform_js_21.compose(this.pixelTransform, frameState.size[0] / 2, frameState.size[1] / 2, 1 / tilePixelRatio, 1 / tilePixelRatio, rotation, -width / 2, -height / 2);
            const canvasTransform = canvas_js_10.createTransformString(this.pixelTransform);
            this.useContainer(target, canvasTransform, layerState.opacity);
            const context = this.context;
            const canvas = context.canvas;
            transform_js_21.makeInverse(this.inversePixelTransform, this.pixelTransform);
            // set scale transform for calculating tile positions on the canvas
            transform_js_21.compose(this.tempTransform, width / 2, height / 2, canvasScale, canvasScale, 0, -width / 2, -height / 2);
            if (canvas.width != width || canvas.height != height) {
                canvas.width = width;
                canvas.height = height;
            }
            else if (!this.containerReused) {
                context.clearRect(0, 0, width, height);
            }
            if (layerExtent) {
                this.clipUnrotated(context, frameState, layerExtent);
            }
            obj_js_31.assign(context, tileSource.getContextOptions());
            this.preRender(context, frameState);
            this.renderedTiles.length = 0;
            /** @type {Array<number>} */
            let zs = Object.keys(tilesToDrawByZ).map(Number);
            zs.sort(array_js_31.numberSafeCompareFunction);
            let clips, clipZs, currentClip;
            if (layerState.opacity === 1 &&
                (!this.containerReused ||
                    tileSource.getOpaque(frameState.viewState.projection))) {
                zs = zs.reverse();
            }
            else {
                clips = [];
                clipZs = [];
            }
            for (let i = zs.length - 1; i >= 0; --i) {
                const currentZ = zs[i];
                const currentTilePixelSize = tileSource.getTilePixelSize(currentZ, pixelRatio, projection);
                const currentResolution = tileGrid.getResolution(currentZ);
                const currentScale = currentResolution / tileResolution;
                const dx = currentTilePixelSize[0] * currentScale * canvasScale;
                const dy = currentTilePixelSize[1] * currentScale * canvasScale;
                const originTileCoord = tileGrid.getTileCoordForCoordAndZ(extent_js_55.getTopLeft(canvasExtent), currentZ);
                const originTileExtent = tileGrid.getTileCoordExtent(originTileCoord);
                const origin = transform_js_21.apply(this.tempTransform, [
                    (tilePixelRatio * (originTileExtent[0] - canvasExtent[0])) /
                        tileResolution,
                    (tilePixelRatio * (canvasExtent[3] - originTileExtent[3])) /
                        tileResolution,
                ]);
                const tileGutter = tilePixelRatio * tileSource.getGutterForProjection(projection);
                const tilesToDraw = tilesToDrawByZ[currentZ];
                for (const tileCoordKey in tilesToDraw) {
                    const tile = /** @type {import("../../ImageTile.js").default} */ (tilesToDraw[tileCoordKey]);
                    const tileCoord = tile.tileCoord;
                    // Calculate integer positions and sizes so that tiles align
                    const floatX = origin[0] - (originTileCoord[1] - tileCoord[1]) * dx;
                    const nextX = Math.round(floatX + dx);
                    const floatY = origin[1] - (originTileCoord[2] - tileCoord[2]) * dy;
                    const nextY = Math.round(floatY + dy);
                    const x = Math.round(floatX);
                    const y = Math.round(floatY);
                    const w = nextX - x;
                    const h = nextY - y;
                    const transition = z === currentZ;
                    const inTransition = transition && tile.getAlpha(util_js_32.getUid(this), frameState.time) !== 1;
                    if (!inTransition) {
                        if (clips) {
                            // Clip mask for regions in this tile that already filled by a higher z tile
                            context.save();
                            currentClip = [x, y, x + w, y, x + w, y + h, x, y + h];
                            for (let i = 0, ii = clips.length; i < ii; ++i) {
                                if (z !== currentZ && currentZ < clipZs[i]) {
                                    const clip = clips[i];
                                    context.beginPath();
                                    // counter-clockwise (outer ring) for current tile
                                    context.moveTo(currentClip[0], currentClip[1]);
                                    context.lineTo(currentClip[2], currentClip[3]);
                                    context.lineTo(currentClip[4], currentClip[5]);
                                    context.lineTo(currentClip[6], currentClip[7]);
                                    // clockwise (inner ring) for higher z tile
                                    context.moveTo(clip[6], clip[7]);
                                    context.lineTo(clip[4], clip[5]);
                                    context.lineTo(clip[2], clip[3]);
                                    context.lineTo(clip[0], clip[1]);
                                    context.clip();
                                }
                            }
                            clips.push(currentClip);
                            clipZs.push(currentZ);
                        }
                        else {
                            context.clearRect(x, y, w, h);
                        }
                    }
                    this.drawTileImage(tile, frameState, x, y, w, h, tileGutter, transition, layerState.opacity);
                    if (clips && !inTransition) {
                        context.restore();
                    }
                    this.renderedTiles.push(tile);
                    this.updateUsedTiles(frameState.usedTiles, tileSource, tile);
                }
            }
            this.renderedRevision = sourceRevision;
            this.renderedResolution = tileResolution;
            this.extentChanged =
                !this.renderedExtent_ || !extent_js_55.equals(this.renderedExtent_, canvasExtent);
            this.renderedExtent_ = canvasExtent;
            this.renderedPixelRatio = pixelRatio;
            this.renderedProjection = projection;
            this.manageTilePyramid(frameState, tileSource, tileGrid, pixelRatio, projection, extent, z, tileLayer.getPreload());
            this.scheduleExpireCache(frameState, tileSource);
            this.postRender(context, frameState);
            if (layerState.extent) {
                context.restore();
            }
            if (canvasTransform !== canvas.style.transform) {
                canvas.style.transform = canvasTransform;
            }
            return this.container;
        }
        /**
         * @param {import("../../ImageTile.js").default} tile Tile.
         * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
         * @param {number} x Left of the tile.
         * @param {number} y Top of the tile.
         * @param {number} w Width of the tile.
         * @param {number} h Height of the tile.
         * @param {number} gutter Tile gutter.
         * @param {boolean} transition Apply an alpha transition.
         * @param {number} opacity Opacity.
         */
        drawTileImage(tile, frameState, x, y, w, h, gutter, transition, opacity) {
            const image = this.getTileImage(tile);
            if (!image) {
                return;
            }
            const uid = util_js_32.getUid(this);
            const tileAlpha = transition ? tile.getAlpha(uid, frameState.time) : 1;
            const alpha = opacity * tileAlpha;
            const alphaChanged = alpha !== this.context.globalAlpha;
            if (alphaChanged) {
                this.context.save();
                this.context.globalAlpha = alpha;
            }
            this.context.drawImage(image, gutter, gutter, image.width - 2 * gutter, image.height - 2 * gutter, x, y, w, h);
            if (alphaChanged) {
                this.context.restore();
            }
            if (tileAlpha !== 1) {
                frameState.animate = true;
            }
            else if (transition) {
                tile.endTransition(uid);
            }
        }
        /**
         * @return {HTMLCanvasElement} Image
         */
        getImage() {
            const context = this.context;
            return context ? context.canvas : null;
        }
        /**
         * Get the image from a tile.
         * @param {import("../../ImageTile.js").default} tile Tile.
         * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.
         * @protected
         */
        getTileImage(tile) {
            return tile.getImage();
        }
        /**
         * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
         * @param {import("../../source/Tile.js").default} tileSource Tile source.
         * @protected
         */
        scheduleExpireCache(frameState, tileSource) {
            if (tileSource.canExpireCache()) {
                /**
                 * @param {import("../../source/Tile.js").default} tileSource Tile source.
                 * @param {import("../../PluggableMap.js").default} map Map.
                 * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
                 */
                const postRenderFunction = function (tileSource, map, frameState) {
                    const tileSourceKey = util_js_32.getUid(tileSource);
                    if (tileSourceKey in frameState.usedTiles) {
                        tileSource.expireCache(frameState.viewState.projection, frameState.usedTiles[tileSourceKey]);
                    }
                }.bind(null, tileSource);
                frameState.postRenderFunctions.push(
                /** @type {import("../../PluggableMap.js").PostRenderFunction} */ (postRenderFunction));
            }
        }
        /**
         * @param {!Object<string, !Object<string, boolean>>} usedTiles Used tiles.
         * @param {import("../../source/Tile.js").default} tileSource Tile source.
         * @param {import('../../Tile.js').default} tile Tile.
         * @protected
         */
        updateUsedTiles(usedTiles, tileSource, tile) {
            // FIXME should we use tilesToDrawByZ instead?
            const tileSourceKey = util_js_32.getUid(tileSource);
            if (!(tileSourceKey in usedTiles)) {
                usedTiles[tileSourceKey] = {};
            }
            usedTiles[tileSourceKey][tile.getKey()] = true;
        }
        /**
         * Manage tile pyramid.
         * This function performs a number of functions related to the tiles at the
         * current zoom and lower zoom levels:
         * - registers idle tiles in frameState.wantedTiles so that they are not
         *   discarded by the tile queue
         * - enqueues missing tiles
         * @param {import("../../PluggableMap.js").FrameState} frameState Frame state.
         * @param {import("../../source/Tile.js").default} tileSource Tile source.
         * @param {import("../../tilegrid/TileGrid.js").default} tileGrid Tile grid.
         * @param {number} pixelRatio Pixel ratio.
         * @param {import("../../proj/Projection.js").default} projection Projection.
         * @param {import("../../extent.js").Extent} extent Extent.
         * @param {number} currentZ Current Z.
         * @param {number} preload Load low resolution tiles up to 'preload' levels.
         * @param {function(import("../../Tile.js").default)=} opt_tileCallback Tile callback.
         * @protected
         */
        manageTilePyramid(frameState, tileSource, tileGrid, pixelRatio, projection, extent, currentZ, preload, opt_tileCallback) {
            const tileSourceKey = util_js_32.getUid(tileSource);
            if (!(tileSourceKey in frameState.wantedTiles)) {
                frameState.wantedTiles[tileSourceKey] = {};
            }
            const wantedTiles = frameState.wantedTiles[tileSourceKey];
            const tileQueue = frameState.tileQueue;
            const minZoom = tileGrid.getMinZoom();
            let tileCount = 0;
            let tile, tileRange, tileResolution, x, y, z;
            for (z = minZoom; z <= currentZ; ++z) {
                tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z, tileRange);
                tileResolution = tileGrid.getResolution(z);
                for (x = tileRange.minX; x <= tileRange.maxX; ++x) {
                    for (y = tileRange.minY; y <= tileRange.maxY; ++y) {
                        if (currentZ - z <= preload) {
                            ++tileCount;
                            tile = tileSource.getTile(z, x, y, pixelRatio, projection);
                            if (tile.getState() == TileState_js_12.default.IDLE) {
                                wantedTiles[tile.getKey()] = true;
                                if (!tileQueue.isKeyQueued(tile.getKey())) {
                                    tileQueue.enqueue([
                                        tile,
                                        tileSourceKey,
                                        tileGrid.getTileCoordCenter(tile.tileCoord),
                                        tileResolution,
                                    ]);
                                }
                            }
                            if (opt_tileCallback !== undefined) {
                                opt_tileCallback(tile);
                            }
                        }
                        else {
                            tileSource.useTile(z, x, y, projection);
                        }
                    }
                }
            }
            tileSource.updateCacheSize(tileCount, projection);
        }
    }
    /**
     * @function
     * @return {import("../../layer/Tile.js").default|import("../../layer/VectorTile.js").default}
     */
    CanvasTileLayerRenderer.prototype.getLayer;
    exports.default = CanvasTileLayerRenderer;
});
define("node_modules/ol/src/layer/Tile", ["require", "exports", "node_modules/ol/src/layer/BaseTile", "node_modules/ol/src/renderer/canvas/TileLayer"], function (require, exports, BaseTile_js_1, TileLayer_js_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * @classdesc
     * For layer sources that provide pre-rendered, tiled images in grids that are
     * organized by zoom levels for specific resolutions.
     * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}
     * property on the layer object; for example, setting `title: 'My Title'` in the
     * options means that `title` is observable, and has get/set accessors.
     *
     * @api
     */
    class TileLayer extends BaseTile_js_1.default {
        /**
         * @param {import("./BaseTile.js").Options=} opt_options Tile layer options.
         */
        constructor(opt_options) {
            super(opt_options);
        }
        /**
         * Create a renderer for this layer.
         * @return {import("../renderer/Layer.js").default} A layer renderer.
         * @protected
         */
        createRenderer() {
            return new TileLayer_js_2.default(this);
        }
    }
    exports.default = TileLayer;
});
define("components/openlayers", ["require", "exports", "react", "components/index", "common/common", "node_modules/ol/src/Map", "node_modules/ol/src/source/Vector", "node_modules/ol/src/layer/Vector", "node_modules/ol/src/format", "node_modules/ol/src/View", "node_modules/ol/src/proj", "node_modules/ol/src/interaction", "node_modules/ol/src/Feature", "node_modules/ol/src/source/BingMaps", "node_modules/ol/src/source/XYZ", "node_modules/ol/src/source/OSM", "node_modules/ol/src/layer/Tile", "node_modules/ol/src/extent", "node_modules/ol/src/control/Zoom", "node_modules/ol/src/control/ZoomSlider", "node_modules/ol/src/control/FullScreen", "node_modules/ol/src/control/MousePosition", "node_modules/ol/src/control/Rotate", "node_modules/ol/src/control/ScaleLine", "node_modules/ol/src/control/ZoomToExtent"], function (require, exports, react_3, index_1, common_1, Map_1, Vector_1, Vector_2, format_1, View_1, proj_1, interaction, Feature_1, BingMaps_1, XYZ_1, OSM_1, Tile_1, extent, Zoom_1, ZoomSlider_1, FullScreen_1, MousePosition_1, Rotate_1, ScaleLine_1, ZoomToExtent_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OpenLayers = void 0;
    const ol = {
        interaction,
        control: {
            ScaleLine: ScaleLine_1.default,
            Rotate: Rotate_1.default,
            MousePosition: MousePosition_1.default,
            FullScreen: FullScreen_1.default,
            Zoom: Zoom_1.default,
            ZoomSlider: ZoomSlider_1.default,
            ZoomToExtent: ZoomToExtent_1.default,
        },
        source: {
            XYZ: XYZ_1.default,
            OSM: OSM_1.default,
            Vector: Vector_1.default
        },
        layer: {
            Vector: Vector_2.default
        }
    };
    function addSourceLayer(map, source) {
        let vector = new Vector_2.default({
            source: source
        });
        map.addLayer(vector);
        return vector;
    }
    function addGeoJsonLayer(map, url) {
        // how to access parent map to add layer...should be a inferred "props" of sorts
        let vector = new Vector_2.default({
            source: new Vector_1.default({
                url: url,
                format: new format_1.GeoJSON()
            })
        });
        map.addLayer(vector);
        return vector;
    }
    class OpenLayers extends react_3.PureComponent {
        constructor(props) {
            super(props);
            this.dispatcher = new common_1.EventDispatcher();
            this.state = {
                target: null,
            };
            {
                let bingLayerCache = {};
                let bingLayer;
                this.dispatcher.on("basemap-toggle", (args) => {
                    let map = args.map || this.state.map;
                    let layerType = this.props.bingImagerySet;
                    if (!map)
                        return;
                    if (!layerType)
                        return;
                    let source = bingLayerCache[layerType];
                    switch (layerType) {
                        case "WaterColor":
                        case "WaterColorWithLabels":
                            {
                                if (!source) {
                                    source = new ol.source.XYZ({
                                        url: `http://tile.stamen.com/watercolor/{z}/{x}/{y}.jpg`,
                                    });
                                }
                                break;
                            }
                        case "EsriAerial":
                        case "EsriAerialWithLabels":
                            {
                                if (!source) {
                                    source = new ol.source.XYZ({
                                        url: `https://services.arcgisonline.com/arcgis/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}`,
                                    });
                                }
                                break;
                            }
                        case "Black":
                        case "BlackWithLabels":
                            {
                                break;
                            }
                        case "CanvasDarkWithLabels":
                            layerType = "CanvasDark";
                        case "Aerial":
                        case "AerialWithLabels":
                        case "CanvasDark":
                        case "CanvasLight":
                        case "CanvasGray":
                        case "Road":
                            {
                                if (!source) {
                                    source = bingLayerCache[layerType] = new BingMaps_1.default({
                                        key: 'AuPHWkNxvxVAL_8Z4G8Pcq_eOKGm5eITH_cJMNAyYoIC1S_29_HhE893YrUUbIGl',
                                        imagerySet: layerType
                                    });
                                }
                                break;
                            }
                        default:
                            {
                                console.log(`unknown layer type: ${layerType}`);
                                break;
                            }
                    }
                    if (!bingLayer) {
                        bingLayer = new Tile_1.default({ source: source });
                        map.getLayers().insertAt(0, bingLayer);
                    }
                    else {
                        bingLayer.setSource(source);
                    }
                });
            }
            this.dispatcher.on("ensure-extent-visible", (args) => {
                const map = this.state.map;
                if (!map)
                    return;
                const view = map.getView();
                // get the current extent
                const currentExtent = view.calculateExtent();
                const targetExtent = args.extent;
                if (extent.containsExtent(currentExtent, targetExtent))
                    return;
                const finalExtent = extent.buffer(extent.extend(currentExtent, targetExtent), 0.2 * extent.getWidth(currentExtent));
                const resolution = view.getResolutionForExtent(finalExtent);
                const zoom = view.getZoomForResolution(resolution);
                view.animate({
                    zoom,
                    center: extent.getCenter(finalExtent)
                });
            });
        }
        trigger(message, args) {
            let map = this.state.map;
            if (!map)
                return;
            switch (message) {
                case "refresh":
                    map.getLayers().getArray()
                        .filter(l => l instanceof Vector_2.default)
                        .map((l) => l.getSource().changed());
                    break;
                case "extent":
                    let p = args;
                    let view = map.getView();
                    let resolution = view.getResolutionForExtent(p.extent);
                    let zoom = view.getZoomForResolution(resolution);
                    //map.getView().fit(p.extent);
                    view.animate({
                        center: extent.getCenter(p.extent),
                        zoom: zoom,
                    });
                    break;
                default:
                    this.dispatcher.trigger(message, args);
            }
        }
        render() {
            let map = this.state.map;
            let DrawControls = () => react_3.createElement(index_1.Toolbar, null);
            if (this.props.controls) {
                if (this.props.controls.draw) {
                    let draw = this.props.controls.draw;
                    DrawControls = () => react_3.createElement(index_1.Toolbar, null,
                        draw.point &&
                            react_3.createElement("button", { className: `${(this.state.activeDrawingTool === "Point") ? 'active' : 'inactive'}`, onClick: () => map && this.draw("Point") }, "Point"),
                        draw.circle &&
                            react_3.createElement("button", { className: `${(this.state.activeDrawingTool === "Circle") ? 'active' : 'inactive'}`, onClick: () => map && this.draw("Circle") }, "Circle"),
                        draw.line &&
                            react_3.createElement("button", { className: `${(this.state.activeDrawingTool === "LineString") ? 'active' : 'inactive'}`, onClick: () => map && this.draw("LineString") }, "Line"),
                        draw.polygon &&
                            react_3.createElement("button", { className: `${(this.state.activeDrawingTool === "Polygon") ? 'active' : 'inactive'}`, onClick: () => map && this.draw("Polygon") }, "Polygon"));
                }
            }
            return react_3.createElement("div", { className: `maplet ${this.props.className || ""} ${this.props.orientation || ''}` },
                this.props.title && react_3.createElement("label", null, this.props.title),
                react_3.createElement("div", { className: `map`, ref: v => this.setState({ target: v }) }),
                react_3.createElement(DrawControls, null),
                this.props.children);
        }
        componentDidMount() {
            const map = new Map_1.default({
                view: new View_1.default({
                    center: this.props.center || proj_1.fromLonLat([0, 0]),
                    zoom: this.props.zoom || 0
                }),
                controls: [],
                interactions: [],
                keyboardEventTarget: this.props.allowKeyboard ? document : undefined,
            });
            if (this.props.allowPan !== false) {
                map.addInteraction(new ol.interaction.DragPan());
                map.addInteraction(new ol.interaction.KeyboardPan());
            }
            if (this.props.allowZoom !== false) {
                map.addInteraction(new ol.interaction.MouseWheelZoom());
                map.addInteraction(new ol.interaction.PinchZoom());
                map.addInteraction(new ol.interaction.DragZoom());
                map.addInteraction(new ol.interaction.KeyboardZoom());
            }
            map.on("singleclick", (args) => {
                this.props.onClick && this.props.onClick({
                    coordinate: args.coordinate,
                    map: map,
                });
            });
            map.on("moveend", common_1.debounce(() => {
                this.props.setCenter && this.props.setCenter(map.getView().getCenter(), map.getView().getZoom());
            }, 50));
            this.setState((prev, prop) => ({
                map: map,
            }));
            if (this.props.bingImagerySet) {
                this.dispatcher.trigger("basemap-toggle", { map: map });
            }
            else if (this.props.osm !== false) {
                map.addLayer(new Tile_1.default({ source: new ol.source.OSM() }));
            }
            if (this.props.features) {
                let layer = new ol.layer.Vector({
                    source: new ol.source.Vector({
                        features: this.props.features
                    })
                });
                map.addLayer(layer);
            }
            if (this.props.layers) {
                if (this.props.layers.source) {
                    this.props.layers.source.forEach(source => {
                        let vector = addSourceLayer(map, source);
                        if (this.props.onLayerAdd) {
                            this.props.onLayerAdd({ layer: vector });
                        }
                        if (this.props.onFeatureClick) {
                            map.on("click", (args) => {
                                if (this.props.onFeatureClick) {
                                    let features = map.getFeaturesAtPixel(args.pixel);
                                    if (!features)
                                        return;
                                    if (features.length !== 1)
                                        return;
                                    let feature = features[0];
                                    if (feature instanceof Feature_1.default) {
                                        this.props.onFeatureClick({ layer: vector, feature: feature, coordinate: args.coordinate });
                                    }
                                }
                            });
                        }
                    });
                }
                if (this.props.layers.geoJson) {
                    this.props.layers.geoJson.forEach(url => {
                        let vector = addGeoJsonLayer(map, url);
                        if (this.props.onLayerAdd) {
                            this.props.onLayerAdd({ layer: vector });
                        }
                        if (this.props.onFeatureClick) {
                            map.on("click", (args) => {
                                if (this.props.onFeatureClick) {
                                    let features = map.getFeaturesAtPixel(args.pixel);
                                    if (!features)
                                        return;
                                    if (features.length !== 1)
                                        return;
                                    let feature = features[0];
                                    if (feature instanceof Feature_1.default) {
                                        this.props.onFeatureClick({
                                            layer: vector,
                                            feature: feature,
                                            coordinate: args.coordinate
                                        });
                                    }
                                }
                            });
                        }
                    });
                }
            }
            // I would prefer that the child trigger a cascading event that the parent could receive
            // and process
            if (this.props.controls) {
                if (this.props.controls.draw) {
                    let draw = this.props.controls.draw;
                    if (draw.point || draw.circle || draw.line || draw.polygon) {
                        draw.polygon && this.addDraw(map, "Polygon");
                        draw.circle && this.addDraw(map, "Circle");
                        draw.line && this.addDraw(map, "LineString");
                        draw.point && this.addDraw(map, "Point");
                    }
                }
                if (this.props.controls.zoom) {
                    map.addControl(new ol.control.Zoom({}));
                }
                else if (this.props.controls.zoomSlider) {
                    map.addControl(new ol.control.ZoomSlider({}));
                }
                if (this.props.controls.fullScreen) {
                    map.addControl(new ol.control.FullScreen({}));
                }
                if (this.props.controls.mousePosition) {
                    map.addControl(new ol.control.MousePosition({
                        coordinateFormat: v => !v ? "" : v.map(c => c.toFixed(4)).join(","),
                        projection: "EPSG:4326"
                    }));
                }
                if (this.props.controls.rotate) {
                    map.addControl(new ol.control.Rotate({}));
                }
                if (this.props.controls.scaleLine) {
                    map.addControl(new ol.control.ScaleLine({}));
                }
                if (this.props.controls.zoomToExtent) {
                    map.addControl(new ol.control.ZoomToExtent({}));
                }
            }
        }
        draw(type) {
            this.setState((prev) => ({
                activeDrawingTool: prev.activeDrawingTool === type ? null : type
            }));
        }
        activateDrawTool(map) {
            map.getInteractions().getArray().forEach(interaction => {
                if (interaction instanceof ol.interaction.Draw) {
                    interaction.setActive(interaction.get("type") === this.state.activeDrawingTool);
                }
            });
        }
        addDraw(map, type) {
            let source = new ol.source.Vector();
            let layer = new ol.layer.Vector({
                source: source
            });
            let interaction = new ol.interaction.Draw({
                source: source,
                type: type
            });
            interaction.set("type", type);
            interaction.setActive(false);
            map.addInteraction(interaction);
            map.addLayer(layer);
        }
        componentDidUpdate(prevProp, prevState) {
            let target = this.state.target; // how to cast in tsx?
            let map = this.state.map;
            if (map) {
                map.setTarget(target);
                map.getView().animate({
                    center: this.props.center || proj_1.fromLonLat([0, 0]),
                    zoom: this.props.zoom,
                    duration: 250
                });
                this.activateDrawTool(map);
                if (this.props.trigger) {
                    if (this.props.trigger !== prevProp.trigger) {
                        this.trigger(this.props.trigger.message, this.props.trigger.args);
                    }
                }
                if (prevProp.bingImagerySet !== this.props.bingImagerySet) {
                    this.dispatcher.trigger("basemap-toggle", { map: map });
                }
            }
        }
        componentWillUnmount() {
            // will this force the map to be destroyed?
            this.setState({ target: null });
        }
    }
    exports.OpenLayers = OpenLayers;
});
/**
 * @module ol/geom
 */
define("node_modules/ol/src/geom", ["require", "exports", "node_modules/ol/src/geom/Circle", "node_modules/ol/src/geom/Geometry", "node_modules/ol/src/geom/GeometryCollection", "node_modules/ol/src/geom/LinearRing", "node_modules/ol/src/geom/LineString", "node_modules/ol/src/geom/MultiLineString", "node_modules/ol/src/geom/MultiPoint", "node_modules/ol/src/geom/MultiPolygon", "node_modules/ol/src/geom/Point", "node_modules/ol/src/geom/Polygon", "node_modules/ol/src/geom/SimpleGeometry"], function (require, exports, Circle_js_4, Geometry_js_3, GeometryCollection_js_4, LinearRing_js_4, LineString_js_14, MultiLineString_js_11, MultiPoint_js_10, MultiPolygon_js_10, Point_js_14, Polygon_js_18, SimpleGeometry_js_11) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SimpleGeometry = exports.Polygon = exports.Point = exports.MultiPolygon = exports.MultiPoint = exports.MultiLineString = exports.LineString = exports.LinearRing = exports.GeometryCollection = exports.Geometry = exports.Circle = void 0;
    Object.defineProperty(exports, "Circle", { enumerable: true, get: function () { return Circle_js_4.default; } });
    Object.defineProperty(exports, "Geometry", { enumerable: true, get: function () { return Geometry_js_3.default; } });
    Object.defineProperty(exports, "GeometryCollection", { enumerable: true, get: function () { return GeometryCollection_js_4.default; } });
    Object.defineProperty(exports, "LinearRing", { enumerable: true, get: function () { return LinearRing_js_4.default; } });
    Object.defineProperty(exports, "LineString", { enumerable: true, get: function () { return LineString_js_14.default; } });
    Object.defineProperty(exports, "MultiLineString", { enumerable: true, get: function () { return MultiLineString_js_11.default; } });
    Object.defineProperty(exports, "MultiPoint", { enumerable: true, get: function () { return MultiPoint_js_10.default; } });
    Object.defineProperty(exports, "MultiPolygon", { enumerable: true, get: function () { return MultiPolygon_js_10.default; } });
    Object.defineProperty(exports, "Point", { enumerable: true, get: function () { return Point_js_14.default; } });
    Object.defineProperty(exports, "Polygon", { enumerable: true, get: function () { return Polygon_js_18.default; } });
    Object.defineProperty(exports, "SimpleGeometry", { enumerable: true, get: function () { return SimpleGeometry_js_11.default; } });
});
define("common/quizlet-styles", ["require", "exports", "node_modules/ol/src/style/Style", "node_modules/ol/src/style/Fill", "node_modules/ol/src/style/Stroke", "node_modules/ol/src/style/Circle", "node_modules/ol/src/style/Text"], function (require, exports, Style_1, Fill_1, Stroke_1, Circle_1, Text_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.styles = void 0;
    const ol = {
        style: { Circle: Circle_1.default, Style: Style_1.default, Fill: Fill_1.default, Stroke: Stroke_1.default, Text: Text_1.default },
    };
    function color(color) {
        let result = color;
        return result;
    }
    const theme = {
        reddotColor: [200, 100, 20, 1],
        textFillColor: [200, 200, 200, 1],
        pointFillColor: [200, 100, 20, 1],
        pointBorderColor: [200, 200, 200, 1],
        textBorderColor: [200, 100, 20, 1],
        correctFillColor: [20, 100, 20, 0.3],
        correctBorderColor: [20, 100, 20, 0.5],
        incorrectFillColor: [200, 20, 20, 0.3],
        incorrectBorderColor: [200, 20, 20, 1],
        borderColor: [200, 100, 20, 1],
        hintBorderColor: [200, 20, 200, 1],
        noColor: [0, 0, 0, 0],
        black: [0, 0, 0, 1],
        translucentBlack: [0, 0, 0, 0.3],
        textScale: 1.8,
        textWidth: 2,
        borderWidth: 2,
        textOffset: 24,
    };
    /**
     * Styles for the various question states and geometries...any react goodies we can use here?
     */
    exports.styles = {};
    exports.styles.correct = (quizlet) => (feature, res) => {
        if (!quizlet.props.featureNameFieldName)
            return new ol.style.Style();
        return [
            new ol.style.Style({
                fill: new ol.style.Fill({
                    color: color(theme.correctFillColor),
                }),
                stroke: new ol.style.Stroke({
                    color: color(theme.correctBorderColor),
                    width: theme.borderWidth,
                }),
            }),
            new ol.style.Style({
                text: new ol.style.Text({
                    text: `${feature.get(quizlet.props.featureNameFieldName)}`,
                    scale: theme.textScale,
                    fill: new ol.style.Fill({
                        color: color(theme.textFillColor),
                    }),
                    stroke: new ol.style.Stroke({
                        color: color(theme.correctBorderColor),
                        width: theme.textWidth,
                    }),
                }),
            }),
        ];
    };
    exports.styles.incorrect = (quizlet) => (feature, res) => {
        if (!quizlet.props.featureNameFieldName)
            return new ol.style.Style();
        let featureName = feature.get(quizlet.props.featureNameFieldName);
        switch (feature.getGeometry().getType()) {
            case "Point":
                return new ol.style.Style({
                    image: new ol.style.Circle({
                        radius: 10,
                        stroke: new ol.style.Stroke({
                            color: color(theme.incorrectBorderColor),
                            width: theme.borderWidth,
                        }),
                        fill: new ol.style.Fill({
                            color: color(theme.incorrectFillColor),
                        }),
                    }),
                    text: new ol.style.Text({
                        text: featureName,
                        scale: theme.textScale,
                        offsetY: theme.textOffset,
                        stroke: new ol.style.Stroke({
                            color: color(theme.incorrectBorderColor),
                            width: theme.textWidth,
                        }),
                        fill: new ol.style.Fill({
                            color: color(theme.textFillColor),
                        }),
                    }),
                });
            default:
                return [
                    new ol.style.Style({
                        fill: new ol.style.Fill({
                            color: color(theme.translucentBlack),
                        }),
                        stroke: new ol.style.Stroke({
                            color: color(theme.incorrectBorderColor),
                            width: theme.borderWidth,
                        }),
                    }),
                    new ol.style.Style({
                        text: 1
                            ? undefined
                            : new ol.style.Text({
                                text: feature.get(quizlet.props.featureNameFieldName),
                                scale: theme.textScale,
                                fill: new ol.style.Fill({
                                    color: color(theme.textFillColor),
                                }),
                                stroke: new ol.style.Stroke({
                                    color: color(theme.incorrectBorderColor),
                                    width: theme.textWidth,
                                }),
                            }),
                    }),
                ];
        }
    };
    exports.styles.indeterminate = (quizlet) => (feature, res) => {
        if (!quizlet.props.featureNameFieldName)
            return new ol.style.Style();
        let featureName = feature.get(quizlet.props.featureNameFieldName);
        let hint = quizlet.state.hint || 0;
        let isCurrentFeature = quizlet.state.answer === featureName;
        let showOutline = 1 < hint && isCurrentFeature;
        let weight = feature.get("weight") || 1;
        let borderSize = Math.round(weight * 5);
        let radius = 8;
        if (isCurrentFeature && hint)
            radius += 1 * hint;
        switch (feature.getGeometry().getType()) {
            case "Point":
                return new ol.style.Style({
                    image: new ol.style.Circle({
                        radius: radius,
                        stroke: new ol.style.Stroke({
                            color: color(theme.pointBorderColor),
                            width: theme.borderWidth + Math.min(1, hint) * borderSize,
                        }),
                        fill: new ol.style.Fill({
                            color: color(theme.pointFillColor),
                        }),
                    }),
                    text: 1 > hint && res > 50
                        ? undefined
                        : new ol.style.Text({
                            text: featureName,
                            scale: theme.textScale,
                            offsetY: theme.textOffset,
                            stroke: new ol.style.Stroke({
                                color: color(theme.textBorderColor),
                                width: theme.textWidth,
                            }),
                            fill: new ol.style.Fill({
                                color: color(theme.textFillColor),
                            }),
                        }),
                });
            default:
                return new ol.style.Style({
                    text: 1 > hint
                        ? undefined
                        : new ol.style.Text({
                            text: featureName,
                            scale: theme.textScale,
                            stroke: new ol.style.Stroke({
                                color: color(theme.textBorderColor),
                                width: 1 + borderSize,
                            }),
                            fill: new ol.style.Fill({
                                color: color(theme.textFillColor),
                            }),
                        }),
                    stroke: new ol.style.Stroke({
                        color: color(showOutline ? theme.hintBorderColor : theme.borderColor),
                        width: 2 + (isCurrentFeature ? Math.max(0, hint) : 0),
                    }),
                    fill: new ol.style.Fill({
                        color: (isCurrentFeature && hint) ? color(theme.hintBorderColor) : color(theme.black),
                    }),
                });
        }
    };
});
define("common/storage", ["require", "exports", "common/common"], function (require, exports, common_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.storage = void 0;
    ;
    function init() {
        let storage = new common_2.LocalStorage();
        let data = storage.getItem();
        let result = {
            keys: () => Object.keys(data),
            save: () => storage.setItem(data),
            force: (key) => data[key] = data[key] || { score: 0, stats: {} },
            update: (key, cb) => cb(result.force(key)),
        };
        return result;
    }
    exports.storage = init();
});
/**
 * Copyright (c) 2017 Jean-Marc VIGLINO,
 * released under the CeCILL license (http://www.cecill.info/).
 * see original at https://github.com/Viglino/ol3-games/blob/master/featureanimation/explodeanimation.js
 * see also, https://github.com/Viglino/ol3-ext/blob/gh-pages/featureanimation/featureanimation.js
 * creates an explosion animation
 */
define("effects/explode", ["require", "exports", "node_modules/ol/src/Map", "node_modules/ol/src/Feature", "node_modules/ol/src/geom/Point", "node_modules/ol/src/extent", "node_modules/ol/src/Observable", "node_modules/ol/src/Object", "node_modules/ol/src/easing", "node_modules/ol/src/color"], function (require, exports, Map_2, Feature_2, Point_1, extent_1, Observable_1, Object_1, easing_1, color_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.explode = exports.ExplodeAnimation = exports.FeatureAnimation = exports.animateFeature = void 0;
    const ol = {
        easing: { linear: easing_1.linear, easeOut: easing_1.easeOut },
        color: { asArray: color_1.asArray },
        geom: { Point: Point_1.default },
    };
    /**
     * Animate feature on a vector layer
     */
    function animateFeature(layer, feature, fanim) {
        let listenerKey;
        // Save style
        if (!fanim)
            return;
        if (!(fanim instanceof Array))
            fanim = [fanim];
        if (!fanim.length)
            return;
        let style = feature.getStyle();
        let flashStyle = style ||
            (layer.getStyleFunction ? layer.getStyleFunction()(feature, 0) : null);
        if (!flashStyle)
            flashStyle = [];
        if (!(flashStyle instanceof Array))
            flashStyle = [flashStyle];
        // Hide feature while animating
        feature.setStyle(fanim[0].options.hiddenStyle || []);
        // Structure pass for animating
        var event = {
            vectorContext: null,
            frameState: null,
            start: 0,
            time: 0,
            elapsed: 0,
            extent: false,
            // Feature information
            feature: feature,
            geom: feature.getGeometry(),
            typeGeom: feature.getGeometry().getType(),
            bbox: feature.getGeometry().getExtent(),
            coord: extent_1.getCenter(feature.getGeometry().getExtent()),
            style: flashStyle,
            context: null,
        };
        // Remove null animations
        for (var i = fanim.length - 1; i >= 0; i--) {
            if (fanim[i].options.duration === 0)
                fanim.splice(i, 1);
        }
        let nb = 0, step = 0;
        function animate(e) {
            event.vectorContext = e.vectorContext;
            event.frameState = e.frameState;
            if (!event.extent) {
                event.extent = e.frameState.extent;
                event.start = e.frameState.time;
                event.context = e.context;
            }
            event.time = e.frameState.time - event.start;
            event.elapsed = event.time / (fanim[step].options.duration || 1);
            if (event.elapsed > 1)
                event.elapsed = 1;
            // Stop animation?
            if (!fanim[step].animate(event)) {
                nb++;
                // Repeat animation
                if (nb < (fanim[step].options.repeat || 0)) {
                    event.extent = false;
                }
                // newt step
                else if (step < fanim.length - 1) {
                    fanim[step].dispatchEvent({ type: "animationend", feature: feature });
                    step++;
                    nb = 0;
                    event.extent = false;
                }
                // the end
                else {
                    stop(null);
                }
            }
            // tell OL3 to continue postcompose animation
            e.frameState.animate = true;
        }
        // Stop animation
        function stop(options) {
            Observable_1.unByKey(listenerKey);
            listenerKey = null;
            feature.setStyle(style);
            // Send event
            var event = { type: "animationend", feature: feature };
            if (options) {
                for (var i in options)
                    if (options.hasOwnProperty(i)) {
                        event[i] = options[i];
                    }
            }
            fanim[step].dispatchEvent(event);
            layer.dispatchEvent(event);
        }
        // Launch animation
        function start(options) {
            if (fanim.length && !listenerKey) {
                listenerKey = layer.on("postcompose", (e) => animate(e));
                layer.changed();
                // Send event
                var event = { type: "animationstart", feature: feature };
                if (options) {
                    for (var i in options)
                        if (options.hasOwnProperty(i)) {
                            event[i] = options[i];
                        }
                }
                fanim[step].dispatchEvent(event);
                layer.dispatchEvent(event);
            }
        }
        start(null);
        // Return animation controler
        return {
            start: start,
            stop: stop,
            isPlaying: function () {
                return !!listenerKey;
            },
        };
    }
    exports.animateFeature = animateFeature;
    class FeatureAnimation extends Object_1.default {
        constructor(options) {
            super();
            this.options = options;
            options = options || {};
            options.duration =
                typeof options.duration == "number"
                    ? options.duration >= 0
                        ? options.duration
                        : 0
                    : 1000;
            options.fade = typeof options.fade == "function" ? options.fade : null;
            options.repeat = options.repeat || 0;
            let easing = typeof options.easing == "function" ? options.easing : ol.easing.linear;
            options.easing = options.revers ? (t) => 1 - easing(t) : easing;
        }
        /** Draw a geometry
         */
        drawGeom_(e, geom, shadow) {
            if (this.options.fade) {
                e.context.globalAlpha = this.options.fade(1 - e.elapsed);
            }
            let style = e.style;
            for (let i = 0; i < style.length; i++) {
                let sc = 0;
                // OL < v4.3 : setImageStyle doesn't check retina
                let imgs = Map_2.default.prototype.getFeaturesAtPixel ? false : style[i].getImage();
                if (imgs) {
                    sc = imgs.getScale();
                    imgs.setScale(e.frameState.pixelRatio * sc);
                }
                // Prevent crach if the style is not ready (image not loaded)
                try {
                    e.vectorContext.setStyle(style[i]);
                    if (style[i].getZIndex() < 0)
                        e.vectorContext.drawGeometry(shadow || geom);
                    else
                        e.vectorContext.drawGeometry(geom);
                }
                catch (e) { }
                if (imgs)
                    imgs.setScale(sc);
            }
        }
        animate(e) {
            return false;
        }
    }
    exports.FeatureAnimation = FeatureAnimation;
    /** Explosion animation: show an explosion with a blast effect
     * @param {ol.featureAnimationExplodeOptions} options
     *	- radius {number} blast radius (in pixel), default 50
     *	- length {number} number of particles to use, default 12
     *	- dispersion {number} radius of dispersion from the center of the blast, default radius/2
     *	- color {ol.colorLike} color of the explosion, default: #ebb
     */
    class ExplodeAnimation extends FeatureAnimation {
        constructor(options) {
            super(options);
            this.options = options;
            let dr = (options.radius = options.radius || 30);
            options.length = options.length || 12;
            options.color = options.color || "#e55";
            let c = document.createElement("canvas");
            c.width = c.height = 10;
            let ctx = c.getContext("2d");
            if (!ctx)
                return;
            let gradient = (this.gradient = ctx.createRadialGradient(0, 0, 0, 0, 0, options.radius));
            let mask = (value, mask) => ((value * mask) / 255) | 0;
            let color = ol.color.asArray(options.color);
            let [r, g, b, a] = color;
            var dispersion = options.dispersion || options.radius / 2;
            this.particules = [
                {
                    tmin: 0,
                    dt: 1,
                    radius: options.radius,
                    x: 0,
                    y: 0,
                },
            ];
            gradient.addColorStop(0, "rgba(" + [mask(r, 255), mask(g, 255), mask(b, 255), a] + ")");
            for (var i = 0; i < options.length; i++) {
                gradient.addColorStop(i / options.length, `rgba(${mask(r, 255 - Math.random() * 100)}, ${mask(g, 255 - Math.random() * 200)}, ${mask(b, 255 - Math.random() * 100)}, ${1 - i / options.length})`);
            }
            for (var i = 0; i < options.length; i++) {
                this.particules.push({
                    tmin: Math.random() * 0.4,
                    dt: 0.3 + Math.random() * 0.3,
                    radius: options.radius * (0.5 + Math.random() * 0.5),
                    x: dispersion * (Math.random() - 0.5),
                    y: dispersion * (Math.random() - 0.5),
                });
            }
        }
        animate(e) {
            var sc = this.options.easing && this.options.easing(e.elapsed);
            if (sc) {
                e.context.save();
                var ratio = e.frameState.pixelRatio;
                var m = e.frameState.coordinateToPixelTransform;
                var dx = m[0] * e.coord[0] + m[1] * e.coord[1] + m[4];
                var dy = m[2] * e.coord[0] + m[3] * e.coord[1] + m[5];
                e.context.globalCompositeOperation = "lighter";
                e.context.fillStyle = this.gradient;
                e.context.scale(ratio, ratio);
                var ds, r;
                for (var i = 0, p; (p = this.particules[i]); i++) {
                    ds = (sc - p.tmin) / p.dt;
                    if (ds > 0 && ds <= 1) {
                        e.context.save();
                        e.context.translate(dx + p.x, dy + p.y);
                        r = (ds * p.radius) / (this.options.radius || 1);
                        e.context.scale(r, r);
                        e.context.globalAlpha = 1 - ds;
                        e.context.fillRect(-p.radius, -p.radius, 2 * p.radius, 2 * p.radius);
                        e.context.restore();
                    }
                }
                e.context.restore();
            }
            return e.time <= (this.options.duration || 0);
        }
    }
    exports.ExplodeAnimation = ExplodeAnimation;
    // Show an explosion at coord
    function explode(layer, coord) {
        var f = new Feature_2.default(new ol.geom.Point(coord));
        var anim = new ExplodeAnimation({
            duration: 3000,
            easing: ol.easing.easeOut,
        });
        animateFeature(layer, f, [anim]);
    }
    exports.explode = explode;
});
define("effects/kaplunk", ["require", "exports", "node_modules/ol/src/Object"], function (require, exports, Object_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AudioMedia = exports.Media = void 0;
    /*	Copyright (c) 2017 Jean-Marc VIGLINO,
        released under the CeCILL-B license (French BSD license)
        (http://www.cecill.info/licences/Licence_CeCILL-B_V1-en.txt).
    */
    class Media extends Object_2.default {
        /**
        * Abstract base class; normally only used for creating subclasses and not instantiated in apps.
        * Convenient class to handle HTML5 media
        */
        constructor(options) {
            super();
            this.options = options;
            this.media = options.media;
            if (options.loop)
                this.setLoop(options.loop);
            // Dispatch media event as ol3 event
            this.media.addEventListener('canplaythrough', () => this.dispatchEvent({ type: 'ready' }), false);
            ["load", "play", "pause", "ended"]
                .forEach(event => this.media.addEventListener(event, (e) => this.dispatchEvent({ type: e.type }), false));
        }
        play(start) {
            if (start !== undefined) {
                this.media.pause();
                this.media.currentTime = start;
            }
            this.media.play();
        }
        pause() {
            this.media.pause();
        }
        stop() {
            this.media.pause();
            this.media.currentTime = 0;
        }
        setVolume(v) {
            this.media.volume = v;
        }
        getVolume() {
            return this.media.volume;
        }
        ;
        mute(b) {
            this.media.muted = (b === undefined) ? !this.media.muted : b;
        }
        isMuted() {
            return !!this.media.muted;
        }
        setTime(t) {
            this.media.prop("currentTime", t);
        }
        getTime() {
            return this.media.prop("currentTime");
        }
        getDuration() {
            return Math.floor(this.media.prop("duration") / 60) + ":" + Math.floor((this.media.prop("duration") - Math.floor(this.media.prop("duration") / 60) * 60));
        }
        ;
        setLoop(b) {
            this.media.loop = b;
        }
        ;
        getLoop() {
            return this.media.loop;
        }
        ;
    }
    exports.Media = Media;
    class AudioMedia extends Media {
        constructor(options) {
            let media = new Audio(options.source);
            super({
                media: media,
                loop: options.loop
            });
            media.load();
        }
    }
    exports.AudioMedia = AudioMedia;
});
define("fun/computeDistanceVector", ["require", "exports", "node_modules/ol/src/extent"], function (require, exports, extent_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.computeDistanceVector = void 0;
    function computeDistanceVector(f1, f2) {
        const p1 = extent_2.getCenter(f1.getGeometry().getExtent());
        const p2 = extent_2.getCenter(f2.getGeometry().getExtent());
        return [p1[0] - p2[0], p1[1] - p2[1]];
    }
    exports.computeDistanceVector = computeDistanceVector;
});
define("fun/computeDistanceHint", ["require", "exports", "fun/computeDistanceVector"], function (require, exports, computeDistanceVector_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.computeDistanceHint = void 0;
    function computeDistanceHint(f1, f2) {
        const [dx, dy] = computeDistanceVector_1.computeDistanceVector(f1, f2);
        const km = Math.round(Math.sqrt(dx * dx + dy * dy) / 1000);
        const length = Math.ceil(Math.log10(km));
        let answer = km;
        const sigDig = 2;
        if (length > sigDig) {
            const multi = Math.pow(10, length - sigDig);
            answer = Math.round(km / multi) * multi;
        }
        return `${answer} km`;
    }
    exports.computeDistanceHint = computeDistanceHint;
});
define("fun/computeDirectionHint", ["require", "exports", "fun/computeDistanceVector"], function (require, exports, computeDistanceVector_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.computeDirectionHint = void 0;
    function computeDirectionHint(f1, f2) {
        const [dx, dy] = computeDistanceVector_2.computeDistanceVector(f1, f2);
        const direction = (360 + Math.round((180 / Math.PI) * Math.atan2(dy, dx))) % 360;
        const quadrant = Math.round(direction / 22.5);
        switch (quadrant) {
            case 16:
            case 0:
                return "east";
            case 1:
            case 3:
            case 2:
                return "north-east";
            case 4:
                return "north";
            case 5:
            case 7:
            case 6:
                return "north-west";
            case 8:
                return "west";
            case 9:
            case 11:
            case 10:
                return "south-west";
            case 12:
                return "south";
            case 13:
            case 15:
            case 14:
                return "south-east";
            default:
                return "some place else";
        }
    }
    exports.computeDirectionHint = computeDirectionHint;
});
define("fun/scaleExtent", ["require", "exports", "node_modules/ol/src/extent"], function (require, exports, extent_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.scaleExtent = void 0;
    function scaleExtent(fullExtent, scale = 1, center = extent_3.getCenter(fullExtent)) {
        let width = 0.5 * Math.max(extent_3.getWidth(fullExtent), extent_3.getHeight(fullExtent)) * scale;
        return [
            center[0] - width,
            center[1] - width,
            center[0] + width,
            center[1] + width,
        ];
    }
    exports.scaleExtent = scaleExtent;
});
define("components/quizlet", ["require", "exports", "common/player", "components/openlayers", "react", "common/common", "common/quizlet-styles", "common/storage", "effects/explode", "effects/kaplunk", "node_modules/ol/src/extent", "node_modules/ol/src/Collection", "fun/computeDistanceHint", "fun/computeDirectionHint", "fun/scaleExtent"], function (require, exports, player_1, openlayers_1, react_4, common_3, quizlet_styles_1, storage_1, explode_1, kaplunk_1, extent_4, Collection_1, computeDistanceHint_1, computeDirectionHint_1, scaleExtent_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.QuizletComponent = void 0;
    class QuizletComponent extends react_4.PureComponent {
        constructor(props) {
            super(props);
            this.dispatcher = new common_3.EventDispatcher();
            {
                let score = storage_1.storage.force(props.quizletName).score;
                this.state = {
                    center: [0, 0],
                    zoom: 3,
                    features: new Collection_1.default(),
                    answers: [],
                    score: score,
                    bingImagerySet: (props.getLayerStyle && props.getLayerStyle(score)) || (score > 1000 ? "Aerial" : "AerialWithLabels")
                };
            }
            document.addEventListener("keypress", (args) => {
                switch (args.key.toUpperCase()) {
                    case "H":
                        this.dispatcher.trigger("hint");
                        break;
                    case "S":
                        this.dispatcher.trigger("skip");
                        break;
                }
            });
            this.dispatcher.on("adjust-answers", (args) => {
                // remove most correct answers until less than questionsPerQuiz remain
                let counts = {};
                let gameStorage = this.getStat();
                let correct = (v) => v.correct - v.incorrect - v.hint;
                Object.keys(gameStorage.stats).forEach(k => counts[correct(gameStorage.stats[k])] = true);
                let values = Object.keys(counts).map(v => parseInt(v)).sort().reverse();
                let nextAnswers = args.answers;
                while (values.length && nextAnswers.length > this.props.questionsPerQuiz) {
                    args.answers = nextAnswers;
                    let maxCount = values.pop() || 0;
                    console.log(`removing where count >= ${maxCount}`);
                    nextAnswers = nextAnswers.filter(f => !gameStorage.stats[f] || (correct(gameStorage.stats[f]) < maxCount));
                }
                console.log(args.answers);
            });
            this.dispatcher.on("correct", (args) => {
                let answer = this.state.answer || "";
                if (!answer)
                    return;
                var boing = new kaplunk_1.AudioMedia({
                    source: "data/sound/switch-9.mp3"
                });
                boing.play(0);
                console.log("correct");
                let score = this.score(20);
                let gameStorage = this.getStat();
                if (gameStorage && gameStorage.stats) {
                    gameStorage.stats[answer].correct++;
                    gameStorage.score = this.state.score;
                    storage_1.storage.save();
                }
                let feature = args.feature;
                if (feature) {
                    feature.setStyle(quizlet_styles_1.styles.correct(this));
                    this.state.features.remove(feature);
                    this.state.features.push(feature);
                    let options = ["AerialWithLabels", "Aerial", "CanvasDark", "CanvasLight", "CanvasGray", "Road"];
                    let bingImagerySet = (props.getLayerStyle && props.getLayerStyle(score)) || (options[Math.floor(this.state.score / 1000) % options.length]);
                    this.setState(() => ({
                        bingImagerySet: bingImagerySet
                    }));
                    if (!this.next()) {
                        setTimeout(() => {
                            this.setState(() => ({
                                mapTrigger: {
                                    message: "extent",
                                    args: {
                                        extent: scaleExtent_1.scaleExtent(this.props.source.getExtent())
                                    }
                                }
                            }));
                            this.init();
                        }, 1000);
                    }
                }
            });
            this.dispatcher.on("incorrect", (args) => {
                let answer = this.state.answer || "";
                if (!answer)
                    return;
                console.log("incorrect");
                this.score(-20);
                // new AudioMedia({
                //     source: "data/sound/Bomb-SoundBible.com-891110113.mp3",
                // }).play(0);
                const distanceHint = computeDistanceHint_1.computeDistanceHint(this.find(), args.feature);
                const directionHint = computeDirectionHint_1.computeDirectionHint(this.find(), args.feature);
                this.dispatcher.trigger("play", { en: `That is ${this.getFeatureName(args.feature)}, you are looking for ${answer} which is ${distanceHint} away.  Look ${directionHint}.` });
                let gameStorage = this.getStat();
                gameStorage.stats[answer].incorrect++;
                gameStorage.score = this.state.score;
                storage_1.storage.save();
                let feature = args.feature;
                if (feature) {
                    feature.setStyle(quizlet_styles_1.styles.incorrect(this));
                    //this.zoomToFeature(feature);
                    this.state.features.remove(feature);
                    this.state.features.push(feature);
                }
            });
            this.dispatcher.on("skip", () => this.skip());
            this.dispatcher.on("hint", () => {
                let answer = this.state.answer || "";
                if (!answer)
                    return;
                this.dispatcher.trigger("play", { en: answer });
                let gameStorage = this.getStat();
                gameStorage.stats[answer].hint++;
                gameStorage.score = this.state.score;
                storage_1.storage.save();
                let feature = this.find();
                if (!feature)
                    return;
                this.score(-5);
                let center = extent_4.getCenter(feature.getGeometry().getExtent());
                this.setState(prev => ({
                    hint: (prev.hint || 0) + 1,
                    mapTrigger: {
                        message: "extent",
                        args: {
                            extent: scaleExtent_1.scaleExtent(this.props.source.getExtent(), 1 / ((prev.hint || 0) + 3), center)
                        }
                    }
                }));
            });
            this.dispatcher.on("reload", () => location.reload());
            this.dispatcher.on("play", args => player_1.player.play(args));
            this.dispatcher.on("update", () => {
            });
        }
        getStat() {
            let answer = this.state.answer || "";
            let key = this.props.quizletName || "";
            return storage_1.storage.update(key, data => {
                let stat = data.stats[answer] = (data.stats[answer] || {
                    correct: 0,
                    incorrect: 0,
                    hint: 0
                });
                return data;
            });
        }
        componentDidUpdate(prevProp, prevState) {
            this.dispatcher.trigger("update");
            if (prevState.answer !== this.state.answer) {
                this.panAnswerIntoView();
                this.dispatcher.trigger("play", { en: this.state.answer });
            }
        }
        panAnswerIntoView() {
            const feature = this.find();
            if (!feature)
                return;
            const extent = feature.getGeometry().getExtent();
            const panToExtent = scaleExtent_1.scaleExtent(extent, 8);
            this.setState(prev => ({
                mapTrigger: {
                    message: "ensure-extent-visible",
                    args: {
                        extent: extent
                    }
                }
            }));
        }
        componentDidMount() {
        }
        render() {
            return react_4.createElement("div", { className: "quizlet" },
                react_4.createElement(openlayers_1.OpenLayers, { trigger: this.state.mapTrigger, allowKeyboard: true, orientation: "full", center: this.state.center, zoom: this.state.zoom, controls: {
                        mousePosition: true,
                    }, bingImagerySet: this.state.bingImagerySet, layers: {
                        source: [this.props.source]
                    }, setCenter: (center, zoom) => {
                        this.setState(() => ({
                            center: center,
                            zoom: zoom
                        }));
                    }, onLayerAdd: (args) => {
                        let source = args.layer.getSource();
                        source.once("addfeature", common_3.debounce(() => {
                            let extent = source.getExtent();
                            this.setState(prev => ({
                                mapTrigger: {
                                    message: "extent",
                                    args: {
                                        extent: scaleExtent_1.scaleExtent(extent)
                                    }
                                }
                            }));
                            this.init();
                        }, 500));
                    }, onFeatureClick: (args) => {
                        if (!this.state.answer) {
                            this.init();
                        }
                        else if (this.test(args.feature)) {
                            this.dispatcher.trigger("correct", { feature: args.feature });
                        }
                        else {
                            this.dispatcher.trigger("incorrect", { feature: args.feature });
                            explode_1.explode(args.layer, args.coordinate);
                        }
                    } },
                    react_4.createElement(openlayers_1.OpenLayers, { className: "inset", osm: false, center: this.state.center, zoom: Math.max(0, this.state.zoom - 5), allowZoom: true, allowPan: true, orientation: "landscape", onClick: (args) => {
                            this.setState(prev => ({
                                center: args.coordinate,
                                zoom: Math.max(prev.zoom, 5 + args.map.getView().getZoom()),
                            }));
                        }, layers: { geoJson: ["./data/countries.json"] }, features: this.state.features })),
                react_4.createElement("div", { className: "score" },
                    "Score",
                    react_4.createElement("label", null, this.state.score)),
                react_4.createElement("div", { className: "score" },
                    "Find",
                    react_4.createElement("label", null, this.state.answer)),
                !!this.state.answers.length && react_4.createElement("div", { className: "score" },
                    "Remaining",
                    react_4.createElement("label", null, (1 + this.state.answers.length) || "?")),
                react_4.createElement("br", null),
                " ",
                react_4.createElement("div", { className: "score" },
                    react_4.createElement("button", { onClick: () => this.dispatcher.trigger("skip") }, "Skip"),
                    react_4.createElement("button", { onClick: () => this.dispatcher.trigger("hint") }, "Hint"),
                    react_4.createElement("button", { onClick: () => this.dispatcher.trigger("reload") }, "\uD83D\uDDD9")));
        }
        skip() {
            if (!this.state.answer)
                return;
            this.score(-1);
            let answers = this.state.answers;
            answers && answers.length && answers.unshift(this.state.answer);
            this.next();
        }
        score(value) {
            this.setState(prev => ({
                score: prev.score + value
            }));
            return this.state.score;
        }
        generate(features) {
            let fieldName = this.props.featureNameFieldName;
            let answers = features.map(f => f.get(fieldName));
            {
                let byref = { answers: answers };
                this.dispatcher.trigger("adjust-answers", byref);
                answers = byref.answers;
            }
            common_3.shuffle(answers);
            if (answers.length > this.props.questionsPerQuiz) {
                answers = answers.splice(0, this.props.questionsPerQuiz);
            }
            return answers;
        }
        init() {
            let source = this.props.source;
            let features = source.getFeatures();
            features.forEach(f => f.setStyle(quizlet_styles_1.styles.indeterminate(this)));
            let answers = this.generate(features);
            let answer = answers.pop();
            this.state.features.clear();
            this.setState(prev => ({
                answer: answer,
                answers: answers,
            }));
        }
        // return true if the feature matches the correct answer
        test(feature) {
            return this.getFeatureName(feature) === this.state.answer;
        }
        // return true if the feature matches the correct answer
        getFeatureName(feature) {
            return feature.get(this.props.featureNameFieldName);
        }
        zoomToFeature(feature, grow = 2) {
            this.setState(prev => ({
                mapTrigger: {
                    message: "extent",
                    args: {
                        extent: scaleExtent_1.scaleExtent(feature.getGeometry().getExtent(), grow)
                    }
                }
            }));
        }
        next() {
            let answers = this.state.answers;
            if (!answers.length)
                return false;
            this.setState(prev => ({
                answer: answers.pop(),
                hint: 0,
            }));
            return true;
        }
        find() {
            let source = this.props.source;
            if (!source)
                return;
            let exclude = this.state.features.getArray();
            let features = source.getFeatures().filter(f => f.get(this.props.featureNameFieldName) === this.state.answer && -1 === exclude.indexOf(f));
            if (features && features.length >= 1) {
                let feature = features[0];
                return feature;
            }
            return null;
        }
    }
    exports.QuizletComponent = QuizletComponent;
});
define("components/packets/common", ["require", "exports", "node_modules/ol/src/geom", "node_modules/ol/src/extent"], function (require, exports, geom, extent) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.filterByContinent = void 0;
    const ol = {
        geom,
        extent,
    };
    function asGeom(geometry) {
        let hack = ol.geom;
        let geom = new hack[geometry.type](geometry.coordinates, "XY");
        return geom;
    }
    async function filterByContinent(name) {
        let continents = null;
        return new Promise(async (good, bad) => {
            const data = await fetch("./data/continents.json");
            continents = await data.json();
            let europe = continents.features.filter((f) => f.properties.CONTINENT === name)[0];
            if (!europe)
                return bad("unknown continent");
            const continent = asGeom(europe.geometry);
            const filter = (f) => {
                const country = asGeom(f.geometry);
                const points = country.getFlatCoordinates();
                let count = 0;
                for (let i = 0; i < points.length; i += 2) {
                    const [x, y] = [points[i], points[i + 1]];
                    count += continent.containsXY(x, y) ? 1 : 0;
                }
                // at least half are within continent
                return count > points.length / 2 / 4;
            };
            good(filter);
        });
    }
    exports.filterByContinent = filterByContinent;
});
define("components/packets/continents_world", ["require", "exports"], function (require, exports) {
    "use strict";
    return {
        type: "geojson",
        url: "./data/continents.json",
        name: "CONTINENT",
        style: (score) => ["Black", "CanvasDark"][Math.floor(score / 100) % 2],
    };
});
define("components/packets/countries_europe", ["require", "exports", "components/packets/common"], function (require, exports, common_4) {
    "use strict";
    return {
        type: "geojson",
        url: "./data/countries.json",
        name: "name",
        filter: common_4.filterByContinent("Europe")
    };
});
define("components/packets/countries_africa", ["require", "exports", "components/packets/common"], function (require, exports, common_5) {
    "use strict";
    return {
        type: "geojson",
        url: "./data/countries.json",
        name: "name",
        filter: common_5.filterByContinent("Africa")
    };
});
define("components/packets/countries_southamerica", ["require", "exports", "components/packets/common"], function (require, exports, common_6) {
    "use strict";
    return {
        type: "geojson",
        url: "./data/countries.json",
        name: "name",
        filter: common_6.filterByContinent("South America"),
    };
});
define("components/packets/countries_world", ["require", "exports"], function (require, exports) {
    "use strict";
    return {
        type: "geojson",
        url: "./data/countries.json",
        name: "name"
    };
});
define("components/packets/cities_world", ["require", "exports"], function (require, exports) {
    "use strict";
    return {
        type: "geojson",
        url: "./data/cities.json",
        name: "city",
        weight: (f) => f.properties.population / 50000000,
        filter: (f) => f.properties.population > 10000000,
    };
});
define("components/packets/lakes_usa", ["require", "exports"], function (require, exports) {
    "use strict";
    return {
        type: "geojson",
        url: "https://gist.githubusercontent.com/tristanwietsma/6046119/raw/f5e8654b5a811199d2f2190b3090d1c1e3488436/greatlakes.geojson",
        name: "name",
        style: () => "Road",
    };
});
define("components/packets/usstates_usa", ["require", "exports"], function (require, exports) {
    "use strict";
    return {
        type: "geojson",
        url: "./data/us-states.json",
        name: "name",
        filter: (f, score) => (score < 100 && 0 === f.properties.name.indexOf("A")) ||
            (score < 500 && (-1 === "AlaskaHawaiiPuerto Rico".indexOf(f.properties.name))),
        style: (score) => (score < 500 && "AerialWithLabels") ||
            (score < 1000 && "EsriAerial") ||
            (score < 2000 && "Aerial") ||
            (score < 4000 && "CanvasDark") ||
            "Black"
    };
});
define("components/packets/cities_usa", ["require", "exports"], function (require, exports) {
    "use strict";
    return {
        type: "geojson",
        url: "./data/us-cities.json",
        name: "name",
        weight: (f) => (f.properties.pop / 8405837),
        filter: (f, score) => f.properties.pop > 400000 - score * 10,
        style: (score) => score < 1000 ? "AerialWithLabels" : "Aerial"
    };
});
define("data/volcanoes/dir", ["require", "exports"], function (require, exports) {
    "use strict";
    return `
Arabia.json
Azores.json
Canada.json
Colombia.json
Ecuador.json
Greece.json
Guatemala.json
Halmahera.json
Hokkaido.json
Honshu.json
Italy.json
Java.json
Korea.json
Luzon.json
Mexico.json
Mindanao.json
Mongolia.json
Nicaragua.json
Panama.json
Peru.json
Sulawesi.json
Sumatra.json
Syria.json
Taiwan.json
Turkey.json
Vanuatu.json`;
});
define("components/packets/volcanoes", ["require", "exports", "data/volcanoes/dir", "common/common"], function (require, exports, volcanoesDir, common_7) {
    "use strict";
    let volcanoes = common_7.shuffle(volcanoesDir.split("\n").map(v => v.trim()).filter(v => !!v));
    return {
        type: "geojson",
        url: `./data/volcanoes/${volcanoes.pop()}`,
        name: "Name",
        style: () => "Aerial",
    };
});
define("data/national_parks/dir", ["require", "exports"], function (require, exports) {
    "use strict";
    return `
cacl.simple.json
caco.simple.json
cagr.simple.json
caha.simple.json
cakr.simple.json
calo.simple.json
cana.simple.json
cany.simple.json
care.simple.json
cari.simple.json
carl.simple.json
casa.simple.json
cato.simple.json
cave.simple.json
cavo.simple.json
cawo.simple.json
cebe.simple.json
cebr.simple.json
cham.simple.json
chat.simple.json
chch.simple.json
chcu.simple.json
chic.simple.json
chir.simple.json
chis.simple.json
choh.simple.json
chpi.simple.json
chri.simple.json
chsc.simple.json
chyo.simple.json
ciro.simple.json
clba.simple.json
coga.simple.json
colm.simple.json
colo.simple.json
cong.simple.json
coro.simple.json
cowp.simple.json
crla.simple.json
crmo.simple.json
cuga.simple.json
cuis.simple.json
cure.simple.json
cuva.simple.json
daav.simple.json
dena.simple.json
depo.simple.json
deso.simple.json
deto.simple.json
deva.simple.json
dewa.simple.json
dino.simple.json
drto.simple.json
ebla.simple.json
edal.simple.json
edis.simple.json
efmo.simple.json
eise.simple.json
elma.simple.json
elmo.simple.json
elro.simple.json
euon.simple.json
ever.simple.json
feha.simple.json
fiis.simple.json
fila.simple.json
flfo.simple.json
flni.simple.json
fobo.simple.json
fobu.simple.json
foca.simple.json
foda.simple.json
fodo.simple.json
fofr.simple.json
fola.simple.json
fols.simple.json
foma.simple.json
fomc.simple.json
fone.simple.json
fopo.simple.json
fopu.simple.json
fora.simple.json
fosc.simple.json
fosm.simple.json
fost.simple.json
fosu.simple.json
foth.simple.json
foun.simple.json
fous.simple.json
fova.simple.json
fowa.simple.json
frde.simple.json
frdo.simple.json
fred.simple.json
frhi.simple.json
frla.simple.json
frsp.simple.json
gaar.simple.json
gari.simple.json
gate.simple.json
gegr.simple.json
gero.simple.json
gett.simple.json
gewa.simple.json
gicl.simple.json
glac.simple.json
glba.simple.json
glca.simple.json
goga.simple.json
gois.simple.json
gosp.simple.json
grba.simple.json
grca.simple.json
gree.simple.json
grko.simple.json
grpo.simple.json
grsa.simple.json
grsm.simple.json
grte.simple.json
guco.simple.json
guis.simple.json
gumo.simple.json
gwca.simple.json
gwmp.simple.json
hafe.simple.json
hafo.simple.json
hagr.simple.json
hale.simple.json
hamp.simple.json
havo.simple.json
heho.simple.json
hobe.simple.json
hocu.simple.json
hofr.simple.json
hofu.simple.json
home.simple.json
hosp.simple.json
hove.simple.json
hstr.simple.json
hutr.simple.json
iatr.simple.json
ilmi.simple.json
inde.simple.json
indu.simple.json
isro.simple.json
jaga.simple.json
jeca.simple.json
jeff.simple.json
jefm.simple.json
jela.simple.json
jica.simple.json
joda.simple.json
jodr.simple.json
jofi.simple.json
jofk.simple.json
jofl.simple.json
jomu.simple.json
jotr.simple.json
kaho.simple.json
kala.simple.json
katm.simple.json
kefj.simple.json
kemo.simple.json
kewe.simple.json
kica.simple.json
kimo.simple.json
klgo.simple.json
knri.simple.json
kova.simple.json
kowa.simple.json
labe.simple.json
lacl.simple.json
lake.simple.json
lamr.simple.json
laro.simple.json
lavo.simple.json
lecl.simple.json
lewi.simple.json
libi.simple.json
libo.simple.json
liho.simple.json
linc.simple.json
liri.simple.json
long.simple.json
losa.simple.json
lowe.simple.json
lyba.simple.json
lyjo.simple.json
mabe.simple.json
mabi.simple.json
maca.simple.json
mall.simple.json
malu.simple.json
mana.simple.json
manz.simple.json
mava.simple.json
mawa.simple.json
meve.simple.json
miin.simple.json
mima.simple.json
mimi.simple.json
miss.simple.json
mlkm.simple.json
mnrr.simple.json
moca.simple.json
mocr.simple.json
moja.simple.json
mono.simple.json
mora.simple.json
morr.simple.json
moru.simple.json
muwo.simple.json
nabr.simple.json
naca.simple.json
nacc.simple.json
nace.simple.json
natc.simple.json
natr.simple.json
nava.simple.json
nebe.simple.json
nepe.simple.json
neri.simple.json
nico.simple.json
niob.simple.json
nisi.simple.json
noat.simple.json
noca.simple.json
npsa.simple.json
obri.simple.json
ocmu.simple.json
olym.simple.json
orca.simple.json
orpi.simple.json
ozar.simple.json
paal.simple.json
paav.simple.json
pais.simple.json
peco.simple.json
pefo.simple.json
peri.simple.json
pete.simple.json
petr.simple.json
pevi.simple.json
pima.simple.json
pinn.simple.json
pipe.simple.json
piro.simple.json
pisc.simple.json
pisp.simple.json
popo.simple.json
pore.simple.json
prsf.simple.json
prwi.simple.json
puhe.simple.json
puho.simple.json
rabr.simple.json
redw.simple.json
rich.simple.json
rira.simple.json
rocr.simple.json
rola.simple.json
romo.simple.json
rori.simple.json
rowi.simple.json
rrbh.simple.json
ruca.simple.json
saan.simple.json
sacn.simple.json
sacr.simple.json
safr.simple.json
saga.simple.json
sagu.simple.json
sahi.simple.json
sair.simple.json
sajh.simple.json
saju.simple.json
sama.simple.json
samo.simple.json
sand.simple.json
sapa.simple.json
sapu.simple.json
sara.simple.json
sari.simple.json
scbl.simple.json
semo.simple.json
sequ.simple.json
shen.simple.json
shil.simple.json
sitk.simple.json
slbe.simple.json
spar.simple.json
stea.simple.json
stli.simple.json
stri.simple.json
sucr.simple.json
tapr.simple.json
this.simple.json
thko.simple.json
thrb.simple.json
thri.simple.json
thro.simple.json
thst.simple.json
tica.simple.json
timu.simple.json
tont.simple.json
tuai.simple.json
tuin.simple.json
tuma.simple.json
tupe.simple.json
tuzi.simple.json
ulsg.simple.json
upde.simple.json
vafo.simple.json
valr.simple.json
vama.simple.json
vick.simple.json
vicr.simple.json
viis.simple.json
vive.simple.json
voya.simple.json
waba.simple.json
waca.simple.json
wamo.simple.json
wapa.simple.json
wefa.simple.json
whho.simple.json
whis.simple.json
whmi.simple.json
whsa.simple.json
wica.simple.json
wicl.simple.json
wicr.simple.json
wiho.simple.json
wori.simple.json
wotr.simple.json
wrbr.simple.json
wrst.simple.json
wupa.simple.json
wwii.simple.json
yell.simple.json
yose.simple.json
yuch.simple.json
yuho.simple.json
zion.simple.json
`;
});
define("components/packets/national_parks", ["require", "exports", "data/national_parks/dir", "common/common"], function (require, exports, parksDir, common_8) {
    "use strict";
    let parks = common_8.shuffle(parksDir.split("\n").map(v => v.trim()).filter(v => !!v)); //.map(v => v.substring(0, v.length - 4) + "simple.json");
    return {
        type: "multigeojson",
        url: parks.map(p => `./data/national_parks/${p}`),
        name: "UNIT_NAME",
        filter: (feature, score) => {
            return feature.properties.UNIT_TYPE === "National Park";
        }
    };
});
define("components/packets/index", ["require", "exports", "components/packets/continents_world", "components/packets/countries_europe", "components/packets/countries_africa", "components/packets/countries_southamerica", "components/packets/countries_world", "components/packets/cities_world", "components/packets/lakes_usa", "components/packets/usstates_usa", "components/packets/cities_usa", "components/packets/volcanoes", "components/packets/national_parks"], function (require, exports, continentPacket, europeanCountriesPacket, africaCountriesPacket, southAmericaCountriesPacket, worldCountriesPacket, worldCitiesPacket, usaGreatLakesPacket, usaStatesPacket, usaCitiesPacket, volcanoesPacket, nationalParksPacket) {
    "use strict";
    const packets = {
        "Continents": continentPacket,
        "European Countries": europeanCountriesPacket,
        "African Countries": africaCountriesPacket,
        "South American Countries": southAmericaCountriesPacket,
        "World Countries": worldCountriesPacket,
        "World Cities": worldCitiesPacket,
        "US Great Lakes": usaGreatLakesPacket,
        "US States": usaStatesPacket,
        "US North East": {
            type: "geojson",
            url: usaStatesPacket.url,
            name: usaStatesPacket.name,
            filter: (f, score) => f.properties.region === "NE",
            style: usaStatesPacket.style,
        },
        "US South East": {
            type: "geojson",
            url: usaStatesPacket.url,
            name: usaStatesPacket.name,
            filter: (f, score) => f.properties.region === "SE",
            style: usaStatesPacket.style,
        },
        "US Mid-Western States": {
            type: "geojson",
            url: usaStatesPacket.url,
            name: usaStatesPacket.name,
            filter: (f, score) => f.properties.region === "MW",
            style: usaStatesPacket.style,
        },
        "US North West States": {
            type: "geojson",
            url: usaStatesPacket.url,
            name: usaStatesPacket.name,
            filter: (f, score) => f.properties.region === "NW",
            style: usaStatesPacket.style,
        },
        "US South West States": {
            type: "geojson",
            url: usaStatesPacket.url,
            name: usaStatesPacket.name,
            filter: (f, score) => f.properties.region === "SW",
            style: usaStatesPacket.style,
        },
        "US Western States": {
            type: "geojson",
            url: usaStatesPacket.url,
            name: usaStatesPacket.name,
            filter: (f, score) => f.properties.region === "W",
            style: usaStatesPacket.style,
        },
        "US Cities": usaCitiesPacket,
        "Volcanoes": volcanoesPacket,
        "National Parks": nationalParksPacket,
        "Holy Sites": {
            type: "geojson",
            url: "./data/holysites.json",
            name: "name",
            style: () => "EsriAerial",
        },
        "Greenville Parks": {
            type: "agsjson",
            url: "./data/gsp-parks.json",
            name: "NAME",
            style: () => "CanvasDark",
        },
    };
    if (globals.debug) {
        packets["Greenville Active Calls (HTTP only)"] = {
            type: "agsjson",
            url: "http://www.gcgis.org/arcgis/rest/services/GreenvilleJS/Map_Layers_JS/MapServer/1/query?where=1%3D1&text=&objectIds=&time=&geometry=&geometryType=esriGeometryEnvelope&inSR=&spatialRel=esriSpatialRelIntersects&relationParam=&outFields=*&returnGeometry=true&maxAllowableOffset=&geometryPrecision=&outSR=4326&returnIdsOnly=false&returnCountOnly=false&orderByFields=&groupByFieldsForStatistics=&outStatistics=&returnZ=false&returnM=false&gdbVersion=&returnDistinctValues=false&returnTrueCurves=false&resultOffset=&resultRecordCount=&f=json",
            name: "ITI_TypeText",
            style: () => "CanvasDark",
        };
    }
    return packets;
});
define("components/packets/loaders/agsjsonloader", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Loader = void 0;
    class Loader {
        load(url, cb) {
            let client = new XMLHttpRequest();
            client.open("GET", url, true);
            client.onloadend = () => {
                cb(JSON.parse(client.responseText));
            };
            client.send();
        }
    }
    exports.Loader = Loader;
});
define("components/packets/loaders/geojsonloader", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Loader = void 0;
    function load(url) {
        return new Promise((resolve, reject) => {
            let client = new XMLHttpRequest();
            client.open("GET", url, true);
            client.onloadend = () => {
                let json = JSON.parse(client.responseText);
                resolve(json);
            };
            client.send();
        });
    }
    class Loader {
        load(packet, cb) {
            if (Array.isArray(packet.url)) {
                this.multiload(packet, cb);
                return;
            }
            load(packet.url).then(async (geoJson) => {
                if (packet.filter) {
                    const filter = await packet.filter;
                    geoJson.features = geoJson.features.filter(f => filter(f, packet.score || 0));
                }
                if (packet.weight) {
                    geoJson.features.forEach(f => f.properties.weight = packet.weight ? packet.weight(f) : 1);
                }
                cb(geoJson);
            });
        }
        multiload(packet, cb) {
            if (!Array.isArray(packet.url)) {
                this.load(packet, cb);
                return;
            }
            let promises = packet.url.map(url => load(url));
            Promise.all(promises).then(async (data) => {
                let allGeoJson;
                allGeoJson = {
                    features: [],
                    type: "FeatureCollection",
                };
                data.forEach(geoJson => {
                    if (Array.isArray(geoJson.features)) {
                        allGeoJson.features = allGeoJson.features.concat(geoJson.features);
                    }
                    else {
                        allGeoJson.features.push(geoJson);
                    }
                });
                if (packet.filter) {
                    const filter = await packet.filter;
                    allGeoJson.features = allGeoJson.features.filter(f => filter(f, packet.score || 0));
                }
                if (packet.weight) {
                    allGeoJson.features.forEach(f => f.properties.weight = packet.weight ? packet.weight(f) : 1);
                }
                cb(allGeoJson);
            });
        }
    }
    exports.Loader = Loader;
});
define("fun/populateLayerSource", ["require", "exports", "components/packets/loaders/agsjsonloader", "components/packets/loaders/geojsonloader", "node_modules/ol/src/Feature", "node_modules/ol/src/geom/Polygon", "node_modules/ol/src/geom/Point", "node_modules/ol/src/geom"], function (require, exports, agsjsonloader_1, geojsonloader_1, Feature_3, Polygon_1, Point_2, olGeom) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.populateLayerSource = void 0;
    function populateLayerSource(source, packet) {
        switch (packet.type) {
            case "agsjson": {
                let loader = new agsjsonloader_1.Loader();
                if (Array.isArray(packet.url))
                    throw "expecting a single url";
                loader.load(packet.url, (agsjson) => {
                    let typeMap = {
                        esriGeometryPolygon: "Polygon",
                        esriGeometryPoint: "Point",
                    };
                    let geoType = typeMap[agsjson.geometryType];
                    let features = agsjson.features.map((f) => {
                        let feature = new Feature_3.default();
                        {
                            let geom;
                            switch (geoType) {
                                case "Point":
                                    geom = new Point_2.default([f.geometry.x, f.geometry.y], "XY");
                                    break;
                                case "Polygon":
                                    geom = new Polygon_1.default(f.geometry.rings, "XY");
                                    break;
                            }
                            geom.transform("EPSG:4326", "EPSG:3857");
                            feature.setGeometry(geom);
                        }
                        feature.setProperties(f.attributes);
                        return feature;
                    });
                    source.addFeatures(features);
                });
                break;
            }
            case "multigeojson":
            case "geojson": {
                let loader = new geojsonloader_1.Loader();
                loader.load(packet, (geojson) => {
                    let features = geojson.features.map((f) => {
                        let feature = new Feature_3.default();
                        {
                            const hack = olGeom;
                            const geom = new hack[f.geometry.type](f.geometry.coordinates, "XY");
                            geom.transform("EPSG:4326", "EPSG:3857");
                            feature.setGeometry(geom);
                        }
                        feature.setProperties(f.properties);
                        return feature;
                    });
                    source.addFeatures(features);
                });
                break;
            }
        }
    }
    exports.populateLayerSource = populateLayerSource;
});
define("app", ["require", "exports", "react", "components/quizlet", "components/index", "common/storage", "components/packets/index", "node_modules/ol/src/source/Vector", "fun/populateLayerSource"], function (require, exports, react_5, quizlet_1, index_2, storage_2, packets, Vector_3, populateLayerSource_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.App = void 0;
    function defaultStyle(score) {
        score = Math.floor(score / 500);
        switch (score) {
            case 0: return "CanvasDarkWithLabels";
            case 1: return "AerialWithLabels";
            case 2: return "Aerial";
            case 3: return "WaterColorWithLabels";
            case 4: return "WaterColor";
            case 5: return "BlackWithLabels";
            case 6: return "Black";
            default: return "EsriAerial";
        }
    }
    class App extends react_5.PureComponent {
        constructor(props) {
            super(props);
            let vectorSource = new Vector_3.default();
            this.state = {
                orientation: "landscape",
                source: vectorSource,
                packetName: "",
                featureNameFieldName: "",
                packetStyle: "Aerial",
            };
        }
        pickPacket(packetName) {
            let packet = packets[packetName];
            packet.score = storage_2.storage.force(this.state.packetName).score;
            this.setState(prev => ({
                packetName: packetName,
                featureNameFieldName: packet.name,
                packetStyle: packet.style || "AerialWithLabels"
            }));
            populateLayerSource_1.populateLayerSource(this.state.source, packet);
        }
        render() {
            return react_5.createElement("div", { className: "app" },
                react_5.createElement("title", null, "React + Openlayers Lab"),
                !this.state.featureNameFieldName && react_5.createElement(index_2.Toolbar, null, Object.keys(packets)
                    .sort((a, b) => (storage_2.storage.force(b).score - storage_2.storage.force(a).score) || a.localeCompare(b))
                    .map(p => react_5.createElement("button", { onClick: () => this.pickPacket(p) },
                    p,
                    " (",
                    storage_2.storage.force(p).score,
                    ")"))),
                !!this.state.packetName && react_5.createElement(quizlet_1.QuizletComponent, { questionsPerQuiz: 20, quizletName: this.state.packetName, getLayerStyle: (score) => this.getLayerStyle(score), source: this.state.source, featureNameFieldName: this.state.featureNameFieldName }));
        }
        getLayerStyle(score) {
            let packet = packets[this.state.packetName];
            if (!packet || !packet.style)
                return defaultStyle(score);
            return packet.style(score);
        }
    }
    exports.App = App;
});
define("index", ["require", "exports", "react", "react-dom", "app"], function (require, exports, react_6, react_dom_1, app_1) {
    "use strict";
    function run() {
        react_dom_1.render(react_6.createElement(app_1.App, { showmap: true, center: [-82.408, 34.789], zoom: 11 }), document.querySelector("app"));
    }
    return run;
});
//# sourceMappingURL=index.js.map